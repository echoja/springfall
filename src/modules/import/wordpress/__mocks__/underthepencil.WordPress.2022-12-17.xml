<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.7.8" created="2022-12-17 11:39" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Under The Pencil</title>
	<link>https://elvanov.com</link>
	<description>엘바노프 스튜디오 공식 블로그 겸 낙서장</description>
	<pubDate>Sat, 17 Dec 2022 11:39:47 +0000</pubDate>
	<language>ko-KR</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://elvanov.com</wp:base_site_url>
	<wp:base_blog_url>https://elvanov.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[eszqsc112]]></wp:author_login><wp:author_email><![CDATA[eszqsc112@naver.com]]></wp:author_email><wp:author_display_name><![CDATA[eszqsc112]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[42-seoul]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[42 SEOUL]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[c]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[css]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[css]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>27</wp:term_id>
		<wp:category_nicename><![CDATA[javascript]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[javascript]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>38</wp:term_id>
		<wp:category_nicename><![CDATA[linux]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Linux]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[mongoose]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[mongoose]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[node-js]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Node.js]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[react]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[react]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>39</wp:term_id>
		<wp:category_nicename><![CDATA[rust]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[rust]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>33</wp:term_id>
		<wp:category_nicename><![CDATA[tailwind]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[tailwind]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[testing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[testing]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[typescript]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[typescript]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[vim]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[vim]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>26</wp:term_id>
		<wp:category_nicename><![CDATA[vscode]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[vscode]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[vue]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[vue]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[review]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[리뷰]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[미분류]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>35</wp:term_id>
		<wp:category_nicename><![CDATA[%eb%b0%a9%eb%b2%95%eb%a1%a0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[방법론]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>36</wp:term_id>
		<wp:category_nicename><![CDATA[%eb%b3%b4%ec%95%88]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[보안]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[algorithm]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[알고리즘]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[%ec%95%94%ed%98%b8%ed%99%94]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[암호화]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>40</wp:term_id>
		<wp:category_nicename><![CDATA[%ec%97%90%ec%84%b8%ec%9d%b4]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[에세이]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[wordpress]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[워드프레스]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[%ec%9b%b9%ea%b0%9c%eb%b0%9c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[웹개발]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>34</wp:term_id>
		<wp:category_nicename><![CDATA[%ec%a0%95%ea%b7%9c%ed%91%9c%ed%98%84%ec%8b%9d]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[정규표현식]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>18</wp:term_id>
		<wp:category_nicename><![CDATA[books]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[책]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[tips]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[팁]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[파이썬]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[python-class]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[파이썬 강좌]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[apache]]></wp:tag_slug>
		<wp:tag_name><![CDATA[apache]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[fdf]]></wp:tag_slug>
		<wp:tag_name><![CDATA[df]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[faa]]></wp:tag_slug>
		<wp:tag_name><![CDATA[faa]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[htaccess]]></wp:tag_slug>
		<wp:tag_name><![CDATA[htaccess]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%8c%ec%8a%a4]]></wp:tag_slug>
		<wp:tag_name><![CDATA[워드플스]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id>23</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[42-seoul]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[42 SEOUL]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>10</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[apache]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[apache]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>20</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>28</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[css]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[css]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>7</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[fdf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[df]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>8</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[faa]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[faa]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>9</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[htaccess]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[htaccess]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>27</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[javascript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>38</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>30</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mongoose]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mongoose]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>22</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[node-js]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Node.js]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>32</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[react]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[react]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>39</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rust]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rust]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>33</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tailwind]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tailwind]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>29</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[testing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[testing]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>31</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[typescript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[typescript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>13</wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ver1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ver1]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>14</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vim]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vim]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>26</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vscode]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vscode]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>25</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vue]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>17</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[review]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[리뷰]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>1</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[미분류]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>35</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%eb%b0%a9%eb%b2%95%eb%a1%a0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[방법론]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>36</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%eb%b3%b4%ec%95%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[보안]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>21</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[algorithm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[알고리즘]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>37</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%ec%95%94%ed%98%b8%ed%99%94]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[암호화]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>40</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%ec%97%90%ec%84%b8%ec%9d%b4]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[에세이]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>16</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wordpress]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[워드프레스]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>11</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%8c%ec%8a%a4]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[워드플스]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>24</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%ec%9b%b9%ea%b0%9c%eb%b0%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[웹개발]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>34</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%ec%a0%95%ea%b7%9c%ed%91%9c%ed%98%84%ec%8b%9d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[정규표현식]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>18</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[books]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[책]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>12</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tips]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[팁]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>19</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[파이썬]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>15</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python-class]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[파이썬 강좌]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>13</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[ver1]]></wp:term_slug><wp:term_name><![CDATA[ver1]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.7.8</generator>

<image>
	<url>https://elvanov.com/elvanov/wp-content/uploads/2020/01/cropped-Artboard-1-32x32.png</url>
	<title>Under The Pencil</title>
	<link>https://elvanov.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">171348187</site>
		<item>
		<title><![CDATA[KakaoTalk_20190310_224237592_24]]></title>
		<link>https://elvanov.com/kakaotalk_20190310_224237592_24</link>
		<pubDate>Thu, 25 Apr 2019 01:41:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190310_224237592_24.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 10:41:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:41:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-25 10:41:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-25 01:41:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20190310_224237592_24]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190310_224237592_24.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/KakaoTalk_20190310_224237592_24.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2160;s:6:"height";i:2875;s:4:"file";s:43:"2019/04/KakaoTalk_20190310_224237592_24.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"KakaoTalk_20190310_224237592_24-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"KakaoTalk_20190310_224237592_24-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"KakaoTalk_20190310_224237592_24-768x1022.jpg";s:5:"width";i:768;s:6:"height";i:1022;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"KakaoTalk_20190310_224237592_24-769x1024.jpg";s:5:"width";i:769;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"KakaoTalk_20190310_224237592_24-1568x2087.jpg";s:5:"width";i:1568;s:6:"height";i:2087;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20190323_192724078_21]]></title>
		<link>https://elvanov.com/kakaotalk_20190323_192724078_21</link>
		<pubDate>Thu, 25 Apr 2019 01:41:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190323_192724078_21.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 10:41:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:41:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-25 10:41:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-25 01:41:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20190323_192724078_21]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190323_192724078_21.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/KakaoTalk_20190323_192724078_21.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4032;s:6:"height";i:3024;s:4:"file";s:43:"2019/04/KakaoTalk_20190323_192724078_21.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"KakaoTalk_20190323_192724078_21-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"KakaoTalk_20190323_192724078_21-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:43:"KakaoTalk_20190323_192724078_21-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"KakaoTalk_20190323_192724078_21-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"KakaoTalk_20190323_192724078_21-1568x1176.jpg";s:5:"width";i:1568;s:6:"height";i:1176;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.8";s:6:"credit";s:0:"";s:6:"camera";s:8:"iPhone 8";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1553344181";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.99";s:3:"iso";s:2:"20";s:13:"shutter_speed";s:18:"0.0014164305949008";s:5:"title";s:0:"";s:11:"orientation";s:1:"6";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20190327_225550067]]></title>
		<link>https://elvanov.com/kakaotalk_20190327_225550067</link>
		<pubDate>Thu, 25 Apr 2019 01:41:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190327_225550067.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 10:41:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:41:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-25 10:41:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-25 01:41:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20190327_225550067]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190327_225550067.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/KakaoTalk_20190327_225550067.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:750;s:4:"file";s:40:"2019/04/KakaoTalk_20190327_225550067.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"KakaoTalk_20190327_225550067-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:40:"KakaoTalk_20190327_225550067-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:40:"KakaoTalk_20190327_225550067-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20190329_202947769]]></title>
		<link>https://elvanov.com/kakaotalk_20190329_202947769</link>
		<pubDate>Thu, 25 Apr 2019 01:41:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190329_202947769.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 10:41:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:41:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-25 10:41:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-25 01:41:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20190329_202947769]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190329_202947769.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/KakaoTalk_20190329_202947769.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:3024;s:4:"file";s:40:"2019/04/KakaoTalk_20190329_202947769.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"KakaoTalk_20190329_202947769-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:40:"KakaoTalk_20190329_202947769-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:40:"KakaoTalk_20190329_202947769-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:42:"KakaoTalk_20190329_202947769-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:42:"KakaoTalk_20190329_202947769-1568x1568.jpg";s:5:"width";i:1568;s:6:"height";i:1568;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.8";s:6:"credit";s:0:"";s:6:"camera";s:8:"iPhone 8";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1553446103";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.99";s:3:"iso";s:2:"20";s:13:"shutter_speed";s:19:"0.00083333333333333";s:5:"title";s:0:"";s:11:"orientation";s:1:"6";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20190329_202105995_03]]></title>
		<link>https://elvanov.com/kakaotalk_20190329_202105995_03</link>
		<pubDate>Thu, 25 Apr 2019 01:42:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190329_202105995_03.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 10:42:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:42:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-25 10:42:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-25 01:42:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20190329_202105995_03]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/KakaoTalk_20190329_202105995_03.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/KakaoTalk_20190329_202105995_03.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1923;s:6:"height";i:2560;s:4:"file";s:43:"2019/04/KakaoTalk_20190329_202105995_03.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"KakaoTalk_20190329_202105995_03-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"KakaoTalk_20190329_202105995_03-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"KakaoTalk_20190329_202105995_03-768x1022.jpg";s:5:"width";i:768;s:6:"height";i:1022;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"KakaoTalk_20190329_202105995_03-769x1024.jpg";s:5:"width";i:769;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"KakaoTalk_20190329_202105995_03-1568x2087.jpg";s:5:"width";i:1568;s:6:"height";i:2087;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[busan-night-scene-1747130_1920]]></title>
		<link>https://elvanov.com/busan-night-scene-1747130_1920</link>
		<pubDate>Mon, 29 Apr 2019 08:49:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/busan-night-scene-1747130_1920.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 17:49:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 08:49:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-29 17:49:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-29 08:49:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[busan-night-scene-1747130_1920]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/busan-night-scene-1747130_1920.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/busan-night-scene-1747130_1920.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1281;s:4:"file";s:42:"2019/04/busan-night-scene-1747130_1920.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"busan-night-scene-1747130_1920-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:42:"busan-night-scene-1747130_1920-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:42:"busan-night-scene-1747130_1920-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:43:"busan-night-scene-1747130_1920-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:2:"10";s:6:"credit";s:0:"";s:6:"camera";s:10:"NIKON D810";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"70";s:3:"iso";s:2:"64";s:13:"shutter_speed";s:2:"20";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[cropped-busan-night-scene-1747130_1920.jpg]]></title>
		<link>https://elvanov.com/cropped-busan-night-scene-1747130_1920-jpg</link>
		<pubDate>Mon, 29 Apr 2019 08:49:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/wp-content/uploads/2019/04/cropped-busan-night-scene-1747130_1920.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 17:49:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 08:49:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-04-29 17:49:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-04-29 08:49:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-busan-night-scene-1747130_1920-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/04/cropped-busan-night-scene-1747130_1920.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/cropped-busan-night-scene-1747130_1920.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1500;s:6:"height";i:500;s:4:"file";s:50:"2019/04/cropped-busan-night-scene-1747130_1920.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:50:"cropped-busan-night-scene-1747130_1920-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:50:"cropped-busan-night-scene-1747130_1920-300x100.jpg";s:5:"width";i:300;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:50:"cropped-busan-night-scene-1747130_1920-768x256.jpg";s:5:"width";i:768;s:6:"height";i:256;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:51:"cropped-busan-night-scene-1747130_1920-1024x341.jpg";s:5:"width";i:1024;s:6:"height";i:341;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:2:"10";s:6:"credit";s:0:"";s:6:"camera";s:10:"NIKON D810";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"70";s:3:"iso";s:2:"64";s:13:"shutter_speed";s:2:"20";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:24;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_zakra]]></wp:meta_key>
		<wp:meta_value><![CDATA[1556527809]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[zakra]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/120/image</link>
		<pubDate>Wed, 11 Dec 2019 14:26:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2019-12-11 23:26:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-11 14:26:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-11 23:26:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-11 14:26:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:399;s:6:"height";i:236;s:4:"file";s:17:"2019/12/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://elvanov.com/128/image-1</link>
		<pubDate>Thu, 12 Dec 2019 02:16:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 11:16:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 02:16:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 11:16:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 02:16:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:370;s:6:"height";i:202;s:4:"file";s:19:"2019/12/image-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x164.png";s:5:"width";i:300;s:6:"height";i:164;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[명령행]]></title>
		<link>https://elvanov.com/128/%eb%aa%85%eb%a0%b9%ed%96%89</link>
		<pubDate>Thu, 12 Dec 2019 02:38:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/명령행.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 11:38:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 02:38:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 11:38:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 02:38:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%aa%85%eb%a0%b9%ed%96%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/명령행.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/명령행.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:685;s:6:"height";i:923;s:4:"file";s:21:"2019/12/명령행.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"명령행-223x300.jpg";s:5:"width";i:223;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"명령행-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[22]]></title>
		<link>https://elvanov.com/135/attachment/22</link>
		<pubDate>Thu, 12 Dec 2019 04:04:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/22.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 13:04:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 04:04:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 13:04:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 04:04:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[22]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/22.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/22.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:820;s:6:"height";i:62;s:4:"file";s:14:"2019/12/22.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:13:"22-300x23.jpg";s:5:"width";i:300;s:6:"height";i:23;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"22-150x62.jpg";s:5:"width";i:150;s:6:"height";i:62;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:13:"22-768x58.jpg";s:5:"width";i:768;s:6:"height";i:58;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[21]]></title>
		<link>https://elvanov.com/135/attachment/21</link>
		<pubDate>Thu, 12 Dec 2019 04:04:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/21.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 13:04:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 04:04:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 13:04:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 04:04:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[21]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/21.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/21.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:824;s:6:"height";i:40;s:4:"file";s:14:"2019/12/21.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:13:"21-300x15.jpg";s:5:"width";i:300;s:6:"height";i:15;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"21-150x40.jpg";s:5:"width";i:150;s:6:"height";i:40;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:13:"21-768x37.jpg";s:5:"width";i:768;s:6:"height";i:37;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[24]]></title>
		<link>https://elvanov.com/135/attachment/24</link>
		<pubDate>Thu, 12 Dec 2019 04:09:25 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/24.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 13:09:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 04:09:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 13:09:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 04:09:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[24]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/24.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/24.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:824;s:6:"height";i:54;s:4:"file";s:14:"2019/12/24.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:13:"24-300x20.jpg";s:5:"width";i:300;s:6:"height";i:20;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"24-150x54.jpg";s:5:"width";i:150;s:6:"height";i:54;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:13:"24-768x50.jpg";s:5:"width";i:768;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-2]]></title>
		<link>https://elvanov.com/143/image-2</link>
		<pubDate>Thu, 12 Dec 2019 09:53:30 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2019/12/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 18:53:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 09:53:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 18:53:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 09:53:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>143</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2019/12/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:646;s:6:"height";i:519;s:4:"file";s:19:"2019/12/image-2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-2-300x241.png";s:5:"width";i:300;s:6:"height";i:241;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python]]></title>
		<link>https://elvanov.com/python</link>
		<pubDate>Wed, 01 Jan 2020 13:24:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 22:24:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 13:24:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-01 22:24:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-01 13:24:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python2]]></title>
		<link>https://elvanov.com/python2</link>
		<pubDate>Wed, 01 Jan 2020 15:06:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python2.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>493</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 00:06:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 15:06:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 00:06:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-01 15:06:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python2.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python2.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python3]]></title>
		<link>https://elvanov.com/python3</link>
		<pubDate>Thu, 02 Jan 2020 10:00:03 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python3.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>551</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 19:00:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 10:00:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 19:00:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-02 10:00:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python3.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python3.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python5]]></title>
		<link>https://elvanov.com/python5</link>
		<pubDate>Thu, 02 Jan 2020 10:22:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python5.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 19:22:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 10:22:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 19:22:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-02 10:22:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python5.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python5.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python4]]></title>
		<link>https://elvanov.com/python4</link>
		<pubDate>Thu, 02 Jan 2020 10:22:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python4.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>558</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 19:22:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 10:22:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 19:22:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-02 10:22:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python4.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python4.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python6]]></title>
		<link>https://elvanov.com/python6</link>
		<pubDate>Thu, 02 Jan 2020 14:51:46 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/python6.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>565</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 23:51:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 14:51:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 23:51:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-02 14:51:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/python6.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/python6.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p1]]></title>
		<link>https://elvanov.com/p1</link>
		<pubDate>Sun, 12 Jan 2020 05:31:20 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>983</wp:post_id>
		<wp:post_date><![CDATA[2020-01-12 14:31:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-12 05:31:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-12 14:31:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-12 05:31:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p1.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p2]]></title>
		<link>https://elvanov.com/p2</link>
		<pubDate>Sun, 12 Jan 2020 06:13:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>987</wp:post_id>
		<wp:post_date><![CDATA[2020-01-12 15:13:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-12 06:13:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-12 15:13:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-12 06:13:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.svg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p2.svg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[f1f]]></title>
		<link>https://elvanov.com/f1f</link>
		<pubDate>Mon, 13 Jan 2020 07:49:45 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/f1f.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1038</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 16:49:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 07:49:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 16:49:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 07:49:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[f1f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/f1f.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/f1f.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:625;s:6:"height";i:477;s:4:"file";s:15:"2020/01/f1f.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"f1f-300x229.jpg";s:5:"width";i:300;s:6:"height";i:229;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"f1f-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1325]]></title>
		<link>https://elvanov.com/1325</link>
		<pubDate>Mon, 13 Jan 2020 08:06:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/1325.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1044</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 17:06:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 08:06:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 17:06:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 08:06:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1325]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/1325.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1325.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:821;s:6:"height";i:561;s:4:"file";s:16:"2020/01/1325.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:16:"1325-300x205.jpg";s:5:"width";i:300;s:6:"height";i:205;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:16:"1325-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"1325-768x525.jpg";s:5:"width";i:768;s:6:"height";i:525;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1324]]></title>
		<link>https://elvanov.com/1324</link>
		<pubDate>Mon, 13 Jan 2020 08:07:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/1324.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1045</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 17:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 08:07:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 17:07:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 08:07:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1324]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/1324.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1324.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:107;s:6:"height";i:194;s:4:"file";s:16:"2020/01/1324.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"1324-107x150.jpg";s:5:"width";i:107;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1326]]></title>
		<link>https://elvanov.com/1326</link>
		<pubDate>Mon, 13 Jan 2020 08:07:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/1326.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1046</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 17:07:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 08:07:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 17:07:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 08:07:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1326]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/1326.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1326.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:778;s:6:"height";i:621;s:4:"file";s:16:"2020/01/1326.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:16:"1326-300x239.jpg";s:5:"width";i:300;s:6:"height";i:239;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:16:"1326-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"1326-768x613.jpg";s:5:"width";i:768;s:6:"height";i:613;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v5]]></title>
		<link>https://elvanov.com/v5</link>
		<pubDate>Mon, 13 Jan 2020 10:02:36 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1051</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v5.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v5.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v5.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v5-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v5-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v4]]></title>
		<link>https://elvanov.com/v4</link>
		<pubDate>Mon, 13 Jan 2020 10:02:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1052</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v4.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v4.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v4.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v4-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v3]]></title>
		<link>https://elvanov.com/v3</link>
		<pubDate>Mon, 13 Jan 2020 10:02:39 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1053</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v3.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v3-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v2]]></title>
		<link>https://elvanov.com/v2</link>
		<pubDate>Mon, 13 Jan 2020 10:02:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1054</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:413;s:6:"height";i:180;s:4:"file";s:14:"2020/01/v2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v2-300x131.jpg";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p3]]></title>
		<link>https://elvanov.com/p3</link>
		<pubDate>Mon, 13 Jan 2020 10:02:42 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1055</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:666;s:6:"height";i:410;s:4:"file";s:14:"2020/01/p3.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"p3-300x185.jpg";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"p3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p4]]></title>
		<link>https://elvanov.com/p4</link>
		<pubDate>Mon, 13 Jan 2020 10:02:43 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1056</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p4.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p4.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:666;s:6:"height";i:410;s:4:"file";s:14:"2020/01/p4.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"p4-300x185.jpg";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"p4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p2]]></title>
		<link>https://elvanov.com/p2-2</link>
		<pubDate>Mon, 13 Jan 2020 10:02:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:666;s:6:"height";i:410;s:4:"file";s:14:"2020/01/p2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"p2-300x185.jpg";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"p2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[p1]]></title>
		<link>https://elvanov.com/p1-2</link>
		<pubDate>Mon, 13 Jan 2020 10:02:45 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1058</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[p1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/p1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:563;s:6:"height";i:469;s:4:"file";s:14:"2020/01/p1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"p1-300x250.jpg";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"p1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v1]]></title>
		<link>https://elvanov.com/v1</link>
		<pubDate>Mon, 13 Jan 2020 10:02:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1059</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:933;s:6:"height";i:496;s:4:"file";s:14:"2020/01/v1.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"v1-300x159.jpg";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:14:"v1-768x408.jpg";s:5:"width";i:768;s:6:"height";i:408;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v12]]></title>
		<link>https://elvanov.com/v12</link>
		<pubDate>Mon, 13 Jan 2020 10:02:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v12.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1060</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v12.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v12.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:552;s:6:"height";i:250;s:4:"file";s:15:"2020/01/v12.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"v12-300x136.jpg";s:5:"width";i:300;s:6:"height";i:136;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"v12-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v11]]></title>
		<link>https://elvanov.com/v11</link>
		<pubDate>Mon, 13 Jan 2020 10:02:48 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v11.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1061</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v11]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v11.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v11.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:598;s:6:"height";i:437;s:4:"file";s:15:"2020/01/v11.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"v11-300x219.jpg";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"v11-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v10]]></title>
		<link>https://elvanov.com/v10</link>
		<pubDate>Mon, 13 Jan 2020 10:02:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v10.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1062</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v10.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v10.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:973;s:6:"height";i:366;s:4:"file";s:15:"2020/01/v10.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:15:"v10-300x113.jpg";s:5:"width";i:300;s:6:"height";i:113;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"v10-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:15:"v10-768x289.jpg";s:5:"width";i:768;s:6:"height";i:289;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v9]]></title>
		<link>https://elvanov.com/v9</link>
		<pubDate>Mon, 13 Jan 2020 10:02:50 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1063</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v9.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v9.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v9.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v9-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v9-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v8]]></title>
		<link>https://elvanov.com/v8</link>
		<pubDate>Mon, 13 Jan 2020 10:02:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v8.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1064</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:02:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:02:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:02:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:02:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v8.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v8.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v8.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v8-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v8-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v7]]></title>
		<link>https://elvanov.com/v7</link>
		<pubDate>Mon, 13 Jan 2020 10:03:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v7.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1065</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:03:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:03:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:03:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v7.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v7.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v7.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v7-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v7-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v6]]></title>
		<link>https://elvanov.com/v6</link>
		<pubDate>Mon, 13 Jan 2020 10:03:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v6.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1066</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 19:03:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 10:03:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 19:03:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 10:03:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v6.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v6.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:387;s:4:"file";s:14:"2020/01/v6.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"v6-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"v6-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[v10.5]]></title>
		<link>https://elvanov.com/v10-5</link>
		<pubDate>Mon, 13 Jan 2020 13:49:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/v10.5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1088</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 22:49:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 13:49:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 22:49:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 13:49:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v10-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/v10.5.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/v10.5.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:449;s:6:"height";i:78;s:4:"file";s:17:"2020/01/v10.5.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:16:"v10.5-300x52.jpg";s:5:"width";i:300;s:6:"height";i:52;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:16:"v10.5-150x78.jpg";s:5:"width";i:150;s:6:"height";i:78;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrl_space]]></title>
		<link>https://elvanov.com/ctrl_space</link>
		<pubDate>Mon, 13 Jan 2020 14:13:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_space.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1093</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrl_space]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_space.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrl_space.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:896;s:6:"height";i:494;s:4:"file";s:22:"2020/01/ctrl_space.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:22:"ctrl_space-300x165.gif";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"ctrl_space-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:22:"ctrl_space-768x423.gif";s:5:"width";i:768;s:6:"height";i:423;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[shift_alt_f]]></title>
		<link>https://elvanov.com/shift_alt_f</link>
		<pubDate>Mon, 13 Jan 2020 14:13:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/shift_alt_f.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1094</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shift_alt_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/shift_alt_f.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/shift_alt_f.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:778;s:6:"height";i:531;s:4:"file";s:23:"2020/01/shift_alt_f.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:23:"shift_alt_f-300x205.gif";s:5:"width";i:300;s:6:"height";i:205;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:23:"shift_alt_f-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:23:"shift_alt_f-768x524.gif";s:5:"width";i:768;s:6:"height";i:524;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[alt_up_and_down]]></title>
		<link>https://elvanov.com/alt_up_and_down</link>
		<pubDate>Mon, 13 Jan 2020 14:13:50 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/alt_up_and_down.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1095</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[alt_up_and_down]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/alt_up_and_down.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/alt_up_and_down.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1039;s:6:"height";i:1003;s:4:"file";s:27:"2020/01/alt_up_and_down.gif";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:27:"alt_up_and_down-300x290.gif";s:5:"width";i:300;s:6:"height";i:290;s:9:"mime-type";s:9:"image/gif";}s:5:"large";a:4:{s:4:"file";s:28:"alt_up_and_down-1024x989.gif";s:5:"width";i:1024;s:6:"height";i:989;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:27:"alt_up_and_down-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:27:"alt_up_and_down-768x741.gif";s:5:"width";i:768;s:6:"height";i:741;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrl_d]]></title>
		<link>https://elvanov.com/ctrl_d</link>
		<pubDate>Mon, 13 Jan 2020 14:13:54 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_d.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1096</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrl_d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_d.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrl_d.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:406;s:6:"height";i:156;s:4:"file";s:18:"2020/01/ctrl_d.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"ctrl_d-300x115.gif";s:5:"width";i:300;s:6:"height";i:115;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"ctrl_d-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrl_alt_up_and_down_multicursor]]></title>
		<link>https://elvanov.com/ctrl_alt_up_and_down_multicursor</link>
		<pubDate>Mon, 13 Jan 2020 14:13:56 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_alt_up_and_down_multicursor.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1097</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrl_alt_up_and_down_multicursor]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_alt_up_and_down_multicursor.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrl_alt_up_and_down_multicursor.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:447;s:6:"height";i:182;s:4:"file";s:44:"2020/01/ctrl_alt_up_and_down_multicursor.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:44:"ctrl_alt_up_and_down_multicursor-300x122.gif";s:5:"width";i:300;s:6:"height";i:122;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:44:"ctrl_alt_up_and_down_multicursor-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrl_shift_p]]></title>
		<link>https://elvanov.com/ctrl_shift_p</link>
		<pubDate>Mon, 13 Jan 2020 14:13:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_shift_p.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1098</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:13:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:13:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:13:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:13:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrl_shift_p]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_shift_p.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrl_shift_p.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:896;s:6:"height";i:494;s:4:"file";s:24:"2020/01/ctrl_shift_p.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:24:"ctrl_shift_p-300x165.gif";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:24:"ctrl_shift_p-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:24:"ctrl_shift_p-768x423.gif";s:5:"width";i:768;s:6:"height";i:423;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrl_click_goto_definition]]></title>
		<link>https://elvanov.com/ctrl_click_goto_definition</link>
		<pubDate>Mon, 13 Jan 2020 14:14:03 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_click_goto_definition.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:14:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:14:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:14:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:14:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrl_click_goto_definition]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_click_goto_definition.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrl_click_goto_definition.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:996;s:6:"height";i:926;s:4:"file";s:38:"2020/01/ctrl_click_goto_definition.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:38:"ctrl_click_goto_definition-300x279.gif";s:5:"width";i:300;s:6:"height";i:279;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"ctrl_click_goto_definition-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:38:"ctrl_click_goto_definition-768x714.gif";s:5:"width";i:768;s:6:"height";i:714;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ho]]></title>
		<link>https://elvanov.com/ho</link>
		<pubDate>Mon, 13 Jan 2020 14:46:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ho.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1116</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:46:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:46:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 23:46:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 14:46:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ho]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ho.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ho.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:236;s:6:"height";i:253;s:4:"file";s:14:"2020/01/ho.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"ho-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ac2]]></title>
		<link>https://elvanov.com/ac2</link>
		<pubDate>Tue, 14 Jan 2020 10:20:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ac2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1134</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:20:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:20:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:20:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:20:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ac2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ac2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ac2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:591;s:6:"height";i:183;s:4:"file";s:15:"2020/01/ac2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"ac2-300x93.jpg";s:5:"width";i:300;s:6:"height";i:93;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"ac2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ac1]]></title>
		<link>https://elvanov.com/ac1</link>
		<pubDate>Tue, 14 Jan 2020 10:20:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ac1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1135</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:20:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:20:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:20:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:20:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ac1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ac1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ac1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:342;s:6:"height";i:223;s:4:"file";s:15:"2020/01/ac1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"ac1-300x196.jpg";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"ac1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[visual0]]></title>
		<link>https://elvanov.com/visual0</link>
		<pubDate>Tue, 14 Jan 2020 10:35:27 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual0.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1136</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:35:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:35:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:35:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:35:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[visual0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual0.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/visual0.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:438;s:4:"file";s:19:"2020/01/visual0.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"visual0-300x193.gif";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"visual0-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[visual1]]></title>
		<link>https://elvanov.com/visual1</link>
		<pubDate>Tue, 14 Jan 2020 10:37:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1139</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:37:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:37:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:37:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:37:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[visual1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/visual1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:684;s:6:"height";i:281;s:4:"file";s:19:"2020/01/visual1.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"visual1-300x123.gif";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"visual1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[visual2]]></title>
		<link>https://elvanov.com/visual2</link>
		<pubDate>Tue, 14 Jan 2020 10:37:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1140</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:37:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:37:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:37:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[visual2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/visual2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:684;s:6:"height";i:281;s:4:"file";s:19:"2020/01/visual2.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"visual2-300x123.gif";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"visual2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[visual3]]></title>
		<link>https://elvanov.com/visual3</link>
		<pubDate>Tue, 14 Jan 2020 10:37:43 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1141</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 19:37:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 10:37:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 19:37:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 10:37:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[visual3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual3.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/visual3.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:438;s:4:"file";s:19:"2020/01/visual3.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"visual3-300x193.gif";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"visual3-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[t2]]></title>
		<link>https://elvanov.com/t2</link>
		<pubDate>Tue, 14 Jan 2020 11:09:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/t2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1153</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 20:09:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 11:09:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 20:09:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 11:09:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[t2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/t2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/t2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:369;s:4:"file";s:14:"2020/01/t2.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"t2-300x129.gif";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"t2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:14:"t2-768x330.gif";s:5:"width";i:768;s:6:"height";i:330;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[t1]]></title>
		<link>https://elvanov.com/t1</link>
		<pubDate>Tue, 14 Jan 2020 11:09:24 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/t1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1154</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 20:09:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 11:09:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 20:09:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 11:09:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[t1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/t1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/t1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:369;s:4:"file";s:14:"2020/01/t1.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"t1-300x129.gif";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"t1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:14:"t1-768x330.gif";s:5:"width";i:768;s:6:"height";i:330;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[u1]]></title>
		<link>https://elvanov.com/u1</link>
		<pubDate>Wed, 15 Jan 2020 17:02:24 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/u1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1205</wp:post_id>
		<wp:post_date><![CDATA[2020-01-16 02:02:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 17:02:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-16 02:02:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-15 17:02:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/u1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/u1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:365;s:4:"file";s:14:"2020/01/u1.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"u1-300x127.gif";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"u1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:14:"u1-768x326.gif";s:5:"width";i:768;s:6:"height";i:326;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[u2]]></title>
		<link>https://elvanov.com/u2</link>
		<pubDate>Wed, 15 Jan 2020 17:24:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/u2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1213</wp:post_id>
		<wp:post_date><![CDATA[2020-01-16 02:24:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 17:24:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-16 02:24:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-15 17:24:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/u2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/u2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:365;s:4:"file";s:14:"2020/01/u2.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"u2-300x127.gif";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"u2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:14:"u2-768x326.gif";s:5:"width";i:768;s:6:"height";i:326;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[u3]]></title>
		<link>https://elvanov.com/u3</link>
		<pubDate>Wed, 15 Jan 2020 17:24:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/u3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1214</wp:post_id>
		<wp:post_date><![CDATA[2020-01-16 02:24:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 17:24:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-16 02:24:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-15 17:24:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/u3.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/u3.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:365;s:4:"file";s:14:"2020/01/u3.gif";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:14:"u3-300x127.gif";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"u3-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:14:"u3-768x326.gif";s:5:"width";i:768;s:6:"height";i:326;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Artboard 1]]></title>
		<link>https://elvanov.com/artboard-1</link>
		<pubDate>Sun, 19 Jan 2020 14:21:14 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/Artboard-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1324</wp:post_id>
		<wp:post_date><![CDATA[2020-01-19 23:21:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-19 14:21:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-19 23:21:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-19 14:21:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[artboard-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/Artboard-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/Artboard-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:22:"2020/01/Artboard-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"Artboard-1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"Artboard-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[cropped-Artboard-1.png]]></title>
		<link>https://elvanov.com/cropped-artboard-1-png</link>
		<pubDate>Sun, 19 Jan 2020 14:21:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/cropped-Artboard-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/cropped-Artboard-1.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1325</wp:post_id>
		<wp:post_date><![CDATA[2020-01-19 23:21:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-19 14:21:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-19 23:21:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-19 14:21:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-artboard-1-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/cropped-Artboard-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/cropped-Artboard-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:30:"2020/01/cropped-Artboard-1.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:30:"cropped-Artboard-1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:30:"cropped-Artboard-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-270";a:4:{s:4:"file";s:30:"cropped-Artboard-1-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:30:"cropped-Artboard-1-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:30:"cropped-Artboard-1-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:28:"cropped-Artboard-1-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2ff7e9f2d91418b59b11f1473a098a76]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_231506c47faf1155a1828e8175c93198]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[d1]]></title>
		<link>https://elvanov.com/d1</link>
		<pubDate>Thu, 23 Jan 2020 02:17:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/d1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1350</wp:post_id>
		<wp:post_date><![CDATA[2020-01-23 11:17:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-23 02:17:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-23 11:17:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-23 02:17:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[d1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/d1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/d1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:434;s:6:"height";i:405;s:4:"file";s:14:"2020/01/d1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"d1-300x280.jpg";s:5:"width";i:300;s:6:"height";i:280;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"d1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[d2]]></title>
		<link>https://elvanov.com/d2</link>
		<pubDate>Thu, 23 Jan 2020 02:21:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/d2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1351</wp:post_id>
		<wp:post_date><![CDATA[2020-01-23 11:21:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-23 02:21:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-23 11:21:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-23 02:21:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[d2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/d2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/d2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:426;s:6:"height";i:488;s:4:"file";s:14:"2020/01/d2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"d2-262x300.jpg";s:5:"width";i:262;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"d2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[95067e42423443af9ed5a6268aa3c57b1578630925922]]></title>
		<link>https://elvanov.com/1540/95067e42423443af9ed5a6268aa3c57b1578630925922</link>
		<pubDate>Tue, 10 Mar 2020 08:03:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/03/95067e42423443af9ed5a6268aa3c57b1578630925922.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1541</wp:post_id>
		<wp:post_date><![CDATA[2020-03-10 17:03:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-10 08:03:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-10 17:03:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-10 08:03:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[95067e42423443af9ed5a6268aa3c57b1578630925922]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1540</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/03/95067e42423443af9ed5a6268aa3c57b1578630925922-scaled.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/95067e42423443af9ed5a6268aa3c57b1578630925922-scaled.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1707;s:6:"height";i:2560;s:4:"file";s:64:"2020/03/95067e42423443af9ed5a6268aa3c57b1578630925922-scaled.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:57:"95067e42423443af9ed5a6268aa3c57b1578630925922-200x300.jpg";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:58:"95067e42423443af9ed5a6268aa3c57b1578630925922-683x1024.jpg";s:5:"width";i:683;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:57:"95067e42423443af9ed5a6268aa3c57b1578630925922-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:58:"95067e42423443af9ed5a6268aa3c57b1578630925922-768x1152.jpg";s:5:"width";i:768;s:6:"height";i:1152;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:59:"95067e42423443af9ed5a6268aa3c57b1578630925922-1024x1536.jpg";s:5:"width";i:1024;s:6:"height";i:1536;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:59:"95067e42423443af9ed5a6268aa3c57b1578630925922-1365x2048.jpg";s:5:"width";i:1365;s:6:"height";i:2048;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:14:"original_image";s:49:"95067e42423443af9ed5a6268aa3c57b1578630925922.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/1543/image-3</link>
		<pubDate>Fri, 20 Mar 2020 04:30:42 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/03/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1567</wp:post_id>
		<wp:post_date><![CDATA[2020-03-20 13:30:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-20 04:30:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 13:30:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 04:30:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1543</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/03/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:308;s:6:"height";i:133;s:4:"file";s:17:"2020/03/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x133.png";s:5:"width";i:150;s:6:"height";i:133;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[d12272a466d141d7bc78c0c3f9e9dc511573821108046]]></title>
		<link>https://elvanov.com/1589/d12272a466d141d7bc78c0c3f9e9dc511573821108046</link>
		<pubDate>Fri, 20 Mar 2020 12:47:17 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/03/d12272a466d141d7bc78c0c3f9e9dc511573821108046.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1590</wp:post_id>
		<wp:post_date><![CDATA[2020-03-20 21:47:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-20 12:47:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 21:47:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 12:47:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[d12272a466d141d7bc78c0c3f9e9dc511573821108046]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1589</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/03/d12272a466d141d7bc78c0c3f9e9dc511573821108046-scaled.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/d12272a466d141d7bc78c0c3f9e9dc511573821108046-scaled.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1786;s:6:"height";i:2560;s:4:"file";s:64:"2020/03/d12272a466d141d7bc78c0c3f9e9dc511573821108046-scaled.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:57:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-209x300.jpg";s:5:"width";i:209;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:58:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-714x1024.jpg";s:5:"width";i:714;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:57:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:58:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-768x1101.jpg";s:5:"width";i:768;s:6:"height";i:1101;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:59:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-1072x1536.jpg";s:5:"width";i:1072;s:6:"height";i:1536;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:59:"d12272a466d141d7bc78c0c3f9e9dc511573821108046-1429x2048.jpg";s:5:"width";i:1429;s:6:"height";i:2048;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:14:"original_image";s:49:"d12272a466d141d7bc78c0c3f9e9dc511573821108046.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/1608/image-4</link>
		<pubDate>Tue, 14 Apr 2020 04:12:53 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1610</wp:post_id>
		<wp:post_date><![CDATA[2020-04-14 13:12:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-14 04:12:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-14 13:12:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-14 04:12:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1608</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:545;s:6:"height";i:708;s:4:"file";s:17:"2020/04/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-231x300.png";s:5:"width";i:231;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/image.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[u2]]></title>
		<link>https://elvanov.com/1631/u2-2</link>
		<pubDate>Tue, 21 Apr 2020 23:36:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/u2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1632</wp:post_id>
		<wp:post_date><![CDATA[2020-04-22 08:36:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-21 23:36:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-22 08:36:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-21 23:36:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1631</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/u2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/u2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:463;s:4:"file";s:14:"2020/04/u2.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:14:"u2-282x300.gif";s:5:"width";i:282;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:14:"u2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://elvanov.com/1644/image-1-2</link>
		<pubDate>Thu, 23 Apr 2020 00:32:06 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1648</wp:post_id>
		<wp:post_date><![CDATA[2020-04-23 09:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-23 00:32:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-23 09:32:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-23 00:32:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1644</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1272;s:6:"height";i:928;s:4:"file";s:19:"2020/04/image-1.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x219.png";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-1-1024x747.png";s:5:"width";i:1024;s:6:"height";i:747;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x560.png";s:5:"width";i:768;s:6:"height";i:560;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[스캔-2020.-4.-23.-1]]></title>
		<link>https://elvanov.com/1644/%ec%8a%a4%ec%ba%94-2020-4-23-1</link>
		<pubDate>Thu, 23 Apr 2020 00:33:56 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/스캔-2020.-4.-23.-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1649</wp:post_id>
		<wp:post_date><![CDATA[2020-04-23 09:33:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-23 00:33:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-23 09:33:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-23 00:33:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%8a%a4%ec%ba%94-2020-4-23-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1644</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/스캔-2020.-4.-23.-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/스캔-2020.-4.-23.-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2267;s:6:"height";i:1653;s:4:"file";s:33:"2020/04/스캔-2020.-4.-23.-1.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:33:"스캔-2020.-4.-23.-1-300x219.jpg";s:5:"width";i:300;s:6:"height";i:219;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:34:"스캔-2020.-4.-23.-1-1024x747.jpg";s:5:"width";i:1024;s:6:"height";i:747;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:33:"스캔-2020.-4.-23.-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:33:"스캔-2020.-4.-23.-1-768x560.jpg";s:5:"width";i:768;s:6:"height";i:560;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:35:"스캔-2020.-4.-23.-1-1536x1120.jpg";s:5:"width";i:1536;s:6:"height";i:1120;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:35:"스캔-2020.-4.-23.-1-2048x1493.jpg";s:5:"width";i:2048;s:6:"height";i:1493;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[20181113050333.397421]]></title>
		<link>https://elvanov.com/1326/20181113050333-397421</link>
		<pubDate>Fri, 24 Apr 2020 07:12:17 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/20181113050333.397421.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1729</wp:post_id>
		<wp:post_date><![CDATA[2020-04-24 16:12:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-24 07:12:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-24 16:12:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-24 07:12:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20181113050333-397421]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1326</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/20181113050333.397421-e1587712393982.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/20181113050333.397421-e1587712393982.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:511;s:6:"height";i:319;s:4:"file";s:48:"2020/04/20181113050333.397421-e1587712393982.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:48:"20181113050333.397421-e1587712393982-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"20181113050333.397421-e1587712393982-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:33:"20181113050333.397421-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:4:{s:9:"full-orig";a:3:{s:5:"width";i:819;s:6:"height";i:460;s:4:"file";s:25:"20181113050333.397421.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:33:"20181113050333.397421-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:33:"20181113050333.397421-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:17:"medium_large-orig";a:4:{s:4:"file";s:33:"20181113050333.397421-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[메모장]]></title>
		<link>https://elvanov.com/%eb%a9%94%eb%aa%a8%ec%9e%a5</link>
		<pubDate>Sun, 26 Apr 2020 21:57:28 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/메모장.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1745</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 06:57:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-26 21:57:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-27 06:57:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-26 21:57:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%a9%94%eb%aa%a8%ec%9e%a5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/메모장.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/메모장.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:460;s:6:"height";i:224;s:4:"file";s:21:"2020/04/메모장.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"메모장-300x146.jpg";s:5:"width";i:300;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"메모장-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[윈도우]]></title>
		<link>https://elvanov.com/%ec%9c%88%eb%8f%84%ec%9a%b0</link>
		<pubDate>Sun, 26 Apr 2020 21:57:29 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/윈도우.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1746</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 06:57:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-26 21:57:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-27 06:57:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-26 21:57:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9c%88%eb%8f%84%ec%9a%b0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/윈도우.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/윈도우.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:21:"2020/04/윈도우.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:21:"윈도우-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"윈도우-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"윈도우-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"윈도우-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[명프]]></title>
		<link>https://elvanov.com/%eb%aa%85%ed%94%84</link>
		<pubDate>Sun, 26 Apr 2020 22:27:35 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/명프.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1752</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 07:27:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-26 22:27:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-27 07:27:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-26 22:27:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%aa%85%ed%94%84]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/명프.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/명프.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:832;s:6:"height";i:681;s:4:"file";s:18:"2020/04/명프.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:18:"명프-300x246.jpg";s:5:"width";i:300;s:6:"height";i:246;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"명프-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"명프-768x629.jpg";s:5:"width";i:768;s:6:"height";i:629;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrlp]]></title>
		<link>https://elvanov.com/1084/ctrlp</link>
		<pubDate>Tue, 28 Apr 2020 09:25:07 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlp.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1799</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrlp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlp.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrlp.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:532;s:6:"height";i:176;s:4:"file";s:17:"2020/01/ctrlp.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:16:"ctrlp-300x99.gif";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"ctrlp-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrltab]]></title>
		<link>https://elvanov.com/1084/ctrltab</link>
		<pubDate>Tue, 28 Apr 2020 09:25:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrltab.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1800</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrltab]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrltab.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrltab.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:532;s:6:"height";i:176;s:4:"file";s:19:"2020/01/ctrltab.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"ctrltab-300x99.gif";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"ctrltab-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrlg]]></title>
		<link>https://elvanov.com/1084/ctrlg</link>
		<pubDate>Tue, 28 Apr 2020 09:25:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlg.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1801</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrlg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlg.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrlg.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:532;s:6:"height";i:451;s:4:"file";s:17:"2020/01/ctrlg.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"ctrlg-300x254.gif";s:5:"width";i:300;s:6:"height";i:254;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"ctrlg-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[visual0]]></title>
		<link>https://elvanov.com/1084/visual0-2</link>
		<pubDate>Tue, 28 Apr 2020 09:25:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual0-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1802</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[visual0-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual0-1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/visual0-1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:438;s:4:"file";s:21:"2020/01/visual0-1.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"visual0-1-300x193.gif";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"visual0-1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrlshiftf]]></title>
		<link>https://elvanov.com/1084/ctrlshiftf</link>
		<pubDate>Tue, 28 Apr 2020 09:25:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlshiftf.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1803</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrlshiftf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlshiftf.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrlshiftf.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:265;s:6:"height";i:218;s:4:"file";s:22:"2020/01/ctrlshiftf.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"ctrlshiftf-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[bracket]]></title>
		<link>https://elvanov.com/1084/bracket</link>
		<pubDate>Tue, 28 Apr 2020 09:25:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/bracket.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1804</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bracket]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/bracket.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/bracket.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:161;s:4:"file";s:19:"2020/01/bracket.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"bracket-300x111.gif";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"bracket-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrlslash]]></title>
		<link>https://elvanov.com/1084/ctrlslash</link>
		<pubDate>Tue, 28 Apr 2020 09:25:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlslash.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1805</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrlslash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlslash.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrlslash.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:161;s:4:"file";s:21:"2020/01/ctrlslash.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"ctrlslash-300x111.gif";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"ctrlslash-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ctrlx]]></title>
		<link>https://elvanov.com/1084/ctrlx</link>
		<pubDate>Tue, 28 Apr 2020 09:25:14 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlx.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1806</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 18:25:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 09:25:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:25:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:25:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ctrlx]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1084</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlx.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/ctrlx.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:161;s:4:"file";s:17:"2020/01/ctrlx.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"ctrlx-300x111.gif";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"ctrlx-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[pythons]]></title>
		<link>https://elvanov.com/599/pythons</link>
		<pubDate>Thu, 30 Apr 2020 11:51:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/pythons.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1843</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 20:51:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 11:51:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 20:51:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 11:51:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pythons]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>599</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/pythons.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/pythons.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:373;s:6:"height";i:430;s:4:"file";s:19:"2020/04/pythons.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"pythons-260x300.jpg";s:5:"width";i:260;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"pythons-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1]]></title>
		<link>https://elvanov.com/1846/attachment/1</link>
		<pubDate>Thu, 30 Apr 2020 12:43:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1847</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:142;s:4:"file";s:13:"2020/04/1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:13:"1-300x118.jpg";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x142.jpg";s:5:"width";i:150;s:6:"height";i:142;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[delete]]></title>
		<link>https://elvanov.com/1846/delete</link>
		<pubDate>Thu, 30 Apr 2020 12:43:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/delete.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1848</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[delete]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/delete.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/delete.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:664;s:6:"height";i:96;s:4:"file";s:18:"2020/04/delete.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"delete-300x43.jpg";s:5:"width";i:300;s:6:"height";i:43;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"delete-150x96.jpg";s:5:"width";i:150;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[nahimic]]></title>
		<link>https://elvanov.com/1846/nahimic</link>
		<pubDate>Thu, 30 Apr 2020 12:43:53 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1849</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nahimic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/nahimic.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:407;s:4:"file";s:19:"2020/04/nahimic.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"nahimic-300x262.jpg";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"nahimic-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[확인중]]></title>
		<link>https://elvanov.com/1846/%ed%99%95%ec%9d%b8%ec%a4%91</link>
		<pubDate>Thu, 30 Apr 2020 12:43:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/확인중.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1850</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%95%ec%9d%b8%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/확인중.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/확인중.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:572;s:6:"height";i:443;s:4:"file";s:21:"2020/04/확인중.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"확인중-300x232.jpg";s:5:"width";i:300;s:6:"height";i:232;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"확인중-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[changing]]></title>
		<link>https://elvanov.com/1846/changing</link>
		<pubDate>Thu, 30 Apr 2020 12:43:57 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/changing.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1851</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[changing]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/changing.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/changing.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:465;s:6:"height";i:496;s:4:"file";s:20:"2020/04/changing.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"changing-281x300.jpg";s:5:"width";i:281;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"changing-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[장치관리자]]></title>
		<link>https://elvanov.com/1846/%ec%9e%a5%ec%b9%98%ea%b4%80%eb%a6%ac%ec%9e%90</link>
		<pubDate>Thu, 30 Apr 2020 12:43:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/장치관리자.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1852</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 21:43:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 12:43:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 21:43:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 12:43:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9e%a5%ec%b9%98%ea%b4%80%eb%a6%ac%ec%9e%90]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/장치관리자.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/장치관리자.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:341;s:6:"height";i:178;s:4:"file";s:27:"2020/04/장치관리자.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:27:"장치관리자-300x157.jpg";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:27:"장치관리자-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[nahimic2]]></title>
		<link>https://elvanov.com/1846/nahimic2</link>
		<pubDate>Thu, 30 Apr 2020 13:21:30 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1854</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 22:21:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 13:21:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 22:21:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 13:21:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nahimic2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/04/nahimic2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1202;s:6:"height";i:832;s:4:"file";s:20:"2020/04/nahimic2.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:20:"nahimic2-300x208.jpg";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"nahimic2-1024x709.jpg";s:5:"width";i:1024;s:6:"height";i:709;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"nahimic2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"nahimic2-768x532.jpg";s:5:"width";i:768;s:6:"height";i:532;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[12110210A7E5399FE9]]></title>
		<link>https://elvanov.com/1860/12110210a7e5399fe9</link>
		<pubDate>Mon, 04 May 2020 07:14:39 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/05/12110210A7E5399FE9.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1861</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 16:14:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 07:14:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-04 16:14:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-04 07:14:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[12110210a7e5399fe9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1860</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/05/12110210A7E5399FE9.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/12110210A7E5399FE9.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:418;s:6:"height";i:500;s:4:"file";s:30:"2020/05/12110210A7E5399FE9.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:30:"12110210A7E5399FE9-251x300.jpg";s:5:"width";i:251;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:30:"12110210A7E5399FE9-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[e1e4c6106dce40a7b4af7f138bf446f11568823817066]]></title>
		<link>https://elvanov.com/1867/e1e4c6106dce40a7b4af7f138bf446f11568823817066</link>
		<pubDate>Tue, 12 May 2020 09:55:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/05/e1e4c6106dce40a7b4af7f138bf446f11568823817066.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1868</wp:post_id>
		<wp:post_date><![CDATA[2020-05-12 18:55:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-12 09:55:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-12 18:55:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-12 09:55:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[e1e4c6106dce40a7b4af7f138bf446f11568823817066]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1867</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/05/e1e4c6106dce40a7b4af7f138bf446f11568823817066-scaled.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/e1e4c6106dce40a7b4af7f138bf446f11568823817066-scaled.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2560;s:6:"height";i:1707;s:4:"file";s:64:"2020/05/e1e4c6106dce40a7b4af7f138bf446f11568823817066-scaled.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:57:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:58:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:57:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:57:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:59:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-1536x1024.jpg";s:5:"width";i:1536;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:59:"e1e4c6106dce40a7b4af7f138bf446f11568823817066-2048x1365.jpg";s:5:"width";i:2048;s:6:"height";i:1365;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:14:"original_image";s:49:"e1e4c6106dce40a7b4af7f138bf446f11568823817066.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[캡처]]></title>
		<link>https://elvanov.com/1688/%ec%ba%a1%ec%b2%98</link>
		<pubDate>Thu, 14 May 2020 08:45:41 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/05/캡처.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1923</wp:post_id>
		<wp:post_date><![CDATA[2020-05-14 17:45:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-14 08:45:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-14 17:45:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-14 08:45:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%ba%a1%ec%b2%98]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1688</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/05/캡처.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/05/캡처.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:697;s:6:"height";i:667;s:4:"file";s:18:"2020/05/캡처.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"캡처-300x287.png";s:5:"width";i:300;s:6:"height";i:287;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"캡처-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[movie_image]]></title>
		<link>https://elvanov.com/2000/movie_image</link>
		<pubDate>Fri, 19 Jun 2020 15:06:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/movie_image.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2001</wp:post_id>
		<wp:post_date><![CDATA[2020-06-20 00:06:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-19 15:06:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-20 00:06:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-19 15:06:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[movie_image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2000</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/movie_image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/movie_image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:886;s:6:"height";i:498;s:4:"file";s:23:"2020/06/movie_image.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:23:"movie_image-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:23:"movie_image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:23:"movie_image-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[3]]></title>
		<link>https://elvanov.com/2008/attachment/3</link>
		<pubDate>Tue, 30 Jun 2020 12:16:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2012</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:16:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:16:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:16:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:16:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:552;s:6:"height";i:676;s:4:"file";s:13:"2020/06/3.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:13:"3-245x300.jpg";s:5:"width";i:245;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2]]></title>
		<link>https://elvanov.com/2008/attachment/2</link>
		<pubDate>Tue, 30 Jun 2020 12:16:20 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2013</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:16:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:16:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:16:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:16:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:546;s:6:"height";i:613;s:4:"file";s:13:"2020/06/2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:13:"2-267x300.jpg";s:5:"width";i:267;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1]]></title>
		<link>https://elvanov.com/2008/1-2</link>
		<pubDate>Tue, 30 Jun 2020 12:16:22 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2014</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:16:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:16:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:16:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:16:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:551;s:6:"height";i:667;s:4:"file";s:13:"2020/06/1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:13:"1-248x300.jpg";s:5:"width";i:248;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[운영]]></title>
		<link>https://elvanov.com/2008/%ec%9a%b4%ec%98%81</link>
		<pubDate>Tue, 30 Jun 2020 12:54:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/운영.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2018</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9a%b4%ec%98%81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/운영.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/운영.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:658;s:6:"height";i:453;s:4:"file";s:18:"2020/06/운영.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"운영-300x207.jpg";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"운영-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[프로필 입력]]></title>
		<link>https://elvanov.com/2008/%ed%94%84%eb%a1%9c%ed%95%84-%ec%9e%85%eb%a0%a5</link>
		<pubDate>Tue, 30 Jun 2020 12:54:07 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/프로필-입력.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2019</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%94%84%eb%a1%9c%ed%95%84-%ec%9e%85%eb%a0%a5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/프로필-입력.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/프로필-입력.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:476;s:6:"height";i:272;s:4:"file";s:28:"2020/06/프로필-입력.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:28:"프로필-입력-300x171.jpg";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"프로필-입력-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[연기3]]></title>
		<link>https://elvanov.com/2008/%ec%97%b0%ea%b8%b03</link>
		<pubDate>Tue, 30 Jun 2020 12:54:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2020</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%97%b0%ea%b8%b03]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/연기3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:628;s:6:"height";i:291;s:4:"file";s:19:"2020/06/연기3.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"연기3-300x139.jpg";s:5:"width";i:300;s:6:"height";i:139;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"연기3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[연기2]]></title>
		<link>https://elvanov.com/2008/%ec%97%b0%ea%b8%b02</link>
		<pubDate>Tue, 30 Jun 2020 12:54:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2021</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%97%b0%ea%b8%b02]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/연기2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:632;s:6:"height";i:312;s:4:"file";s:19:"2020/06/연기2.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"연기2-300x148.jpg";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"연기2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[연기1]]></title>
		<link>https://elvanov.com/2008/%ec%97%b0%ea%b8%b01</link>
		<pubDate>Tue, 30 Jun 2020 12:54:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2022</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%97%b0%ea%b8%b01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/연기1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:631;s:6:"height";i:153;s:4:"file";s:19:"2020/06/연기1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"연기1-300x73.jpg";s:5:"width";i:300;s:6:"height";i:73;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"연기1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[4]]></title>
		<link>https://elvanov.com/2008/attachment/4</link>
		<pubDate>Tue, 30 Jun 2020 12:54:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/06/4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2023</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 21:54:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 12:54:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 21:54:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 12:54:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2008</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/06/4.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/4.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:404;s:4:"file";s:13:"2020/06/4.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:13:"4-300x187.jpg";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[type1]]></title>
		<link>https://elvanov.com/2032/type1</link>
		<pubDate>Thu, 16 Jul 2020 01:19:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/07/type1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2055</wp:post_id>
		<wp:post_date><![CDATA[2020-07-16 10:19:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-16 01:19:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-16 10:19:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-16 01:19:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[type1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2032</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/07/type1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/07/type1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:216;s:6:"height";i:258;s:4:"file";s:17:"2020/07/type1.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"type1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Makefile기본구조]]></title>
		<link>https://elvanov.com/2032/makefile%ea%b8%b0%eb%b3%b8%ea%b5%ac%ec%a1%b0</link>
		<pubDate>Thu, 16 Jul 2020 04:43:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/07/Makefile기본구조.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2065</wp:post_id>
		<wp:post_date><![CDATA[2020-07-16 13:43:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-16 04:43:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-16 13:43:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-16 04:43:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[makefile%ea%b8%b0%eb%b3%b8%ea%b5%ac%ec%a1%b0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2032</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/07/Makefile기본구조.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/07/Makefile기본구조.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:400;s:4:"file";s:32:"2020/07/Makefile기본구조.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:32:"Makefile기본구조-300x120.jpg";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:32:"Makefile기본구조-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:32:"Makefile기본구조-768x307.jpg";s:5:"width";i:768;s:6:"height";i:307;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1]]></title>
		<link>https://elvanov.com/2115/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1</link>
		<pubDate>Thu, 06 Aug 2020 23:42:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/08/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2116</wp:post_id>
		<wp:post_date><![CDATA[2020-08-07 08:42:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-06 23:42:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-08-07 08:42:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-08-06 23:42:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/08/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/08/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:3387;s:4:"file";s:70:"2020/08/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:69:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-75x300.png";s:5:"width";i:75;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:71:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-256x1024.png";s:5:"width";i:256;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:70:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:71:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-768x3067.png";s:5:"width";i:768;s:6:"height";i:3067;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:71:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-385x1536.png";s:5:"width";i:385;s:6:"height";i:1536;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:71:"screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1-513x2048.png";s:5:"width";i:513;s:6:"height";i:2048;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[sopaseom_192px_JtS_icon]]></title>
		<link>https://elvanov.com/sopaseom_192px_jts_icon</link>
		<pubDate>Wed, 23 Sep 2020 02:39:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/09/sopaseom_192px_JtS_icon.ico</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2120</wp:post_id>
		<wp:post_date><![CDATA[2020-09-23 11:39:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-09-23 02:39:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-09-23 11:39:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-09-23 02:39:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sopaseom_192px_jts_icon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/09/sopaseom_192px_JtS_icon.ico]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/09/sopaseom_192px_JtS_icon.ico]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:35:"2020/09/sopaseom_192px_JtS_icon.ico";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2020-12-23-164450]]></title>
		<link>https://elvanov.com/2123/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-164450</link>
		<pubDate>Wed, 23 Dec 2020 07:45:27 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-164450.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2127</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 16:45:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 07:45:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 16:45:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 07:45:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-164450]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-164450.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/화면-캡처-2020-12-23-164450.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1133;s:6:"height";i:626;s:4:"file";s:43:"2020/12/화면-캡처-2020-12-23-164450.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-164450-300x166.png";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:44:"화면-캡처-2020-12-23-164450-1024x566.png";s:5:"width";i:1024;s:6:"height";i:566;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-164450-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-164450-768x424.png";s:5:"width";i:768;s:6:"height";i:424;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[최종버전-웹-접근성-품질인증-표준심사-지침151030]]></title>
		<link>https://elvanov.com/2123/%ec%b5%9c%ec%a2%85%eb%b2%84%ec%a0%84-%ec%9b%b9-%ec%a0%91%ea%b7%bc%ec%84%b1-%ed%92%88%ec%a7%88%ec%9d%b8%ec%a6%9d-%ed%91%9c%ec%a4%80%ec%8b%ac%ec%82%ac-%ec%a7%80%ec%b9%a8151030</link>
		<pubDate>Wed, 23 Dec 2020 08:16:33 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2130</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 17:16:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 08:16:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 17:16:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 08:16:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%b5%9c%ec%a2%85%eb%b2%84%ec%a0%84-%ec%9b%b9-%ec%a0%91%ea%b7%bc%ec%84%b1-%ed%92%88%ec%a7%88%ec%9d%b8%ec%a6%9d-%ed%91%9c%ec%a4%80%ec%8b%ac%ec%82%ac-%ec%a7%80%ec%b9%a8151030]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:4:"full";a:4:{s:4:"file";s:73:"최종버전-웹-접근성-품질인증-표준심사-지침151030-pdf.jpg";s:5:"width";i:1495;s:6:"height";i:1058;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:81:"최종버전-웹-접근성-품질인증-표준심사-지침151030-pdf-300x212.jpg";s:5:"width";i:300;s:6:"height";i:212;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:82:"최종버전-웹-접근성-품질인증-표준심사-지침151030-pdf-1024x725.jpg";s:5:"width";i:1024;s:6:"height";i:725;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:81:"최종버전-웹-접근성-품질인증-표준심사-지침151030-pdf-150x106.jpg";s:5:"width";i:150;s:6:"height";i:106;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2020-12-23-171443]]></title>
		<link>https://elvanov.com/2123/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-171443</link>
		<pubDate>Wed, 23 Dec 2020 08:17:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-171443.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2131</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 17:17:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 08:17:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 17:17:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 08:17:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-171443]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-171443.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/화면-캡처-2020-12-23-171443.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:498;s:6:"height";i:268;s:4:"file";s:43:"2020/12/화면-캡처-2020-12-23-171443.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-171443-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-171443-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[평가기준]]></title>
		<link>https://elvanov.com/2123/%ed%8f%89%ea%b0%80%ea%b8%b0%ec%a4%80</link>
		<pubDate>Wed, 23 Dec 2020 08:29:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/평가기준.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2133</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 17:29:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 08:29:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 17:29:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 08:29:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8f%89%ea%b0%80%ea%b8%b0%ec%a4%80]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/평가기준.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/평가기준.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:790;s:6:"height";i:2510;s:4:"file";s:24:"2020/12/평가기준.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:23:"평가기준-94x300.jpg";s:5:"width";i:94;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:25:"평가기준-322x1024.jpg";s:5:"width";i:322;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:24:"평가기준-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:25:"평가기준-768x2440.jpg";s:5:"width";i:768;s:6:"height";i:2440;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:25:"평가기준-483x1536.jpg";s:5:"width";i:483;s:6:"height";i:1536;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:25:"평가기준-645x2048.jpg";s:5:"width";i:645;s:6:"height";i:2048;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2020-12-23-193750]]></title>
		<link>https://elvanov.com/2123/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-193750</link>
		<pubDate>Wed, 23 Dec 2020 10:38:14 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-193750.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2135</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 19:38:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 10:38:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 19:38:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 10:38:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-193750]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-193750.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/화면-캡처-2020-12-23-193750.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:957;s:6:"height";i:656;s:4:"file";s:43:"2020/12/화면-캡처-2020-12-23-193750.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-193750-300x206.png";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-193750-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-193750-768x526.png";s:5:"width";i:768;s:6:"height";i:526;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2020-12-23-194044]]></title>
		<link>https://elvanov.com/2123/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-194044</link>
		<pubDate>Wed, 23 Dec 2020 10:41:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-194044.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2136</wp:post_id>
		<wp:post_date><![CDATA[2020-12-23 19:41:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-23 10:41:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-23 19:41:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-23 10:41:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2020-12-23-194044]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-194044.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/12/화면-캡처-2020-12-23-194044.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:278;s:6:"height";i:153;s:4:"file";s:43:"2020/12/화면-캡처-2020-12-23-194044.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2020-12-23-194044-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[점유율]]></title>
		<link>https://elvanov.com/2123/%ec%a0%90%ec%9c%a0%ec%9c%a8</link>
		<pubDate>Tue, 12 Jan 2021 07:56:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/점유율.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2142</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 16:56:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 07:56:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 16:56:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 07:56:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%a0%90%ec%9c%a0%ec%9c%a8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/점유율.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/점유율.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:606;s:6:"height";i:368;s:4:"file";s:21:"2021/01/점유율.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"점유율-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"점유율-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[accessibility]]></title>
		<link>https://elvanov.com/2123/accessibility</link>
		<pubDate>Tue, 12 Jan 2021 08:07:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/accessibility.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2144</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 17:07:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 08:07:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 17:07:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 08:07:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[accessibility]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/accessibility.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/accessibility.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:951;s:6:"height";i:238;s:4:"file";s:25:"2021/01/accessibility.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:24:"accessibility-300x75.png";s:5:"width";i:300;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:25:"accessibility-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:25:"accessibility-768x192.png";s:5:"width";i:768;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[센스리더]]></title>
		<link>https://elvanov.com/2123/%ec%84%bc%ec%8a%a4%eb%a6%ac%eb%8d%94</link>
		<pubDate>Tue, 12 Jan 2021 08:39:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/센스리더.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2145</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 17:39:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 08:39:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 17:39:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 08:39:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%84%bc%ec%8a%a4%eb%a6%ac%eb%8d%94]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/센스리더.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/센스리더.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:539;s:6:"height";i:389;s:4:"file";s:24:"2021/01/센스리더.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:24:"센스리더-300x217.png";s:5:"width";i:300;s:6:"height";i:217;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:24:"센스리더-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[보고서예제]]></title>
		<link>https://elvanov.com/2123/%eb%b3%b4%ea%b3%a0%ec%84%9c%ec%98%88%ec%a0%9c</link>
		<pubDate>Tue, 12 Jan 2021 09:16:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/보고서예제.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2146</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 18:16:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 09:16:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 18:16:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 09:16:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%b3%b4%ea%b3%a0%ec%84%9c%ec%98%88%ec%a0%9c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/보고서예제.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/보고서예제.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:738;s:6:"height";i:734;s:4:"file";s:27:"2021/01/보고서예제.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:27:"보고서예제-300x298.png";s:5:"width";i:300;s:6:"height";i:298;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:27:"보고서예제-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[완료]]></title>
		<link>https://elvanov.com/2123/%ec%99%84%eb%a3%8c</link>
		<pubDate>Tue, 12 Jan 2021 09:19:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/완료.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2147</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 18:19:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 09:19:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 18:19:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 09:19:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%99%84%eb%a3%8c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/완료.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/완료.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:180;s:6:"height";i:115;s:4:"file";s:18:"2021/01/완료.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"완료-150x115.png";s:5:"width";i:150;s:6:"height";i:115;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[datepicker]]></title>
		<link>https://elvanov.com/2123/datepicker</link>
		<pubDate>Tue, 12 Jan 2021 09:25:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/datepicker.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2148</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 18:25:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 09:25:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 18:25:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 09:25:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[datepicker]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/datepicker.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/datepicker.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:291;s:6:"height";i:424;s:4:"file";s:22:"2021/01/datepicker.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"datepicker-206x300.png";s:5:"width";i:206;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"datepicker-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-01-12-182656]]></title>
		<link>https://elvanov.com/2123/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-01-12-182656</link>
		<pubDate>Tue, 12 Jan 2021 09:27:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-12-182656.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2149</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 18:27:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 09:27:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 18:27:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 09:27:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-01-12-182656]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-12-182656.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/화면-캡처-2021-01-12-182656.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:438;s:6:"height";i:53;s:4:"file";s:43:"2021/01/화면-캡처-2021-01-12-182656.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:42:"화면-캡처-2021-01-12-182656-300x36.png";s:5:"width";i:300;s:6:"height";i:36;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:42:"화면-캡처-2021-01-12-182656-150x53.png";s:5:"width";i:150;s:6:"height";i:53;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[의미없는포커싱]]></title>
		<link>https://elvanov.com/2123/%ec%9d%98%eb%af%b8%ec%97%86%eb%8a%94%ed%8f%ac%ec%bb%a4%ec%8b%b1</link>
		<pubDate>Wed, 13 Jan 2021 10:32:43 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/의미없는포커싱.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2161</wp:post_id>
		<wp:post_date><![CDATA[2021-01-13 19:32:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-13 10:32:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-13 19:32:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-13 10:32:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9d%98%eb%af%b8%ec%97%86%eb%8a%94%ed%8f%ac%ec%bb%a4%ec%8b%b1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/의미없는포커싱.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/의미없는포커싱.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:641;s:6:"height";i:253;s:4:"file";s:33:"2021/01/의미없는포커싱.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:33:"의미없는포커싱-300x118.png";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:33:"의미없는포커싱-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[의미없는포커싱-1]]></title>
		<link>https://elvanov.com/2123/%ec%9d%98%eb%af%b8%ec%97%86%eb%8a%94%ed%8f%ac%ec%bb%a4%ec%8b%b1-1</link>
		<pubDate>Wed, 13 Jan 2021 10:34:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/의미없는포커싱-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2162</wp:post_id>
		<wp:post_date><![CDATA[2021-01-13 19:34:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-13 10:34:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-13 19:34:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-13 10:34:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9d%98%eb%af%b8%ec%97%86%eb%8a%94%ed%8f%ac%ec%bb%a4%ec%8b%b1-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/의미없는포커싱-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/의미없는포커싱-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:641;s:6:"height";i:253;s:4:"file";s:35:"2021/01/의미없는포커싱-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:35:"의미없는포커싱-1-300x118.png";s:5:"width";i:300;s:6:"height";i:118;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:35:"의미없는포커싱-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-01-23-141001]]></title>
		<link>https://elvanov.com/2191/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-01-23-141001</link>
		<pubDate>Sat, 23 Jan 2021 05:10:41 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-23-141001.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2192</wp:post_id>
		<wp:post_date><![CDATA[2021-01-23 14:10:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-23 05:10:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-23 14:10:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-23 05:10:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-01-23-141001]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2191</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-23-141001.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/화면-캡처-2021-01-23-141001.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:506;s:6:"height";i:303;s:4:"file";s:43:"2021/01/화면-캡처-2021-01-23-141001.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2021-01-23-141001-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2021-01-23-141001-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-01-26_19-38-05]]></title>
		<link>https://elvanov.com/2195/photo_2021-01-26_19-38-05</link>
		<pubDate>Tue, 26 Jan 2021 12:51:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_19-38-05.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2206</wp:post_id>
		<wp:post_date><![CDATA[2021-01-26 21:51:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-26 12:51:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-26 21:51:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-26 12:51:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-01-26_19-38-05]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2195</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_19-38-05-e1611665710503.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/photo_2021-01-26_19-38-05-e1611665710503.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:819;s:6:"height";i:844;s:4:"file";s:52:"2021/01/photo_2021-01-26_19-38-05-e1611665710503.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:52:"photo_2021-01-26_19-38-05-e1611665710503-291x300.jpg";s:5:"width";i:291;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:38:"photo_2021-01-26_19-38-05-791x1024.jpg";s:5:"width";i:791;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:52:"photo_2021-01-26_19-38-05-e1611665710503-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:52:"photo_2021-01-26_19-38-05-e1611665710503-768x791.jpg";s:5:"width";i:768;s:6:"height";i:791;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:9:"full-orig";a:3:{s:5:"width";i:989;s:6:"height";i:1280;s:4:"file";s:29:"photo_2021-01-26_19-38-05.jpg";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_19-38-05-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:11:"medium-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_19-38-05-232x300.jpg";s:5:"width";i:232;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:17:"medium_large-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_19-38-05-768x994.jpg";s:5:"width";i:768;s:6:"height";i:994;s:9:"mime-type";s:10:"image/jpeg";}s:10:"large-orig";a:4:{s:4:"file";s:38:"photo_2021-01-26_19-38-05-791x1024.jpg";s:5:"width";i:791;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-01-26_21-51-23]]></title>
		<link>https://elvanov.com/2195/photo_2021-01-26_21-51-23</link>
		<pubDate>Tue, 26 Jan 2021 12:51:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_21-51-23.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2207</wp:post_id>
		<wp:post_date><![CDATA[2021-01-26 21:51:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-26 12:51:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-26 21:51:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-26 12:51:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-01-26_21-51-23]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2195</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_21-51-23-e1611665734310.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/photo_2021-01-26_21-51-23-e1611665734310.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:726;s:4:"file";s:52:"2021/01/photo_2021-01-26_21-51-23-e1611665734310.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:52:"photo_2021-01-26_21-51-23-e1611665734310-298x300.jpg";s:5:"width";i:298;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:38:"photo_2021-01-26_21-51-23-791x1024.jpg";s:5:"width";i:791;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:52:"photo_2021-01-26_21-51-23-e1611665734310-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:37:"photo_2021-01-26_21-51-23-768x994.jpg";s:5:"width";i:768;s:6:"height";i:994;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:9:"full-orig";a:3:{s:5:"width";i:989;s:6:"height";i:1280;s:4:"file";s:29:"photo_2021-01-26_21-51-23.jpg";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_21-51-23-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:11:"medium-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_21-51-23-232x300.jpg";s:5:"width";i:232;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:17:"medium_large-orig";a:4:{s:4:"file";s:37:"photo_2021-01-26_21-51-23-768x994.jpg";s:5:"width";i:768;s:6:"height";i:994;s:9:"mime-type";s:10:"image/jpeg";}s:10:"large-orig";a:4:{s:4:"file";s:38:"photo_2021-01-26_21-51-23-791x1024.jpg";s:5:"width";i:791;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-01-29_14-56-46]]></title>
		<link>https://elvanov.com/2233/photo_2021-01-29_14-56-46</link>
		<pubDate>Fri, 29 Jan 2021 05:57:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-29_14-56-46.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2238</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 14:57:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 05:57:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 14:57:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 05:57:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-01-29_14-56-46]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2233</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-29_14-56-46.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/photo_2021-01-29_14-56-46.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1268;s:6:"height";i:1280;s:4:"file";s:37:"2021/01/photo_2021-01-29_14-56-46.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:37:"photo_2021-01-29_14-56-46-297x300.jpg";s:5:"width";i:297;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:39:"photo_2021-01-29_14-56-46-1014x1024.jpg";s:5:"width";i:1014;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:37:"photo_2021-01-29_14-56-46-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:37:"photo_2021-01-29_14-56-46-768x775.jpg";s:5:"width";i:768;s:6:"height";i:775;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/2244/image-5</link>
		<pubDate>Fri, 29 Jan 2021 06:57:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2245</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 15:57:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 06:57:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 15:57:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 06:57:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/image.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:17:"2021/01/image.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x300.gif";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/2244/image-6</link>
		<pubDate>Fri, 29 Jan 2021 06:57:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2246</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 15:57:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 06:57:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 15:57:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 06:57:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/image.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:380;s:6:"height";i:242;s:4:"file";s:18:"2021/01/image.jpeg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"image-300x191.jpeg";s:5:"width";i:300;s:6:"height";i:191;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"image-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/2244/image-7</link>
		<pubDate>Fri, 29 Jan 2021 06:57:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2247</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 15:57:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 06:57:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 15:57:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 06:57:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:651;s:6:"height";i:271;s:4:"file";s:17:"2021/01/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://elvanov.com/2244/image-1-3</link>
		<pubDate>Fri, 29 Jan 2021 06:57:14 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2248</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 15:57:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 06:57:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 15:57:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 06:57:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:481;s:6:"height";i:311;s:4:"file";s:19:"2021/01/image-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-1]]></title>
		<link>https://elvanov.com/2244/image-1-4</link>
		<pubDate>Fri, 29 Jan 2021 06:57:25 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2249</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 15:57:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 06:57:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 15:57:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 06:57:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2244</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/01/image-1.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:96;s:6:"height";i:96;s:4:"file";s:20:"2021/01/image-1.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-02-02-152027]]></title>
		<link>https://elvanov.com/2234/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-02-152027</link>
		<pubDate>Tue, 02 Feb 2021 06:20:53 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-152027.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2263</wp:post_id>
		<wp:post_date><![CDATA[2021-02-02 15:20:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-02 06:20:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-02 15:20:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-02 06:20:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-02-152027]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2234</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-152027.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/화면-캡처-2021-02-02-152027.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1084;s:6:"height";i:177;s:4:"file";s:43:"2021/02/화면-캡처-2021-02-02-152027.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:42:"화면-캡처-2021-02-02-152027-300x49.png";s:5:"width";i:300;s:6:"height";i:49;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:44:"화면-캡처-2021-02-02-152027-1024x167.png";s:5:"width";i:1024;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-02-152027-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-02-152027-768x125.png";s:5:"width";i:768;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-02-02-160230]]></title>
		<link>https://elvanov.com/2234/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-02-160230</link>
		<pubDate>Tue, 02 Feb 2021 07:03:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-160230.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2264</wp:post_id>
		<wp:post_date><![CDATA[2021-02-02 16:03:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-02 07:03:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-02 16:03:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-02 07:03:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-02-160230]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2234</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-160230.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/화면-캡처-2021-02-02-160230.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:439;s:6:"height";i:142;s:4:"file";s:43:"2021/02/화면-캡처-2021-02-02-160230.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:42:"화면-캡처-2021-02-02-160230-300x97.png";s:5:"width";i:300;s:6:"height";i:97;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-02-160230-150x142.png";s:5:"width";i:150;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20210213_1955247171]]></title>
		<link>https://elvanov.com/2286/kakaotalk_20210213_1955247171</link>
		<pubDate>Sat, 13 Feb 2021 10:59:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_1955247171.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2291</wp:post_id>
		<wp:post_date><![CDATA[2021-02-13 19:59:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-13 10:59:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-13 19:59:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-13 10:59:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20210213_1955247171]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2286</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_1955247171.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/KakaoTalk_20210213_1955247171.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1556;s:6:"height";i:788;s:4:"file";s:41:"2021/02/KakaoTalk_20210213_1955247171.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:41:"KakaoTalk_20210213_1955247171-300x152.jpg";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:42:"KakaoTalk_20210213_1955247171-1024x519.jpg";s:5:"width";i:1024;s:6:"height";i:519;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:41:"KakaoTalk_20210213_1955247171-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:41:"KakaoTalk_20210213_1955247171-768x389.jpg";s:5:"width";i:768;s:6:"height";i:389;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:42:"KakaoTalk_20210213_1955247171-1536x778.jpg";s:5:"width";i:1536;s:6:"height";i:778;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[KakaoTalk_20210213_212842217]]></title>
		<link>https://elvanov.com/2287/kakaotalk_20210213_212842217</link>
		<pubDate>Sat, 13 Feb 2021 12:31:20 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_212842217.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2294</wp:post_id>
		<wp:post_date><![CDATA[2021-02-13 21:31:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-13 12:31:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-13 21:31:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-13 12:31:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kakaotalk_20210213_212842217]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2287</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_212842217.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/KakaoTalk_20210213_212842217.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1187;s:6:"height";i:1276;s:4:"file";s:40:"2021/02/KakaoTalk_20210213_212842217.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:40:"KakaoTalk_20210213_212842217-279x300.jpg";s:5:"width";i:279;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:41:"KakaoTalk_20210213_212842217-953x1024.jpg";s:5:"width";i:953;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:40:"KakaoTalk_20210213_212842217-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:40:"KakaoTalk_20210213_212842217-768x826.jpg";s:5:"width";i:768;s:6:"height";i:826;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[api관리]]></title>
		<link>https://elvanov.com/2324/api%ea%b4%80%eb%a6%ac</link>
		<pubDate>Sat, 20 Feb 2021 02:48:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/api관리.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2325</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api%ea%b4%80%eb%a6%ac]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/api관리.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/api관리.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:21:"2021/02/api관리.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:21:"api관리-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"api관리-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"api관리-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"api관리-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"api관리-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[groups 기본 설정에서 공동작업 받은편지함]]></title>
		<link>https://elvanov.com/2324/groups-%ea%b8%b0%eb%b3%b8-%ec%84%a4%ec%a0%95%ec%97%90%ec%84%9c-%ea%b3%b5%eb%8f%99%ec%9e%91%ec%97%85-%eb%b0%9b%ec%9d%80%ed%8e%b8%ec%a7%80%ed%95%a8</link>
		<pubDate>Sat, 20 Feb 2021 02:48:04 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/groups-기본-설정에서-공동작업-받은편지함.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2326</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[groups-%ea%b8%b0%eb%b3%b8-%ec%84%a4%ec%a0%95%ec%97%90%ec%84%9c-%ea%b3%b5%eb%8f%99%ec%9e%91%ec%97%85-%eb%b0%9b%ec%9d%80%ed%8e%b8%ec%a7%80%ed%95%a8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/groups-기본-설정에서-공동작업-받은편지함.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/groups-기본-설정에서-공동작업-받은편지함.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:67:"2021/02/groups-기본-설정에서-공동작업-받은편지함.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:67:"groups-기본-설정에서-공동작업-받은편지함-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:68:"groups-기본-설정에서-공동작업-받은편지함-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:67:"groups-기본-설정에서-공동작업-받은편지함-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:67:"groups-기본-설정에서-공동작업-받은편지함-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:68:"groups-기본-설정에서-공동작업-받은편지함-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[scope 설정]]></title>
		<link>https://elvanov.com/2324/scope-%ec%84%a4%ec%a0%95</link>
		<pubDate>Sat, 20 Feb 2021 02:48:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/scope-설정.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2327</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scope-%ec%84%a4%ec%a0%95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/scope-설정.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/scope-설정.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:24:"2021/02/scope-설정.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:24:"scope-설정-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"scope-설정-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:24:"scope-설정-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"scope-설정-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:25:"scope-설정-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[workspace groups 설정]]></title>
		<link>https://elvanov.com/2324/workspace-groups-%ec%84%a4%ec%a0%95</link>
		<pubDate>Sat, 20 Feb 2021 02:48:06 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/workspace-groups-설정.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2328</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[workspace-groups-%ec%84%a4%ec%a0%95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/workspace-groups-설정.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/workspace-groups-설정.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:35:"2021/02/workspace-groups-설정.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:35:"workspace-groups-설정-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:36:"workspace-groups-설정-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:35:"workspace-groups-설정-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:35:"workspace-groups-설정-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:36:"workspace-groups-설정-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룹만들기0]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b00</link>
		<pubDate>Sat, 20 Feb 2021 02:48:07 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2329</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b00]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기0.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룹만들기0.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:405;s:4:"file";s:28:"2021/02/그룹만들기0.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:28:"그룹만들기0-300x261.png";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"그룹만들기0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룹만들기1]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b01</link>
		<pubDate>Sat, 20 Feb 2021 02:48:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2330</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룹만들기1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:957;s:6:"height";i:855;s:4:"file";s:28:"2021/02/그룹만들기1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:28:"그룹만들기1-300x268.png";s:5:"width";i:300;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"그룹만들기1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"그룹만들기1-768x686.png";s:5:"width";i:768;s:6:"height";i:686;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룹만들기2]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b02</link>
		<pubDate>Sat, 20 Feb 2021 02:48:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2331</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b9%eb%a7%8c%eb%93%a4%ea%b8%b02]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룹만들기2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:948;s:6:"height";i:944;s:4:"file";s:28:"2021/02/그룹만들기2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:28:"그룹만들기2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"그룹만들기2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"그룹만들기2-768x765.png";s:5:"width";i:768;s:6:"height";i:765;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룹소유자외부이메일설정]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b9%ec%86%8c%ec%9c%a0%ec%9e%90%ec%99%b8%eb%b6%80%ec%9d%b4%eb%a9%94%ec%9d%bc%ec%84%a4%ec%a0%95</link>
		<pubDate>Sat, 20 Feb 2021 02:48:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹소유자외부이메일설정.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2332</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b9%ec%86%8c%ec%9c%a0%ec%9e%90%ec%99%b8%eb%b6%80%ec%9d%b4%eb%a9%94%ec%9d%bc%ec%84%a4%ec%a0%95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹소유자외부이메일설정-e1613790349144.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룹소유자외부이메일설정-e1613790349144.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1872;s:6:"height";i:974;s:4:"file";s:63:"2021/02/그룹소유자외부이메일설정-e1613790349144.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:63:"그룹소유자외부이메일설정-e1613790349144-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:64:"그룹소유자외부이메일설정-e1613790349144-1024x533.png";s:5:"width";i:1024;s:6:"height";i:533;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:63:"그룹소유자외부이메일설정-e1613790349144-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:63:"그룹소유자외부이메일설정-e1613790349144-768x400.png";s:5:"width";i:768;s:6:"height";i:400;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:64:"그룹소유자외부이메일설정-e1613790349144-1536x799.png";s:5:"width";i:1536;s:6:"height";i:799;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:9:"full-orig";a:3:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:40:"그룹소유자외부이메일설정.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:48:"그룹소유자외부이메일설정-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:48:"그룹소유자외부이메일설정-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:17:"medium_large-orig";a:4:{s:4:"file";s:48:"그룹소유자외부이메일설정-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:10:"large-orig";a:4:{s:4:"file";s:49:"그룹소유자외부이메일설정-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"1536x1536-orig";a:4:{s:4:"file";s:49:"그룹소유자외부이메일설정-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[다른 이메일 주소 추가하는중]]></title>
		<link>https://elvanov.com/2324/%eb%8b%a4%eb%a5%b8-%ec%9d%b4%eb%a9%94%ec%9d%bc-%ec%a3%bc%ec%86%8c-%ec%b6%94%ea%b0%80%ed%95%98%eb%8a%94%ec%a4%91</link>
		<pubDate>Sat, 20 Feb 2021 02:48:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/다른-이메일-주소-추가하는중.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2333</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8b%a4%eb%a5%b8-%ec%9d%b4%eb%a9%94%ec%9d%bc-%ec%a3%bc%ec%86%8c-%ec%b6%94%ea%b0%80%ed%95%98%eb%8a%94%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/다른-이메일-주소-추가하는중.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/다른-이메일-주소-추가하는중.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:618;s:6:"height";i:563;s:4:"file";s:51:"2021/02/다른-이메일-주소-추가하는중.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:51:"다른-이메일-주소-추가하는중-300x273.png";s:5:"width";i:300;s:6:"height";i:273;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:51:"다른-이메일-주소-추가하는중-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[도메인 전체 위임]]></title>
		<link>https://elvanov.com/2324/%eb%8f%84%eb%a9%94%ec%9d%b8-%ec%a0%84%ec%b2%b4-%ec%9c%84%ec%9e%84</link>
		<pubDate>Sat, 20 Feb 2021 02:48:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/도메인-전체-위임.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2334</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 11:48:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 02:48:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8f%84%eb%a9%94%ec%9d%b8-%ec%a0%84%ec%b2%b4-%ec%9c%84%ec%9e%84]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/도메인-전체-위임.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/도메인-전체-위임.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:35:"2021/02/도메인-전체-위임.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:35:"도메인-전체-위임-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:36:"도메인-전체-위임-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:35:"도메인-전체-위임-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:35:"도메인-전체-위임-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:36:"도메인-전체-위임-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[이메일리시브테스트1]]></title>
		<link>https://elvanov.com/2324/%ec%9d%b4%eb%a9%94%ec%9d%bc%eb%a6%ac%ec%8b%9c%eb%b8%8c%ed%85%8c%ec%8a%a4%ed%8a%b81</link>
		<pubDate>Sat, 20 Feb 2021 02:48:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[관리자 개인 메일로 날라온 메일]]></excerpt:encoded>
		<wp:post_id>2335</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:28:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:28:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9d%b4%eb%a9%94%ec%9d%bc%eb%a6%ac%ec%8b%9c%eb%b8%8c%ed%85%8c%ec%8a%a4%ed%8a%b81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/이메일리시브테스트1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:897;s:6:"height";i:195;s:4:"file";s:40:"2021/02/이메일리시브테스트1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:39:"이메일리시브테스트1-300x65.png";s:5:"width";i:300;s:6:"height";i:65;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:40:"이메일리시브테스트1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:40:"이메일리시브테스트1-768x167.png";s:5:"width";i:768;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[이메일리시브테스트2]]></title>
		<link>https://elvanov.com/2324/%ec%9d%b4%eb%a9%94%ec%9d%bc%eb%a6%ac%ec%8b%9c%eb%b8%8c%ed%85%8c%ec%8a%a4%ed%8a%b82</link>
		<pubDate>Sat, 20 Feb 2021 02:48:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[그룹스로 날라온 메일]]></excerpt:encoded>
		<wp:post_id>2336</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 11:48:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 02:48:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:28:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:28:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9d%b4%eb%a9%94%ec%9d%bc%eb%a6%ac%ec%8b%9c%eb%b8%8c%ed%85%8c%ec%8a%a4%ed%8a%b82]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/이메일리시브테스트2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:682;s:6:"height";i:220;s:4:"file";s:40:"2021/02/이메일리시브테스트2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:39:"이메일리시브테스트2-300x97.png";s:5:"width";i:300;s:6:"height";i:97;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:40:"이메일리시브테스트2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룹소유자외부이메일설정-1]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b9%ec%86%8c%ec%9c%a0%ec%9e%90%ec%99%b8%eb%b6%80%ec%9d%b4%eb%a9%94%ec%9d%bc%ec%84%a4%ec%a0%95-1</link>
		<pubDate>Sat, 20 Feb 2021 03:04:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹소유자외부이메일설정-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2337</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:04:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:04:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:04:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:04:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b9%ec%86%8c%ec%9c%a0%ec%9e%90%ec%99%b8%eb%b6%80%ec%9d%b4%eb%a9%94%ec%9d%bc%ec%84%a4%ec%a0%95-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹소유자외부이메일설정-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룹소유자외부이메일설정-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:50:"2021/02/그룹소유자외부이메일설정-1.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:50:"그룹소유자외부이메일설정-1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:51:"그룹소유자외부이메일설정-1-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:50:"그룹소유자외부이메일설정-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:50:"그룹소유자외부이메일설정-1-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:51:"그룹소유자외부이메일설정-1-1536x864.png";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룸설정-기본설정-게시할 수 있는 사용자]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b8%ec%84%a4%ec%a0%95-%ea%b8%b0%eb%b3%b8%ec%84%a4%ec%a0%95-%ea%b2%8c%ec%8b%9c%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9a%a9%ec%9e%90</link>
		<pubDate>Sat, 20 Feb 2021 03:24:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룸설정-기본설정-게시할-수-있는-사용자.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[설정 하지 않았을 때]]></excerpt:encoded>
		<wp:post_id>2338</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:24:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:24:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:25:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:25:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b8%ec%84%a4%ec%a0%95-%ea%b8%b0%eb%b3%b8%ec%84%a4%ec%a0%95-%ea%b2%8c%ec%8b%9c%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9a%a9%ec%9e%90]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룸설정-기본설정-게시할-수-있는-사용자.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룸설정-기본설정-게시할-수-있는-사용자.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:513;s:6:"height";i:141;s:4:"file";s:68:"2021/02/그룸설정-기본설정-게시할-수-있는-사용자.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:67:"그룸설정-기본설정-게시할-수-있는-사용자-300x82.png";s:5:"width";i:300;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:68:"그룸설정-기본설정-게시할-수-있는-사용자-150x141.png";s:5:"width";i:150;s:6:"height";i:141;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[그룸설정-기본설정-게시할 수 있는 사용자2]]></title>
		<link>https://elvanov.com/2324/%ea%b7%b8%eb%a3%b8%ec%84%a4%ec%a0%95-%ea%b8%b0%eb%b3%b8%ec%84%a4%ec%a0%95-%ea%b2%8c%ec%8b%9c%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9a%a9%ec%9e%902</link>
		<pubDate>Sat, 20 Feb 2021 03:24:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룸설정-기본설정-게시할-수-있는-사용자2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[설정했을 때]]></excerpt:encoded>
		<wp:post_id>2339</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:24:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:24:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:25:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:25:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ea%b7%b8%eb%a3%b8%ec%84%a4%ec%a0%95-%ea%b8%b0%eb%b3%b8%ec%84%a4%ec%a0%95-%ea%b2%8c%ec%8b%9c%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9a%a9%ec%9e%902]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룸설정-기본설정-게시할-수-있는-사용자2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/그룸설정-기본설정-게시할-수-있는-사용자2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:501;s:6:"height";i:134;s:4:"file";s:69:"2021/02/그룸설정-기본설정-게시할-수-있는-사용자2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:68:"그룸설정-기본설정-게시할-수-있는-사용자2-300x80.png";s:5:"width";i:300;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:69:"그룸설정-기본설정-게시할-수-있는-사용자2-150x134.png";s:5:"width";i:150;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[hoho]]></title>
		<link>https://elvanov.com/2324/hoho</link>
		<pubDate>Sat, 20 Feb 2021 03:26:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/hoho.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2340</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:26:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:26:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:26:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:26:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hoho]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/hoho.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/hoho.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:374;s:6:"height";i:129;s:4:"file";s:16:"2021/02/hoho.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:16:"hoho-300x103.png";s:5:"width";i:300;s:6:"height";i:103;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:16:"hoho-150x129.png";s:5:"width";i:150;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[어나더1]]></title>
		<link>https://elvanov.com/2324/%ec%96%b4%eb%82%98%eb%8d%941</link>
		<pubDate>Sat, 20 Feb 2021 03:48:46 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2341</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:48:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:48:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:48:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:48:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%96%b4%eb%82%98%eb%8d%941]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/어나더1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:621;s:6:"height";i:312;s:4:"file";s:22:"2021/02/어나더1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"어나더1-300x151.png";s:5:"width";i:300;s:6:"height";i:151;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"어나더1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[어나더2]]></title>
		<link>https://elvanov.com/2324/%ec%96%b4%eb%82%98%eb%8d%942</link>
		<pubDate>Sat, 20 Feb 2021 03:49:11 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2342</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:49:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:49:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:49:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:49:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%96%b4%eb%82%98%eb%8d%942]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/어나더2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:622;s:6:"height";i:258;s:4:"file";s:22:"2021/02/어나더2.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"어나더2-300x124.png";s:5:"width";i:300;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"어나더2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[어나더3]]></title>
		<link>https://elvanov.com/2324/%ec%96%b4%eb%82%98%eb%8d%943</link>
		<pubDate>Sat, 20 Feb 2021 03:49:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2343</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:49:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:49:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:49:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:49:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%96%b4%eb%82%98%eb%8d%943]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/어나더3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:618;s:6:"height";i:318;s:4:"file";s:22:"2021/02/어나더3.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"어나더3-300x154.png";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"어나더3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[어나더4]]></title>
		<link>https://elvanov.com/2324/%ec%96%b4%eb%82%98%eb%8d%944</link>
		<pubDate>Sat, 20 Feb 2021 03:51:29 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2344</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:51:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:51:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 12:51:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 03:51:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%96%b4%eb%82%98%eb%8d%944]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/어나더4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:601;s:6:"height";i:232;s:4:"file";s:22:"2021/02/어나더4.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:22:"어나더4-300x116.png";s:5:"width";i:300;s:6:"height";i:116;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"어나더4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[약관동의]]></title>
		<link>https://elvanov.com/2324/%ec%95%bd%ea%b4%80%eb%8f%99%ec%9d%98</link>
		<pubDate>Sat, 20 Feb 2021 04:03:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/약관동의.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2347</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:03:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:03:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:03:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:03:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%95%bd%ea%b4%80%eb%8f%99%ec%9d%98]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/약관동의.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/약관동의.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:557;s:6:"height";i:636;s:4:"file";s:24:"2021/02/약관동의.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:24:"약관동의-263x300.png";s:5:"width";i:263;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:24:"약관동의-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[새-프로젝트]]></title>
		<link>https://elvanov.com/2324/%ec%83%88-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8</link>
		<pubDate>Sat, 20 Feb 2021 04:06:23 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/새-프로젝트.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2348</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:06:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:06:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:06:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:06:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%83%88-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/새-프로젝트.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/새-프로젝트.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:572;s:6:"height";i:407;s:4:"file";s:28:"2021/02/새-프로젝트.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:28:"새-프로젝트-300x213.png";s:5:"width";i:300;s:6:"height";i:213;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"새-프로젝트-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[api]]></title>
		<link>https://elvanov.com/2324/api</link>
		<pubDate>Sat, 20 Feb 2021 04:09:07 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/api.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2349</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:09:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:09:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:09:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:09:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/api.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/api.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:408;s:6:"height";i:357;s:4:"file";s:15:"2021/02/api.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"api-300x263.png";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"api-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[api-1]]></title>
		<link>https://elvanov.com/2324/api-1</link>
		<pubDate>Sat, 20 Feb 2021 04:11:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/api-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2350</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:11:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:11:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:11:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:11:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[api-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/api-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/api-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:408;s:6:"height";i:357;s:4:"file";s:17:"2021/02/api-1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"api-1-300x263.png";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"api-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[서비스-계정-만들기]]></title>
		<link>https://elvanov.com/2324/%ec%84%9c%eb%b9%84%ec%8a%a4-%ea%b3%84%ec%a0%95-%eb%a7%8c%eb%93%a4%ea%b8%b0</link>
		<pubDate>Sat, 20 Feb 2021 04:11:27 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/서비스-계정-만들기.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2351</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:11:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:11:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:11:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:11:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%84%9c%eb%b9%84%ec%8a%a4-%ea%b3%84%ec%a0%95-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/서비스-계정-만들기.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/서비스-계정-만들기.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:554;s:6:"height";i:644;s:4:"file";s:38:"2021/02/서비스-계정-만들기.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:38:"서비스-계정-만들기-258x300.png";s:5:"width";i:258;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"서비스-계정-만들기-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[도메인-수준-위임-api-계정-설정]]></title>
		<link>https://elvanov.com/2324/%eb%8f%84%eb%a9%94%ec%9d%b8-%ec%88%98%ec%a4%80-%ec%9c%84%ec%9e%84-api-%ea%b3%84%ec%a0%95-%ec%84%a4%ec%a0%95</link>
		<pubDate>Sat, 20 Feb 2021 04:15:54 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/도메인-수준-위임-api-계정-설정.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2352</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:15:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:15:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:15:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:15:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8f%84%eb%a9%94%ec%9d%b8-%ec%88%98%ec%a4%80-%ec%9c%84%ec%9e%84-api-%ea%b3%84%ec%a0%95-%ec%84%a4%ec%a0%95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/도메인-수준-위임-api-계정-설정.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/도메인-수준-위임-api-계정-설정.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:565;s:6:"height";i:248;s:4:"file";s:53:"2021/02/도메인-수준-위임-api-계정-설정.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:53:"도메인-수준-위임-api-계정-설정-300x132.png";s:5:"width";i:300;s:6:"height";i:132;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:53:"도메인-수준-위임-api-계정-설정-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image]]></title>
		<link>https://elvanov.com/2324/image-8</link>
		<pubDate>Sat, 20 Feb 2021 04:18:39 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2353</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:18:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:18:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:18:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:18:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:553;s:6:"height";i:353;s:4:"file";s:17:"2021/02/image.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:17:"image-300x192.png";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-02-20-131850]]></title>
		<link>https://elvanov.com/2324/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-20-131850</link>
		<pubDate>Sat, 20 Feb 2021 04:19:12 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-131850.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2354</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:19:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:19:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:19:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-20-131850]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-131850.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/화면-캡처-2021-02-20-131850.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:553;s:6:"height";i:353;s:4:"file";s:43:"2021/02/화면-캡처-2021-02-20-131850.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-20-131850-300x192.png";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-20-131850-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[클라이언트-ID-복사하기1]]></title>
		<link>https://elvanov.com/2324/%ed%81%b4%eb%9d%bc%ec%9d%b4%ec%96%b8%ed%8a%b8-id-%eb%b3%b5%ec%82%ac%ed%95%98%ea%b8%b01</link>
		<pubDate>Sat, 20 Feb 2021 04:23:23 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/클라이언트-ID-복사하기1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2355</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:23:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:23:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:23:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:23:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%81%b4%eb%9d%bc%ec%9d%b4%ec%96%b8%ed%8a%b8-id-%eb%b3%b5%ec%82%ac%ed%95%98%ea%b8%b01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/클라이언트-ID-복사하기1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/클라이언트-ID-복사하기1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:738;s:6:"height";i:145;s:4:"file";s:44:"2021/02/클라이언트-ID-복사하기1.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"클라이언트-ID-복사하기1-300x59.png";s:5:"width";i:300;s:6:"height";i:59;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:44:"클라이언트-ID-복사하기1-150x145.png";s:5:"width";i:150;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[화면-캡처-2021-02-20-133420]]></title>
		<link>https://elvanov.com/2324/%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-20-133420</link>
		<pubDate>Sat, 20 Feb 2021 04:34:43 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-133420.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2356</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 13:34:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 04:34:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 13:34:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 04:34:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%94%eb%a9%b4-%ec%ba%a1%ec%b2%98-2021-02-20-133420]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-133420.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/화면-캡처-2021-02-20-133420.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:468;s:6:"height";i:418;s:4:"file";s:43:"2021/02/화면-캡처-2021-02-20-133420.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-20-133420-300x268.png";s:5:"width";i:300;s:6:"height";i:268;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:43:"화면-캡처-2021-02-20-133420-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1]]></title>
		<link>https://elvanov.com/2370/1-3</link>
		<pubDate>Sat, 27 Feb 2021 10:57:40 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2379</wp:post_id>
		<wp:post_date><![CDATA[2021-02-27 19:57:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-27 10:57:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-27 19:57:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-27 10:57:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2370</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:820;s:6:"height";i:655;s:4:"file";s:13:"2021/02/1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:13:"1-300x240.png";s:5:"width";i:300;s:6:"height";i:240;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:13:"1-768x613.png";s:5:"width";i:768;s:6:"height";i:613;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2]]></title>
		<link>https://elvanov.com/2370/2-2</link>
		<pubDate>Sat, 27 Feb 2021 10:58:06 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/02/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2380</wp:post_id>
		<wp:post_date><![CDATA[2021-02-27 19:58:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-27 10:58:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-27 19:58:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-27 10:58:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2370</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/02/2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/02/2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:820;s:6:"height";i:655;s:4:"file";s:13:"2021/02/2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:13:"2-300x240.png";s:5:"width";i:300;s:6:"height";i:240;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:13:"2-768x613.png";s:5:"width";i:768;s:6:"height";i:613;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[스크린샷-2021-03-01-오후-12.52.24]]></title>
		<link>https://elvanov.com/2388/%e1%84%89%e1%85%b3%e1%84%8f%e1%85%b3%e1%84%85%e1%85%b5%e1%86%ab%e1%84%89%e1%85%a3%e1%86%ba-2021-03-01-%e1%84%8b%e1%85%a9%e1%84%92%e1%85%ae-12-52-24</link>
		<pubDate>Mon, 01 Mar 2021 04:29:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.52.24.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2389</wp:post_id>
		<wp:post_date><![CDATA[2021-03-01 13:29:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-01 04:29:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-01 13:29:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-01 04:29:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e1%84%89%e1%85%b3%e1%84%8f%e1%85%b3%e1%84%85%e1%85%b5%e1%86%ab%e1%84%89%e1%85%a3%e1%86%ba-2021-03-01-%e1%84%8b%e1%85%a9%e1%84%92%e1%85%ae-12-52-24]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.52.24.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/스크린샷-2021-03-01-오후-12.52.24.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1578;s:6:"height";i:1250;s:4:"file";s:75:"2021/03/스크린샷-2021-03-01-오후-12.52.24.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.52.24-300x238.png";s:5:"width";i:300;s:6:"height";i:238;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:76:"스크린샷-2021-03-01-오후-12.52.24-1024x811.png";s:5:"width";i:1024;s:6:"height";i:811;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.52.24-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.52.24-768x608.png";s:5:"width";i:768;s:6:"height";i:608;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:77:"스크린샷-2021-03-01-오후-12.52.24-1536x1217.png";s:5:"width";i:1536;s:6:"height";i:1217;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[스크린샷-2021-03-01-오후-12.53.25]]></title>
		<link>https://elvanov.com/2388/%e1%84%89%e1%85%b3%e1%84%8f%e1%85%b3%e1%84%85%e1%85%b5%e1%86%ab%e1%84%89%e1%85%a3%e1%86%ba-2021-03-01-%e1%84%8b%e1%85%a9%e1%84%92%e1%85%ae-12-53-25</link>
		<pubDate>Mon, 01 Mar 2021 04:30:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.53.25.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2390</wp:post_id>
		<wp:post_date><![CDATA[2021-03-01 13:30:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-01 04:30:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-01 13:30:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-01 04:30:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e1%84%89%e1%85%b3%e1%84%8f%e1%85%b3%e1%84%85%e1%85%b5%e1%86%ab%e1%84%89%e1%85%a3%e1%86%ba-2021-03-01-%e1%84%8b%e1%85%a9%e1%84%92%e1%85%ae-12-53-25]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.53.25.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/스크린샷-2021-03-01-오후-12.53.25.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1340;s:6:"height";i:1262;s:4:"file";s:75:"2021/03/스크린샷-2021-03-01-오후-12.53.25.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.53.25-300x283.png";s:5:"width";i:300;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:76:"스크린샷-2021-03-01-오후-12.53.25-1024x964.png";s:5:"width";i:1024;s:6:"height";i:964;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.53.25-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:75:"스크린샷-2021-03-01-오후-12.53.25-768x723.png";s:5:"width";i:768;s:6:"height";i:723;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Screenshot-from-2021-03-03-09-06-41]]></title>
		<link>https://elvanov.com/2388/screenshot-from-2021-03-03-09-06-41</link>
		<pubDate>Wed, 03 Mar 2021 00:07:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-09-06-41.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2397</wp:post_id>
		<wp:post_date><![CDATA[2021-03-03 09:07:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-03 00:07:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-03 09:07:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-03 00:07:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screenshot-from-2021-03-03-09-06-41]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-09-06-41.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Screenshot-from-2021-03-03-09-06-41.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:428;s:6:"height";i:446;s:4:"file";s:47:"2021/03/Screenshot-from-2021-03-03-09-06-41.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:47:"Screenshot-from-2021-03-03-09-06-41-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:47:"Screenshot-from-2021-03-03-09-06-41-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Screenshot-from-2021-03-07-22-38-18]]></title>
		<link>https://elvanov.com/2384/screenshot-from-2021-03-07-22-38-18</link>
		<pubDate>Sun, 07 Mar 2021 13:38:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-07-22-38-18.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2404</wp:post_id>
		<wp:post_date><![CDATA[2021-03-07 22:38:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-07 13:38:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-07 22:38:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-07 13:38:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screenshot-from-2021-03-07-22-38-18]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-07-22-38-18.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Screenshot-from-2021-03-07-22-38-18.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:413;s:6:"height";i:26;s:4:"file";s:47:"2021/03/Screenshot-from-2021-03-07-22-38-18.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:46:"Screenshot-from-2021-03-07-22-38-18-300x19.png";s:5:"width";i:300;s:6:"height";i:19;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:46:"Screenshot-from-2021-03-07-22-38-18-150x26.png";s:5:"width";i:150;s:6:"height";i:26;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Peek-2021-03-07-22-56]]></title>
		<link>https://elvanov.com/2384/peek-2021-03-07-22-56</link>
		<pubDate>Sat, 13 Mar 2021 04:11:56 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/Peek-2021-03-07-22-56.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2423</wp:post_id>
		<wp:post_date><![CDATA[2021-03-13 13:11:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-13 04:11:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-13 13:11:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-13 04:11:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[peek-2021-03-07-22-56]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2384</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/Peek-2021-03-07-22-56.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Peek-2021-03-07-22-56.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:684;s:6:"height";i:561;s:4:"file";s:33:"2021/03/Peek-2021-03-07-22-56.gif";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:33:"Peek-2021-03-07-22-56-300x246.gif";s:5:"width";i:300;s:6:"height";i:246;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:33:"Peek-2021-03-07-22-56-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-03-16_01-15-26]]></title>
		<link>https://elvanov.com/2425/photo_2021-03-16_01-15-26</link>
		<pubDate>Mon, 15 Mar 2021 16:15:54 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-26.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2426</wp:post_id>
		<wp:post_date><![CDATA[2021-03-16 01:15:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-15 16:15:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-16 01:15:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-15 16:15:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-03-16_01-15-26]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2425</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-26.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/photo_2021-03-16_01-15-26.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:960;s:4:"file";s:37:"2021/03/photo_2021-03-16_01-15-26.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:37:"photo_2021-03-16_01-15-26-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:38:"photo_2021-03-16_01-15-26-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:37:"photo_2021-03-16_01-15-26-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:37:"photo_2021-03-16_01-15-26-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Nocj4]]></title>
		<link>https://elvanov.com/2425/nocj4</link>
		<pubDate>Mon, 15 Mar 2021 16:21:48 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/Nocj4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2427</wp:post_id>
		<wp:post_date><![CDATA[2021-03-16 01:21:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-15 16:21:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-16 01:21:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-15 16:21:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nocj4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2425</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/Nocj4.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Nocj4.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2028;s:6:"height";i:560;s:4:"file";s:17:"2021/03/Nocj4.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:16:"Nocj4-300x83.jpg";s:5:"width";i:300;s:6:"height";i:83;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"Nocj4-1024x283.jpg";s:5:"width";i:1024;s:6:"height";i:283;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:17:"Nocj4-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:17:"Nocj4-768x212.jpg";s:5:"width";i:768;s:6:"height";i:212;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:18:"Nocj4-1536x424.jpg";s:5:"width";i:1536;s:6:"height";i:424;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-03-16_01-15-30]]></title>
		<link>https://elvanov.com/2425/photo_2021-03-16_01-15-30</link>
		<pubDate>Mon, 15 Mar 2021 16:47:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-30.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2428</wp:post_id>
		<wp:post_date><![CDATA[2021-03-16 01:47:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-15 16:47:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-16 01:47:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-15 16:47:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-03-16_01-15-30]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2425</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-30.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/photo_2021-03-16_01-15-30.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:1280;s:4:"file";s:37:"2021/03/photo_2021-03-16_01-15-30.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:37:"photo_2021-03-16_01-15-30-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:38:"photo_2021-03-16_01-15-30-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:37:"photo_2021-03-16_01-15-30-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:38:"photo_2021-03-16_01-15-30-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Screenshot-from-2021-03-17-23-59-36-2]]></title>
		<link>https://elvanov.com/2433/screenshot-from-2021-03-17-23-59-36-2</link>
		<pubDate>Wed, 17 Mar 2021 15:03:22 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-17-23-59-36-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2434</wp:post_id>
		<wp:post_date><![CDATA[2021-03-18 00:03:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-17 15:03:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-18 00:03:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-17 15:03:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[screenshot-from-2021-03-17-23-59-36-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2433</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-17-23-59-36-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/03/Screenshot-from-2021-03-17-23-59-36-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:756;s:6:"height";i:1080;s:4:"file";s:49:"2021/03/Screenshot-from-2021-03-17-23-59-36-2.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:49:"Screenshot-from-2021-03-17-23-59-36-2-210x300.png";s:5:"width";i:210;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Screenshot-from-2021-03-17-23-59-36-2-717x1024.png";s:5:"width";i:717;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:49:"Screenshot-from-2021-03-17-23-59-36-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[photo_2021-04-09_13-42-312]]></title>
		<link>https://elvanov.com/2535/photo_2021-04-09_13-42-312</link>
		<pubDate>Fri, 09 Apr 2021 04:43:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/04/photo_2021-04-09_13-42-312.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2536</wp:post_id>
		<wp:post_date><![CDATA[2021-04-09 13:43:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-09 04:43:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-09 13:43:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-09 04:43:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo_2021-04-09_13-42-312]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2535</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/04/photo_2021-04-09_13-42-312.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/04/photo_2021-04-09_13-42-312.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:494;s:6:"height";i:322;s:4:"file";s:38:"2021/04/photo_2021-04-09_13-42-312.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:38:"photo_2021-04-09_13-42-312-300x196.jpg";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"photo_2021-04-09_13-42-312-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[개인 정보 보호 정책]]></title>
		<link>https://elvanov.com/?page_id=3</link>
		<pubDate>Sun, 17 Mar 2019 11:05:24 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">http://elvanov.com/elvanov/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>회사 소개</h2><!-- /wp:heading --><!-- wp:paragraph --><p>우리의 웹사이트 주소: http://elvanov.com/elvanov.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>수집하는 개인 데이터 종류 및 수집 이유</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>댓글</h3><!-- /wp:heading --><!-- wp:paragraph --><p>방문자가 사이트에서 댓글을 남기면 스팸 감지를 위해 댓글 폼에 보여지는 데이터, 방문자의 IP 주소, 브라우저 사용자 에이전트 스트링을 수집합니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>그라바타를 사용할 경우 이를 감지하기 위해 이메일 주소(해시로도 불려짐)에서 생성된 익명화된 스트링이 그라바타 서비스에 제공됩니다. 그라바타 서비스 개인정보 처리방침은 https://automattic.com/privacy/. 에서 가능합니다. 댓글의 승인 후에 프로필 사진이 댓글에 공개돼 볼 수 있습니다.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>미디어</h3><!-- /wp:heading --><!-- wp:paragraph --><p>웹사이트에 이미지를 업로드할 경우 임베드 위치 데이터(EXIF GPS)가 있는 이미지 업로드를 피해야 합니다. 웹사이트 방문자는 웹사이트의 이미지로부터 모든 위치 데이터를 다운로드 및 추출이 가능합니다.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>컨택트 폼</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>쿠키</h3><!-- /wp:heading --><!-- wp:paragraph --><p>우리 사이트에 댓글을 남기면 이름, 이메일 주소, 웹사이트를 쿠키로 저장할지 결정할 수 있습니다. 이것은 편의를 위한 것으로 다른 댓글을 추가할 때 다시 상세 정보를 입력하지 않아도 되는 것입니다. 이 쿠키는 1년간 지속됩니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>계정이 있으면서 이 사이트에 로그인하면 브라우저가 쿠키를 수용하는지 여부를 결정하기 위해 임시 쿠키를 설정합니다. 이 쿠키는 아무런 개인적인 데이터를 포함하지 않으며 브라우저를 닫으면 제거됩니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>로그인하면 로그인 정보와 화면 표시 선택을 저장하기 위해 몇 가지 쿠키를 설정합니다. 로그인 쿠키는 이틀간 지속됩니다. 화면 옵션 쿠키는 1년간 지속됩니다. &quot;기억하기&quot;를 선택하면 로그인은 2주 지속됩니다. 계정을 로그아웃하면 로그인 쿠키는 제거됩니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>글을 편집하거나 발행하면 추가적인 쿠키가 자신의 웹브라우저에 저장됩니다. 이 쿠키는 비개인적인 데이터를 포함하며 단순히 편집한 글 ID를 지시합니다. 1일 후에 만료됩니다.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>다른 웹사이트로부터 임베드된 콘텐츠</h3><!-- /wp:heading --><!-- wp:paragraph --><p>이 사이트의 글은 임베드된 콘텐츠(예: 비디오, 이미지, 기사 등)가 포함될 수도 있습니다. 다른 웹사이트로부터 임베드된 콘텐츠는 방문자가 해당 다른 웹사이트를 방문한 것과 동일하게 작동됩니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>이들 웹사이트는 개인 데이터를 수집하거나 쿠키를 사용하거나 추가적인 제 3자 트래킹을 임베드 하거나 해당 임베드된 콘텐츠와 상호작용을 모니터 할 수도 있습니다. 여기에는 계정을 가지고 해당 웹사이트에 로그인했을 경우 임베드된 콘텐츠와 상호작용하는 추적이 포함됩니다.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>분석</h3><!-- /wp:heading --><!-- wp:heading --><h2>데이터를 공유하는 자</h2><!-- /wp:heading --><!-- wp:heading --><h2>데이터를 보존하는 기간</h2><!-- /wp:heading --><!-- wp:paragraph --><p>댓글을 남길 경우 댓글과 해당 메타데이터는 영구히 보존됩니다. 이것은 댓글에 관련 댓글이 있을 경우 검토중으로 있는 것을 방지하기 위해 인지하고 자동으로 승인하기 위해서 입니다.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>우리의 웹사이트에 회원가입한 사용자에 대해서 우리는 회원이 자신의 프로필에 제공한 개인정보를 저장합니다. 모든 사용자는 자신의 개인 정보를 언제든(회원이 자신의 사용자명을 변경할 수 없을 때는 제외) 열람하거나 편집, 또는 삭제할 수 있습니다. 웹사이트 관리자도 해당 정보를 보거나 편집할 수 있습니다.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>데이터에 관해 갖는 권리의 종류</h2><!-- /wp:heading --><!-- wp:paragraph --><p>이 사이트에 계정을 갖고 있거나 댓글을 남길 경우 우리가 가지고 있는 개인 데이터의 내보내기 파일을 요청할 수 있습니다. 여기에는 우리에게 제공한 모든 데이터를 포함합니다. 또한 우리가 가지고 있는 모든 개인 데이터를 제거하도록 요청할 수도 있습니다. 여기에는 관리용, 법률적인 또는 보안 목적으로 보존할 의무가 있는 데이터는 포함하지 않습니다.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>데이터를 보내는 장소</h2><!-- /wp:heading --><!-- wp:paragraph --><p>방문자 댓글은 자동화된 스팸 감지 서비스를 통해 점검될 수도 있습니다.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>연락 정보</h2><!-- /wp:heading --><!-- wp:heading --><h2>추가 정보</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>데이터를 보호하는 방법</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>데이터 위반 과정 종류</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>데이터를 수집하는 제 3자의 종류</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>사용자 데이터를 통해 작업하는 자동화된 의사결정 그리고/또는 프로파일링 종류</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>산업 규제 표시 권장사항</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2019-03-17 20:05:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-17 11:05:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-03-17 20:05:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-03-17 11:05:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[About]]></title>
		<link>https://elvanov.com/about</link>
		<pubDate>Mon, 29 Apr 2019 10:24:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?page_id=38</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Blog~~~</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 19:24:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 10:24:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-14 13:01:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-14 04:01:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[홈]]></title>
		<link>https://elvanov.com/40</link>
		<pubDate>Mon, 29 Apr 2019 10:25:22 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 19:25:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 10:25:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:23:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%99%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="ver1"><![CDATA[ver1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://elvanov.com/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://elvanov.com/43</link>
		<pubDate>Mon, 29 Apr 2019 10:25:22 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 19:25:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 10:25:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:23:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[43]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="ver1"><![CDATA[ver1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[python contents]]></title>
		<link>https://elvanov.com/python-contents</link>
		<pubDate>Wed, 18 Dec 2019 07:40:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?page_id=240</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:list {"ordered":true,"start":0} -->
<ol start="0"><li><strong><a href="https://elvanov.com/110">프롤로그</a></strong></li><li><strong>개발 첫걸음</strong><ol><li><a href="https://elvanov.com/120">컴퓨터 구성요소 – 컴퓨터는 어떤 걸 할 수 있나?</a></li><li><a href="https://elvanov.com/128">개발과 관련된 용어</a></li><li><a href="https://elvanov.com/131">파이썬의 선택 – 왜 파이썬인가?</a></li><li><a href="https://elvanov.com/1040">파이썬 설치 – Hello World 출력하기</a></li><li><a href="https://elvanov.com/1084">Visual Studio Code 의 편리한 기능</a></li><li><a href="https://elvanov.com/1122">REPL과 콘솔 창 – 파이썬 동작시키기</a></li></ol></li><li><strong>파이썬 기초</strong><ol><li><a href="https://elvanov.com/135">기초 입출력 – 소통하기</a></li><li><a href="https://elvanov.com/143">변수와 대입 – 기억하기</a></li><li><a href="https://elvanov.com/154">연산자 – 계산하기</a></li><li><a href="https://elvanov.com/217">조건문 – 분기를 만들기</a></li><li><a href="https://elvanov.com/257">반복문 – 비슷한 작업을 반복하기</a></li><li><a href="/1809">반복문 코딩하기</a></li><li><a href="https://elvanov.com/273">변수와 리스트 – 비슷한 변수들을 묶기</a></li><li><a href="https://elvanov.com/545">for, range – 리스트의 항목을 다루기</a></li><li><a href="https://elvanov.com/371">함수와 메소드의 호출 – 편리한 기능 이용하기</a></li><li><a href="https://elvanov.com/457">모듈 설치와 사용 – 유용한 기능 끌어다 쓰기</a></li><li><a href="https://elvanov.com/413">문자열 – 텍스트 다루기</a></li></ol></li><li><strong>파이썬 중급</strong><ol><li><a href="https://elvanov.com/270">함수를 직접 만들기 – 자주 쓰는 기능을 묶기</a></li><li><a href="https://elvanov.com/1357">딕셔너리, 튜플, 세트 – 변수를 다양한 방법으로 묶기</a></li><li><a href="https://elvanov.com/182">클래스와 객체 – 변수를 사람으로 진화시키기</a></li></ol><ol><li><a href="https://elvanov.com/981">상속 – 클래스를 확장하기</a></li><li><a href="https://elvanov.com/599">정체성과 동질성 – 객체의 성질</a></li><li><a href="https://elvanov.com/1265">특별 메소드와 연산자 – 파이썬의 내부 작동방식 이해하기</a></li><li><a href="https://elvanov.com/304">다양한 함수 인수 – 유연한 함수 만들기</a></li><li><a href="/1705">슬라이싱 – 리스트 간편하게 접근하기</a></li><li><a href="https://elvanov.com/1713">지능형 리스트(List Comprehension) – 리스트 갖고 놀기</a></li><li><a href="https://elvanov.com/1972">namedtuple - 데이터 묶음 손쉽게 만들기</a></li><li><a href="/1770">조건 표현식 (Conditional Expression) - 간단한 분기 나타내기</a></li><li><a href="https://elvanov.com/1034">코드 스타일 - 코드의 일관성 유지하기</a></li><li><a href="https://elvanov.com/622">명령문, 표현식 – 문법을 이루는 것들</a></li><li>본격적인 검색 해보기</li></ol></li><li><strong>파이썬 고급</strong><ol><li>일급 함수 다루기</li><li><a href="https://elvanov.com/1620"><code>NotImplementedError</code>와 <code>NotImplemented</code></a></li><li><a href="https://elvanov.com/1631">어노테이션 – 수월하게 프로그래밍하기</a></li></ol><ol><li>내장 함수 톺아보기</li><li><a href="https://elvanov.com/1326">예외와 에러 – 예상치 못한 상황에 대응하기 (v0.1)</a></li><li>변수의 범위 – 이름 검색의 범위</li></ol></li><li><strong>파이썬 심화</strong><ol><li>시퀀스와 반복자 – 반복과 순회를 자유자재로 다루기</li><li>데코레이터 – 함수의 기능을 강화하기</li><li>프로퍼티</li><li>제너레이터</li><li>async와 await</li><li>객체로서의 클래스 – 클래스를 동적으로 정의하기</li></ol></li><li><strong>파이썬 프로젝트 실습</strong><ol><li><a href="https://elvanov.com/1441">원카드 게임 만들기 (1)</a></li><li><a href="https://elvanov.com/1517">원카드 게임 만들기 (2)</a></li><li><a href="https://elvanov.com/1688">원카드 게임 만들기 (3) (작성중)</a></li><li>턴제 자동 전투 게임 만들기 (작성중)</li></ol></li><li><strong>실전 (파이썬 외적인 것들)</strong><ol><li><a href="https://elvanov.com/1160">정규표현식 – 문자열을 검색하고 치환하기 (작성중)</a></li><li>유니코드 – 컴퓨터에서 문자를 표기하는 방법</li><li>html, css, 인터넷 – 자동화 첫 걸음 내딛기</li><li>네트워크 – 인터넷으로 통신하는 방법</li><li>문서 – 문맥을 읽어보기</li></ol></li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 16:40:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 07:40:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-26 13:52:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-26 04:52:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python-contents]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌]]></title>
		<link>https://elvanov.com/1158</link>
		<pubDate>Tue, 14 Jan 2020 14:13:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1158</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1158</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 23:13:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 14:13:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:23:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="ver1"><![CDATA[ver1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[post]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[110]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://elvanov.com/1863</link>
		<pubDate>Mon, 04 May 2020 07:39:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1863</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1863</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 16:39:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 07:39:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:23:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1863]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="ver1"><![CDATA[ver1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[카테고리]]></title>
		<link>https://elvanov.com/categories</link>
		<pubDate>Fri, 29 Jan 2021 08:22:03 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?page_id=2251</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:categories {"showPostCounts":true} /-->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2251</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 17:22:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 08:22:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:22:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:22:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[categories]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[모든 카테고리]]></title>
		<link>https://elvanov.com/2253</link>
		<pubDate>Fri, 29 Jan 2021 08:23:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2253</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2253</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 17:23:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-29 17:23:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-29 08:23:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%aa%a8%eb%93%a0-%ec%b9%b4%ed%85%8c%ea%b3%a0%eb%a6%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="ver1"><![CDATA[ver1]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[2251]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0307-2]]></title>
		<link>https://elvanov.com/2546/img_0307-2</link>
		<pubDate>Wed, 21 Apr 2021 12:43:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0307-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2549</wp:post_id>
		<wp:post_date><![CDATA[2021-04-21 21:43:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-21 12:43:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-21 21:43:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-21 12:43:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0307-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2546</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0307-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/04/IMG_0307-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1966;s:6:"height";i:1245;s:4:"file";s:22:"2021/04/IMG_0307-2.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:22:"IMG_0307-2-300x190.jpg";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"IMG_0307-2-1024x648.jpg";s:5:"width";i:1024;s:6:"height";i:648;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"IMG_0307-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:22:"IMG_0307-2-768x486.jpg";s:5:"width";i:768;s:6:"height";i:486;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:23:"IMG_0307-2-1536x973.jpg";s:5:"width";i:1536;s:6:"height";i:973;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0308-2]]></title>
		<link>https://elvanov.com/2546/img_0308-2</link>
		<pubDate>Wed, 21 Apr 2021 12:44:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0308-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2550</wp:post_id>
		<wp:post_date><![CDATA[2021-04-21 21:44:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-21 12:44:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-21 21:44:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-21 12:44:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0308-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2546</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0308-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/04/IMG_0308-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1697;s:6:"height";i:1452;s:4:"file";s:22:"2021/04/IMG_0308-2.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:22:"IMG_0308-2-300x257.jpg";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"IMG_0308-2-1024x876.jpg";s:5:"width";i:1024;s:6:"height";i:876;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"IMG_0308-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:22:"IMG_0308-2-768x657.jpg";s:5:"width";i:768;s:6:"height";i:657;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:24:"IMG_0308-2-1536x1314.jpg";s:5:"width";i:1536;s:6:"height";i:1314;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0368]]></title>
		<link>https://elvanov.com/2597/img_0368</link>
		<pubDate>Fri, 30 Jul 2021 05:08:46 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0368.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2600</wp:post_id>
		<wp:post_date><![CDATA[2021-07-30 14:08:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-30 05:08:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-30 14:08:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-30 05:08:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0368]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2597</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0368.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/IMG_0368.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1647;s:6:"height";i:1064;s:4:"file";s:21:"2021/07/IMG_0368.jpeg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:21:"IMG_0368-300x194.jpeg";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"IMG_0368-1024x662.jpeg";s:5:"width";i:1024;s:6:"height";i:662;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"IMG_0368-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_0368-768x496.jpeg";s:5:"width";i:768;s:6:"height";i:496;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"IMG_0368-1536x992.jpeg";s:5:"width";i:1536;s:6:"height";i:992;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0369]]></title>
		<link>https://elvanov.com/2597/img_0369</link>
		<pubDate>Fri, 30 Jul 2021 06:53:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0369.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2601</wp:post_id>
		<wp:post_date><![CDATA[2021-07-30 15:53:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-30 06:53:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-30 15:53:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-30 06:53:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0369]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2597</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0369.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/IMG_0369.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2044;s:6:"height";i:1053;s:4:"file";s:21:"2021/07/IMG_0369.jpeg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:21:"IMG_0369-300x155.jpeg";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"IMG_0369-1024x528.jpeg";s:5:"width";i:1024;s:6:"height";i:528;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"IMG_0369-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_0369-768x396.jpeg";s:5:"width";i:768;s:6:"height";i:396;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"IMG_0369-1536x791.jpeg";s:5:"width";i:1536;s:6:"height";i:791;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0370]]></title>
		<link>https://elvanov.com/2597/img_0370</link>
		<pubDate>Sat, 31 Jul 2021 03:57:43 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0370.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2612</wp:post_id>
		<wp:post_date><![CDATA[2021-07-31 12:57:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-31 03:57:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-31 12:57:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-31 03:57:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0370]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2597</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0370.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/07/IMG_0370.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1587;s:6:"height";i:1212;s:4:"file";s:21:"2021/07/IMG_0370.jpeg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:21:"IMG_0370-300x229.jpeg";s:5:"width";i:300;s:6:"height";i:229;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"IMG_0370-1024x782.jpeg";s:5:"width";i:1024;s:6:"height";i:782;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"IMG_0370-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_0370-768x587.jpeg";s:5:"width";i:768;s:6:"height";i:587;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:23:"IMG_0370-1536x1173.jpeg";s:5:"width";i:1536;s:6:"height";i:1173;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[123]]></title>
		<link>https://elvanov.com/2277/attachment/123</link>
		<pubDate>Sun, 01 Aug 2021 07:07:21 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/08/123.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2627</wp:post_id>
		<wp:post_date><![CDATA[2021-08-01 16:07:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-01 07:07:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-01 16:07:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-01 07:07:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[123]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2277</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/08/123.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/08/123.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:485;s:6:"height";i:366;s:4:"file";s:15:"2021/08/123.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"123-300x226.png";s:5:"width";i:300;s:6:"height";i:226;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:15:"123-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0377]]></title>
		<link>https://elvanov.com/2597/img_0377</link>
		<pubDate>Sat, 11 Sep 2021 01:05:35 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/09/IMG_0377.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2646</wp:post_id>
		<wp:post_date><![CDATA[2021-09-11 10:05:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-11 01:05:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-11 10:05:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-11 01:05:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0377]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2597</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/09/IMG_0377.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1701;s:6:"height";i:1246;s:4:"file";s:20:"2021/09/IMG_0377.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:20:"IMG_0377-300x220.jpg";s:5:"width";i:300;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_0377-1024x750.jpg";s:5:"width";i:1024;s:6:"height";i:750;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_0377-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"IMG_0377-768x563.jpg";s:5:"width";i:768;s:6:"height";i:563;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"IMG_0377-1536x1125.jpg";s:5:"width";i:1536;s:6:"height";i:1125;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/09/IMG_0377.jpg]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[1]]></title>
		<link>https://elvanov.com/2664/1-4</link>
		<pubDate>Sat, 06 Nov 2021 12:02:50 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/11/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2666</wp:post_id>
		<wp:post_date><![CDATA[2021-11-06 21:02:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-06 12:02:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-06 21:02:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-06 12:02:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2664</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/11/1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/11/1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:916;s:6:"height";i:252;s:4:"file";s:13:"2021/11/1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:12:"1-300x83.png";s:5:"width";i:300;s:6:"height";i:83;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:13:"1-768x211.png";s:5:"width";i:768;s:6:"height";i:211;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2]]></title>
		<link>https://elvanov.com/2664/2-3</link>
		<pubDate>Sat, 06 Nov 2021 12:02:53 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2021/11/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2667</wp:post_id>
		<wp:post_date><![CDATA[2021-11-06 21:02:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-06 12:02:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-06 21:02:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-06 12:02:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2664</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2021/11/2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/11/2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1216;s:6:"height";i:254;s:4:"file";s:13:"2021/11/2.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:12:"2-300x63.png";s:5:"width";i:300;s:6:"height";i:63;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:14:"2-1024x214.png";s:5:"width";i:1024;s:6:"height";i:214;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:13:"2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:13:"2-768x160.png";s:5:"width";i:768;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IMG_0387]]></title>
		<link>https://elvanov.com/2682/img_0387</link>
		<pubDate>Sun, 23 Jan 2022 06:45:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2022/01/IMG_0387.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2683</wp:post_id>
		<wp:post_date><![CDATA[2022-01-23 15:45:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-01-23 06:45:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-01-23 15:45:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-01-23 06:45:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0387]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2682</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2022/01/IMG_0387.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2022/01/IMG_0387.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:726;s:6:"height";i:1410;s:4:"file";s:20:"2022/01/IMG_0387.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:20:"IMG_0387-154x300.jpg";s:5:"width";i:154;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_0387-527x1024.jpg";s:5:"width";i:527;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_0387-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Untitled]]></title>
		<link>https://elvanov.com/2682/untitled</link>
		<pubDate>Sun, 23 Jan 2022 06:46:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/elvanov/wp-content/uploads/2022/01/Untitled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2684</wp:post_id>
		<wp:post_date><![CDATA[2022-01-23 15:46:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-01-23 06:46:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-01-23 15:46:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-01-23 06:46:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2682</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://elvanov.com/elvanov/wp-content/uploads/2022/01/Untitled.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2022/01/Untitled.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2312;s:6:"height";i:1534;s:4:"file";s:20:"2022/01/Untitled.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:20:"Untitled-300x199.png";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"Untitled-1024x679.png";s:5:"width";i:1024;s:6:"height";i:679;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"Untitled-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"Untitled-768x510.png";s:5:"width";i:768;s:6:"height";i:510;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:22:"Untitled-1536x1019.png";s:5:"width";i:1536;s:6:"height";i:1019;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:22:"Untitled-2048x1359.png";s:5:"width";i:2048;s:6:"height";i:1359;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[강제로 https로 접속하도록 하기 (.htaccess 수정)]]></title>
		<link>https://elvanov.com/35</link>
		<pubDate>Mon, 29 Apr 2019 10:22:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>http로 들어온 사람들을 https로 강제로 들어오게 하고 싶다면? .htaccess 파일을 편집하면 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래는  <a href="https://blog.lael.be/post/1130">https://blog.lael.be/post/1130</a> 에서 가지고 온 코드이다. 주석을 떼서 사용하면 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;IfModule mod_rewrite.c>
RewriteEngine on
 
RewriteRule ^ - [E=protossl]
RewriteCond %{HTTPS} on
RewriteRule ^ - [E=protossl:s]
 
# https 강제이동.
# RewriteCond %{HTTPS} !=on
# RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
 
# www 강제로 붙이기.
# RewriteCond %{HTTP_HOST} .
# RewriteCond %{HTTP_HOST} !^www\. [NC]
# RewriteRule ^ http%{ENV:protossl}://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
 
# www 가 붙어있으면 떼기.
# RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
# RewriteRule ^ http%{ENV:protossl}://%1%{REQUEST_URI} [L,R=301]
 
&lt;/IfModule></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2019-04-29 19:22:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-29 10:22:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 19:17:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 10:17:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[htaccess-%ec%88%98%ec%a0%95%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="htaccess"><![CDATA[htaccess]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[워드프레스 초기화 순서]]></title>
		<link>https://elvanov.com/45</link>
		<pubDate>Tue, 30 Apr 2019 02:44:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>개요</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>워드프레스에서 실행되는 순서가 알아야 알맞게 코딩을 할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>초기화(Initialisation)</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>기본 상수 정의 : <code>wp-config.php</code> 파일 실행 </li><li>파일이 존재하면, <code>wp-content/advanced-cache.php</code> 파일 실행</li><li>데이터베이스 연결 : 파일이 존재하면, <code>wp-content/db.php</code> 파일 실행</li><li>오브젝트 캐시 로드 (<code>object-cache.php</code>, 없을 시 <code>wp-include/cache.php</code> 파일 실행)</li><li>(멀티사이트의 경우) 파일이 존재하면, <code>wp-content/sunrise.php</code> 실행</li><li>l10n 라이브러리 로딩</li><li>mu 플러그인 (<a href="https://codex.wordpress.org/Must_Use_Plugins">Must Use Plugins</a>) 로딩</li><li><code>do_action('muplugins_loaded')</code> 액션 후크 실행 (mu 플러그인에서 밖에 접근 안 됨)</li><li>활성화된 플러그인 로딩</li><li><code>pluggables.php</code> 파일 로딩</li><li><code>do_action('plugins_loaded')</code> 액션 후크 실행 (플러그인에서 가장 먼저 접근가능한 후크)</li><li><code>rewrite rules</code> 로딩</li><li><code>$wp_query</code>, <code>$wp_rewrite</code>, <code>$wp</code> 인스턴스화</li><li><code>do_action('setup_theme')</code> 액션 후크 실행</li><li>자식 테마의 <code>functions.php</code> 파일 실행</li><li>부모 테마의 <code>functions.php</code> 파일 실행 <code>do_action('after_setup_theme')</code> 액션 후크 실행 (테마에서 가장 먼저 접근가능한 후크)</li><li>현재 사용자 객체 초기화</li><li><code>do_action('init')</code> 실행</li><li>위젯 등록 (<code>do_action('widget_init')</code> 액션 후크 실행됨)</li><li><code>wp()</code> 함수 실행 (<code>$wp->main()</code> 함수 실행됨)</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>요청(Request)</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>$wp->parse_request()<ol><li>rewrite rules 를 탐색한다.</li><li>'query_vars'에 추가된 필터를 적용시킨다. (apply_filters() 함수 실행) </li><li>query_vars에 $_POST 값, $_GET 값, 덮어쓴 변수들을 채워넣는다.</li><li>'request'의 필터를 적용시킨다.</li><li>do_action_ref_array???</li></ol></li><li>do_action_ref_array() 'WP' 객체로.??</li><li></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2019-04-30 11:44:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-30 02:44:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 17:20:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 08:20:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%84%eb%a0%88%ec%8a%a4-%ed%95%a8%ec%88%98-%ec%8b%a4%ed%96%89-%ec%88%9c%ec%84%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Vim 명령어, 개념 총 정리 및 예제 (8.0) ( 2019.11.13 업데이트 )]]></title>
		<link>https://elvanov.com/59</link>
		<pubDate>Wed, 13 Nov 2019 04:36:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>인터넷에서 항상 검색을 하다보면 방법들이 너무 파편화 되어있어서 매번 찾기 귀찮음에, 한 번에 모든 걸 최대한 정리해보고자 한다. Ctrl + F로 쉽게 찾을 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>숫자를 입력해야 한다면 <code>&lt;숫자&gt;</code> 이렇게 표기한다.</li><li>문자 하나를 입력해야 한다면 <code>&lt;문자&gt;</code> 이렇게 표기한다.</li><li>대문자인 명령어는 <code>Shift</code>와 조합한다.  </li><li><code>Ctrl</code> 을 사용하는 단축키는 대문자로 표기한다. 즉 <code>CTRL-V</code> 이런 식으로 표기한다. 마찬가지로 <code>CTRL-^</code>는 <code>Ctrl + 6</code>을 의미한다.</li><li>일부 편집 기능은 탐색 동작과 함께 사용할 수 있다. 예를 들어 <code>yG</code> 하면 현재 커서로부터 파일의 끝까지 복사하라는 뜻이다.</li><li>비주얼 모드란 선택할 수 있는 모드이며, 각종 이동(탐색) 명령과 편집 명령을 활용할 수 있다. "선택 시"일 때의 선택은 비주얼 모드에서의 선택을 의미한다. </li><li>도움말(<code>:h</code>)은 영어이긴 하지만 정말 확실한 도움이 되므로 영어가 된다면 적극 활용하도록 한다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>방향 용어 정리</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>방향 용어는 굉장히 헷갈린다. 한국어에서는 <code>앞으로 얼마나 남았지?</code>라는 말에서 <code>앞</code>이 다가올 미래, 즉 지금 시점으로 뒤(next)에 일어날 것들을 지칭하는 말이나, 이 문서에서는 그런 뜻으로 <strong>사용하지 않는다</strong>. <code>앞</code>이란 말은 <code>앞서 무슨 일이 있었지?</code>와 같이 이전(prev)을 뜻하도록 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>뒤로 (후방)</td><td>문서의 끝 쪽으로 향하는 것.</td></tr><tr><td>앞으로 (전방)</td><td>문서의 처음 쪽으로 향하는 것.</td></tr><tr><td>다음</td><td>문서 뒤로 가는 것.</td></tr><tr><td>이전</td><td>문서 앞으로 가는 것.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>모드 전환 </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기본적으로 명령 모드가 가장 기본 모드이고, 다른 모드로 갈때 명령 모드에서 이동한다. 예를 들어 삽입 모드에서 비주얼 모드로 가고 싶다면 <code>&lt;Esc&gt;</code>로 명령 모드로 전환한 후 <code>v</code>로 비주얼 모드로 전환한다.</p>
<!-- /wp:paragraph -->

<!-- wp:table {"className":"is-style-regular"} -->
<figure class="wp-block-table is-style-regular"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>&lt;Esc&gt;</code></td><td>명령 모드로 전환</td></tr><tr><td><code>:</code></td><td>명령행 모드로 전환 (이후 화면 아래쪽에서 명령을 적을 수 있음)</td></tr><tr><td><code>v</code></td><td>비주얼 모드로 전환</td></tr><tr><td><code>V</code></td><td>비주얼 라인 모드로 전환</td></tr><tr><td><code>&lt;CTRL-V&gt;</code></td><td>비주얼 블럭 모드로 전환</td></tr><tr><td><code>Q</code></td><td>실행 모드 (명령행 모드를 연속으로 하기)</td></tr><tr><td><code>R</code></td><td>수정 모드 (Replace 모드. 기존 커서의 문자를 삭제하면서 문자를 입력함.)</td></tr><tr><td><code>I</code></td><td>삽입 모드 (행의 제일 앞)</td></tr><tr><td><code>i</code></td><td>삽입 모드 (커서 한 칸 앞)</td></tr><tr><td><code>a</code></td><td>삽입 모드 (커서)</td></tr><tr><td><code>A</code></td><td>삽입 모드 (행의 제일 뒤)</td></tr><tr><td><code>O</code></td><td>삽입 모드 (행 위에 한 줄을 추가함)</td></tr><tr><td><code>o</code></td><td>삽입 모드 (행 아래에 한 줄을 추가함)</td></tr><tr><td><code>S</code>, <code>cc</code></td><td>행 삭제 후 삽입 모드</td></tr><tr><td><code>s</code></td><td>삭제 후 삽입 모드</td></tr><tr><td><code>c</code></td><td>삭제 후 삽입 모드 (동작 활용)</td></tr><tr><td><code>C</code></td><td>행 끝까지 삭제 후 삽입 모드</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>다른 명령과 상호 작용</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>&lt;숫자&gt;&lt;명령&gt;</code></td><td><code>&lt;명령&gt;</code>을 숫자만큼 반복</td></tr><tr><td><code>.</code></td><td>최근에 수행한 명령을 반복</td></tr><tr><td><code>q&lt;문자&gt;</code></td><td>매크로 기록</td></tr><tr><td><code>@&lt;문자&gt;</code></td><td><code>q</code>로 기록한 매크로 실행</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>탐색</h2>
<!-- /wp:heading -->

<!-- wp:jetpack/markdown {"source":"|명령|설명|\n| \u002d\u002d- | \u002d\u002d- |\n|`h`|← (숫자 활용)|\n|`j`|↓ (숫자 활용)|\n|`k`|↑ (숫자 활용)|\n|`l`|→ (숫자활용)|\n|`^`|행의 처음으로 이동 (공백 제외)|\n|`0`|행의 처음으로 이동 (공백 포함)|\n|`$`|행의 끝으로 이동|\n|`+`|다음 행으로 이동|\n|`-`|이전 행으로 이동|\n|`\u003c숫자\u003eG, :\u003c숫자\u003e`|해당 행으로 이동|\n|`G`|파일 끝으로 이동|\n|`gg`|파일 처음으로 이동|\n|`H`|현재 화면의 최상단으로 이동|\n|`M`|현재 화면의 가운데로 이동|\n|`L`|현재 화면의 최하단으로 이동|\n|`W`|다음 단어로 이동 (커서 - 단어 첫 글자) (공백으로만 구분) (숫자 활용)|\n|`w`|다음 단어로 이동 (커서 - 단어 첫 글자) (공백, 특수문자 등으로 구분) (숫자 활용)|\n|`E`|다음 단어로 이동 (커서 - 단어 끝 글자) (공백으로만 구분) (숫자 활용)|\n|`e`|다음 단어로 이동 (커서 - 단어 끝 글자) (공백, 특수문자 등으로 구분) (숫자 활용)|\n|`B`|이전 단어로 이동 (커서 - 단어 첫 글자) (공백으로만 구분) (숫자 활용)|\n|`b`|이전 단어로 이동 (커서 - 단어 첫 글자) (공백, 특수문자 등으로 구분) (숫자 활용)|\n|`m\u003c문자\u003e`|표식(북마크) 설정|\n|`` `\u003c문자\u003e``|표식(북마크)의 정확한 위치로 이동|\n|`'\u003c문자\u003e`|표식(북마크)이 있는 행의 제일 앞으로 이동|\n|`%`|해당 커서의 짝이 되는 괄호({}[]())로 이동|\n|`\u003cENTER\u003e`|다음 행의 처음으로 이동|\n|`(`|문장의 시작으로 이동|\n|`)`|문장의 끝으로 이동|\n|`{`|문단의 시작으로 이동|\n|`}`|문단의 끝으로 이동|\n|`\u003c숫자\u003e_`|\u003c숫자\u003e -1 만큼 다음 행으로 이동|\n|`\u003c숫자\u003e|`|\u003c숫자\u003e의 열 만큼 이동|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>명령</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>h</code></td>
<td>← (숫자 활용)</td>
</tr>
<tr>
<td><code>j</code></td>
<td>↓ (숫자 활용)</td>
</tr>
<tr>
<td><code>k</code></td>
<td>↑ (숫자 활용)</td>
</tr>
<tr>
<td><code>l</code></td>
<td>→ (숫자활용)</td>
</tr>
<tr>
<td><code>^</code></td>
<td>행의 처음으로 이동 (공백 제외)</td>
</tr>
<tr>
<td><code>0</code></td>
<td>행의 처음으로 이동 (공백 포함)</td>
</tr>
<tr>
<td><code>$</code></td>
<td>행의 끝으로 이동</td>
</tr>
<tr>
<td><code>+</code></td>
<td>다음 행으로 이동</td>
</tr>
<tr>
<td><code>-</code></td>
<td>이전 행으로 이동</td>
</tr>
<tr>
<td><code>&lt;숫자&gt;G, :&lt;숫자&gt;</code></td>
<td>해당 행으로 이동</td>
</tr>
<tr>
<td><code>G</code></td>
<td>파일 끝으로 이동</td>
</tr>
<tr>
<td><code>gg</code></td>
<td>파일 처음으로 이동</td>
</tr>
<tr>
<td><code>H</code></td>
<td>현재 화면의 최상단으로 이동</td>
</tr>
<tr>
<td><code>M</code></td>
<td>현재 화면의 가운데로 이동</td>
</tr>
<tr>
<td><code>L</code></td>
<td>현재 화면의 최하단으로 이동</td>
</tr>
<tr>
<td><code>W</code></td>
<td>다음 단어로 이동 (커서 - 단어 첫 글자) (공백으로만 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>w</code></td>
<td>다음 단어로 이동 (커서 - 단어 첫 글자) (공백, 특수문자 등으로 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>E</code></td>
<td>다음 단어로 이동 (커서 - 단어 끝 글자) (공백으로만 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>e</code></td>
<td>다음 단어로 이동 (커서 - 단어 끝 글자) (공백, 특수문자 등으로 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>B</code></td>
<td>이전 단어로 이동 (커서 - 단어 첫 글자) (공백으로만 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>b</code></td>
<td>이전 단어로 이동 (커서 - 단어 첫 글자) (공백, 특수문자 등으로 구분) (숫자 활용)</td>
</tr>
<tr>
<td><code>m&lt;문자&gt;</code></td>
<td>표식(북마크) 설정</td>
</tr>
<tr>
<td><code>`&lt;문자&gt;</code></td>
<td>표식(북마크)의 정확한 위치로 이동</td>
</tr>
<tr>
<td><code>'&lt;문자&gt;</code></td>
<td>표식(북마크)이 있는 행의 제일 앞으로 이동</td>
</tr>
<tr>
<td><code>%</code></td>
<td>해당 커서의 짝이 되는 괄호({}<a href=""></a>)로 이동</td>
</tr>
<tr>
<td><code>&lt;ENTER&gt;</code></td>
<td>다음 행의 처음으로 이동</td>
</tr>
<tr>
<td><code>(</code></td>
<td>문장의 시작으로 이동</td>
</tr>
<tr>
<td><code>)</code></td>
<td>문장의 끝으로 이동</td>
</tr>
<tr>
<td><code>{</code></td>
<td>문단의 시작으로 이동</td>
</tr>
<tr>
<td><code>}</code></td>
<td>문단의 끝으로 이동</td>
</tr>
<tr>
<td><code>&lt;숫자&gt;_</code></td>
<td>&lt;숫자&gt; -1 만큼 다음 행으로 이동</td>
</tr>
<tr>
<td><code>&lt;숫자&gt;|</code></td>
<td>&lt;숫자&gt;의 열 만큼 이동</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:list -->
<ul><li>w,e,b는 W,E,B와 달리 단어구분을 공백(<code> </code>) 뿐만 아니라 다양한 특수문자(<code>'"(){}[]</code>) 등으로 단어를 구분짓는다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>검색 및 치환</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>#</code></td><td>현재 커서의 단어를 이전 검색</td></tr><tr><td><code>*</code></td><td>현재 커서의 단어를 다음 검색</td></tr><tr><td><code>/</code></td><td>아래로 검색 <code>/정규식&lt;Enter&gt;</code></td></tr><tr><td><code>?</code></td><td>위로 검색 <code>?정규식&lt;Enter&gt;</code></td></tr><tr><td><code>n</code></td><td>계속 검색 (<code>? /</code>)</td></tr><tr><td><code>N</code></td><td>반대 방향으로 검색 (<code>? /</code>)</td></tr><tr><td><code>r&lt;문자&gt;</code></td><td>커서의 문자를 해당 문자로 치환. &lt;선택&gt;시 포함된 모든 문자 각각에 대해서 적용.</td></tr><tr><td><code>T&lt;문자&gt;</code></td><td>전방으로 글자 검색 (커서 - 한 칸 다음) (하나의 행에서만 작동)</td></tr><tr><td><code>t&lt;문자&gt;</code></td><td>후방으로 글자 검색 (커서 - 한 칸 이전) (하나의 행에서만 작동)</td></tr><tr><td><code>F&lt;문자&gt;</code></td><td>전방으로 글자 검색 (커서 - 해당 글자) (하나의 행에서만 작동)</td></tr><tr><td><code>f&lt;문자&gt;</code></td><td>후방으로 글자 검색 (커서 - 해당 글자) (하나의 행에서만 작동)</td></tr><tr><td><code>;</code></td><td><code>t T f F</code> 계속 수행 (하나의 행에서만 작동)</td></tr><tr><td><code>,</code></td><td><code>t T f F</code> 반대 방향으로 계속 수행 (하나의 행에서만 작동)</td></tr><tr><td><code>&amp;</code></td><td><code>:s</code> 명령 반복 (아래 :s 참조)</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>편집 및 클립보드</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>기본적으로 삭제할 때에는 그냥 삭제되지 않고 클립보드에 저장된다. 즉, vim에서의 삭제는 일반적으로 생각되는 <strong>잘라내기</strong>와 같다.</li></ul>
<!-- /wp:list -->

<!-- wp:jetpack/markdown {"source":"|명령|설명|\n| \u002d\u002d- | \u002d\u002d- |\n|`Y, yy, :y`|행 복사|\n|`y`|복사 (동작 활용)|\n|`U`|행 단위 실행 취소|\n|`u`|실행 취소 (Undo)|\n|`\u003cCTRL-R\u003e`|다시 실행 (Redo)|\n|`D`|현재 커서로부터 행의 끝까지 삭제|\n|`d`|삭제 (동작 활용)|\n|`dd, :d`|현재 행 삭제|\n|`X`|커서 바로 이전 문자 삭제|\n|`x`|커서 문자 삭제|\n|`CTRL-A`|현재 커서 위치를 숫자로 인식하여 1 증감 (숫자 가능)|\n|`CTRL-X`|현재 커서 위치를 숫자로 인식하여 1 감소 (숫자 가능)|\n|`\u003e\u003e`|현재 행 포함 아래 방향으로 \u003c숫자\u003e행 들여쓰기|\n|`\u003e`|동작 들여쓰기|\n|`\u003c\u003c`|현재 행 포함 아래 방향으로 \u003c숫자\u003e행 내어쓰기|\n|`\u003c`|동작 내어쓰기|\n|`\u0022\u003c문자\u003e\u003c명령\u003e`|명령을 하기 전 클립보드\u003c문자\u003e를 지정하고 명령 수행.|\n|`J`|현재 행을 다음 행과 합치기.|\n|`\u0022ay$`|현재 커서부터 행의 끝까지 a 레지스터에 복사|"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>명령</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Y, yy, :y</code></td>
<td>행 복사</td>
</tr>
<tr>
<td><code>y</code></td>
<td>복사 (동작 활용)</td>
</tr>
<tr>
<td><code>U</code></td>
<td>행 단위 실행 취소</td>
</tr>
<tr>
<td><code>u</code></td>
<td>실행 취소 (Undo)</td>
</tr>
<tr>
<td><code>&lt;CTRL-R&gt;</code></td>
<td>다시 실행 (Redo)</td>
</tr>
<tr>
<td><code>D</code></td>
<td>현재 커서로부터 행의 끝까지 삭제</td>
</tr>
<tr>
<td><code>d</code></td>
<td>삭제 (동작 활용)</td>
</tr>
<tr>
<td><code>dd, :d</code></td>
<td>현재 행 삭제</td>
</tr>
<tr>
<td><code>X</code></td>
<td>커서 바로 이전 문자 삭제</td>
</tr>
<tr>
<td><code>x</code></td>
<td>커서 문자 삭제</td>
</tr>
<tr>
<td><code>CTRL-A</code></td>
<td>현재 커서 위치를 숫자로 인식하여 1 증감 (숫자 가능)</td>
</tr>
<tr>
<td><code>CTRL-X</code></td>
<td>현재 커서 위치를 숫자로 인식하여 1 감소 (숫자 가능)</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>현재 행 포함 아래 방향으로 &lt;숫자&gt;행 들여쓰기</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>동작 들여쓰기</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>현재 행 포함 아래 방향으로 &lt;숫자&gt;행 내어쓰기</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>동작 내어쓰기</td>
</tr>
<tr>
<td><code>&quot;&lt;문자&gt;&lt;명령&gt;</code></td>
<td>명령을 하기 전 클립보드&lt;문자&gt;를 지정하고 명령 수행.</td>
</tr>
<tr>
<td><code>J</code></td>
<td>현재 행을 다음 행과 합치기.</td>
</tr>
<tr>
<td><code>&quot;ay$</code></td>
<td>현재 커서부터 행의 끝까지 a 레지스터에 복사</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"### Text Object Selection\n\n`y`, `d`, `c`는 동작(모션)을 활용하는 명령어다. 모션을 활용할 때 특별한 방법이 있는데, 현재 커서를 기준으로 단어, 블록, 문단 등을 선택할 수 있는 기능이다. 예를 들어 `diw`를 하게 되면 현재 커서 기준의 단어를 삭제할 수 있어 더 편리해진다.\n\n아래 설명에서도 보이겠지만, `a`는 구분자까지 포함하는 경향이 있고, `i`는 구분자 안에 있는 내용에 대해서만 적용한다. 다시 한 번 말하지만, 아래 내용은 꼭 `y`, `d`, `c` 등의 동작(모션)을 활용하는 명령어와 함께 사용하여야 한다!\n\n|명령어|설명|\n|\u002d\u002d\u002d\u002d\u002d\u002d|\u002d\u002d-|\u002d\u002d-|\n|`aw`|공백 포함 단어(word) (공백, 특수문자 등으로 구분)|\n|`iw`|공백 미포함 단어(word) (공백, 특수문자 등으로 구분)|\n|`aW`|공백 포함 단어(word) (공백으로만 구분)|\n|`iW`|공백 미포함 단어(word) (공백으로만 구분)|\n|`a]`, `a[`|[] 블록 ([] 포함)|\n|`i]`, `i[`|[] 블록 ([] 미포함)|\n|`{}()\u0022'bB`|위와 동일하게 적용 (`b`는 `()`, `B`는 `{}`를 의미)|\n|`as`, `is`|문장(sentence)|\n|`ap`, `ip`|문단(paragraph)|"} -->
<div class="wp-block-jetpack-markdown"><h3>Text Object Selection</h3>
<p><code>y</code>, <code>d</code>, <code>c</code>는 동작(모션)을 활용하는 명령어다. 모션을 활용할 때 특별한 방법이 있는데, 현재 커서를 기준으로 단어, 블록, 문단 등을 선택할 수 있는 기능이다. 예를 들어 <code>diw</code>를 하게 되면 현재 커서 기준의 단어를 삭제할 수 있어 더 편리해진다.</p>
<p>아래 설명에서도 보이겠지만, <code>a</code>는 구분자까지 포함하는 경향이 있고, <code>i</code>는 구분자 안에 있는 내용에 대해서만 적용한다. 다시 한 번 말하지만, 아래 내용은 꼭 <code>y</code>, <code>d</code>, <code>c</code> 등의 동작(모션)을 활용하는 명령어와 함께 사용하여야 한다!</p>
<table>
<thead>
<tr>
<th>명령어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>aw</code></td>
<td>공백 포함 단어(word) (공백, 특수문자 등으로 구분)</td>
</tr>
<tr>
<td><code>iw</code></td>
<td>공백 미포함 단어(word) (공백, 특수문자 등으로 구분)</td>
</tr>
<tr>
<td><code>aW</code></td>
<td>공백 포함 단어(word) (공백으로만 구분)</td>
</tr>
<tr>
<td><code>iW</code></td>
<td>공백 미포함 단어(word) (공백으로만 구분)</td>
</tr>
<tr>
<td><code>a]</code>, <code>a[</code></td>
<td>[] 블록 ([] 포함)</td>
</tr>
<tr>
<td><code>i]</code>, <code>i[</code></td>
<td>[] 블록 ([] 미포함)</td>
</tr>
<tr>
<td><code>{}()&quot;'bB</code></td>
<td>위와 동일하게 적용 (<code>b</code>는 <code>()</code>, <code>B</code>는 <code>{}</code>를 의미)</td>
</tr>
<tr>
<td><code>as</code>, <code>is</code></td>
<td>문장(sentence)</td>
</tr>
<tr>
<td><code>ap</code>, <code>ip</code></td>
<td>문단(paragraph)</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:heading -->
<h2>파일</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>:w</code></td><td>저장</td></tr><tr><td><code>:q</code></td><td>종료 (저장되어 있을 때만 동작함)</td></tr><tr><td><code>ZZ</code>, <code>:wq</code>, <code>:x</code></td><td>저장 후 종료</td></tr><tr><td><code>ZQ</code>, <code>:q!</code></td><td>저장하지 않고 종료</td></tr><tr><td><code>:e fo.txt</code></td><td>fo.txt 파일 열기</td></tr><tr><td><code>:e .</code></td><td>현재 디렉토리 탐색 (netrw) (다른 폴더경로도 지정 가능) <br>파일 선택후 &lt;Enter&gt; 누르면 해당 파일 열림.</td></tr><tr><td><code>gf</code></td><td>현재 커서의 단어를 파일명으로 인식하여 파일 열기</td></tr><tr><td><code>CTRL-W gf</code></td><td>현재 커서의 단어를 파일명으로 인식하여 새 탭으로 파일 열기</td></tr><tr><td><code>CTRL-^</code></td><td>이전에 열었던 파일 다시 열기</td></tr><tr><td><code>:ls</code></td><td>최근 연 파일 목록 보기 (버퍼) (vim을 종료할 때까지 유지)</td></tr><tr><td><code>:b숫자</code></td><td>해당 숫자의 파일 (버퍼) 열기</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>화면 / 창 제어</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>CTRL-W s</code>, <code>:sp</code></td><td>현재 창을 두 개의 수평 창으로 분할 </td></tr><tr><td> <br><code>CTRL-W v</code>, <code>:vs</code></td><td>현재 창을 두 개의 수직 창으로 분할</td></tr><tr><td><code>CTRL-W w</code></td><td>창 간 전환</td></tr><tr><td><code>CTRL-E</code></td><td>스크롤 한 칸 위로</td></tr><tr><td><code>CTRL-Y</code></td><td>스크롤 한 칸 아래로</td></tr><tr><td><code>CTRL-U</code><br></td><td>스크롤 화면의 1/2 위로</td></tr><tr><td><code>CTRL-D</code></td><td>스크롤 화면의 1/2 아래로</td></tr><tr><td><code>CTRL-F</code></td><td>스크롤 한 페이지 위로</td></tr><tr><td><code>CTRL-B</code></td><td>스크롤 한 페이지 아래로</td></tr><tr><td><code>zt</code></td><td>커서가 화면 상단에 오도록 스크롤</td></tr><tr><td><code>zz</code></td><td>커서가 화면 가운데에 오도록 스크롤<br></td></tr><tr><td><code>zb</code></td><td>커서가 화면 하단에 오도록 스크롤</td></tr><tr><td><code>:tabe 파일명</code></td><td>새 탭으로 파일 열기</td></tr><tr><td><code>gt</code></td><td>탭 전환</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:list -->
<ul><li><code>:sp</code>또는 <code>:vs</code> 뒤에 파일명을 써서 파일을 바로 열 수 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>기타</h2>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령</td><td>설명</td></tr><tr><td><code>:h name</code></td><td>name 명령에 대한 도움말 열기. (도움말 종료하려면 <code>:q</code> 하면 됨)</td></tr><tr><td><code>CTRL-]</code></td><td>커서가 위치한 타이틀(태그)로 이동</td></tr><tr><td><code>CTRL-T</code></td><td>이전 타이틀(태그)로 이동</td></tr><tr><td><code>:tags</code></td><td>현재 이동한 타이틀(태그)들의 리스트 출력</td></tr><tr><td><code>!!&lt;명령&gt;</code></td><td>외부 명령 (리눅스 등)</td></tr><tr><td><code>gf</code></td><td>현재 커서의 단어를 파일명으로 인식하여 파일 열기</td></tr><tr><td><code>K</code></td><td>현재 커서의 단어로 운영체제 단의 도움말을 열기 (예: echo라는 단어 위에서 K를 누르면 해당 명령어의 도움말이 열림)</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2> <br>inclusive와 exclusive</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>도움말을 살펴보다 보면 inclusive와 exclusive 명령어가 구분된다. inclusive는 어떤 이동 명령의 시작과 끝까지 버퍼에 포함시킨다는 것이고, exclusive는 이동 명령의 시작 또는 끝의 위치는 버퍼에 포함시키지 않는다는 것이다. 예를 들어 <code>My name is dung.</code>에서 name의 n에 커서를 두고 <code>ye</code>(inclusive) 하면 <code>name</code>이 복사되고 <code>yw</code>(exclusive)하면 <code>name </code>가 복사된다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>명령행 모드</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>범위 지정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>명령행 모드에서 명령을 실행하기 전에 범위를 지정할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령어</td><td>설명</td></tr><tr><td><code>.</code></td><td>현재 행</td></tr><tr><td><code>$</code></td><td>마지막 행</td></tr><tr><td><code>+숫자</code></td><td>숫자 만큼 아래 행</td></tr><tr><td><code>-숫자</code></td><td>숫자 만큼 위 행</td></tr><tr><td><code>%</code></td><td>문서 전체</td></tr><tr><td><code>'&lt;,'&gt;</code></td><td>비주얼 모드에서 명령행 모드로 가면 나오는 문자로, 현재 선택된 부분을 뜻함.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":4} -->
<h4>예제</h4>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>명령어</td><td>설명</td></tr><tr><td><code>:21d</code></td><td>21번 행 삭제</td></tr><tr><td><code>:10,25d</code></td><td>10~25번 행 삭제</td></tr><tr><td><code>:10,$d</code></td><td>10~마지막 행까지 삭제</td></tr><tr><td><code>:%y</code></td><td>문서 전체를 복사</td></tr><tr><td><code>:.,+20y</code></td><td>현재 행부터 아래로 스무 행을 복사</td></tr><tr><td><code>:-10,+5d</code></td><td>현재 행부터 위로 10행, 아래로 5행 삭제 (총 16행)</td></tr><tr><td><code>:40pu</code></td><td>40번 행에 붙여넣기</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading {"level":3} -->
<h3>:s</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>:범위s/찾을패턴/바꿀스트링/옵션</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>검색하여 치환하는 명령행 모드의 명령이다. 패턴에는 정규식을 사용할 수 있다. 패턴은 매 줄마다 적용된다. 시작줄과 끝 줄은 생략할 수 있다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>패턴에서 그룹 캡처시 역슬러쉬(\)를 쓴다. 그룹명은 \0이 전체이고 \1, \2부터 캡처된 순서로 불러온다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>예: <code>:%s/&lt;li&gt;&lt;a href="\(.\{-}\)"&gt;\(.\{-}\)&lt;\/a&gt;/* [\1 \2]/g</code></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>옵션</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>g : global - 한 줄에 패턴이 여러 번 나오면 모두 바꾼다. 줄 마다의 첫 번째 패턴만 치환한다. (g를 설정하든 안하든 기본적으로 멀티라인 모드로 작동한다.)</li><li>i : ignore case - 대소문자 구분을 하지 않는다.</li><li>c : confirm - 검색된 모든 문자열에 대해서 바꿀지 말지를 물어본다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>바깥고리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다중창 관련 : <a href="https://opentutorials.org/module/522/4573">https://opentutorials.org/module/522/4573</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2019-11-13 13:36:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-13 04:36:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-01 17:31:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-01 08:31:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim-%eb%aa%85%eb%a0%b9%ec%96%b4-%ea%b0%9c%eb%85%90-%ec%b4%9d-%ec%a0%95%eb%a6%ac-%eb%b0%8f-%ec%98%88%ec%a0%9c-8-0-2019-11-13-%ec%97%85%eb%8d%b0%ec%9d%b4%ed%8a%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="vim"><![CDATA[vim]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 프롤로그]]></title>
		<link>https://elvanov.com/110</link>
		<pubDate>Thu, 05 Dec 2019 03:40:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>여는 글</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>안녕하세요, 반갑습니다. 세상의 수 많은 파이썬 강좌가 있지만 이 강좌를 선택하고 이 블로그를 방문해주셔서 감사합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 강좌를 작성하게 된 계기는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> 제가 실제로 프로그래밍에 경험이 없는 학생을 대상으로 하였던 파이썬 과외 경험을 그냥 흘러가게 두고 싶지 않았습니다. 혼자 파이썬을 공부했던 것과 남에게 가르치는 것은 생각보다 간극이 크다는 것을 깨달았습니다. 시간이 지나면 그 간극도 점점 잊혀가니, 기록해두고 싶은 마음이 있습니다.</li><li>파이썬을 본격적인 실무로 해본 적도 없지만 프로그래밍을 C++로 처음 접했던 저에게 나름의 프로그래밍 언어에 대한 통찰과 더불어 초보의 입장에서 자료를 더 잘 정리할 수 있을 것 같았습니다.</li><li>앞으로 또 이런 일이 있을지는 모르겠지만, 제가 다른 누군가를 가르칠 일이 있을 때 수업자료로 적극 이용할 예정입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>강좌 구성 안내</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>강좌는 글 뿐만 아니라 한 눈에 파악하기 쉬운 <strong>이미지 및 흐름도</strong>가 많이 사용됩니다. 특히 웹의 특성을 최대한 살려, <strong>인터랙션 가능한 요소를 최대한 활용하고자 합니다</strong>. 예제는 최대한 복사 붙여넣기 하기 쉽도록 만들 예정이며, 예제 만으로도 프로그램이 돌아갈 수 있도록 구성할 것입니다. <strong>목차 네비게이션</strong>도 만들어서 편하게 화면을 전환할 수 있도록 합니다. 매 강좌의 제일 앞부분과 마지막 부분에는 <strong>전체 강좌의 목차</strong>를 넣었습니다. 마음 같아서는 실시간 파이썬 인터프리터 실행기도 넣어보고 싶으나, 이 사이트는 단순히 웹호스팅 위에서 돌아가는 점도 있고 또 다른 웹 인터프리터를 이용하자니 애로사항이 이만저만이 아니기에 그 구현은 조금 더 미래로 미루도록 하겠습니다...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>동영상은 하나도 없을 텐데, 개인적으로 인터넷 강의를 선호하지 않는 것도 있지만 동영상은 매체의 특성상 리소스가 많이 할애되고, 보고 싶은 부분을 그때그때 찾아보기가 힘들기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>암기가 필요한 부분은 중간 정리와 강좌의 말미에 <strong>연습 문제</strong>를 통하여 익히실 수 있습니다. 연습 문제의 정답은 따로 없고 해당 강좌에서 전부 찾을 수 있도록 구성했습니다. 그리고 <strong>프로그래밍 문제</strong>를 통해 직접 코드를 작성하거나 해석해보는 활동을 가지도록 했습니다. 프로그래밍 문제는 정답을 제시하긴 하지만, 유일한 정답이라고 단정지을 필요는 없습니다. 개념 이해에 도움이 된다면, 파이썬 뿐만 아니라 잡다구리한 이야기를 많이 풀 것이고, <strong>강좌의 범위를 한참 벗어나는 이야기들은 바깥 연결링크를 이용해 제공</strong>됩니다. 이 링크는 공식 문서일 수도 있고, 다른 사람이 쓴 블로그 포스팅일 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>강좌마다 번호는 매겨져 있지 않습니다. 크게 두 가지 이유가 있습니다. 새로운 과정이 중간에 얼마든지 삽입될 수 있다는 것과, 고급 단계로 갈 수록 강좌의 순서가 크게 중요하지 않다는 점입니다.<strong> 초급 단계에서는 일단 순서대로 강좌가 읽힌다고 가정하고 용어를 선택했기 때문에, 순서대로 강좌를 보는 것을 추천</strong>드립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>파이썬 버전은 현재 기준 최신 버전 (3.8)을 사용하고 있습니다. 최신 버전을 사용하는 이유는 대개 편리한 기능이 최신 버전에 더 많고 강력하기 때문입니다. 강좌의 여러 글들이 작성된지 오래되어 트렌드를 반영할 수 없을 수 있습니다. 2~3년만 지나더라도 그때 가장 좋았던 방법이, 이미 낡은 기술이 되어버렸을 수 있습니다. 필자가 충분히 부지런하다면 그러한 트렌드를 최대한 반영하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아직 작성하지 않은 강좌는 목차의 링크가 없습니다. 계속해서 업데이트 할 예정입니다. 강좌에 대한 문의사항이나 기타 의견은 메일로 부탁드리겠습니다. 언제든 자유롭게 이야기해주세요. (<a href="mailto:eszqsc112@naver.com">eszqsc112@naver.com</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>대상 독자</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 강좌의 1차적인 독자는 <strong>프로그래밍과 전혀 접점이 없는 비전공자, 학생, 직장인</strong> 입니다. 최종 목표는 <strong>스스로 구상한 프로그램을 직접 만들어보는 것</strong>입니다. 즉, 파이썬 문법을 익히는 것 뿐만 아니라 특정 모듈의 문서를 찾고 읽고 해석하는 능력까지 키울 예정입니다. 물고기를 잡아드리는 게 아닌 낚시법을 가르치는 것이지요. 프로그래밍적 용어나 개념, 알고리즘 등은 어디까지나 앞서 말한 문법 및 모듈을 능수능란하게 사용하기 위한 최종 목표 내에서 학습할 것입니다. <strong>기술적으로 심화적인 내용을 원하는 분들은 이 강좌가 적합하지 않습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 강좌는 <strong>프로그래밍 그 자체에 관심이 큰 건 아니지만 꼭 만들어보고 싶은 서비스나 앱을 구축하고 싶은 분</strong>들에게도 좋습니다. 프로그램을 만드는 데 꼭 필요한 개념을 우선적으로 설명하고자 하였고, 앞서 말했듯이 좀 더 기술적인 이야기들은 줄이려고 노력했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>용어에 대해</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>코딩과 관련하여서 모르는 문제들은 인터넷이 훌륭한 선생님이 될 수 있습니다. 하지만 검색을 할 때, 비슷한 뜻의 용어지만 평소 사용하던 것과 달라 혼동이 오는 경우가 있습니다. 그래서 강좌에서는 용어를 최대한 다양하게 설명하고자 합니다. 영어와 함께 설명하는 이유도 마찬가지입니다. 가끔 영어로 적힌 문서를 보아야 할 수도 있고, 대한민국 사람이 쓴 글이라도 특별한 번역을 거치지 않고 음차하여 사용하는 경우도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>비슷한 용어라도 명확한 정의는 있기 마련이지만, 강좌에서는 불필요하다 생각되면 용어의 차이는 크게 두지 않을 것입니다. 초보자들은 프로그래밍이 어느정도 익숙해진 다음에 정확한 뜻을 찾아봐도 늦지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>초급 단계의 강좌에서 고급 단계의 개념이 나왔을 때에는 어려운 단어를 직접적으로 쓰는 것보다 한층 모호한 말로 표현하고자 했습니다. 예를 들어&nbsp;<code>객체의 메소드나 속성</code>을 그 개념이 나오기 전인 강좌에서는&nbsp;<code>어떠어떠한 기능</code>이라고 두루뭉실하게 표현했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2019-12-05 12:40:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-05 03:40:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 17:38:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 08:38:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%94%84%eb%a1%a4%eb%a1%9c%ea%b7%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 컴퓨터 구성요소 ~ 컴퓨터는 어떤 걸 할 수 있나?]]></title>
		<link>https://elvanov.com/120</link>
		<pubDate>Wed, 11 Dec 2019 14:34:35 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"*프롤로그를 읽지 않으신 분들은 반드시 읽어보고 오시기 바랍니다. 강좌 전체에 대한 방향성, 등이 적혀있습니다.*\n\n\u002d\u002d-\n\n## 프로그램과 명령어\n\n현대 사회에서는 컴퓨터를 사용하지 않은 곳을 찾기가 힘듭니다. 전문적인 회사에서 쓰는 전용 컴퓨터에서부터, 대학 신입생이 구매한 LG 그램까지 종류와 쓰임새가 아주 다양하죠. 사실 스마트폰도 컴퓨터의 일종이라고 볼 수 있지요. 컴퓨터는 엑셀과 같은 스프레드시트, 아래아한글과 같은 워드프로세서, 리그 오브 레전드 같은 게임 프로그램을 구동시킬 수 있습니다. 그렇다면 프로그램이란 무엇일까요?\n\n\u003e 어떤 문제를 해결하기 위하여 그 처리 방법과 순서를 기술하여 컴퓨터에 주어지는 일련의 명령문 집합체.\n\u003e \n\u003e __ 표준국어대사전 발췌\n\n오, 뭔가 전문적인 냄새가 나는 말이 등장했네요. `일련의 명령문 집합체`라니. 말이 뭔가 어려운 것 같지만 쉬운 말로 풀이하자면 `여러 개의 명령문`이라고도 볼 수 있겠습니다. 명령문, 명령어라는 말은 실제로 많이 쓰입니다. 왜냐하면 누군가 컴퓨터에게 일을 시킬 때에는 반려견에게 하는 것처럼 훈련시키는 것도 아니고, 말(Horse)에게 하는 것처럼 채찍을 때리는 것도 아니라, 다름 아닌 바로 명령어을 통해 명령을 내리기 때문입니다.\n\n프로그래밍에서 명령어를 이야기할 때 크게 세 가지가 있습니다.\n\n- 명령어(한국어) : 범용적인 말. 어떤 지시를 내린다는 뜻.\n- command : *콘솔(console)* 창에서 실행하는 명령어. 혹은 하나의 프로그램.\n- instruction : *CPU*가 실행할 수 있는, 기계어로 이루어진 하나의 명령.\n\n코딩하는 일반적인 상황에서는 \u0022명령어\u0022라는 범용적인 한국말을 많이 사용합니다. 명령어는 사람이 컴퓨터에게 어떤 지시를 내린다는 뜻일 수도 있고, 프로그램이 프로그램에게, 또는 소프트웨어가 하드웨어에게 지시를 내린다는 뜻일 수도 있습니다. 이러한 상황을 명확히 구분짓기 위해 command와 instruction라고 영어로 나눠 쓰기도 합니다. 특히 **command는 우리 사람이 컴퓨터에게 지시를 내리는 상황에서 많이 사용됩니다.** instruction은 좀 더 소프트공학적인 용어이므로 초보 단계에서는 거의 접할 일이 없습니다. 이러한 용어는 [개발과 관련된 용어](/120)에서 더 자세히 알아보도록 합시다.\n\n컴퓨터는 프로그램이나 명령을 **실행** 또는 **수행**합니다. 영어로는 **run** 과 **execute** 가 있습니다. 거의 동일한 뜻으로 사용됩니다.\n\n\n\u002d\u002d-\n\n## 하드웨어\n\n명령어 이야기할 때 *CPU*가 지나가듯 언급이 되었네요. 어디선가 들어본 컴퓨터 부품이죠. 노트북을 고를 때 Intel i7이니 뭐니 하던 것들이죠. 컴퓨터 조립을 취미로 가지고 계신 분들이 아니라면 정확히 어떤 일을 하는 건지 감이 안오실 듯 합니다. 이제 컴퓨터 부품에 해당하는 하드웨어 라는 녀석을 대강 훑어보겠습니다.\n\n하드웨어(Hardware)는 컴퓨터를 구성하고 있는 장치나 부품을 뜻합니다. 실제로 우리가 만질 수 있는 딱딱한(Hard) 것들이죠. 반대편에는 우리가 흔히 프로그램과 동일한 뜻으로 쓰이는 소프트웨어(Software)가 있습니다. 이 소프트웨어는 우리가 직접 손가락으로 만질 수는 없고, 마우스를 움직이고 클릭해 설치하거나 제거할 수 있습니다. 아무튼, 하드웨어의 기본 구성요소를 알아봅시다.\n\n- 중앙처리장치(CPU: Central Processing Unit): 컴퓨터에서 연산 기능을 수행하는 장치. 편의상 **CPU**라고 지칭.\n- 주기억장치(main memory): 실행중인 프로그램과 데이터를 저장하는 장치. 전원이 꺼지면 내용이 사라진다. 편의상 **메모리**라고 지칭.\n- 보조기억장치(secondary storage device): 프로그램과 데이터를 보관하는 장치. **파일**로 저장된다 함은 보조기억장치에 저장됨을 뜻한다.\n- 입력 장치(input device): 외부로부터의 데이터를 내부로 들여보내는 장치. 마우스, 키보드, 터치패드 등이 해당.\n- 출력 장치(output device): 데이터를 내부에서 외부로 내보내기 위한 장치. 모니터(스크린) 등이 해당.\n\n위에서 굵게 표시한 **편의상** 단어들은, 실제 의사소통 때 잘 쓰이는 말입니다. 우리가 매번 \u0022중앙처리장치\u0022라고 길게 말하기에는 너무 힘들 것 같습니다. 앞으로도 편의상 단어를 많이 사용할 것입니다.\n\n실제 하드웨어의 종류는 엄청나게 많고, 위 항목 하나만 하더라도 하위 분류가 아주 많이 뻗어나가는 하나의 대단원입니다. 하지만 프로그래밍을 할 때 최소한 알아두어야 할 하드웨어 친구들이기도 하죠. \n\n\u002d\u002d-\n\n### 하드웨어 예시\n\n컴퓨터를 켤 때, 우리는 윈도우 로고를 감상할 수 있습니다. 왜 컴퓨터는 전원 버튼을 누르는 즉시 바로 켜지지 않을까요? 컴퓨터나 스마트폰의 전원을 완전히 꺼진 상태에서 다시 켤 때는 어느정도 시간이 걸린다는 건, 너무나 당연한 상식이라서 굳이 의문을 품지 않았을 겁니다. SSD나 하드디스크에는 윈도우와 같은 운영체제(Operating System)가 파일로서 저장되어 있습니다. 하지만 이들은 사실 **CPU와 상호작용하기엔 너무 느리기 때문에, CPU가 작업할 수 있는 환경을 만들어주어야 합니다.** 그것은 바로 **메모리에 운영체제를 로딩**하는 일입니다. 부팅이 완료되었다는 것은, 운영체제가 온전히 메모리 상에 저장되었음을 뜻합니다.\n\n![윈도우](https://elvanov.com/elvanov/wp-content/uploads/2020/04/윈도우.jpg)\n*파일로 저장되어 있는 운영체제 파일들을 적절하게 메모리로 로딩하는 중*\n\n이제 메모장을 켜 볼까요, 메모장을 키는 데에는 그렇게 오랜 시간이 걸리지 않습니다. 운영체제보다는 크기가 훨씬 적기 때문이죠. 우리는 입력 장치(Input Device)인 키보드를 통해 글자를 써넣을 수 있습니다. 우리가 글자를 써넣는 매 순간마다 메모리에서는 우리가 써놓은 글들이 업데이트됩니다. 모니터에서 우리가 쓴 글을 볼 수 있는 이유는, 프로그램이 메모리에 저장된 글을 읽어서 출력 장치인 모니터로 보내기 때문입니다. \n\n![메모장](https://elvanov.com/elvanov/wp-content/uploads/2020/04/메모장.jpg)\n*메모장을 켜면 프로그램을 포함한 실시간 정보가 메모리에 계속해서 저장되고 수정된다.*\n\n*`저장`*을 한다면 비로소 메모리에 있던 값들이 텍스트 파일로 SSD나 하드디스크에 저장이 되겠지요. 저장하지 않고 강제로 종료한다면, 우리가 이제껏 썼던 글들은 하늘로 날아갑니다. 프로그램이 종료되는 순간 메모리에 있던 메모장과 그 데이터들은 공중분해되기 때문입니다.\n\n![메모장 저장창](elvanov/wp-content/uploads/2019/12/image.png)\n*저장하지 않고 닫으면 다 날아간다.*\n\n지금까지 컴퓨터의 구성요소와 프로그램이 어떻게 실행되는지 알아보았습니다.\n\n\u002d\u002d-\n\n## 연습 문제\n- 프로그램의 정의는 무엇인가?\n- 하드웨어의 주된 5가지 종류는 무엇인가?\n- 왜 번거롭게 파일로 있는 운영체제를 바로 이용하지 않고 시간을 들여 메모리로 로딩하는가?\n- 프로그램이나 명령을 **실행하다** 라는 뜻을 가진 영단어 두 개는 무엇인가?\n"} -->
<div class="wp-block-jetpack-markdown"><p><em>프롤로그를 읽지 않으신 분들은 반드시 읽어보고 오시기 바랍니다. 강좌 전체에 대한 방향성, 등이 적혀있습니다.</em></p>
<hr>
<h2>프로그램과 명령어</h2>
<p>현대 사회에서는 컴퓨터를 사용하지 않은 곳을 찾기가 힘듭니다. 전문적인 회사에서 쓰는 전용 컴퓨터에서부터, 대학 신입생이 구매한 LG 그램까지 종류와 쓰임새가 아주 다양하죠. 사실 스마트폰도 컴퓨터의 일종이라고 볼 수 있지요. 컴퓨터는 엑셀과 같은 스프레드시트, 아래아한글과 같은 워드프로세서, 리그 오브 레전드 같은 게임 프로그램을 구동시킬 수 있습니다. 그렇다면 프로그램이란 무엇일까요?</p>
<blockquote>
<p>어떤 문제를 해결하기 위하여 그 처리 방법과 순서를 기술하여 컴퓨터에 주어지는 일련의 명령문 집합체.</p>
<p>__ 표준국어대사전 발췌</p>
</blockquote>
<p>오, 뭔가 전문적인 냄새가 나는 말이 등장했네요. <code>일련의 명령문 집합체</code>라니. 말이 뭔가 어려운 것 같지만 쉬운 말로 풀이하자면 <code>여러 개의 명령문</code>이라고도 볼 수 있겠습니다. 명령문, 명령어라는 말은 실제로 많이 쓰입니다. 왜냐하면 누군가 컴퓨터에게 일을 시킬 때에는 반려견에게 하는 것처럼 훈련시키는 것도 아니고, 말(Horse)에게 하는 것처럼 채찍을 때리는 것도 아니라, 다름 아닌 바로 명령어을 통해 명령을 내리기 때문입니다.</p>
<p>프로그래밍에서 명령어를 이야기할 때 크게 세 가지가 있습니다.</p>
<ul>
<li>명령어(한국어) : 범용적인 말. 어떤 지시를 내린다는 뜻.</li>
<li>command : <em>콘솔(console)</em> 창에서 실행하는 명령어. 혹은 하나의 프로그램.</li>
<li>instruction : <em>CPU</em>가 실행할 수 있는, 기계어로 이루어진 하나의 명령.</li>
</ul>
<p>코딩하는 일반적인 상황에서는 &quot;명령어&quot;라는 범용적인 한국말을 많이 사용합니다. 명령어는 사람이 컴퓨터에게 어떤 지시를 내린다는 뜻일 수도 있고, 프로그램이 프로그램에게, 또는 소프트웨어가 하드웨어에게 지시를 내린다는 뜻일 수도 있습니다. 이러한 상황을 명확히 구분짓기 위해 command와 instruction라고 영어로 나눠 쓰기도 합니다. 특히 <strong>command는 우리 사람이 컴퓨터에게 지시를 내리는 상황에서 많이 사용됩니다.</strong> instruction은 좀 더 소프트공학적인 용어이므로 초보 단계에서는 거의 접할 일이 없습니다. 이러한 용어는 <a href="/120">개발과 관련된 용어</a>에서 더 자세히 알아보도록 합시다.</p>
<p>컴퓨터는 프로그램이나 명령을 <strong>실행</strong> 또는 <strong>수행</strong>합니다. 영어로는 <strong>run</strong> 과 <strong>execute</strong> 가 있습니다. 거의 동일한 뜻으로 사용됩니다.</p>
<hr>
<h2>하드웨어</h2>
<p>명령어 이야기할 때 <em>CPU</em>가 지나가듯 언급이 되었네요. 어디선가 들어본 컴퓨터 부품이죠. 노트북을 고를 때 Intel i7이니 뭐니 하던 것들이죠. 컴퓨터 조립을 취미로 가지고 계신 분들이 아니라면 정확히 어떤 일을 하는 건지 감이 안오실 듯 합니다. 이제 컴퓨터 부품에 해당하는 하드웨어 라는 녀석을 대강 훑어보겠습니다.</p>
<p>하드웨어(Hardware)는 컴퓨터를 구성하고 있는 장치나 부품을 뜻합니다. 실제로 우리가 만질 수 있는 딱딱한(Hard) 것들이죠. 반대편에는 우리가 흔히 프로그램과 동일한 뜻으로 쓰이는 소프트웨어(Software)가 있습니다. 이 소프트웨어는 우리가 직접 손가락으로 만질 수는 없고, 마우스를 움직이고 클릭해 설치하거나 제거할 수 있습니다. 아무튼, 하드웨어의 기본 구성요소를 알아봅시다.</p>
<ul>
<li>중앙처리장치(CPU: Central Processing Unit): 컴퓨터에서 연산 기능을 수행하는 장치. 편의상 <strong>CPU</strong>라고 지칭.</li>
<li>주기억장치(main memory): 실행중인 프로그램과 데이터를 저장하는 장치. 전원이 꺼지면 내용이 사라진다. 편의상 <strong>메모리</strong>라고 지칭.</li>
<li>보조기억장치(secondary storage device): 프로그램과 데이터를 보관하는 장치. <strong>파일</strong>로 저장된다 함은 보조기억장치에 저장됨을 뜻한다.</li>
<li>입력 장치(input device): 외부로부터의 데이터를 내부로 들여보내는 장치. 마우스, 키보드, 터치패드 등이 해당.</li>
<li>출력 장치(output device): 데이터를 내부에서 외부로 내보내기 위한 장치. 모니터(스크린) 등이 해당.</li>
</ul>
<p>위에서 굵게 표시한 <strong>편의상</strong> 단어들은, 실제 의사소통 때 잘 쓰이는 말입니다. 우리가 매번 &quot;중앙처리장치&quot;라고 길게 말하기에는 너무 힘들 것 같습니다. 앞으로도 편의상 단어를 많이 사용할 것입니다.</p>
<p>실제 하드웨어의 종류는 엄청나게 많고, 위 항목 하나만 하더라도 하위 분류가 아주 많이 뻗어나가는 하나의 대단원입니다. 하지만 프로그래밍을 할 때 최소한 알아두어야 할 하드웨어 친구들이기도 하죠.</p>
<hr>
<h3>하드웨어 예시</h3>
<p>컴퓨터를 켤 때, 우리는 윈도우 로고를 감상할 수 있습니다. 왜 컴퓨터는 전원 버튼을 누르는 즉시 바로 켜지지 않을까요? 컴퓨터나 스마트폰의 전원을 완전히 꺼진 상태에서 다시 켤 때는 어느정도 시간이 걸린다는 건, 너무나 당연한 상식이라서 굳이 의문을 품지 않았을 겁니다. SSD나 하드디스크에는 윈도우와 같은 운영체제(Operating System)가 파일로서 저장되어 있습니다. 하지만 이들은 사실 <strong>CPU와 상호작용하기엔 너무 느리기 때문에, CPU가 작업할 수 있는 환경을 만들어주어야 합니다.</strong> 그것은 바로 <strong>메모리에 운영체제를 로딩</strong>하는 일입니다. 부팅이 완료되었다는 것은, 운영체제가 온전히 메모리 상에 저장되었음을 뜻합니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/%EC%9C%88%EB%8F%84%EC%9A%B0.jpg" alt="윈도우">
<em>파일로 저장되어 있는 운영체제 파일들을 적절하게 메모리로 로딩하는 중</em></p>
<p>이제 메모장을 켜 볼까요, 메모장을 키는 데에는 그렇게 오랜 시간이 걸리지 않습니다. 운영체제보다는 크기가 훨씬 적기 때문이죠. 우리는 입력 장치(Input Device)인 키보드를 통해 글자를 써넣을 수 있습니다. 우리가 글자를 써넣는 매 순간마다 메모리에서는 우리가 써놓은 글들이 업데이트됩니다. 모니터에서 우리가 쓴 글을 볼 수 있는 이유는, 프로그램이 메모리에 저장된 글을 읽어서 출력 장치인 모니터로 보내기 때문입니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/%EB%A9%94%EB%AA%A8%EC%9E%A5.jpg" alt="메모장">
<em>메모장을 켜면 프로그램을 포함한 실시간 정보가 메모리에 계속해서 저장되고 수정된다.</em></p>
<p>*<code>저장</code>*을 한다면 비로소 메모리에 있던 값들이 텍스트 파일로 SSD나 하드디스크에 저장이 되겠지요. 저장하지 않고 강제로 종료한다면, 우리가 이제껏 썼던 글들은 하늘로 날아갑니다. 프로그램이 종료되는 순간 메모리에 있던 메모장과 그 데이터들은 공중분해되기 때문입니다.</p>
<p><img src="elvanov/wp-content/uploads/2019/12/image.png" alt="메모장 저장창">
<em>저장하지 않고 닫으면 다 날아간다.</em></p>
<p>지금까지 컴퓨터의 구성요소와 프로그램이 어떻게 실행되는지 알아보았습니다.</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>프로그램의 정의는 무엇인가?</li>
<li>하드웨어의 주된 5가지 종류는 무엇인가?</li>
<li>왜 번거롭게 파일로 있는 운영체제를 바로 이용하지 않고 시간을 들여 메모리로 로딩하는가?</li>
<li>프로그램이나 명령을 <strong>실행하다</strong> 라는 뜻을 가진 영단어 두 개는 무엇인가?</li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2019-12-11 23:34:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-11 14:34:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-27 07:29:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-26 22:29:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%bb%b4%ed%93%a8%ed%84%b0-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1376</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 명령문, 표현식 ~ 문법을 이루는 것들 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/622</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-13 19:13:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-13 10:13:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 컴퓨터 구성요소 – 컴퓨터는 어떤 걸 할 수 있나? [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589364930.798784;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589364789.277178;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 개발과 관련된 용어]]></title>
		<link>https://elvanov.com/128</link>
		<pubDate>Thu, 12 Dec 2019 03:24:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 개발 프로그램\n\n프로그램에는 게임이나 워드프로세서 등 다양하게 존재한다고 앞서 말씀드렸습니다. 그 중 개발자와 특별히 친숙한 프로그램이 몇 가지가 있습니다.\n\n- **컴파일러(compiler)**: **고급 언어(high-level language)** 로 쓰여진 **소스 코드(source code)** 를 컴퓨터가 사용하기에 용이한 형태로 번역하는 프로그램. C++ 등의 언어는 컴파일러가 필요하다.\n- **인터프리터(interpreter)**: 고급 언어로 쓰여진 코드를 한 줄씩 즉시 실행하는 프로그램. 파이썬은 인터프리터를 통해 실행된다. 인터프리터로 실행되는 언어 또는 파일을 **스크립트(script)** 라고도 한다.\n- **텍스트 에디터(text editor)**: 소스 코드를 작성하는 프로그램. 작성한 후 코드의 번역이나 실행은 컴파일러나 인터프리터에게 맡긴다. 메모장, Microsoft Visual Code 등이 있다.\n- **통합개발환경(IDE: Integrated Development Environmnet)**: 위 세가지 프로그램을 포함하여 개발자가 개발하기 쉽도록 갖가지 부가기능을 갖춘 종합 프로그램. Microsoft Visual Studio, Eclipse 등이 있다.\n\n요상한 말들이 굉장히 많이 등장했습니다. 위 프로그램들은 실제 개발자와 티키타카하는 프로그램들입니다. 개발환경을 세팅하는 것도 아주 큰 화두입니다. 어떻게 개발하냐에 따라서 생산성이 크게 좌지우지 되니까요.\n\n- 고급 언어(high-level language): 사람이 이해하기 편리한 언어. 컴퓨터는 이해하지 못한다. 고급이라 하여 럭셔리하고, 저급이라 하여 추잡하다는 뜻은 절대 아니다. 현대의 거의 모든 프로그래밍 언어가 고급 언어에 해당된다.\n- 저급 언어(low-level language): 사람이 이해하기 굉장히 까다로우나 컴퓨터가 이해할 수 있는 언어. 기계어가 해당된다.\n- 소스 코드(source code) : 고급 언어로 작성한 명령문, 혹은 그 파일을 뜻함. 편의상 **코드**로 지칭.\n\n프로그래밍 언어에는 굉장히 다양한 종류가 있습니다. 여전히 성능이 극한으로 중요한 기계에서 많이 쓰이는 `C`, 객체지향언어의 정수라 불리우는 `C++`과 `Java`, 스크립트 언어의 대표주자 `javascript`와 `python` 등등 헤아릴 수가 없겠지요. 하지만 이 모든 프로그래밍 언어는 사람이 보고 이해할 수 있는 고급 언어에 해당합니다.\n\n`print('hello, world')`\n\n위 파이썬 코드는 'hello, world'를 모니터에 출력하는 코드입니다. print라는 단어도 보이네요. 괄호도 보이고, 따옴표도 보입니다. 파이썬을 한번도 접해보지 못하신 분들은 무슨 뜻인지 당연히 모를 것입니다. 이는 \u0022안녕하세요\u0022를 뜻하는 아랍어 مرحبا를 보고 이해를 하지 못하는 것과 같은 원리입니다. 배우면 할 수 있을 것입니다.\n\n반면 컴퓨터가 이해하는 저급 언어인 기계어는 배우는 것도 거의 불가능합니다. 나름대로의 규칙이 있겠지만 너무 복잡하기 때문입니다. 기계어는 `0`과 `1`로 밖에 표현하지 못합니다. 위 코드 하나라도 기계어로 표현한다면 몇 백, 몇 천의 `0`과 `1`을 조합해야 할 지 모릅니다.\n\n![기계어 표](/elvanov/wp-content/uploads/2019/12/image-1.png)\n*기계어 예시. 지저스...*\n\n\u003e ### 컴파일\n\u003e 컴파일(compile)은 좀 더 범용적인 의미에서, 개발자나 사용자가 다루기 쉬운 형태(코드나 파일의 조합 등)에서 실제 컴퓨터에서 사용되거나 실행될 수 있는 형태로 변환하는 작업을 의미하기도 합니다. (예시 추가 예정) 이러한 변환은 프로그래밍 세계에서 흔한 개념이므로 기억하고 있도록 합시다.\n\n\u002d\u002d-\n\n## 명령 줄 인터페이스\n\n본격적으로 파이썬에 대해 공부하기 전에 또 알아두어야 할 기초 상식이 있습니다. 그것은 바로 개발자와는 친숙한 명령 줄 인터페이스(Command Line Interface)입니다.\n\n명령 줄 인터페이스란, 그래픽 유저 인터페이스(GUI)와는 대비되는 개념으로서, 마우스가 필요없이 단지 명령을 키보드로 입력하여 프로그램을 실행시키는 환경을 의미합니다. 멀리 갈 것도 없이, 시작 버튼을 누르고 \u0022명령 프롬프트\u0022라고 타이핑하여 검색해보세요. 그럼 검정 배경에 글자만 오돌토돌 나와있는 창이 뜰 것입니다.\n\n![명령 프롬프트 열기](https://elvanov.com/elvanov/wp-content/uploads/2020/04/명프.jpg)\n*명령 프롬프트 열기*\n\n![명령 프롬프트에서 dir 명령을 실행한 모습](/elvanov/wp-content/uploads/2019/12/명령행.jpg)\n*윈도우에서 명령 프롬프트를 실행하여 `dir` 명령을 실행시켜 보았다.*\n\n시작 버튼을 클릭하고, 폴더와 파일을 더블 클릭하고, 크롬에서 링크를 클릭하는 우리로서는 마우스를 이용할 수 있는 GUI가 항상 언제나 편리할 것처럼 보입니다. 하지만 특정 패턴이 있거나 규칙이 있는 상황에서는 CLI도 강력한 힘을 발휘할 수 있습니다. 그리고, 애초에 우리가 만들 파이썬 코드의 초기 단계에서는 GUI를 특별히 구현하지 않으므로 CLI 환경에서 밖에 실행을 시키지 못합니다. 간단한 코드를 실행하는 프로그램은 그래픽을 만들 필요가 없습니다. 고로 CLI 환경에 조금이나마 익숙해지는 것이 좋습니다. 이후에 언젠가, 프로그램을 실행시키면 정말로 어떤 창이 떠서 마우스를 이용하여 각종 설정을 할 수 있는 프로그램을 만들 수도 있습니다. 그것은 기초를 다지고 나서 하면 됩니다.\n\n명령 줄 인터페이스는 다음과 같이 아주 다양한 용어로 불립니다. 의미는 대개 동일합니다.\n\n- 명령 행 인터페이스 : 줄이나 행이나 같은 말이지요.\n- 쉘(Shell) : 명령 행 인터페이스를 구현하는 프로그램을 뜻합니다.\n- 명령 프롬프트(Command Prompt): 윈도우에서의 CLI 프로그램 이름입니다.\n- 파워쉘(PowerShell): 윈도우에서의 좀 더 발전된 CLI 프로그램 이름입니다.\n- 콘솔(Console): 인터넷 브라우저에서도 쓰이고, 좀 더 범용적으로 쓰이는 말입니다.\n- 터미널(Terminal): 리눅스나 맥 계열에서 주로 쓰는 말입니다.\n- Bash: 리눅스 계열에서 쓰는 CLI 프로그램 이름입니다.\n\n앞으로 강의에서는 **콘솔 창** 이라고 이야기 하겠습니다.\n\n콘솔 창에서 `명령을 실행한다`라는 말은 `프로그램을 실행한다`라는 말과 동일합니다. 일례로 `ipconfig` 명령은 현재 인터넷 연결 상황이 어떻게 되는지를 출력하라는 명령입니다. 하지만 `ipconfig`는 `C:\\Windows\\System32\\ipconfig.exe` 경로에 존재하는 실제 프로그램이기도 합니다.\n\n콘솔 창은 일반 텍스트 창과는 조금 다릅니다. 한 줄에 하나의 명령만 사용할 수 있습니다. 명령어를 입력하고 엔터(Enter) 키를 누르는 즉시 명령을 해석하여 실행하려고 시도합니다. 올바르지 않은 명령은 찾을 수 없다고 에러를 내뿜습니다. 여러 개의 명령을 한번에 사용하려면 특별한 테크닉이 필요하나, 중요하지는 않습니다.\n\n콘솔 창에서는 일반적인 단축키도 잘 먹지 않습니다. 특히 `Ctrl+C` 단축키는 콘솔의 세계에서는 강제 종료와 같은 의미여서, 프로그램이 한창 실행 중일 때 `Ctrl+C`를 누르는 순간 프로그램을 강제 중지시킬 수 있습니다. 원래의 `Ctrl+C`는 복사인데, 그렇다면 복사를 어떻게 할까요? 윈도우시라면 콘솔 창의 글자를 드래그하고 마우스 오른쪽 클릭을 눌러보세요. 붙여넣으려면 아무것도 선택하지 않은 채로 한번 더 마우스 오른쪽 클릭을 누르면 복사한 글자들이 붙여넣어집니다. 맥은 추가 예정입니다.\n\n특별한 GUI가 없어서 CLI 환경에서 구동할 수 밖에 없는 프로그램이라도, 프로그램에게 특별한 상황을 알려줘야 할 때가 분명 있을 겁니다. 이미지 변환 프로그램을 상상해보세요. 변환된 이미지의 포맷은 어떤 것으로 할 것인지, 해상도는 어느 정도로 할 것인지, 이름 지정은 어떻게 할 것인지 일일히 지정해주어야 할 것입니다. CLI 프로그램에게는 **옵션(option)** 이란 것이 있습니다. 옵션은 하이픈(-)을 이용하여 **인자(argument)** 로서 프로그램에게 넘겨집니다 **(pass)** . \n\n실제 컴파일러나 인터프리터는 대개 GUI가 없는 프로그램이 대다수입니다. 아래는 실제 c언어의 컴파일러인 `gcc`를 실행할 때 쓰는 명령의 예시입니다.\n\n`gcc -pg -mfentry -mnop-mcount -o hello hello.c`\n\n위 예시는 당연히 알 필요는 없습니다. **콘솔 창을 통해 프로그램을 실행하려면 프로그램 이름을 먼저 써야 하고, 이후 하이픈(-)으로 옵션을 줄 수도 있다.** 정도만 기억하고 있으면 됩니다. 그래서 위 명령은 `gcc`가 프로그램 프로그램 이름이고, `-pg ... hello.c`는 프로그램에게 넘길 옵션인 것만 이해하면 됩니다. \n\n\u002d\u002d-\n\n## 연습문제\n\n- 컴파일러는 무엇인가?\n- 컴파일의 좀 더 범용적인 의미는 무엇인가?\n- 인터프리터란 무엇인가?\n- CLI의 여러 유사어 중, 앞으로 강좌에서 쓸 용어는 무엇인가?\n- 텍스트 에디터란 무엇이며, 어떤 종류가 있나?\n- 콘솔 창에서 프로그램을 어떻게 실행시키는가?"} -->
<div class="wp-block-jetpack-markdown"><h2>개발 프로그램</h2>
<p>프로그램에는 게임이나 워드프로세서 등 다양하게 존재한다고 앞서 말씀드렸습니다. 그 중 개발자와 특별히 친숙한 프로그램이 몇 가지가 있습니다.</p>
<ul>
<li><strong>컴파일러(compiler)</strong>: <strong>고급 언어(high-level language)</strong> 로 쓰여진 <strong>소스 코드(source code)</strong> 를 컴퓨터가 사용하기에 용이한 형태로 번역하는 프로그램. C++ 등의 언어는 컴파일러가 필요하다.</li>
<li><strong>인터프리터(interpreter)</strong>: 고급 언어로 쓰여진 코드를 한 줄씩 즉시 실행하는 프로그램. 파이썬은 인터프리터를 통해 실행된다. 인터프리터로 실행되는 언어 또는 파일을 <strong>스크립트(script)</strong> 라고도 한다.</li>
<li><strong>텍스트 에디터(text editor)</strong>: 소스 코드를 작성하는 프로그램. 작성한 후 코드의 번역이나 실행은 컴파일러나 인터프리터에게 맡긴다. 메모장, Microsoft Visual Code 등이 있다.</li>
<li><strong>통합개발환경(IDE: Integrated Development Environmnet)</strong>: 위 세가지 프로그램을 포함하여 개발자가 개발하기 쉽도록 갖가지 부가기능을 갖춘 종합 프로그램. Microsoft Visual Studio, Eclipse 등이 있다.</li>
</ul>
<p>요상한 말들이 굉장히 많이 등장했습니다. 위 프로그램들은 실제 개발자와 티키타카하는 프로그램들입니다. 개발환경을 세팅하는 것도 아주 큰 화두입니다. 어떻게 개발하냐에 따라서 생산성이 크게 좌지우지 되니까요.</p>
<ul>
<li>고급 언어(high-level language): 사람이 이해하기 편리한 언어. 컴퓨터는 이해하지 못한다. 고급이라 하여 럭셔리하고, 저급이라 하여 추잡하다는 뜻은 절대 아니다. 현대의 거의 모든 프로그래밍 언어가 고급 언어에 해당된다.</li>
<li>저급 언어(low-level language): 사람이 이해하기 굉장히 까다로우나 컴퓨터가 이해할 수 있는 언어. 기계어가 해당된다.</li>
<li>소스 코드(source code) : 고급 언어로 작성한 명령문, 혹은 그 파일을 뜻함. 편의상 <strong>코드</strong>로 지칭.</li>
</ul>
<p>프로그래밍 언어에는 굉장히 다양한 종류가 있습니다. 여전히 성능이 극한으로 중요한 기계에서 많이 쓰이는 <code>C</code>, 객체지향언어의 정수라 불리우는 <code>C++</code>과 <code>Java</code>, 스크립트 언어의 대표주자 <code>javascript</code>와 <code>python</code> 등등 헤아릴 수가 없겠지요. 하지만 이 모든 프로그래밍 언어는 사람이 보고 이해할 수 있는 고급 언어에 해당합니다.</p>
<p><code>print('hello, world')</code></p>
<p>위 파이썬 코드는 'hello, world'를 모니터에 출력하는 코드입니다. print라는 단어도 보이네요. 괄호도 보이고, 따옴표도 보입니다. 파이썬을 한번도 접해보지 못하신 분들은 무슨 뜻인지 당연히 모를 것입니다. 이는 &quot;안녕하세요&quot;를 뜻하는 아랍어 مرحبا를 보고 이해를 하지 못하는 것과 같은 원리입니다. 배우면 할 수 있을 것입니다.</p>
<p>반면 컴퓨터가 이해하는 저급 언어인 기계어는 배우는 것도 거의 불가능합니다. 나름대로의 규칙이 있겠지만 너무 복잡하기 때문입니다. 기계어는 <code>0</code>과 <code>1</code>로 밖에 표현하지 못합니다. 위 코드 하나라도 기계어로 표현한다면 몇 백, 몇 천의 <code>0</code>과 <code>1</code>을 조합해야 할 지 모릅니다.</p>
<p><img src="/elvanov/wp-content/uploads/2019/12/image-1.png" alt="기계어 표">
<em>기계어 예시. 지저스...</em></p>
<blockquote>
<h3>컴파일</h3>
<p>컴파일(compile)은 좀 더 범용적인 의미에서, 개발자나 사용자가 다루기 쉬운 형태(코드나 파일의 조합 등)에서 실제 컴퓨터에서 사용되거나 실행될 수 있는 형태로 변환하는 작업을 의미하기도 합니다. (예시 추가 예정) 이러한 변환은 프로그래밍 세계에서 흔한 개념이므로 기억하고 있도록 합시다.</p>
</blockquote>
<hr>
<h2>명령 줄 인터페이스</h2>
<p>본격적으로 파이썬에 대해 공부하기 전에 또 알아두어야 할 기초 상식이 있습니다. 그것은 바로 개발자와는 친숙한 명령 줄 인터페이스(Command Line Interface)입니다.</p>
<p>명령 줄 인터페이스란, 그래픽 유저 인터페이스(GUI)와는 대비되는 개념으로서, 마우스가 필요없이 단지 명령을 키보드로 입력하여 프로그램을 실행시키는 환경을 의미합니다. 멀리 갈 것도 없이, 시작 버튼을 누르고 &quot;명령 프롬프트&quot;라고 타이핑하여 검색해보세요. 그럼 검정 배경에 글자만 오돌토돌 나와있는 창이 뜰 것입니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/%EB%AA%85%ED%94%84.jpg" alt="명령 프롬프트 열기">
<em>명령 프롬프트 열기</em></p>
<p><img src="/elvanov/wp-content/uploads/2019/12/%EB%AA%85%EB%A0%B9%ED%96%89.jpg" alt="명령 프롬프트에서 dir 명령을 실행한 모습">
<em>윈도우에서 명령 프롬프트를 실행하여 <code>dir</code> 명령을 실행시켜 보았다.</em></p>
<p>시작 버튼을 클릭하고, 폴더와 파일을 더블 클릭하고, 크롬에서 링크를 클릭하는 우리로서는 마우스를 이용할 수 있는 GUI가 항상 언제나 편리할 것처럼 보입니다. 하지만 특정 패턴이 있거나 규칙이 있는 상황에서는 CLI도 강력한 힘을 발휘할 수 있습니다. 그리고, 애초에 우리가 만들 파이썬 코드의 초기 단계에서는 GUI를 특별히 구현하지 않으므로 CLI 환경에서 밖에 실행을 시키지 못합니다. 간단한 코드를 실행하는 프로그램은 그래픽을 만들 필요가 없습니다. 고로 CLI 환경에 조금이나마 익숙해지는 것이 좋습니다. 이후에 언젠가, 프로그램을 실행시키면 정말로 어떤 창이 떠서 마우스를 이용하여 각종 설정을 할 수 있는 프로그램을 만들 수도 있습니다. 그것은 기초를 다지고 나서 하면 됩니다.</p>
<p>명령 줄 인터페이스는 다음과 같이 아주 다양한 용어로 불립니다. 의미는 대개 동일합니다.</p>
<ul>
<li>명령 행 인터페이스 : 줄이나 행이나 같은 말이지요.</li>
<li>쉘(Shell) : 명령 행 인터페이스를 구현하는 프로그램을 뜻합니다.</li>
<li>명령 프롬프트(Command Prompt): 윈도우에서의 CLI 프로그램 이름입니다.</li>
<li>파워쉘(PowerShell): 윈도우에서의 좀 더 발전된 CLI 프로그램 이름입니다.</li>
<li>콘솔(Console): 인터넷 브라우저에서도 쓰이고, 좀 더 범용적으로 쓰이는 말입니다.</li>
<li>터미널(Terminal): 리눅스나 맥 계열에서 주로 쓰는 말입니다.</li>
<li>Bash: 리눅스 계열에서 쓰는 CLI 프로그램 이름입니다.</li>
</ul>
<p>앞으로 강의에서는 <strong>콘솔 창</strong> 이라고 이야기 하겠습니다.</p>
<p>콘솔 창에서 <code>명령을 실행한다</code>라는 말은 <code>프로그램을 실행한다</code>라는 말과 동일합니다. 일례로 <code>ipconfig</code> 명령은 현재 인터넷 연결 상황이 어떻게 되는지를 출력하라는 명령입니다. 하지만 <code>ipconfig</code>는 <code>C:\Windows\System32\ipconfig.exe</code> 경로에 존재하는 실제 프로그램이기도 합니다.</p>
<p>콘솔 창은 일반 텍스트 창과는 조금 다릅니다. 한 줄에 하나의 명령만 사용할 수 있습니다. 명령어를 입력하고 엔터(Enter) 키를 누르는 즉시 명령을 해석하여 실행하려고 시도합니다. 올바르지 않은 명령은 찾을 수 없다고 에러를 내뿜습니다. 여러 개의 명령을 한번에 사용하려면 특별한 테크닉이 필요하나, 중요하지는 않습니다.</p>
<p>콘솔 창에서는 일반적인 단축키도 잘 먹지 않습니다. 특히 <code>Ctrl+C</code> 단축키는 콘솔의 세계에서는 강제 종료와 같은 의미여서, 프로그램이 한창 실행 중일 때 <code>Ctrl+C</code>를 누르는 순간 프로그램을 강제 중지시킬 수 있습니다. 원래의 <code>Ctrl+C</code>는 복사인데, 그렇다면 복사를 어떻게 할까요? 윈도우시라면 콘솔 창의 글자를 드래그하고 마우스 오른쪽 클릭을 눌러보세요. 붙여넣으려면 아무것도 선택하지 않은 채로 한번 더 마우스 오른쪽 클릭을 누르면 복사한 글자들이 붙여넣어집니다. 맥은 추가 예정입니다.</p>
<p>특별한 GUI가 없어서 CLI 환경에서 구동할 수 밖에 없는 프로그램이라도, 프로그램에게 특별한 상황을 알려줘야 할 때가 분명 있을 겁니다. 이미지 변환 프로그램을 상상해보세요. 변환된 이미지의 포맷은 어떤 것으로 할 것인지, 해상도는 어느 정도로 할 것인지, 이름 지정은 어떻게 할 것인지 일일히 지정해주어야 할 것입니다. CLI 프로그램에게는 <strong>옵션(option)</strong> 이란 것이 있습니다. 옵션은 하이픈(-)을 이용하여 <strong>인자(argument)</strong> 로서 프로그램에게 넘겨집니다 <strong>(pass)</strong> .</p>
<p>실제 컴파일러나 인터프리터는 대개 GUI가 없는 프로그램이 대다수입니다. 아래는 실제 c언어의 컴파일러인 <code>gcc</code>를 실행할 때 쓰는 명령의 예시입니다.</p>
<p><code>gcc -pg -mfentry -mnop-mcount -o hello hello.c</code></p>
<p>위 예시는 당연히 알 필요는 없습니다. <strong>콘솔 창을 통해 프로그램을 실행하려면 프로그램 이름을 먼저 써야 하고, 이후 하이픈(-)으로 옵션을 줄 수도 있다.</strong> 정도만 기억하고 있으면 됩니다. 그래서 위 명령은 <code>gcc</code>가 프로그램 프로그램 이름이고, <code>-pg ... hello.c</code>는 프로그램에게 넘길 옵션인 것만 이해하면 됩니다.</p>
<hr>
<h2>연습문제</h2>
<ul>
<li>컴파일러는 무엇인가?</li>
<li>컴파일의 좀 더 범용적인 의미는 무엇인가?</li>
<li>인터프리터란 무엇인가?</li>
<li>CLI의 여러 유사어 중, 앞으로 강좌에서 쓸 용어는 무엇인가?</li>
<li>텍스트 에디터란 무엇이며, 어떤 종류가 있나?</li>
<li>콘솔 창에서 프로그램을 어떻게 실행시키는가?</li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":""} -->
<div class="wp-block-jetpack-markdown"></div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 12:24:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 03:24:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-27 07:29:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-26 22:29:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ea%b0%9c%eb%b0%9c%ea%b3%bc-%ea%b4%80%eb%a0%a8%eb%90%9c-%ec%9a%a9%ec%96%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 파이썬의 선택 ~ 왜 파이썬인가?]]></title>
		<link>https://elvanov.com/131</link>
		<pubDate>Thu, 12 Dec 2019 03:51:31 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2><br>파이썬을 선택하는 이유</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>배우기 쉬움.</strong></li><li><strong>생태계가 잘 꾸려져 있음.</strong></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>파이썬은 배우기 쉽습니다. 파이썬은 처음부터 신중하게 고안되고 설계되어져 왔습니다. 파이썬은 철학이나 개발 지침을 명확히 세워놓고 꾸준히 발전해온 언어입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://python-guide-kr.readthedocs.io/ko/latest/writing/style.html#zen-of-python">파이썬의 선</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이런 철학에 힘입어 파이썬은 생태계가 잘 꾸려져 있습니다. 사용하는 사람이 많아서 찾아볼 수 있는 자원이 풍부하고, 다른 사람들이 만들어놓은 편리한 기능을&nbsp;<strong>모듈(module)</strong>&nbsp;로서 우리가 만들 프로그램에 불러와 사용할 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>특히 <code>pip</code>라는, 파이썬으로 작성된 소프트웨어를 설치 및 관리하는 패키지 관리 시스템도 자체적으로 제공</strong>되고 있습니다. 이를 통해 손쉽게 파이썬 프로그램들을 관리하고 우리가 만들 프로그램에서 사용해볼 수 있습니다. 예를 들자면 <code>pandas</code>는 각종 데이터와 관련된 파일을 핸들링할 수 있고, <code>flask</code>로는 간단하게 웹 어플리케이션을 만들어볼 수도 있습니다. 유용한 패키지는 찾아보면 더욱 많습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>이외에 파이썬의 장단점 및 특징이 궁금하다면&nbsp;<a href="https://namu.wiki/w/Python">갓무위키</a>를 확인하세요!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>파이썬을 배우기 위한 …</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리가 배울 파이썬은 컴파일러를 쓰지 않습니다. 파이썬은 인터프리터를 이용하는 언어입니다. 즉, <strong>파이썬을 사용하려면 인터프리터라는 프로그램이 설치되어 있어야 합니다. 이를 줄여서 "파이썬을 설치한다"라고 말합니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 파이썬 코드를 작성하고자 합니다. 하지만 인터프리터는 텍스트 에디터가 아닙니다. 인터프리터는 작성된 코드를 실행시키는 역할이지 코드를 편집하는 역할은 아니니까요. 우리는&nbsp;<strong>텍스트 에디터도 필요합니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 가장 간단한 에디터인 메모장을 이용해볼 수 있습니다. 하지만 조금 더 편리한 기능을 제공해주면서 공짜인(!) 에디터도 많으니, 그것들을 사용하지 않을 이유가 없겠지요. 우리는&nbsp;<a href="https://code.visualstudio.com/">Visual Studio Code</a>라는 프로그램을 이용할 것입니다. 이 프로그램은 사용하는 사람이 많아 각종 팁과 부가 프로그램을 쉽게 얻을 수 있습니다. 파이썬 코드를 전문적으로 작성하는 사람은&nbsp;<a href="https://www.jetbrains.com/ko-kr/pycharm/">파이참(PyCharm)</a>이라는 유료 프로그램을 사용하기도 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 <a href="https://elvanov.com/1040">파이썬을 설치(다음 시간)</a>해 봅시다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 12:51:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 03:51:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 17:41:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 08:41:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%8c%8c%ec%9d%b4%ec%8d%ac%ec%9d%98-%ec%84%a0%ed%83%9d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 기초 입출력 ~ 소통하기]]></title>
		<link>https://elvanov.com/135</link>
		<pubDate>Thu, 12 Dec 2019 04:13:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:insert-pages/block {"url":"https://elvanov.com/python-contents","page":240,"display":"content"} /-->

<!-- wp:jetpack/markdown {"source":"## 선행되어야 하는 것\n\n- 파이썬 설치\n\n## 한 줄에 하나씩, 차례대로\n\n모니터에 글자를 출력할 때에는 print라는 **함수(function)** 를 이용합니다. 다음 코드를 실행해 봅시다. 함수의 자세한 내용은 [함수와 메서드의 호출](371) 에서 나오나, 지금은 차근차근 천천히 한 발짝씩 나아가는게 중요합니다.\n\n- 실행 코드\n```python\nprint('안녕하세요?')\n```\n- 결과\n```plaintext\n안녕하세요?\n```\n\n\u002d\u002d-\n\n그렇다면 다음 코드를 다시 실행해보아요.\n\n- 실행 코드\n```python\nprint('안녕하세요?')\nprint('두번째입니다.')\n```\n- 결과\n```plaintext\n안녕하세요?\n두번째입니다.\n```\n\n\u002d\u002d-\n\n`두번째입니다.`가 두번째에 출력되었습니다. 그렇다면 자리를 바꾸면 어떻게 될까요?\n\n- 실행 코드\n```python\nprint('두번째입니다.')\nprint('안녕하세요?')\n```\n\n- 결과\n```plaintext\n두번째입니다.\n안녕하세요?\n```\n\n\u002d\u002d-\n\n예상대로 자리가 바뀐 채로 출력이 되었습니다. 두 줄에 걸쳐 쓰기가 귀찮습니다. 그냥 한 줄에 쓸래요.\n\n- 실행 코드\n```python\nprint('두번째입니다.') print('안녕하세요?')\n```\n\n- 결과\n```plaintext\n  File \u0022c:/Users/tooth/Desktop/py.py\u0022, line 1\n    print('두번째입니다.') print('안녕하세요?')\n                         ^\nSyntaxError: invalid syntax\n```\n\u002d\u002d-\n\n엥? 뭔가 이상하게 되었습니다. SyntaxError 이라고 합니다. 즉 문법 오류라고 하네요. 한 줄에 두 개의 명령을 쓰는 것은 문법 오류인가 봅니다. 그렇다면 한 줄에 하나의 명령만 사용하여야겠습니다.\n\n\u003e ### 기억하세요!\n\u003e - 코드는 위에서부터 아래로 차례대로 실행된다.\n\u003e - 명령은 한 줄에 하나만 작성한다.\n\n## 입력받기\n\n입력을 받을 때는 `input`이라는 함수를 이용합니다. 다음 코드를 실행해보세요.\n\n- 실행 코드\n```python\ninput()\n```\n- 출력"} -->
<div class="wp-block-jetpack-markdown"><h2>선행되어야 하는 것</h2>
<ul>
<li>파이썬 설치</li>
</ul>
<h2>한 줄에 하나씩, 차례대로</h2>
<p>모니터에 글자를 출력할 때에는 print라는 <strong>함수(function)</strong> 를 이용합니다. 다음 코드를 실행해 봅시다. 함수의 자세한 내용은 <a href="371">함수와 메서드의 호출</a> 에서 나오나, 지금은 차근차근 천천히 한 발짝씩 나아가는게 중요합니다.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">print('안녕하세요?')
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">안녕하세요?
</code></pre>
<hr>
<p>그렇다면 다음 코드를 다시 실행해보아요.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">print('안녕하세요?')
print('두번째입니다.')
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">안녕하세요?
두번째입니다.
</code></pre>
<hr>
<p><code>두번째입니다.</code>가 두번째에 출력되었습니다. 그렇다면 자리를 바꾸면 어떻게 될까요?</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">print('두번째입니다.')
print('안녕하세요?')
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">두번째입니다.
안녕하세요?
</code></pre>
<hr>
<p>예상대로 자리가 바뀐 채로 출력이 되었습니다. 두 줄에 걸쳐 쓰기가 귀찮습니다. 그냥 한 줄에 쓸래요.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">print('두번째입니다.') print('안녕하세요?')
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">  File &quot;c:/Users/tooth/Desktop/py.py&quot;, line 1
    print('두번째입니다.') print('안녕하세요?')
                         ^
SyntaxError: invalid syntax
</code></pre>
<hr>
<p>엥? 뭔가 이상하게 되었습니다. SyntaxError 이라고 합니다. 즉 문법 오류라고 하네요. 한 줄에 두 개의 명령을 쓰는 것은 문법 오류인가 봅니다. 그렇다면 한 줄에 하나의 명령만 사용하여야겠습니다.</p>
<blockquote>
<h3>기억하세요!</h3>
<ul>
<li>코드는 위에서부터 아래로 차례대로 실행된다.</li>
<li>명령은 한 줄에 하나만 작성한다.</li>
</ul>
</blockquote>
<h2>입력받기</h2>
<p>입력을 받을 때는 <code>input</code>이라는 함수를 이용합니다. 다음 코드를 실행해보세요.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">input()
</code></pre>
<ul>
<li>출력</li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"id":140} -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2019/12/21.jpg" alt="" class="wp-image-140"/><figcaption>실행하니 멈추었습니다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":139} -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2019/12/22.jpg" alt="" class="wp-image-139"/><figcaption>키보드를 통해 문자를 입력할 수 있습니다. 엔터(Enter) 키를 누르면 진행합니다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n입력만 받고 아무런 행동도 취하지 않았으므로 프로그램은 아무것도 하지 않고 그대로 종료합니다. input의 괄호 안에 `'메시지'`를 넣으면 입력받기 직전에 메시지를 출력할 수 있습니다.\n\n- 실행 코드\n```python\ninput('1을 입력해주세요! \u003e\u003e ')\n```\n\n- 출력\n"} -->
<div class="wp-block-jetpack-markdown"><hr>
<p>입력만 받고 아무런 행동도 취하지 않았으므로 프로그램은 아무것도 하지 않고 그대로 종료합니다. input의 괄호 안에 <code>'메시지'</code>를 넣으면 입력받기 직전에 메시지를 출력할 수 있습니다.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">input('1을 입력해주세요! &gt;&gt; ')
</code></pre>
<ul>
<li>출력</li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"id":141,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2019/12/24.jpg" alt="" class="wp-image-141"/></figure>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"`1`을 입력해달라는 메시지를 줬다고 해서 `1`만 입력할 수 있는 건 아닙니다. 우리의 파이썬 프로그램은 `1을 입력해주세요!` 라는 문맥을 전혀 읽을 수 없습니다. 그러므로 3을 입력해도 에러가 날 일은 절대 없습니다.\n\n\u002d\u002d-\n\n## 표현식(expression), ~~ 문(statement), 블록(block)\n\n(추가 예정)\n\n\u002d\u002d-\n\n## 예약어(keyword)\n\n예약어란 문법으로 사용되는 단어입니다. 이미 문법적인 뜻이 정해져서 다른 용도로는 사용할 수 없기 때문에 이미 예약되었다 하여 예약어로 불립니다. 키워드라고도 합니다. 우리가 [변수명](143)으로 사용할 수 없습니다. 예약어의 종류는 다음 링크를 참조해주세요.\n\n[https://www.w3schools.com/python/python_ref_keywords.asp](https://www.w3schools.com/python/python_ref_keywords.asp)\n\n\u002d\u002d-\n\n## 주석(comments)\n\n주석이란 소스 코드에 부가적인 설명입니다. 아무리 파이썬이 쉬운 프로그래밍 언어라고들 하지만 방대한 코드를 일일히 해석하기란 시간이 드는 일입니다. 고로 코드를 간략하게나마 설명하고 싶을 때 우리는 주석을 사용합니다. 파이썬 인터프리터는 주석을 맞닥뜨려도 아무런 일을 하지 않습니다. 절대적으로 무시합니다. 코드를 작성하는 우리 인간들의 눈에만 보일 뿐입니다.\n\n주석은 `#`을 통해 작성합니다. `#`은 하나의 줄에서만 작동하고, `#` 뒤에 있는 모든 문자들을 주석으로 만듭니다.\n\n\n```python\n# 이것은 주석입니다. 이 프로그램은 어쩌구저쩌구 설명을 할 수 있습니다.\n# 물론 연속으로 주석이 와도 상관이 없지요.\n# hello = 10 .. 물론 작동하지 않습니다.\nprint('hello!') # 주석은 줄의 가운데에서부터도 시작할 수 있습니다.\n```\n\n위 주석은 한 줄 한 줄마다 작성해야 하는 불편함이 있습니다. 하지만 여러 줄에 걸친 주석을 만들 수도 있는데요, 이는 한참 더 뒤에 배웁시다. 문자열(추가 예정)\n\n\u002d\u002d-\n\n## 연습 문제\n- 모니터에 글자를 출력하려면 어떻게 해야 하는가?\n- input은 어떤 역할인가?\n- 코드는 어떤 순서로 실행되는가?\n- 명령은 한 줄에 몇 개까지 사용할 수 있는가?\n- 예약어는 무엇인가?\n- 주석은 무엇이고, 어떻게 사용하는가?"} -->
<div class="wp-block-jetpack-markdown"><p><code>1</code>을 입력해달라는 메시지를 줬다고 해서 <code>1</code>만 입력할 수 있는 건 아닙니다. 우리의 파이썬 프로그램은 <code>1을 입력해주세요!</code> 라는 문맥을 전혀 읽을 수 없습니다. 그러므로 3을 입력해도 에러가 날 일은 절대 없습니다.</p>
<hr>
<h2>표현식(expression), ~~ 문(statement), 블록(block)</h2>
<p>(추가 예정)</p>
<hr>
<h2>예약어(keyword)</h2>
<p>예약어란 문법으로 사용되는 단어입니다. 이미 문법적인 뜻이 정해져서 다른 용도로는 사용할 수 없기 때문에 이미 예약되었다 하여 예약어로 불립니다. 키워드라고도 합니다. 우리가 <a href="143">변수명</a>으로 사용할 수 없습니다. 예약어의 종류는 다음 링크를 참조해주세요.</p>
<p><a href="https://www.w3schools.com/python/python_ref_keywords.asp">https://www.w3schools.com/python/python_ref_keywords.asp</a></p>
<hr>
<h2>주석(comments)</h2>
<p>주석이란 소스 코드에 부가적인 설명입니다. 아무리 파이썬이 쉬운 프로그래밍 언어라고들 하지만 방대한 코드를 일일히 해석하기란 시간이 드는 일입니다. 고로 코드를 간략하게나마 설명하고 싶을 때 우리는 주석을 사용합니다. 파이썬 인터프리터는 주석을 맞닥뜨려도 아무런 일을 하지 않습니다. 절대적으로 무시합니다. 코드를 작성하는 우리 인간들의 눈에만 보일 뿐입니다.</p>
<p>주석은 <code>#</code>을 통해 작성합니다. <code>#</code>은 하나의 줄에서만 작동하고, <code>#</code> 뒤에 있는 모든 문자들을 주석으로 만듭니다.</p>
<pre><code class="language-python"># 이것은 주석입니다. 이 프로그램은 어쩌구저쩌구 설명을 할 수 있습니다.
# 물론 연속으로 주석이 와도 상관이 없지요.
# hello = 10 .. 물론 작동하지 않습니다.
print('hello!') # 주석은 줄의 가운데에서부터도 시작할 수 있습니다.
</code></pre>
<p>위 주석은 한 줄 한 줄마다 작성해야 하는 불편함이 있습니다. 하지만 여러 줄에 걸친 주석을 만들 수도 있는데요, 이는 한참 더 뒤에 배웁시다. 문자열(추가 예정)</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>모니터에 글자를 출력하려면 어떻게 해야 하는가?</li>
<li>input은 어떤 역할인가?</li>
<li>코드는 어떤 순서로 실행되는가?</li>
<li>명령은 한 줄에 몇 개까지 사용할 수 있는가?</li>
<li>예약어는 무엇인가?</li>
<li>주석은 무엇이고, 어떻게 사용하는가?</li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 13:13:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 04:13:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-25 12:09:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-25 03:09:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ea%b8%b0%ec%b4%88-%ec%9e%85%ec%b6%9c%eb%a0%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 변수와 대입 ~ 기억하기]]></title>
		<link>https://elvanov.com/143</link>
		<pubDate>Thu, 12 Dec 2019 04:51:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 변수의 필요성\n\n우리는 이전에 사용자로부터 입력을 받았습니다. 바로 `input()`으로요. 그런데 우리가 입력을 받는 이유는 무엇일까요? 사용자로부터 유의미한 정보를 갖고와서 적절하게 가공하고 처리하여 결과를 내놓기 위함입니다. 그러한 정보, 즉 데이터(값)을 다루기 위해서는 그것을 기억하고 있어야 합니다. 단순히 `input()`하면 사용자가 입력할 수 있기만 하지, 그 입력한 값들은 공중분해됩니다. 이제, 변수가 등장합니다. 변수는 우리들에게 **값을 기억하고 저장할 수 있는 메커니즘**을 제공합니다.\n\n\u002d\u002d-\n\n## 변수(variable)\n\n**변수(variable)** 는 값(데이터)에 붙이는 특별한 **이름(name)** 입니다. 변수를 사용하기 위해서는 **정의(define)** 되어야 합니다. 변수를 변경하려면 값을 **대입(할당, assignment)** 하면 됩니다.\n\n이번 강좌도 마찬가지로 갖가지 개념과 용어가 동시에 등장합니다. 우선 가벼운 마음으로 죽 읽고, 다시 처음부터 읽는 걸 권장드립니다.\n\n백문이불여일견, 예시를 보면서 바로 이야기를 나누어 봅시다. ##1##를 누르면 설명으로 이동합니다.\n\n- 실행 코드\n```python\nperson = input() ##a_1##\nprint(person) ##a_2##\n```\n```plaintext\nPS C:\\Users\\tooth\u003e \u0026 C:/Users/tooth/AppData/Local/Programs/Python/Python37-32/python.exe c:/Users/tooth/Desktop/py.py\n하이\n하이\nPS C:\\Users\\tooth\u003e\n```\n\u003e 첫번째 하이는 사용자가 직접 입력한 것이고, 두번째 하이는 그대로 출력된 것입니다.\n\n\u002d\u002d-\n\n실행 코드를 살펴보면서 천천히 설명하도록 하겠습니다.\n\n### *a_1*(1.) `person = input()`\n\n등호(`=`)가 등장했습니다. 이렇게 등호가 등장하는 줄 하나를 가리켜 대입문이라고 합니다. 대입이라는 사건이 일어나는 문장이라는 뜻이죠. 수학에서의 등호 뜻은 '같다'라는 뜻인데요, 수학에서의 뜻은 완전히 잊으셔야 합니다. 여기서의 등호(`=`)는 **오른쪽의 값을 왼쪽의 변수와 연결시키겠다**는 뜻입니다.\n\n등호를 기준으로 오른쪽을 먼저 살펴봅시다. 오른쪽에는 우리가 이전 시간에 사용했던 `input()`이 등장했습니다. `input()` 기능이 무엇인지 기억나시나요? 바로 사용자로부터 입력을 받는다는 것이죠. 파이썬 인터프리터는 대입문을 만나게 되면 등호의 오른쪽을 먼저 처리하기 때문에, `input()`이 먼저 실행되면서 프로그램이 사용자의 입력을 받기 위해 멈추게 됩니다. 우리가 커서를 콘솔 창으로 옮겨서, 영단어나 한글 무엇이든 좋습니다. 아무거나 써 넣어보자구요. Enter를 누르면 프로그램이 재개됩니다. 프로그램이 재개되면 `input()`은 우리가 쓴 단어를 내뱉습니다. 그러니까, 우리가 `하이`라고 적어서 엔터를 눌렀다면, `person = input()`이 `person = '하이'`로 바뀐다는 뜻이지요.\n\n이제 등호를 기준으로 왼쪽을 살펴보겠습니다. `person`이 등장했습니다. 이 `person`은 파이썬 인터프리터 입장에서는 낯섭니다. 특별한 문법이 아니기 때문입니다. 그냥 우리가 임의로 적어놓았을 뿐인 단어인 셈이죠. `person`이나 `hi`나 `melon`이나 적는 건 우리 마음입니다. 이러한 낯선 단어를 파이썬 인터프리터가 접하게 되면, 이를 변수의 이름(name)으로 인식하게 됩니다. `person`은 이전 단계에서는 한 번도 쓰이지 않았고, 여기서 처음 쓰이게 된 셈인데, 변수의 이름이 처음 쓰이는 순간 대입문(`=`)의 왼쪽에 있음으로써 **정의(define)** 될 수 있습니다. 변수가 정의된다면 이 변수와 연결되는 값은 '하이'가 되면서 이후에 우리가 **재사용할 수 있게 됩니다.**\n\n\u003e 저번 시간에서는 한 줄에 하나씩 명령이 차례대로 실행한다고 배웠습니다. 하지만 그 한 줄 내에서도 실행 순서가 명확히 정해져 있습니다. 이러한 순서와 관련된 내용은 중급 과정까지 전부 배운 이후에 표현식(expression)(추가 예정) 관련 개념을 익힐 때 자세히 살펴보도록 합니다.\n\n### *a_2*(2.) `print(person)`\n\n`print`는 화면에 문자를 출력하는 기능을 담당합니다. 여기에 우리가 직접 `'안녕하세요'`와 같이 값을 넘겨주는 게 아니라 `person`이라고 넘겨주었습니다. `person`은 우리가 앞서 정의했던 변수입니다. 그래서 `print`는 `person`에 연결된 값을 읽으려 합니다. `person`은 바로 이전의 대입문을 통해 `'하이'`라는 값과 연결되어 있는 상태이지요. 즉, `print('하이')`가 되어 `하이`라고 출력하게 되는 것입니다.\n\n\u002d\u002d-\n\n## 대입(assignment)\n\n**대입(assignment)** 이란 앞서 설명했듯이 **등호(`=`)를 통해 오른쪽에 있는 값과 왼쪽에 있는 변수를 연결시킨다**는 뜻입니다. 그리고 그 등호가 등장하는 줄 하나를 가리켜 **대입문**이라고 합니다. \n\n변수에 값을 대입해야 비로소 변수를 이용할 수 있기 때문에 변수와 대입은 절대 떨어질 수 없는 관계입니다. 대입은 무조건 오른쪽에서 왼쪽으로 움직입니다. 하지만 만약 다음과 같이 순서를 바꾸게 되면 어떤 일이 일어날까요?\n\n- 실행 코드\n```python\nperson = 'abc'\n'abc' = person\n```\n- 결과\n```plaintext\n  File \u0022c:/Users/tooth/Desktop/py.py\u0022, line 2\n    'abc' = person\n    ^\nSyntaxError: can't assign to literal\n```\n두번째 줄에서 구문 에러가 일어났습니다. `person`을 `'abc'`에 대입하려다 에러가 난 모양입니다. \u0022리터럴에는 할당할 수 없습니다.\u0022 라는 게 에러 메시지네요. 리터럴은 무엇일까요? 그것은 조금 어려운 내용이므로 이후로 미룹시다. (추가 예정) 어쨌건 왼쪽에는 무조건 값이 아니라 변수가 있어야 합니다.\n\n\u002d\u002d-\n\n## 선언, 정의, 초기화\n\n냉혹한 프로그래밍의 세계에서는 일반적으로 변수를 다룰 때 함께 이야기되는 것이 **선언(Declaration), 정의(Definition), 초기화(Initialization)** 입니다. 이것은 변수를 설정할 때 어떤 세부적인 단계로 설정할지에 관한 내용입니다. 쉽게 풀이해서 이야기하자면 다음과 같습니다.\n\n- 선언 : 내가 이 변수를 지금부터 사용할 생각이야.\n- 정의 : 이 변수의 내용은 ~~~ 로 구성될 거야.\n- 초기화 : 이 변수의 최초 값은 ~~~ 로 할게.\n\n아이고, 말장난 같습니다. 놀랍게도 파이썬이 아닌 C++ 등의 다른 프로그래밍 언어에서는 세 가지 모두 다른 의미를 가지고 있고, 적시적소에 활용되어야 하지만, 파이썬에서는 전혀 신경쓸 필요가 없습니다. 파이썬에서 세 가지는 거의 동시에 이루어지기 때문입니다.\n\n```python\nperson = 'abc'\n```\n\n이 한줄로 우리는 \u0022야, 지금부터 내가 `person`이라는 변수를 사용할 거야. 이 변수는 문자열을 가지고 있고 값은 `'abc'`이니까, 잘 알아둬.\u0022 라고 말하며 선언, 정의, 초기화를 동시에 진행했습니다. 그래서 파이썬에서는 선언, 정의, 초기화를 동일한 뜻으로 사용하여도 무방합니다. 등호(`=`)가 등장하는 줄은 **대입문**이라고 이야기했습니다. 즉, 초기화를 대입으로 진행한 것이죠. \n\n프로그래밍의 세계에서는 이 세 가지 용어가 아주 흔하게 사용됩니다. 실제로 아래 스크린샷과 같이 인터넷에 `파이썬 변수 정의`라고 검색해보면 해당 용어들이 혼용된다는 걸 아시게 될 것입니다. \n\n![구글에 파이썬 변수 정의라고 검색했을 때의 모습](elvanov/wp-content/uploads/2019/12/image-2.png)\n*구글 님의 검색*\n\n앞으로 우리는 변수를 새롭게 만들 때 선언이나 초기화라는 용어는 사용하지 않고 **정의**만을 사용하도록 하겠습니다.\n\n\u002d\u002d-\n\n## 변수를 정의하는 유일한 방법\n\n```python\nperson\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/py.py\u0022, line 1, in \u003cmodule\u003e\n    person\nNameError: name 'person' is not defined\n```\n\n**파이썬에서 변수를 정의하는 유일한 방법은 대입문을 쓰는 것입니다.** 대입문을 이용하지 않고서는 변수를 정의하는 방법은 없습니다. 위 예제처럼 값을 대입하지 않고 그냥 `person`이라는 이름만 쓴다면, 파이썬 인터프리터는 이전에 정의했던 변수 중 `person`을 찾으려고 합니다. 하지만 정의해 놓은게 없으니 에러가 뜹니다. `person`이 `not defined`, 즉 정의되지 않았다는 뜻입니다.\n\n\u002d\u002d-\n\n## 변수 활용 예제\n\n몇 가지 예제만 더 보고 진행하겠습니다.\n\n\u002d\u002d-\n\n### 차례대로 진행됩니다\n\n```python\nprint(hello)\nhello = '하이'\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/py.py\u0022, line 1, in \u003cmodule\u003e\n    print(hello)\nNameError: name 'hello' is not defined\n```\n\n프로그램은 위에서 차례대로 내려가므로, 첫째 줄, `print` 함수의 시점에서는 `hello`가 아직 정의되지 않았습니다. 그러므로 에러입니다.\n\n\u002d\u002d-\n\n### 기존에 있던 값은 사라집니다.\n\n```python\nperson = 'Kim Bo Ram'\nperson = 'Park Bo Young'\nprint(person)\n```\n```plaintext\nPark Bo Young\n```\n\n`person`에 `'Kim Bo Ram'`이라는 값을 넣었습니다. 하지만 그 직후, 'Park Bo Young'이라는 값을 또 넣었습니다. 그렇다면 `'Kim Bo Ram'` 은 어떻게 되는 것일까요? 그냥 사라집니다. **기존에 값이 있었던 변수에게 재차 대입한다면 기존의 값은 사라집니다.**\n\n\u002d\u002d-\n\n### 변수에 변수를 대입하기\n\n```python\nhello = 'hi'\nperson = hello\nprint(person)\n```\n```plaintext\nhi\n```\n\n변수를 정의하거나 대입할 때 또 다른 변수를 활용할 수 있습니다. 두 번째 줄을 유의해주세요. `person = hello`라고 되어 있습니다. 이 줄은 *`hello`에 있는 값을 불러와서 `person`에게 대입시키겠다* 라는 뜻입니다. 그렇다고 `hello`가 값을 `person`에게 퍼주어서 `hello`가 빈털털이가 되는 것은 절대 아닙니다. `hello`는 여전히 `'hi'`를 가지고 있고, `person` 또한 `hello`와 같은 문자열 값을 갖게 됩니다.\n\n\u002d\u002d-\n\n### 변수와 문자열 값의 구분\n```python\nhello = 'hi'\nprint('hello')\nprint(hello)\n```\n```plaintext\nhello\nhi\n```\n\n`print` 함수 내부에 따옴표(`'`)가 들어간 것과 들어가지 않은 것의 차이를 보여줍니다. 따옴표는 따옴표 안에 있는 문자들을 문자열 값으로서 사용하겠다는 뜻을 가지고 있으며, 파이썬 문법의 당당한 일원입니다. 그러므로 `'hello'`는 문자열 값으로서의 `'hello'`를 뜻합니다. 반면 첫째 줄에서 우리는 `hello`라는 이름을 가진 변수를 정의하였고, 이 변수는 `'hi'`라는 값을 가지고 있습니다. 따옴표가 없는 `print(hello)`는 `hello` 변수를 이용하겠다는 뜻이므로 `hi`를 출력합니다.\n\n\u002d\u002d-\n\n### 변수의 값 뒤바꾸기 예제\n```python\nhello = 'hi'\nperson = 'Park Bo Young'\n\nhello = person\nperson = hello\n\nprint(hello)\nprint(person)\n```\n```plaintext\nPark Bo Young\nPark Bo Young\n```\n\n`hello` 값과 `person` 값을 뒤바꾸고 싶어서 서로 대입했습니다. 하지만 결과는 의도와는 다르네요. 두개 다 `'Park Bo Young'` 값을 가지고 있습니다. 원인은 무엇일까요? \n\n`hello = person`이 실행되는 순간 `hello`는 `person`의 값이었던 `'Park Bo Young'`을 가지게 되었습니다. `hello`와 `person`이 같은 값을 가지게 되었고, `'hi'` 값은 공중분해되었죠. 그러므로 `person = hello`에서 또한 다 같은 `'Park Bo Young'`을 갖게 된 것입니다. \n\n진행상황을 시각화하면 다음과 같습니다.\n\n![값 뒤바꾸기 실패 시각화](/elvanov/wp-content/uploads/2020/01/t1.gif)\n*값을 뒤바꾸려고 했으나 실패했습니다.*\n\n값을 바꾸려면 변수를 하나 더 쓰거나, 파이썬의 또 다른 문법을 사용하면 됩니다.\n\n- 또 다른 변수 하나 더 쓰기\n```python\nhello = 'hi'\nperson = 'Park Bo Young'\n\ntemp = hello\nhello = person\nperson = temp\n\nprint(hello)\nprint(person)\n```\n```plaintext\nPark Bo Young\nhi\n```\n\n이를 시각화하면 다음과 같습니다.\n\n![값 뒤바꾸기 성공 시각화](/elvanov/wp-content/uploads/2020/01/t2.gif)\n*변수 하나를 더 써서 값을 성공적으로 뒤바꾸었습니다.*\n\n\n- 파이썬의 특별한 문법 활용하기\n```python\nhello = 'hi'\nperson = 'Park Bo Young'\n\nhello, person = person, hello\n\nprint(hello)\nprint(person)\n```\n```plaintext\nPark Bo Young\nhi\n```\n\n\u002d\u002d-\n\n## 변수의 종류\n\n변수는 여러가지 종류가 있습니다. 이른바 변수의 **타입(type)** 이라고 합니다. 타입 자체에도 엄연한 이름이 존재하고, 아주 많은 종류가 있습니다. '변수'라는 이름에 얽매여 꼭 변수가 숫자를 가지고 있다고 생각할 수도 있는데, 그것은 옳지 않습니다. 앞서 살펴보았던 예제에서는 변수에 문자열을 잘 대입하곤 했습니다. 기초 단계에서 많이 쓰이는 타입 네 가지를 소개합니다.\n\n- **`int`** : 정수입니다. `-5`, `0`, `10` 등의 값을 가질 수 있습니다.\n- **`float`** : 실수입니다. `-2.5`, `0.0`, `10.8` 등의 값을 가질 수 있습니다.\n- **`str`** : 문자열(string)입니다. 우리가 지금껏 사용했던 변수입니다. 문자가 하나든, 여러 개든 문자\u0022열\u0022로 취급합니다. `'안녕하세요'` 와 같은 값을 가질 수 있습니다.\n- **`bool`** : 불리언(boolean)입니다. `True` 혹은 `False` 값 밖에 가지지 못합니다.\n\n`int`, `float`은 우리가 다음 시간에 값을 [계산](154)할 때 유용하게 사용될 수 있는 변수입니다. `bool`은 우리가 다다음 시간에 [조건문](217)을 통해 프로그램의 흐름을 만들고 싶을 때 유용합니다. 차례대로, 천천히 배워나가봅시다.\n\n\u002d\u002d-\n\n## 변수 이름 규칙\n\n변수의 이름을 만들 때에도 일정한 규칙이 있습니다. 변수는 앞으로도 수없이 활용하므로 변수 이름 규칙은 꼭 암기하고 있도록 합니다.\n\n- **변수 이름에는 알파벳 대소문자, 숫자, 언더바(_)만 사용할 수 있습니다. 즉 공백(` `), 특수문자 등은 사용할 수 없습니다.**\n- **[예약어](https://elvanov.com/135)로는 사용이 불가능합니다.**\n- **알파벳 대소문자는 서로 구분됩니다.** 즉 `hello`와 `Hello`는 다른 변수입니다.\n- **변수 이름은 숫자로 시작할 수 없습니다.** `1person`는 잘못된 변수명입니다. `person1`은 문제 없습니다.\n\n\u002d\u002d-\n\n### 예약어(keyword)\n\n예약어란 문법으로 사용되는 단어입니다. 이미 문법적인 뜻이 정해져서 다른 용도로는 사용할 수 없기 때문에 이미 예약되었다 하여 예약어로 불립니다. 키워드라고도 합니다. 우리가 변수명으로 사용할 수 없습니다.\n\n이 예약어들은 앞으로도 차차 배울테니 어떤 예약어가 있는지 외울 필요는 전혀 없습니다. 배운 적 없는 예약어라도, Visual Studio Code를 쓰고 있다면 예약어를 작성했을 때 텍스트의 색깔이 찬란하게 변하는 것을 확인할 수 있으니 그 때마다 수정해주면 됩니다. 예약어의 종류는 다음 링크를 참조해주세요.\n\n[https://www.w3schools.com/python/python_ref_keywords.asp](https://www.w3schools.com/python/python_ref_keywords.asp)\n\n\u002d\u002d-\n\n## 문자열 값(`str` 변수)의 표기\n\n지금까지는 작은따옴표로만 문자열을 표기했습니다. `'abc'` 이렇게요. 하지만 쌍따옴표도 똑같은 역할을 합니다. `\u0022abc\u0022`는 `'abc'`와 동일합니다.\n\n\u002d\u002d-\n\n## 상수?\n\n상수란 변수의 반대 개념으로, 변하지 않는 수를 뜻합니다. 변하지 않는 수는 왜 필요할까요? 수학 공식을 정리한 모듈이 있다고 가정합시다. 이 모듈에는 수학의 파이 값을 이용합니다. 파이는 무리수이므로 완전히 표현될 수는 없기에 컴퓨터에서는 3.141592.. 의 유한한 소수로서 정해놓습니다. 하지만 실수로 인해 파이 값이 3.5로 변경된다면 어떻게 될까요? 모든 공식의 결과가 엉망진창이 되고 말 것입니다.\n\n프로그램을 만들다 보면 이처럼 변하면 안되는 수나 값이 존재하기 마련입니다. 하지만  파이썬에서는 프로그래밍 언어 차원에서 **상수를 지원하지 않습니다.** 모든 변수는 프로그래머가 값을 대입한다면 값이 변합니다. 다만 프로그래머 사이의 암묵적인 약속으로서, **대문자로만 이루어진 변수명**으로 `\u0022이 값을 변경하지 않았으면 좋겠습니다~~\u0022`라는 메시지를 전파할 수 있습니다. 우리나라는 부가가치세가 10%인데, 왠만해서 바뀔 일이 없으니 `VAT = 0.1` 이렇게 정의하여 다른 프로그래머 뿐만 아니라 미래에 이 코드를 보는 나 자신에게도 `\u0022왠만하면 대입문으로 값을 변경하지는 마세요~~\u0022`라는 메시지를 전달할 수 있는 것입니다.\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 대입문이란 무엇인가?\n- `NameError: name 'person' is not defined` 이 에러의 뜻은 무엇인가?\n- 변수의 기초 타입 4가지는 무엇인가?\n- 변수를 정의할 유일한 방법은 무엇인가?\n- 변수의 이름 규칙 4가지는 무엇인가?\n- 문자열 값을 표기할 수 있는 두 가지 방법은 무엇인가?\n- 파이썬 인터프리터가 대입문을 만나면 왼쪽과 오른쪽 중 어느 것을 먼저 처리하는가?\n- 대입할 때 등호(`=`) 왼쪽에는 무엇이 와야 하는가?\n- 상수의 뜻은 무엇인가? 파이썬에서는 상수 기능이 없다. 하지만 프로그래머 사이의 관례는 있다. 무엇인가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n1. c라는 변수를 정의하세요. 값은 13을 가지고 있습니다.\n\n1. 다음 결과를 그림을 그려서 예측하세요.\n\n```python\na = 'hi'\nb = 'no'\nc = b\nb = a\nd = c\nc = b\nprint(d)\nprint(c)\n```\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. `c = 13`\n\n1.\n\n   ![변수 예측 결과](/elvanov/wp-content/uploads/2020/01/u1.gif)\n   *변수 예측 결과*\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>변수의 필요성</h2>
<p>우리는 이전에 사용자로부터 입력을 받았습니다. 바로 <code>input()</code>으로요. 그런데 우리가 입력을 받는 이유는 무엇일까요? 사용자로부터 유의미한 정보를 갖고와서 적절하게 가공하고 처리하여 결과를 내놓기 위함입니다. 그러한 정보, 즉 데이터(값)을 다루기 위해서는 그것을 기억하고 있어야 합니다. 단순히 <code>input()</code>하면 사용자가 입력할 수 있기만 하지, 그 입력한 값들은 공중분해됩니다. 이제, 변수가 등장합니다. 변수는 우리들에게 <strong>값을 기억하고 저장할 수 있는 메커니즘</strong>을 제공합니다.</p>
<hr>
<h2>변수(variable)</h2>
<p><strong>변수(variable)</strong> 는 값(데이터)에 붙이는 특별한 <strong>이름(name)</strong> 입니다. 변수를 사용하기 위해서는 <strong>정의(define)</strong> 되어야 합니다. 변수를 변경하려면 값을 <strong>대입(할당, assignment)</strong> 하면 됩니다.</p>
<p>이번 강좌도 마찬가지로 갖가지 개념과 용어가 동시에 등장합니다. 우선 가벼운 마음으로 죽 읽고, 다시 처음부터 읽는 걸 권장드립니다.</p>
<p>백문이불여일견, 예시를 보면서 바로 이야기를 나누어 봅시다. ##1##를 누르면 설명으로 이동합니다.</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">person = input() ##a_1##
print(person) ##a_2##
</code></pre>
<pre><code class="language-plaintext">PS C:\Users\tooth&gt; &amp; C:/Users/tooth/AppData/Local/Programs/Python/Python37-32/python.exe c:/Users/tooth/Desktop/py.py
하이
하이
PS C:\Users\tooth&gt;
</code></pre>
<blockquote>
<p>첫번째 하이는 사용자가 직접 입력한 것이고, 두번째 하이는 그대로 출력된 것입니다.</p>
</blockquote>
<hr>
<p>실행 코드를 살펴보면서 천천히 설명하도록 하겠습니다.</p>
<h3><em>a_1</em>(1.) <code>person = input()</code></h3>
<p>등호(<code>=</code>)가 등장했습니다. 이렇게 등호가 등장하는 줄 하나를 가리켜 대입문이라고 합니다. 대입이라는 사건이 일어나는 문장이라는 뜻이죠. 수학에서의 등호 뜻은 '같다'라는 뜻인데요, 수학에서의 뜻은 완전히 잊으셔야 합니다. 여기서의 등호(<code>=</code>)는 <strong>오른쪽의 값을 왼쪽의 변수와 연결시키겠다</strong>는 뜻입니다.</p>
<p>등호를 기준으로 오른쪽을 먼저 살펴봅시다. 오른쪽에는 우리가 이전 시간에 사용했던 <code>input()</code>이 등장했습니다. <code>input()</code> 기능이 무엇인지 기억나시나요? 바로 사용자로부터 입력을 받는다는 것이죠. 파이썬 인터프리터는 대입문을 만나게 되면 등호의 오른쪽을 먼저 처리하기 때문에, <code>input()</code>이 먼저 실행되면서 프로그램이 사용자의 입력을 받기 위해 멈추게 됩니다. 우리가 커서를 콘솔 창으로 옮겨서, 영단어나 한글 무엇이든 좋습니다. 아무거나 써 넣어보자구요. Enter를 누르면 프로그램이 재개됩니다. 프로그램이 재개되면 <code>input()</code>은 우리가 쓴 단어를 내뱉습니다. 그러니까, 우리가 <code>하이</code>라고 적어서 엔터를 눌렀다면, <code>person = input()</code>이 <code>person = '하이'</code>로 바뀐다는 뜻이지요.</p>
<p>이제 등호를 기준으로 왼쪽을 살펴보겠습니다. <code>person</code>이 등장했습니다. 이 <code>person</code>은 파이썬 인터프리터 입장에서는 낯섭니다. 특별한 문법이 아니기 때문입니다. 그냥 우리가 임의로 적어놓았을 뿐인 단어인 셈이죠. <code>person</code>이나 <code>hi</code>나 <code>melon</code>이나 적는 건 우리 마음입니다. 이러한 낯선 단어를 파이썬 인터프리터가 접하게 되면, 이를 변수의 이름(name)으로 인식하게 됩니다. <code>person</code>은 이전 단계에서는 한 번도 쓰이지 않았고, 여기서 처음 쓰이게 된 셈인데, 변수의 이름이 처음 쓰이는 순간 대입문(<code>=</code>)의 왼쪽에 있음으로써 <strong>정의(define)</strong> 될 수 있습니다. 변수가 정의된다면 이 변수와 연결되는 값은 '하이'가 되면서 이후에 우리가 <strong>재사용할 수 있게 됩니다.</strong></p>
<blockquote>
<p>저번 시간에서는 한 줄에 하나씩 명령이 차례대로 실행한다고 배웠습니다. 하지만 그 한 줄 내에서도 실행 순서가 명확히 정해져 있습니다. 이러한 순서와 관련된 내용은 중급 과정까지 전부 배운 이후에 표현식(expression)(추가 예정) 관련 개념을 익힐 때 자세히 살펴보도록 합니다.</p>
</blockquote>
<h3><em>a_2</em>(2.) <code>print(person)</code></h3>
<p><code>print</code>는 화면에 문자를 출력하는 기능을 담당합니다. 여기에 우리가 직접 <code>'안녕하세요'</code>와 같이 값을 넘겨주는 게 아니라 <code>person</code>이라고 넘겨주었습니다. <code>person</code>은 우리가 앞서 정의했던 변수입니다. 그래서 <code>print</code>는 <code>person</code>에 연결된 값을 읽으려 합니다. <code>person</code>은 바로 이전의 대입문을 통해 <code>'하이'</code>라는 값과 연결되어 있는 상태이지요. 즉, <code>print('하이')</code>가 되어 <code>하이</code>라고 출력하게 되는 것입니다.</p>
<hr>
<h2>대입(assignment)</h2>
<p><strong>대입(assignment)</strong> 이란 앞서 설명했듯이 <strong>등호(<code>=</code>)를 통해 오른쪽에 있는 값과 왼쪽에 있는 변수를 연결시킨다</strong>는 뜻입니다. 그리고 그 등호가 등장하는 줄 하나를 가리켜 <strong>대입문</strong>이라고 합니다.</p>
<p>변수에 값을 대입해야 비로소 변수를 이용할 수 있기 때문에 변수와 대입은 절대 떨어질 수 없는 관계입니다. 대입은 무조건 오른쪽에서 왼쪽으로 움직입니다. 하지만 만약 다음과 같이 순서를 바꾸게 되면 어떤 일이 일어날까요?</p>
<ul>
<li>실행 코드</li>
</ul>
<pre><code class="language-python">person = 'abc'
'abc' = person
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">  File &quot;c:/Users/tooth/Desktop/py.py&quot;, line 2
    'abc' = person
    ^
SyntaxError: can't assign to literal
</code></pre>
<p>두번째 줄에서 구문 에러가 일어났습니다. <code>person</code>을 <code>'abc'</code>에 대입하려다 에러가 난 모양입니다. &quot;리터럴에는 할당할 수 없습니다.&quot; 라는 게 에러 메시지네요. 리터럴은 무엇일까요? 그것은 조금 어려운 내용이므로 이후로 미룹시다. (추가 예정) 어쨌건 왼쪽에는 무조건 값이 아니라 변수가 있어야 합니다.</p>
<hr>
<h2>선언, 정의, 초기화</h2>
<p>냉혹한 프로그래밍의 세계에서는 일반적으로 변수를 다룰 때 함께 이야기되는 것이 <strong>선언(Declaration), 정의(Definition), 초기화(Initialization)</strong> 입니다. 이것은 변수를 설정할 때 어떤 세부적인 단계로 설정할지에 관한 내용입니다. 쉽게 풀이해서 이야기하자면 다음과 같습니다.</p>
<ul>
<li>선언 : 내가 이 변수를 지금부터 사용할 생각이야.</li>
<li>정의 : 이 변수의 내용은 ~~~ 로 구성될 거야.</li>
<li>초기화 : 이 변수의 최초 값은 ~~~ 로 할게.</li>
</ul>
<p>아이고, 말장난 같습니다. 놀랍게도 파이썬이 아닌 C++ 등의 다른 프로그래밍 언어에서는 세 가지 모두 다른 의미를 가지고 있고, 적시적소에 활용되어야 하지만, 파이썬에서는 전혀 신경쓸 필요가 없습니다. 파이썬에서 세 가지는 거의 동시에 이루어지기 때문입니다.</p>
<pre><code class="language-python">person = 'abc'
</code></pre>
<p>이 한줄로 우리는 &quot;야, 지금부터 내가 <code>person</code>이라는 변수를 사용할 거야. 이 변수는 문자열을 가지고 있고 값은 <code>'abc'</code>이니까, 잘 알아둬.&quot; 라고 말하며 선언, 정의, 초기화를 동시에 진행했습니다. 그래서 파이썬에서는 선언, 정의, 초기화를 동일한 뜻으로 사용하여도 무방합니다. 등호(<code>=</code>)가 등장하는 줄은 <strong>대입문</strong>이라고 이야기했습니다. 즉, 초기화를 대입으로 진행한 것이죠.</p>
<p>프로그래밍의 세계에서는 이 세 가지 용어가 아주 흔하게 사용됩니다. 실제로 아래 스크린샷과 같이 인터넷에 <code>파이썬 변수 정의</code>라고 검색해보면 해당 용어들이 혼용된다는 걸 아시게 될 것입니다.</p>
<p><img src="elvanov/wp-content/uploads/2019/12/image-2.png" alt="구글에 파이썬 변수 정의라고 검색했을 때의 모습">
<em>구글 님의 검색</em></p>
<p>앞으로 우리는 변수를 새롭게 만들 때 선언이나 초기화라는 용어는 사용하지 않고 <strong>정의</strong>만을 사용하도록 하겠습니다.</p>
<hr>
<h2>변수를 정의하는 유일한 방법</h2>
<pre><code class="language-python">person
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/py.py&quot;, line 1, in &lt;module&gt;
    person
NameError: name 'person' is not defined
</code></pre>
<p><strong>파이썬에서 변수를 정의하는 유일한 방법은 대입문을 쓰는 것입니다.</strong> 대입문을 이용하지 않고서는 변수를 정의하는 방법은 없습니다. 위 예제처럼 값을 대입하지 않고 그냥 <code>person</code>이라는 이름만 쓴다면, 파이썬 인터프리터는 이전에 정의했던 변수 중 <code>person</code>을 찾으려고 합니다. 하지만 정의해 놓은게 없으니 에러가 뜹니다. <code>person</code>이 <code>not defined</code>, 즉 정의되지 않았다는 뜻입니다.</p>
<hr>
<h2>변수 활용 예제</h2>
<p>몇 가지 예제만 더 보고 진행하겠습니다.</p>
<hr>
<h3>차례대로 진행됩니다</h3>
<pre><code class="language-python">print(hello)
hello = '하이'
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/py.py&quot;, line 1, in &lt;module&gt;
    print(hello)
NameError: name 'hello' is not defined
</code></pre>
<p>프로그램은 위에서 차례대로 내려가므로, 첫째 줄, <code>print</code> 함수의 시점에서는 <code>hello</code>가 아직 정의되지 않았습니다. 그러므로 에러입니다.</p>
<hr>
<h3>기존에 있던 값은 사라집니다.</h3>
<pre><code class="language-python">person = 'Kim Bo Ram'
person = 'Park Bo Young'
print(person)
</code></pre>
<pre><code class="language-plaintext">Park Bo Young
</code></pre>
<p><code>person</code>에 <code>'Kim Bo Ram'</code>이라는 값을 넣었습니다. 하지만 그 직후, 'Park Bo Young'이라는 값을 또 넣었습니다. 그렇다면 <code>'Kim Bo Ram'</code> 은 어떻게 되는 것일까요? 그냥 사라집니다. <strong>기존에 값이 있었던 변수에게 재차 대입한다면 기존의 값은 사라집니다.</strong></p>
<hr>
<h3>변수에 변수를 대입하기</h3>
<pre><code class="language-python">hello = 'hi'
person = hello
print(person)
</code></pre>
<pre><code class="language-plaintext">hi
</code></pre>
<p>변수를 정의하거나 대입할 때 또 다른 변수를 활용할 수 있습니다. 두 번째 줄을 유의해주세요. <code>person = hello</code>라고 되어 있습니다. 이 줄은 <em><code>hello</code>에 있는 값을 불러와서 <code>person</code>에게 대입시키겠다</em> 라는 뜻입니다. 그렇다고 <code>hello</code>가 값을 <code>person</code>에게 퍼주어서 <code>hello</code>가 빈털털이가 되는 것은 절대 아닙니다. <code>hello</code>는 여전히 <code>'hi'</code>를 가지고 있고, <code>person</code> 또한 <code>hello</code>와 같은 문자열 값을 갖게 됩니다.</p>
<hr>
<h3>변수와 문자열 값의 구분</h3>
<pre><code class="language-python">hello = 'hi'
print('hello')
print(hello)
</code></pre>
<pre><code class="language-plaintext">hello
hi
</code></pre>
<p><code>print</code> 함수 내부에 따옴표(<code>'</code>)가 들어간 것과 들어가지 않은 것의 차이를 보여줍니다. 따옴표는 따옴표 안에 있는 문자들을 문자열 값으로서 사용하겠다는 뜻을 가지고 있으며, 파이썬 문법의 당당한 일원입니다. 그러므로 <code>'hello'</code>는 문자열 값으로서의 <code>'hello'</code>를 뜻합니다. 반면 첫째 줄에서 우리는 <code>hello</code>라는 이름을 가진 변수를 정의하였고, 이 변수는 <code>'hi'</code>라는 값을 가지고 있습니다. 따옴표가 없는 <code>print(hello)</code>는 <code>hello</code> 변수를 이용하겠다는 뜻이므로 <code>hi</code>를 출력합니다.</p>
<hr>
<h3>변수의 값 뒤바꾸기 예제</h3>
<pre><code class="language-python">hello = 'hi'
person = 'Park Bo Young'

hello = person
person = hello

print(hello)
print(person)
</code></pre>
<pre><code class="language-plaintext">Park Bo Young
Park Bo Young
</code></pre>
<p><code>hello</code> 값과 <code>person</code> 값을 뒤바꾸고 싶어서 서로 대입했습니다. 하지만 결과는 의도와는 다르네요. 두개 다 <code>'Park Bo Young'</code> 값을 가지고 있습니다. 원인은 무엇일까요?</p>
<p><code>hello = person</code>이 실행되는 순간 <code>hello</code>는 <code>person</code>의 값이었던 <code>'Park Bo Young'</code>을 가지게 되었습니다. <code>hello</code>와 <code>person</code>이 같은 값을 가지게 되었고, <code>'hi'</code> 값은 공중분해되었죠. 그러므로 <code>person = hello</code>에서 또한 다 같은 <code>'Park Bo Young'</code>을 갖게 된 것입니다.</p>
<p>진행상황을 시각화하면 다음과 같습니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/t1.gif" alt="값 뒤바꾸기 실패 시각화">
<em>값을 뒤바꾸려고 했으나 실패했습니다.</em></p>
<p>값을 바꾸려면 변수를 하나 더 쓰거나, 파이썬의 또 다른 문법을 사용하면 됩니다.</p>
<ul>
<li>또 다른 변수 하나 더 쓰기</li>
</ul>
<pre><code class="language-python">hello = 'hi'
person = 'Park Bo Young'

temp = hello
hello = person
person = temp

print(hello)
print(person)
</code></pre>
<pre><code class="language-plaintext">Park Bo Young
hi
</code></pre>
<p>이를 시각화하면 다음과 같습니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/t2.gif" alt="값 뒤바꾸기 성공 시각화">
<em>변수 하나를 더 써서 값을 성공적으로 뒤바꾸었습니다.</em></p>
<ul>
<li>파이썬의 특별한 문법 활용하기</li>
</ul>
<pre><code class="language-python">hello = 'hi'
person = 'Park Bo Young'

hello, person = person, hello

print(hello)
print(person)
</code></pre>
<pre><code class="language-plaintext">Park Bo Young
hi
</code></pre>
<hr>
<h2>변수의 종류</h2>
<p>변수는 여러가지 종류가 있습니다. 이른바 변수의 <strong>타입(type)</strong> 이라고 합니다. 타입 자체에도 엄연한 이름이 존재하고, 아주 많은 종류가 있습니다. '변수'라는 이름에 얽매여 꼭 변수가 숫자를 가지고 있다고 생각할 수도 있는데, 그것은 옳지 않습니다. 앞서 살펴보았던 예제에서는 변수에 문자열을 잘 대입하곤 했습니다. 기초 단계에서 많이 쓰이는 타입 네 가지를 소개합니다.</p>
<ul>
<li><strong><code>int</code></strong> : 정수입니다. <code>-5</code>, <code>0</code>, <code>10</code> 등의 값을 가질 수 있습니다.</li>
<li><strong><code>float</code></strong> : 실수입니다. <code>-2.5</code>, <code>0.0</code>, <code>10.8</code> 등의 값을 가질 수 있습니다.</li>
<li><strong><code>str</code></strong> : 문자열(string)입니다. 우리가 지금껏 사용했던 변수입니다. 문자가 하나든, 여러 개든 문자&quot;열&quot;로 취급합니다. <code>'안녕하세요'</code> 와 같은 값을 가질 수 있습니다.</li>
<li><strong><code>bool</code></strong> : 불리언(boolean)입니다. <code>True</code> 혹은 <code>False</code> 값 밖에 가지지 못합니다.</li>
</ul>
<p><code>int</code>, <code>float</code>은 우리가 다음 시간에 값을 <a href="154">계산</a>할 때 유용하게 사용될 수 있는 변수입니다. <code>bool</code>은 우리가 다다음 시간에 <a href="217">조건문</a>을 통해 프로그램의 흐름을 만들고 싶을 때 유용합니다. 차례대로, 천천히 배워나가봅시다.</p>
<hr>
<h2>변수 이름 규칙</h2>
<p>변수의 이름을 만들 때에도 일정한 규칙이 있습니다. 변수는 앞으로도 수없이 활용하므로 변수 이름 규칙은 꼭 암기하고 있도록 합니다.</p>
<ul>
<li><strong>변수 이름에는 알파벳 대소문자, 숫자, 언더바(_)만 사용할 수 있습니다. 즉 공백(<code></code>), 특수문자 등은 사용할 수 없습니다.</strong></li>
<li><strong><a href="https://elvanov.com/135">예약어</a>로는 사용이 불가능합니다.</strong></li>
<li><strong>알파벳 대소문자는 서로 구분됩니다.</strong> 즉 <code>hello</code>와 <code>Hello</code>는 다른 변수입니다.</li>
<li><strong>변수 이름은 숫자로 시작할 수 없습니다.</strong> <code>1person</code>는 잘못된 변수명입니다. <code>person1</code>은 문제 없습니다.</li>
</ul>
<hr>
<h3>예약어(keyword)</h3>
<p>예약어란 문법으로 사용되는 단어입니다. 이미 문법적인 뜻이 정해져서 다른 용도로는 사용할 수 없기 때문에 이미 예약되었다 하여 예약어로 불립니다. 키워드라고도 합니다. 우리가 변수명으로 사용할 수 없습니다.</p>
<p>이 예약어들은 앞으로도 차차 배울테니 어떤 예약어가 있는지 외울 필요는 전혀 없습니다. 배운 적 없는 예약어라도, Visual Studio Code를 쓰고 있다면 예약어를 작성했을 때 텍스트의 색깔이 찬란하게 변하는 것을 확인할 수 있으니 그 때마다 수정해주면 됩니다. 예약어의 종류는 다음 링크를 참조해주세요.</p>
<p><a href="https://www.w3schools.com/python/python_ref_keywords.asp">https://www.w3schools.com/python/python_ref_keywords.asp</a></p>
<hr>
<h2>문자열 값(<code>str</code> 변수)의 표기</h2>
<p>지금까지는 작은따옴표로만 문자열을 표기했습니다. <code>'abc'</code> 이렇게요. 하지만 쌍따옴표도 똑같은 역할을 합니다. <code>&quot;abc&quot;</code>는 <code>'abc'</code>와 동일합니다.</p>
<hr>
<h2>상수?</h2>
<p>상수란 변수의 반대 개념으로, 변하지 않는 수를 뜻합니다. 변하지 않는 수는 왜 필요할까요? 수학 공식을 정리한 모듈이 있다고 가정합시다. 이 모듈에는 수학의 파이 값을 이용합니다. 파이는 무리수이므로 완전히 표현될 수는 없기에 컴퓨터에서는 3.141592.. 의 유한한 소수로서 정해놓습니다. 하지만 실수로 인해 파이 값이 3.5로 변경된다면 어떻게 될까요? 모든 공식의 결과가 엉망진창이 되고 말 것입니다.</p>
<p>프로그램을 만들다 보면 이처럼 변하면 안되는 수나 값이 존재하기 마련입니다. 하지만  파이썬에서는 프로그래밍 언어 차원에서 <strong>상수를 지원하지 않습니다.</strong> 모든 변수는 프로그래머가 값을 대입한다면 값이 변합니다. 다만 프로그래머 사이의 암묵적인 약속으로서, <strong>대문자로만 이루어진 변수명</strong>으로 <code>&quot;이 값을 변경하지 않았으면 좋겠습니다~~&quot;</code>라는 메시지를 전파할 수 있습니다. 우리나라는 부가가치세가 10%인데, 왠만해서 바뀔 일이 없으니 <code>VAT = 0.1</code> 이렇게 정의하여 다른 프로그래머 뿐만 아니라 미래에 이 코드를 보는 나 자신에게도 <code>&quot;왠만하면 대입문으로 값을 변경하지는 마세요~~&quot;</code>라는 메시지를 전달할 수 있는 것입니다.</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>대입문이란 무엇인가?</li>
<li><code>NameError: name 'person' is not defined</code> 이 에러의 뜻은 무엇인가?</li>
<li>변수의 기초 타입 4가지는 무엇인가?</li>
<li>변수를 정의할 유일한 방법은 무엇인가?</li>
<li>변수의 이름 규칙 4가지는 무엇인가?</li>
<li>문자열 값을 표기할 수 있는 두 가지 방법은 무엇인가?</li>
<li>파이썬 인터프리터가 대입문을 만나면 왼쪽과 오른쪽 중 어느 것을 먼저 처리하는가?</li>
<li>대입할 때 등호(<code>=</code>) 왼쪽에는 무엇이 와야 하는가?</li>
<li>상수의 뜻은 무엇인가? 파이썬에서는 상수 기능이 없다. 하지만 프로그래머 사이의 관례는 있다. 무엇인가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<ol>
<li>
<p>c라는 변수를 정의하세요. 값은 13을 가지고 있습니다.</p>
</li>
<li>
<p>다음 결과를 그림을 그려서 예측하세요.</p>
</li>
</ol>
<pre><code class="language-python">a = 'hi'
b = 'no'
c = b
b = a
d = c
c = b
print(d)
print(c)
</code></pre>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p><code>c = 13</code></p>
</li>
<li></li>
</ol>
<p><img src="/elvanov/wp-content/uploads/2020/01/u1.gif" alt="변수 예측 결과">
<em>변수 예측 결과</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":""} -->
<div class="wp-block-jetpack-markdown"></div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 13:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 04:51:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 17:54:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 08:54:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%b3%80%ec%88%98%ec%99%80-%eb%8c%80%ec%9e%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 연산자 ~ 계산하기]]></title>
		<link>https://elvanov.com/154</link>
		<pubDate>Thu, 12 Dec 2019 13:32:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>사전 지식</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>변수, 대입</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>연산자(Operator)</strong>&nbsp;란&nbsp;<strong>연산을 수행하는 기호</strong>&nbsp;를 뜻합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 벌써 하나의 연산자를 야심차게 둘러보았답니다. 바로 대입 연산자입니다.&nbsp;<code>=</code>&nbsp;이거요. 대입할 때 쓰는 특별한 기호라고 해서 대입 연산자라고 불리웁니다. 거의 대부분의 프로그래밍 언어에서 대입 연산자는&nbsp;<code>=</code>이죠. 대입 연산자는 매우 특별합니다. 변수에 값을 대입하는 기능을 가진 연산자는&nbsp;<code>=</code>&nbsp;밖에 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>연산자의 종류는 다양합니다. 가장 간단한 연산자가 나오는 예시를 살펴보면서 연산자에 대한 감을 익히도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>값을 변형하여 대입시키기</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>power = 92
bonus = 13
result = power + bonus
print(result)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>105</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>power</code>라는 변수와&nbsp;<code>bonus</code>&nbsp;라는 변수를 새롭게 정의했습니다. 그리고&nbsp;<code>result</code>라는 변수를 정의하면서&nbsp;<code>power + bonus</code>를 실행하였군요.&nbsp;<code>result</code>를 출력해보니&nbsp;<code>92 + 13</code>의 값인&nbsp;<code>105</code>가 출력됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>+</code>라는 새로운 연산자가 등장했습니다.&nbsp;<code>+</code>는 양쪽에 있는 숫자를 더하라는 연산자입니다. 이것은&nbsp;<strong>산술 연산자</strong>&nbsp;입니다. 위 예제에서는 한 줄에 대입 연산자와 산술 연산자가 함께 등장합니다. 아니, 한 줄에는 하나의 명령만 된다고 하지 않았나요? 괜찮습니다. 산술 연산은&nbsp;<strong>표현식(expression)</strong>&nbsp;에 해당되며, <strong>표현식은 한 줄에 여러 번 나와도 됩니다.</strong> 표현식(추가 예정)에 대해서는 언젠가 한번 짚고 넘어갈 것이지만, 우선 지금은 한 줄에 여러 개의 표현식이 들어가도 된다는 점만 기억하고 있으면 되겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>대입 연산자와 산술 연산자가 한 줄에 함께 있을 때에는&nbsp;<strong>우선순위(priority)</strong>&nbsp;가 빠른 것부터 먼저 처리됩니다. 파이썬에서는 산술 연산자가 먼저 처리되고 대입연산자는 나중에 처리됩니다. 즉&nbsp;<code>result = power + bonus</code>&nbsp;에서&nbsp;<strong><code>power + bonus</code>가 먼저 실행되고 그 결과값이&nbsp;<code>result</code>에 대입되는 것</strong>이죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>한가지 명심해야 할 점은 <code>power + bonus</code>를 한다고 해서 <code>power</code>이나 <code>bonus</code> 값이 <strong>변하지 않습니다.</strong> 변수의 값을 바꾸려면 오로지 대입문을 통해서만 가능합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>함수에 값으로 넣기</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>power = 92
bonus = 100
print(power + bonus)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>192</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이번엔&nbsp;<code>result</code>&nbsp;변수 없이 바로&nbsp;<code>power + bonus</code>를&nbsp;<code>print</code>&nbsp;함수 안에 집어 넣었습니다.&nbsp;<code>print</code>&nbsp;함수가 내부적으로 연산자를 만난다면, 마찬가지로 <strong>연산자를 먼저 계산하고 그 결과값을 적용</strong>합니다. 그러므로&nbsp;<code>192</code>라는 계산된 값이 출력되는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>산술 연산자의 종류</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>산술 연산자는 숫자의 계산과 관련된 연산자를 뜻합니다. 아래와 같은 종류가 있습니다. 예제와 함께 살펴보면 더욱 이해가 잘 될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">기호</th><th>설명</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"><strong><code>+</code></strong></td><td>양쪽 값을&nbsp;<strong>더한다.</strong></td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>-</code></strong></td><td>왼쪽 값에서 오른쪽 값을&nbsp;<strong>뺀다.</strong></td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>*</code></strong></td><td>양쪽 값을&nbsp;<strong>곱한다.</strong></td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>/</code></strong></td><td>왼쪽 값을 오른쪽 값으로&nbsp;<strong>나눈다.</strong></td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>//</code></strong></td><td>왼쪽 값을 오른쪽 값으로 나눴을 때의&nbsp;<strong>몫</strong>&nbsp;을 구한다.</td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>%</code></strong></td><td>왼쪽 값을 오른쪽 값으로 나눴을 때의&nbsp;<strong>나머지</strong>&nbsp;를 구한다.</td></tr><tr><td class="has-text-align-center" data-align="center"><strong><code>**</code></strong></td><td>왼쪽 값을 오른쪽 값으로&nbsp;<strong>거듭제곱</strong>&nbsp;한다.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>apple = 17
banana = 3
print(apple + banana)
print(apple - banana)
print(apple * banana)
print(apple / banana)
print(apple // banana)
print(apple % banana)
print(apple ** banana)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>20
14
51
5.666666666666667
5
2
4913</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>대입문의 왼쪽에는 변수 하나만 옵니다</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음 잘못된 예제를 하나를 살펴 보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>apple = 17
banana = 3
apple + banana = banana</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>대입 연산자 기준으로 왼쪽에 산술 연산자가 등장했습니다. 앞서 산술 연산자는 대입 연산자보다 먼저 처리된다고 하였습니다. 그렇다면 결국 3번째 행은 <code>apple + banana</code>가 먼저 계산되어서, 다음과 같은 코드가 되어버립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>20 = banana</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아이고, 앞서 강조했듯이 대입문의 왼쪽은 변수가 와야 합니다.&nbsp;<code>20</code>이라는 값 그 자체에다가는 대입할 수 없습니다. 그리하여 에러가 발생합니다. 아래는 결과입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>  File "c:/Users/tooth/Desktop/py.py", line 3
    apple + banana = banana
    ^
SyntaxError: can't assign to operator</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>사실 이 에러는 문법 에러입니다. 즉 대입문의 왼쪽에 연산자 같은 논리에 맞지 않는 것이 들어있다면 프로그램이 시작되기도 전에 일찌감치 에러를 내면서 오류를 고치라고 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>복합 대입 연산자</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>원래 있는 변수의 값에 <code>5</code>를 더하여 그 변수에 그대로 적용하고 싶다고 가정합시다. 그렇다면 코드를 어떻게 작성하면 될까요? <code>result</code>라는 임시 변수, 대입 연산자, 산술 연산자를 통해 다음과 같이 코드를 작성할 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>power = 15
result = power + 5
power = result
print(power)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>20</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 어차피 대입 연산자보다 산술 연산자가 먼저 작동하니, <code>result</code>를 없애고 <code>power + 5</code>를 그 자리에 넣는다면 의도대로 동작하지 않을까요? 한번 시도해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>power = 15
power = power + 5
print(power)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>20</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>result</code>&nbsp;변수는 사라졌습니다. 두번째 줄만 자세히 보도록 하겠습니다.&nbsp;<code>power</code>의 값은&nbsp;<code>15</code>였습니다.&nbsp;<code>power = power + 5</code>&nbsp;여기서&nbsp;<code>+</code>&nbsp;연산자가 먼저 실행되니&nbsp;<code>power + 5</code>가 먼저 실행되겠습니다. 그리하여 결과값이&nbsp;<code>20</code>이 나오고, 결과적으로&nbsp;<code>power = 20</code>의 형태가 되어 결국&nbsp;<code>power</code>의 값은&nbsp;<code>20</code>이 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 냉혹한 프로그래밍의 세계에서는 게으른 사람이 많아서 더 간편한 방법을 만들게 되는데, 그것이 바로 복합 대입 연산자입니다. 아래 코드는 위 코드와 정확히 같은 일을 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>power = 15
power += 5
print(power)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>20</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong><code>+=</code></strong>이라는 새로운 연산자가 등장했습니다.&nbsp;<code>+=</code>는 "<strong>양쪽 값을 더하고, 그 결과값을 왼쪽 변수에 대입하라</strong>"라는 뜻입니다. 이와 같은 복합 대입 연산자는 모든 산술 연산자에 대응하여 있습니다. 아래 표를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>종류</h3>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>기호</th><th>설명</th></tr></thead><tbody><tr><td><strong><code>+=</code></strong></td><td>더한 값을 대입한다.</td></tr><tr><td><strong><code>-=</code></strong></td><td>뺀 값을 대입한다.</td></tr><tr><td><strong><code>*=</code></strong></td><td>곱한 값을 대입한다.</td></tr><tr><td><strong><code>/=</code></strong></td><td>나눈 값을 대입한다</td></tr><tr><td><strong><code>//=</code></strong></td><td>몫을 대입한다.</td></tr><tr><td><strong><code>%=</code></strong></td><td>나머지를 대입한다.</td></tr><tr><td><strong><code>**=</code></strong></td><td>거듭제곱 계산 결과를 대입한다.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>우선 순위</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>연산자의 우선 순위는 명확하게 정해져 있습니다. 만약 같은 우선순위의 연산자가 여러 개 쓰인다면 앞에서부터 차례대로 진행됩니다. (대입 연산자는 원칙상 한 줄에 하나만 쓰도록 합니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>우선 순위</th><th>연산자</th></tr></thead><tbody><tr><td>가장 먼저</td><td><code>**</code></td></tr><tr><td>그 다음</td><td><code>*, /, %, //</code></td></tr><tr><td>그 다음</td><td><code>+, -</code></td></tr><tr><td>제일 나중에</td><td><code>=, +=, -=, *=, /=, //=, %=, **=</code></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>연산자의 기본적인 <strong>우선 순위를 무시하고 원하는 순서대로 값을 계산하고자 하는 경우에는 소괄호(<code>()</code>)를 사용하면 됩니다.</strong> 대괄호(<code>[]</code>)나 중괄호(<code>{}</code>)를 사용해서는 안 됩니다. 소괄호는 중첩해서 사용할 수 있습니다. 이를테면, 아래와 같은 수식을 실제 코드로 옮겨 적는다고 생각해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">$latex p + \frac{1}{\displaystyle a + \frac{1}{\displaystyle b + \frac{1}{\displaystyle c + d}}}&amp;bg=202020&amp;fg=eeeeee&amp;s=2$</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이는 다음과 같이 작성하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>p + 1 / (a + 1 / (b + 1 / (c + d)))</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>문자열 연산자</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>문자열에서는&nbsp;<code>+</code>&nbsp;연산자를 통해 문자열끼리 연결할 수 있습니다. 또한 <code>*</code>를 이용해 문자열을 여러번 반복할 수 있습니다. <code>/</code>나 <code>-</code>는 문자열에서는 지원되지 않는 연산자입니다. 그 기능을 아래 표에서 정리해보았습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>연산자</th><th>설명</th></tr></thead><tbody><tr><td><code>문자열 + 문자열</code></td><td>두 문자열을 연결한 하나의 문자열을 내놓는다.</td></tr><tr><td><code>문자열 += 문자열</code></td><td>두 문자열을 연결한 뒤 왼쪽 변수에 대입한다.</td></tr><tr><td><code>문자열 * 숫자</code></td><td>문자열을 숫자만큼 반복한 값을 내놓는다.</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>apple = "안녕하세요"
banana = "박보영님"
cow = apple + " " + banana
print(cow)
cow += "?"
print(cow)
print(apple * 3)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>안녕하세요 박보영님
안녕하세요 박보영님?
안녕하세요안녕하세요안녕하세요</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연산자를 쓸 때 변수의 종류와 위치</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>+</code>&nbsp;연산에서, 문자열(<code>str</code>)은 문자열끼리 숫자(<code>int</code>,&nbsp;<code>float</code>)는 숫자끼리 작동합니다. 이 두개의 종류를 섞어서 사용한다면 에러가 발생합니다. 아래 예시를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>apple = 13
banana = "안녕하세요"
print(apple + banana)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 3, in &lt;module>
    print(apple + banana)
TypeError: unsupported operand type(s) for +: 'int' and 'str'</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>대입 연산자는 어떤 기호를 사용하는가?</li><li>산술 연산자의 종류 7가지는 무엇인가?</li><li>대입 연산자와 산술 연산자 중 어느 것이 나중에 실행되는가?</li><li>문자열 두 개를 연결하려면 어떻게 해야 하는가?</li><li>문자열과 숫자형을 더하려고 하면 어떻게 되는가?</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>아래 코드가 어떻게 될까요? 두 가지 가능성이 있겠습니다. <ol><li><code>a = a * 2 + 5</code>로 계산되어 <code>11</code>이 나올 수도 있겠지요.</li><li><code>2 + 5</code>가 먼저 계산되어 <code>21</code>이 나올 수도 있습니다.</li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 3
a *= 2 + 5
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":2} -->
<ol start="2"><li>두 문자열을 입력받아 그 두 개를 이어서 출력하는 프로그램을 만드세요</li><li>다음 결과를 예측하세요.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 1 
a *= 2 
a *= 5 
a *= 4 
a //= 3 
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":4} -->
<ol start="4"><li>다음 결과를 예측하세요</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 5
b = 4
c = a + b
a = c + a
b = b - a
print(b)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":5} -->
<ol start="5"><li>다음 결과가 10이 나오도록 빈 칸을 채워넣으세요. (힌트 :&nbsp;<code>%</code>의 뜻이 무엇이었는지,&nbsp;<code>-</code>와&nbsp;<code>%</code>중 어느 것이 먼저 작동하는지 다시 알아보세요!)</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 13
b = 8
print(a - b % 빈칸)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>21</code>이 나옵니다. <code>*=</code>는 한 뭉텅이로 가정하여 <code>2 + 5</code>가 먼저 계산된 뒤 <code>3</code>과 곱해집니다.</li><li>코드 입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = input() 
b = input() 
print(a + b)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":3} -->
<ol start="3"><li>동작 결과입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/u2.gif" alt="변수 복합 대입 결과"/><figcaption><em>변수 복합 대입 결과</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:list {"ordered":true,"start":4} -->
<ol start="4"><li>동작 결과입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/u3.gif" alt="변수 대입 결과"/><figcaption><em>변수 대입 결과</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:list {"ordered":true,"start":5} -->
<ol start="5"><li><strong><code>5</code></strong> 입니다. <code>a - b % 빈칸</code>이 <code>10</code>으로 나오려면 <code>b % 빈칸</code>이 <code>3</code>이어야 되고, <code>8</code>을 나눈 나머지가 <code>3</code>이 나오는 경우는 <code>5</code>입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2019-12-12 22:32:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-12 13:32:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 12:28:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 03:28:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%97%b0%ec%82%b0%ec%9e%90-%ea%b3%84%ec%82%b0%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 클래스와 객체 ~ 변수를 사람으로 진화시키기]]></title>
		<link>https://elvanov.com/182</link>
		<pubDate>Tue, 17 Dec 2019 01:32:06 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 많아지는 변수와 함수들\n\n신조어 중 *클라스* 라는 말이 종종 등장하죠. 격이 다르다, 차원이 다르다 라는 의미로 \u0022크~ 클라스 오지구연\u0022이라고 내뱉곤 합니다. 여기서의 클라스는 우리가 지금부터 이야기하려는 클래스가 맞습니다. 교실의 classroom까지 떠올릴 필요는 없습니다. ?\n\n어찌 되었건 우리는 클래스라는 새로운 개념을 배울 예정입니다. 본격적으로 배우기 전에 클래스가 왜 필요한지 가상의 예시를 통해 천천히 알아가보죠.\n\n\u003e 슈퍼파워 게임 회사는 현재 RPG 게임을 만들고 있다. 지금은 적 몬스터를 만들고자 한다. 적 몬스터의 스펙은 다음과 같다. \n\u003e 1. 적 몬스터는 저마다 공격력, 체력을 가지고 있다. \n\u003e 2. 적 몬스터가 아군을 공격하면 몬스터의 공격력 만큼 우리가 피해를 입는다. \n\u003e 3. 아군이 적 몬스터를 공격하면 그만큼 피해를 준다. \n\u003e 4. 적 몬스터의 체력이 다 되면 몬스터는 사망한다.\n\n위 상황을 파이썬 코드로 만들어봅시다. 실제로 싸우는 상황도 코드로 묘사하여 봅시다.\n\n\n```python\nattack = 10 # 공격력\nhealth = 125 # 체력\n\n# 몬스터가 아군을 공격할 때\ndef monsterAttack():\n    print(\u0022몬스터가 아군에게 \u0022 + str(attack) + \u0022만큼 공격했다!\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\n# 아군이 몬스터를 공격할 때\ndef monsterHit(damage):\n    global health\n    print(\u0022아군이 몬스터에게 \u0022 + str(damage) + \u0022의 데미지를 주었다!\u0022)\n    if health \u003c 0:\n        print(\u0022몬스터는 이미 시체이다.....\u0022)\n    else:\n        health -= damage\n        if health \u003c 0:\n            print(\u0022몬스터가 죽었다!\u0022)\n        else :\n            print(\u0022현재 몬스터의 체력은 \u0022 + str(health) + \u0022이다.\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nmonsterAttack()\nmonsterHit(30)\nmonsterHit(90)\nmonsterAttack()\nmonsterHit(20)\nmonsterHit(5)\n```\n```plaintext\n몬스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 30의 데미지를 주었다!\n현재 몬스터의 체력은 95이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 90의 데미지를 주었다!\n현재 몬스터의 체력은 5이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n몬스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 20의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 5의 데미지를 주었다!\n몬스터는 이미 시체이다.....\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n```\n\n\u003e global 키워드는 해당 함수의 바깥에 전역으로 정의되어 있는 변수를 이용하겠다는 선언입니다. 자세한 내용은 다음을 참조하세요. (추가 예정)\n\n간단한 로직인 것 같으면서도 생각보다 긴 코드가 만들어졌습니다. 자 첫번째 몬스터 구상을 완성했군요. 하지만 게임에는 몬스터가 단 한마리만 등장하는 법은 없죠. 3마리까지 추가한다고 칩시다. 같은 변수명을 쓰면 겹치게 되니 변수명 뒤에 숫자를 붙여서 몬스터를 구분할 수 있도록 해요. 예감이 되시나요? 코드가 아주 길어질 게 분명합니다.. 일단 해 봅시다.\n\n\n```python\nattack1 = 10\nhealth1 = 125\nattack2 = 20\nhealth2 = 50\nattack3 = 40\nhealth3 = 300\n\ndef monsterAttack1():\n    print(\u0022몬스터가 아군에게 \u0022 + str(attack1) + \u0022만큼 공격했다!\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\ndef monsterHit1(damage):\n    global health1\n    print(\u0022아군이 몬스터에게 \u0022 + str(damage) + \u0022의 데미지를 주었다!\u0022)\n    if health1 \u003c 0:\n        print(\u0022몬스터는 이미 시체이다.....\u0022)\n    else:\n        health1 -= damage\n        if health1 \u003c 0:\n            print(\u0022몬스터가 죽었다!\u0022)\n        else :\n            print(\u0022현재 몬스터의 체력은 \u0022 + str(health1) + \u0022이다.\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\ndef monsterAttack2():\n    print(\u0022몬스터가 아군에게 \u0022 + str(attack2) + \u0022만큼 공격했다!\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\ndef monsterHit2(damage):\n    global health2\n    print(\u0022아군이 몬스터에게 \u0022 + str(damage) + \u0022의 데미지를 주었다!\u0022)\n    if health2 \u003c 0:\n        print(\u0022몬스터는 이미 시체이다.....\u0022)\n    else:\n        health2 -= damage\n        if health2 \u003c 0:\n            print(\u0022몬스터가 죽었다!\u0022)\n        else :\n            print(\u0022현재 몬스터의 체력은 \u0022 + str(health2) + \u0022이다.\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\ndef monsterAttack3():\n    print(\u0022몬스터가 아군에게 \u0022 + str(attack3) + \u0022만큼 공격했다!\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\ndef monsterHit3(damage):\n    global health3\n    print(\u0022아군이 몬스터에게 \u0022 + str(damage) + \u0022의 데미지를 주었다!\u0022)\n    if health3 \u003c 0:\n        print(\u0022몬스터는 이미 시체이다.....\u0022)\n    else:\n        health3 -= damage\n        if health3 \u003c 0:\n            print(\u0022몬스터가 죽었다!\u0022)\n        else :\n            print(\u0022현재 몬스터의 체력은 \u0022 + str(health3) + \u0022이다.\u0022)\n    print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nmonsterAttack1()\nmonsterHit1(30)\nmonsterHit1(90)\nmonsterAttack1()\nmonsterHit2(30)\nprint(\u0022필살기!! 모든 몬스터에게 1000의 공격!!\u0022)\nmonsterHit1(1000)\nmonsterHit2(1000)\nmonsterHit3(1000)\n```\n```plaintext\n스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 30의 데미지를 주었다!\n현재 몬스터의 체력은 95이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 90의 데미지를 주었다!\n현재 몬스터의 체력은 5이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n몬스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 30의 데미지를 주었다!\n현재 몬스터의 체력은 20이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n모든 몬스터에게 1000의 공격!!\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n```\n\n핫하.. 귀찮아서 필살기를 써서 모든 몬스터를 죽여버렸습니다. \n\n어찌어찌 해결이 되었나요? 근데 단 3개의 몬스터를 만드는데도 60줄 가까이 코드를 작성했습니다. 하지만 몬스터가 10마리가 필요하다면? 그 뿐만 아니라 몬스터에게 이름이 주어질 수도 있고, 방어력이 생길 수도 있습니다. 어쩌면 몬스터가 마법을 쓸 수도 있죠! 골치가 아파집니다. 모든 몬스터에게 일일히 변수와 함수를 추가할 생각을 하니 머리가 지끈거리지 않나요?\n\n\u002d\u002d-\n\n## 클래스 등장\n\n이제 클래스가 등장합니다. 예시를 우선 봅시다. ##1## 등의 번호를 누르면 해당 설명으로 곧장 이동합니다.\n\n```python\nclass Monster: ##a_1##\n    def __init__(self, attack, health): ##a_2##\n        self.attack = attack ##a_3##\n        self.health = health\n    \n    def doAttack(self): ##a_4##\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022) ##a_5##\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\n    def hit(self, damage): ##a_6##\n        print(\u0022아군이 몬스터에게 \u0022 + str(damage) + \u0022의 데미지를 주었다!\u0022)\n        if self.health \u003c= 0:\n            print(\u0022몬스터는 이미 시체이다.....\u0022)\n        else:\n            self.health -= damage\n            if self.health \u003c= 0:\n                print(\u0022몬스터가 죽었다!\u0022)\n            else :\n                print(\u0022현재 몬스터의 체력은 \u0022 + str(self.health) + \u0022이다.\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nmon1 = Monster(10, 125) ##a_7##\nmon2 = Monster(20, 50)\nmon3 = Monster(40, 300)\n\nmon1.doAttack() ##a_8##\nmon1.hit(30)\nmon1.hit(90)\nmon1.doAttack()\nmon2.hit(30)\nprint(\u0022필살기!! 모든 몬스터에게 1000의 공격!!\u0022)\nfor mon in [mon1, mon2, mon3]: ##a_9##\n    mon.hit(1000)\n```\n\n천천히 하나하나 설명할게요.\n\n### *a_1*(1.) 클래스 정의\n\n```python\nclass Monster:\n```\n\n`Monster`라는 이름의 **클래스(class)** 를 정의합니다. `class`라는 새로운 키워드가 등장했고, 함수 정의와 마찬가지로 콜론(`:`)으로 하여 블록을 만들어 `Monster` 클래스의 자세한 내용을 써넣을 수 있도록 합니다. \n\n### *a_2*(2.) 생성자 정의\n\n```python\n    def __init__(self, attack, health):\n```\n\n`__init__`이라는 이름의 **메소드(method)** 를 정의합니다. 메소드는 **객체(object)** 의 동작을 만들 때 이용합니다. 이 요상하게 생긴 메소드의 이름은 언더바(`_`) 두개, `init`, 다시 언더바 두개로 이루어집니다. \n\n메소드를 정의하는 방법은 함수와 완전히 동일하나, 첫번째 인수를 무조건 **`self`** 로 지정합니다. 계속해서 설명하겠지만, 메소드들이 호출될 때 제일 앞에 있는 `self` 인수는 자동으로 채워집니다. 그래서 만약 인수를 하나도 받지 않는 메소드를 정의하고 싶다면 `self` 하나만 작성하고, 인수를 위 예제처럼 `attack`, `health` 두 개를 받아 이용하고 싶다면 `self`를 먼저 적은 후 `attack`, `health`를 적어서 총 3개의 인수를 받도록 정의합니다.\n\n`self`는 특별한 존재입니다. `Monster` 클래스를 통해서 어떤 객체가 만들어지면, 그 객체의 자기 자신을 뜻하게 됩니다. \n\n`__init__` 메소드는 **생성자(Constructor)** 라는 **특별 메소드(Special Method)** 입니다. 특별 메소드는 생성자 말고도 다양한 종류가 있는데요, 차차 알아보면 됩니다. 생성자를 특히 먼저 배우는 이유는, 객체가 생성될 때 객체가 사용할 **속성(Attribute)** 을 초기화하는 역할을 맡은 메소드이기 때문입니다.\n\n클래스를 정의할 때 `__init__` 메소드를 필수로 정의해야 하는 건 아닙니다. \n\n### *a_3*(3.) 속성 초기화\n\n```python\n        self.attack = attack\n```\n\n`self.attack` 이라는 표현이 등장합니다. 여기서 점(`.`)은 왼쪽에 있는 객체가 소유하고 있는, 혹은 포함하고 있는 무언가를 가져오겠다는 뜻입니다. 즉 여기서는 `self`라는 객체가 가지고 있는, `attack`이라는 속성에 함수의 인수로 들어온 `attack`을 대입하겠다는 뜻이지요. 두 `attack`은 서로 다르다는 점을 유념해주시기 바랍니다.\n\n우리가 변수를 정의할 때 단지 대입문을 통하여 정의했던 것과 마찬가지로 속성 정의도 대입문으로 진행됩니다. 간단하게 `self.attack = attack`으로 이 객체는 `attack`이라는 속성을 가질 수 있게 되었습니다.\n\n### *a_4*(4.) 인수가 없는 일반 메소드 정의\n\n```python\n    def doAttack(self):\n```\n\n`doAttack` 이라는 이름을 가진 메소드를 정의합니다. 이 메소드는 언더바가 있지 않으므로 특별 메소드에 포함되지 않습니다. 인수는 `self` 하나를 가지고 있습니다.\n\n### *a_5*(5.) 속성 접근\n\n```python\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n```\n\n`self.attack`을 통해 이 객체가 갖고 있는 속성에 접근합니다. \n\n### *a_6*(6.) 인수가 있는 일반 메소드 정의\n\n```python\n    def hit(self, damage):\n```\n\n`hit`이라는 이름을 가진 메소드를 정의합니다. 마찬가지로 특별 메소드가 아니지요. 이 메소드는 `self`, `damage`와 같이 두 개의 인수를 받고 있습니다. 이 메소드의 행동은 다음과 같습니다. 객체의 `health` 속성이 0 이하일 경우 `이미 죽어있다`는 메시지를 출력하고, `health`가 남아있다면 `damage`만큼 차감시켜 여전히 살아있는지 판단합니다. 아직 살아있다면 남은 `health`를 출력합니다.\n\n### *a_7*(7.) 객체 생성\n\n```python\nmon1 = Monster(10, 125)\nmon2 = Monster(20, 50)\nmon3 = Monster(40, 300)\n```\n\n우리가 클래스를 만들었다고 해서 곧바로 클래스의 기능을 쓸 수 있는 것은 아닙니다. 클래스를 정의해놓고, 그 클래스를 이용해서 객체를 만들어야 비로소 클래스가 가지고 있는 메소드와 속성을 이용할 수 있습니다. 클래스는 일종의 *틀* 입니다. 틀을 통해 객체를 생성해내는 것이지요. (우리가 함수를 일단 정의해놓고 나중에 쓰고 싶을 때 함수를 호출하는 것과 비슷한 원리입니다.)\n\n`Monster(10, 125)`를 호출하는 순간 `Monster` 클래스의 `__init__` 메소드, 즉 생성자가 호출됩니다. 생성자는 앞서 살펴보았던 것처럼 `return` 문이 별도로 없지만, 특별하게 작동하여 `Monster` 객체를 만들어 반환(return)합니다. `mon1`은 `Monster` 클래스의 **인스턴스(instance)** 입니다.\n\n앞서 생성자를 정의할 때 `self`, `attack`, `health`와 같이 세 개의 인수를 받았습니다. 하지만 `Monster(10, 125)`에서는 두 개의 인수만을 이용했습니다. 메소드는 함수와는 다르게 호출할 때 첫번째 인수는 무조건 자동으로 채워집니다. 바로 '자기 자신'으로요.\n\n`mon1`, `mon2`, `mon3`이 각각 호출하는 생성자는 동일한 메소드입니다. 메모리에 오직 하나로 존재하는 완전히 같은 함수를 호출하고 있습니다. 하지만 호출할 때마다 `self` 인수에는 각각의 객체로 자동으로 채워집니다. 그리하여 생성자 내부에서의 표현은 `self.attack`으로 동일했지만, `attack` 속성은 `mon1`, `mon2`, `mon3` 각각 개별적 및 독립적으로 존재할 수 있게 됩니다.\n\n### *a_8*(8.) 메소드 호출\n\n```python\nmon1.doAttack()\n```\n\n`mon1` 이 지니고 있는 `doAttack` 메소드를 호출합니다. `doAttack` 메소드 내부에서의 `self`는 `mon1`을 가리키게 되어 `mon1`의 `attack` 속성을 출력하게 됩니다.\n\n### *a_9*(9.) 한 번에 메소드 접근\n\n```python\nfor mon in [mon1, mon2, mon3]:\n    mon.hit(1000)\n\n```\n\n몬스터들은 모두 같은 `Monster` 클래스로 생성하였으므로 지니고 있는 메소드명과 속성명 또한 동일합니다. 이를 **인터페이스(Interface)가 같다** 라고도 표현할 수 있는데요, 이 또한 뒤에 계속해서 설명할 수 있도록 하겠습니다.\n\n`mon`은 차례로 `mon1`, `mon2`, `mon3`을 가리키게 되고, 몬스터 모두 `hit`이라는 메소드를 가지고 있으므로 문제 없이 작동합니다. 몬스터가 더 많아진다 하더라도 리스트에 넣어 관리한다면 편리하게 일괄적으로 공격받게 할 수 있겠지요.\n\n결과는 동일합니다.\n\n```plaintext\n몬스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 30의 데미지를 주었다!\n현재 몬스터의 체력은 95이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 90의 데미지를 주었다!\n현재 몬스터의 체력은 5이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n몬스터가 아군에게 10만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 30의 데미지를 주었다!\n현재 몬스터의 체력은 20이다.\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n필살기!! 모든 몬스터에게 1000의 공격!!\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n아군이 몬스터에게 1000의 데미지를 주었다!\n몬스터가 죽었다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n```\n\n\u002d\u002d-\n\n## 패러다임 분리\n\n클래스의 장점은 명확합니다. 똑같이 동작하는 부분과 다르게 동작하는 부분을 명확하게 분리시켜서 코드 작성을 훨씬 손쉽게 할 수 있습니다. 위 `Monster` 클래스를 이용하여 세 개의 인스턴스를 만들어 보았는데요, 각각 몬스터의 같은 점과 다른 점은 다음과 같습니다.\n\n|같은 점|다른 점|\n|\u002d\u002d-|\u002d\u002d-|\n|데미지 받는 동작, 공격을 주는 동작, `attack`과 `health`라는 속성의 용도|각 몬스터의 `attack`, `health` 실제 값|\n\n냉혹한 프로그래밍의 세계에서는, 중복으로 코딩하는 것을 손쉽게 허용하지 않습니다. 작성할 때의 귀찮음도 크겠지만, 무엇보다도 수정해야 할 사항이 있을 때 일일히 변경해야 한다는 게 너무 번거롭기 때문입니다. 클래스의 장점이 조금은 이해가 되셨나요?\n\n\u002d\u002d-\n\n이제 용어를 정리할 시간입니다. 위 예제를 설명하면서 수많은 용어가 등장했습니다.\n\n## 꼭 기억해요!\n\n1. 모든 **객체(Object)** 에게는 저마다의 **클래스(Class)** 가 존재합니다. 다른 말로 표현하면 클래스는 일종의 틀이고, 클래스를 통해 객체를 찍어낼(생성할) 수 있습니다. 클래스를 다른 말로 **타입(Type)** 이라고도 합니다.\n1. **메소드(Method)** 란, 클래스에서 정의되는 함수로, 객체의 동작을 표현합니다.\n1. **속성(Attribute)** 이란, 클래스에서 정의되는 변수로, 각 객체의 고유값을 나타냅니다.\n1. 모든 메소드는 반드시 첫번째 인수로 **`self`** 를 가집니다. 메소드를 호출할 때에 `self`는 '자기 자신'으로 자동으로 채워지므로 `self가 없다` 상정하고 메소드를 호출합니다.\n1. **특별 메소드(Special Method)** 란, 파이썬에서 특별하게 취급되는 메소드를 말합니다. 종류는 굉장히 많지만 명확히 정해져 있고, 각자 특별한 역할이 있습니다. 이름이 앞 뒤로 언더바 두개(`__`)로 구성되어 다른 메소드와 구별됩니다. 특별 메소드와 관련해서는 다음을 참조하세요. (추가 예정)\n1. **생성자(Constructor)** 란, 특별 메소드 중 하나입니다. 객체를 새로이 생성할 때 사용되는 메소드이며, 객체를 초기화하는 역할을 가지고 있습니다. 별도의 `return` 문은 없습니다. `클래스명(인수1, 인수2, ...)`와 같이 호출합니다.\n1. 본래 **인스턴스(Instance)** 란, 클래스가 *설계도* 라는 개념으로 이야기할 때 그 반대급부인 *구현된 실체* 라는 대비되는 개념으로 사용됩니다. 파이썬에서는 객체와 거의 동일한 뜻으로 사용되므로 혼용하여도 무방합니다. \n\n용어 정리를 간단하게 했습니다. 이 정도면 간단한 겁니다. ? 이제 다시 위의 몬스터 예제를 읽어내려서 이해가 가지 않는 지점이 혹시나 있는지 체크해 주세요. 이해가 다 되었다면 다음으로 진행해주시기 바랍니다.\n\n\u003e 세상에는 용도와 목적에 따라 아주 다양한 프로그래밍 언어가 생겨났습니다. 하지만 더 효율적이고 범용적인 프로그래밍 언어 사용을 위해 언어가 어떤 특성을 지니고 있는지, 어떤 개념을 이용하는지에 대해서 정리해야 할 필요성이 생겼습니다. 그리하여 프로그래밍 언어 패러다임이 어느정도 정립되는데요, 그 중 **객체 지향 프로그래밍(OOP)** 은 아주 유서깊은 패러다임입니다. OOP는 `객체`라는 추상적인 존재를 클래스와 클래스의 복잡한 관계를 통해 구현하고자 합니다. OOP에 대항하는 또 다른 패러다임도 존재하지만, 이미 OOP는 프로그래머와 프로그램 그 자체에 깊숙히 자리잡고 있습니다.  \n\n\u002d\u002d-\n\n## 개념 추가 정리\n\n핵심 개념과 더불어서, 파이썬에서 클래스를 사용할 때의 유의점과 참고할 만한 사항을 정리합니다. 선 요약하면 다음과 같습니다.\n\n1. 클래스의 이름은 대문자로, 메소드와 속성의 이름은 소문자로 시작하도록 합니다.\n1. 생성자를 정의했다면 거기에 맞춰 객체를 생성해야 합니다.\n1. 메소드와 속성은 이름 중복이 허용되지 않습니다.\n1. **인터페이스(Interface)가 같다** 라는 말은 파이썬에서는 쉽게 얘기하여 `서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다`라고 말할 수 있습니다.\n1. 파이썬의 세계에서 모든 변수(variable)는 **객체(Object)** 입니다.\n\n\n\u002d\u002d-\n\n### 클래스의 이름은 대문자로, 메소드와 속성의 이름은 소문자로 시작하도록 합니다.\n\n스타일에 관한 내용입니다. 개발자 조상님들은 대대로 클래스 명에는 대문자로, 메소드와 속성 명에는 소문자로 시작하도록 해왔습니다. 유명한 파이썬 모듈도 모두 그렇게 해왔습니다. 프로그래머간의 약속입니다. \n\n\u003e 예외가 있습니다. 파이썬에서 기초 자료형이라 불리우는 것들은 소문자로 시작하는 클래스입니다. `int`, `float`, `str`, `list` 등이 있습니다.\n\n`power`라는 가상의 모듈을 불러와 사용하는, 김 부장님이 쓴 코드를 맥락없이 마주하게 되었다고 가정합시다.\n\n```python\nimport power\na = power.man.Data()\n```\n\n우리가 알 수 있는 정보는 극히 적습니다. `power.man`이 뭔지는 모릅니다. 하지만 이 함수는 `power.man`이라는 것 안에 있는 `Data()`라는 메소드를 호출한 것이 아닌, `power.man`이라는 것 안에 정의되어 있는 `Data`라는 클래스의 생성자를 호출하여 새 객체를 만들었음을 시사하고 있습니다. (클래스의 정의는 어디서든지 가능합니다.) 우리가 `a`를 어떻게 사용하는지 파악하려면, `Data` 클래스가 어떤 속성과 메소드를 정의해놓았는지 찾아보면 됩니다. \n\n또 다른 예제를 봅시다. 이름 모를 나그네가 소리소문없이 코드만 쓰고 떠나갔습니다.\n\n```python\n# This function returns Data.\ndef getSomething(index=0 ... 후략\n... (중략)\n```\n\n함수 정의 앞에 간단하게 주석으로 `This function returns Data.`라고 설명해놓았네요. 근데 대소문자 구분이 뭔가 보이시나요? 단순히 data가 아닌 `Data`를 반환한다고 합니다. 이게 어떤 의미일까요? 바로 `Data`라는 클래스를 기반으로 만들어진 객체를 반환한다는 사실을 함축적으로 표현하고 있습니다.\n\n코드 작성에서 '다른 사람'이라 함은 과거의 나, 미래의 나가 될 수 있다는 사실을 항상 유념해주세요. 옛날에 쓴 코드를 왜 이렇게 썼는지 현재의 내가 이해할 수 없을 수도 있고, 현재의 내가 당연하게 썼던 코드를 미래의 내가 왜 이렇게 썼는지 도무지 이해할 수 없을 수도 있습니다. 상식을 고수하는 건 스스로에게도 좋습니다.\n\n\u002d\u002d-\n\n### 생성자를 정의했다면 거기에 맞춰 객체를 생성해야 합니다.\n\n```python\nclass Car:\n    def __init__(self, name):\n        self.name = name\n\nkiss = Car()\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 5, in \u003cmodule\u003e\n    kiss = Car()\nTypeError: __init__() missing 1 required positional argument: 'name'\n```\n\n에러가 발생합니다. 생성자가 1개의 인수를 필요로 하지만 위 예제에서는 생성자에 아무런 인수도 넘겨주지 않아 에러가 발생했습니다.\n\n\u002d\u002d-\n\n```python\nclass Car:\n    def __init__(self, name):\n        self.name = name\n\nkiss = Car('power', 31)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 5, in \u003cmodule\u003e\n    kiss = Car('power', 31)\nTypeError: __init__() takes 2 positional arguments but 3 were given\n```\n\n클래스는 동일하고 이번에는 인수를 2개 넘겨주었는데요, 마찬가지로 개수가 맞지 않아 에러가 발생했습니다.\n\n\u002d\u002d\u002d\u002d\n\n### 메소드와 속성은 이름 중복이 허용되지 않습니다.\n\n```python\nclass Gun:\n    def __init__(self, bang):\n        self.bang = bang\n\n    def bang(self):\n        print(\u0022빵야빵야!\u0022)\n\nkiss = Gun('뱅뱅')\nkiss.bang()\n```\n```plaintext\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 9, in \u003cmodule\u003e\n    kiss.bang()\nTypeError: 'str' object is not callable\n```\n\n`str` 객체를 호출할 수 없다고 에러가 뜹니다. 메소드와 속성의 이름이 `bang`으로 같으므로 생성자가 불리우는 순간 메소드였던 `self.bang`은 사라지고 속성으로서 덮어쓰여집니다. `kiss.bang` 은 메소드가 아니라 속성인 셈이죠. 속성을 호출하려고 하니 에러가 뜰 수 밖에요.\n\n\u002d\u002d-\n\n### 인터페이스가 같다 라는 말은 파이썬에서는 쉽게 얘기하여 `서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다`라고 말할 수 있습니다.\n\n간단히 예제를 보고 설명합시다.\n\n```python\nclass Woman:\n    def cry(self):\n        print(\u0022훌쩍훌쩍..\u0022)\n\nclass Man:\n    def cry(self):\n        print(\u0022으흐흑..\u0022)\n        \nclass Baby:\n    def cry(self):\n        print(\u0022응애응애!!\u0022)\n\npeople = []\npeople.append(Woman())\npeople.append(Man())\npeople.append(Baby())\npeople.append(Baby())\npeople.append(Man())\npeople.append(Woman())\npeople.append(Woman())\nfor person in people:\n    person.cry()\n```\n```plaintext\n훌쩍훌쩍..\n으흐흑..\n응애응애!!\n응애응애!!\n으흐흑..\n훌쩍훌쩍..\n훌쩍훌쩍..\n```\n\n`Woman`, `Man`, `Baby`라는 3개의 클래스를 정의했습니다. 이 클래스들은 완전히 다르지만, 오로지 공통점이라고는 `cry`라는 메소드를 정의해놓은 것 뿐입니다. 그러고는  `people`이라는 리스트를 만들고 거기에 `Woman`, `Man`, `Baby` 객체를 생성하여 직접 넣어주고 있습니다. `for` 문에서는 `people` 안에 있는 요소를 순회하며 `cry` 메소드를 호출하고 있습니다.\n\n한번 더 강조하지만 세 개의 클래스들은 완전히 **독립된** 클래스입니다. 피가 하나도 섞이지 않은 완전 남이나 마찬가지인 클래스들이죠. 하지만 이 클래스를 이용하는 방법은 우연찮게 같았습니다. 이러한 상황 속에서 우리는 두 가지 새삼스러운 사실을 다시 한번 확인할 수 있습니다.\n\n첫째, **서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다면 이 객체를 사용하는 방법은 동일하다는 점입니다.** 아까 전에 이를 **인터페이스가 같다** 고 이야기하였죠. 반대로 이야기하면 `이 객체들이 운다(cry)는 행위의 인터페이스를 제공한다`고도 말할 수 있습니다. 어떤 객체가 인수를 하나도 받지 않고 우는 소리를 출력하는 메소드를 가지고 있다면 그 객체는 **울 수 있는** 객체이며, 사용법과 용도는 같기 때문에 코드의 사용자 입장에서는 **cry 메소드 내부가 어떻게 되어 있는지 신경쓰지 않고** 코드를 사용할 수 있습니다. 어떤 메소드의 내부가 어떻게 구현되어 있는지 신경쓰지 않아도 된다는 점은 객체와 클래스를 다룰 때 중요한 특징 중 하나입니다.\n\n둘째, **인터페이스가 같다고 판단하는 것은 또 다른 차원의 문제라는 점입니다.** 위 코드에서는 단순히 `for` 문을 돌려서 `cry` 메소드를 호출했습니다. 객체가 `cry` 메소드를 가지고 있는지 체크하는 작업은 없었지요. 만약 `Baby` 클래스의 `cry` 메소드가 아래와 같이 정의되어 있었다면 어떨까요?\n\n```python\n(중략)\nclass Baby:\n    def cry(self, isHungry):\n        if isHungry:\n            print(\u0022밥줘!!\u0022)\n        else\n            print(\u0022응애응애!!\u0022)\n(후략)\n```\n\n결과는 다음과 같습니다.\n\n```plaintext\n훌쩍훌쩍..\n으흐흑..\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/coding-class/oh/191201/test.py\u0022, line 25, in \u003cmodule\u003e\n    person.cry()\nTypeError: cry() missing 1 required positional argument: 'isHungry'\n```\n\n`Baby` 클래스의 `cry` 메소드만 취하는 인수가 달라졌습니다. 이제 더이상 `인터페이스가 같다` 라고 말할 수 없습니다. 왜냐하면 사용하는 방법이 다르기 때문이지요. 이처럼 인터페이스가 다르다면 에러가 발생하는 상황은 꽤 빈번하게 발생합니다.\n\n이러한 문제를 해결하고자 하는 두 가지 접근법이 있습니다. 하나는 `그 메소드가 실제로 존재하는지 실행하기 전에 체크해보자.` 이고, 또 다른 하나는 `일단 그 메소드가 존재한다고 가정하고 실행해보고, 에러가 발생하면 따로 처리하자.` 입니다. 파이썬은 명확하게 후자의 길을 걷고 있습니다. 파이썬은 에러 처리에 관한 기능을 강력하게 제공해주고 있지요. 이것은 예외에서 자세히 살펴보도록 합시다. (추가 예정)\n\n\u002d\u002d-\n\n### 파이썬의 세계에서 모든 변수는 객체 입니다.\n\n이것은 좀 충격적인 사실입니다. `class Something:`으로 클래스를 정의하고 생성자를 `Something()` 이렇게 호출해야 비로소 객체가 생성되는 것이 아닌가요? 그냥 단순히 `number = 10`으로 해도 `number`가 객체가 된다니요? 그걸 어떻게 증명하죠?\n\n파이썬에서는 `type`이라는 클래스를 제공합니다. 생성자 안에 무엇이든 넣으면 그것에 관한 클래스(타입)에 대한 정보를 알 수가 있어요. 시험 삼아 다음 코드를 실행해볼까요?\n\n\n```python\nlist1 = [[1,2,3],'4',5,(6,7),{8,9},{10:11, 12:13}, 14.15]\nfor item in list1:\n    print(type(item))\n\nimport math\nclass Duck:\n    def makeNoise(self):\n        print(\u0022꽥꽥\u0022)\nyellow = Duck()\n\n\nlist2 = [math, math.pow(2,0.5), yellow, yellow.makeNoise, yellow.makeNoise()]\nfor item in list2:\n    print(type(item))\n```\n```plaintext\n\u003cclass 'list'\u003e\n\u003cclass 'str'\u003e\n\u003cclass 'int'\u003e\n\u003cclass 'tuple'\u003e\n\u003cclass 'set'\u003e\n\u003cclass 'dict'\u003e\n\u003cclass 'float'\u003e\n꽥꽥\n\u003cclass 'module'\u003e\n\u003cclass 'float'\u003e\n\u003cclass '__main__.Duck'\u003e\n\u003cclass 'method'\u003e\n\u003cclass 'NoneType'\u003e\n```\n\n결과가 나왔습니다. 죄다 `class` 라고 합니다. `list`(리스트), `str`(문자열), `tuple`(튜플), `int`, `set`(세트), `dict`(딕셔너리), `float` 모두 클래스네요.\n\n자주 쓰는 `math` 모듈 또한 `module` 클래스 기반이고, 우리가 직접 만든 `Duck` 클래스의 인스턴스인 `yellow`는 물론 객체겠지만, 메소드를 호출하지 않고 메소드 그 자체를 가르킨 `yellow.makeNoise` 또한 `method`라는 클래스의 객체랍니다. 더욱 더 놀라운 점은 `makeNoise` 메소드는 아무것도 반환하지 않아서 `yellow.makeNoise()`와 같이 호출하여도 아무것도 남지 않는데, 아무것도 아닌 것조차 `NoneType`이라는 클래스의 객체라는 점입니다.\n\n이것이 시사하는 바는 도대체 무엇일까요?\n\n그것은 바로 **변수들을 객체로서 설명 가능하다는 사실입니다.** 클래스가 같은 객체나 값은 결국 같은 용도의 메소드와 속성을 가지고 있으며, 오직 다른 것은 속성에 존재하는 값임을 알 수 있습니다. 또한 객체의 일반적인 성질을 이용할 수 있다는 것인데요, 이는 다음과 같습니다.\n\n1. 프로그램이 실행하는 도중에 생성할 수 있습니다.\n2. 이름으로써 접근할 수 있습니다. (변수명을 떠올리세요)\n3. 함수의 인수로 전달할 수 있습니다.\n4. 함수의 결과로 반환할 수 있습니다.\n\n즉, 어떤 클래스를 정의해 놓았다 해도 특정 메소드를 프로그램 실행 도중에 추가하거나 삭제할 수도 있으며, 리스트나 딕셔너리에 메소드를 직접 저장할 수도 있는 등 무궁무진한 활용법을 기대해볼 수 있다는 것이죠. 심지어 메소드의 인수나 반환 값으로 함수를 받을 수도 있구요. \n\n함수가 값이다? 무슨 말인지 알쏭달쏭할 것 같습니다. 이러한 활용법은 꽤 고급 활용법에 해당하므로 직접 구현할 일은 앞으로도 없을 수 있지만, 실제 유용한 모듈이나 라이브러리가 이러한 객체적 특성을 이용하여 편리한 기능을 제공하고 있다는 사실을 알고 있어야 제대로 된 활용을 할 수 있을 것입니다.\n\n## 더 나아가기\n\n- 클래스의 계층 구조 - [상속](981) 참조\n- 객체로서의 함수 (일급 함수) (추가 예정)\n- 객체로서의 클래스 (메타프로그래밍) (추가 예정)\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 객체와 클래스는 무엇인가? 서로의 관계로 설명해보라.\n- 메소드는 무엇인가?\n- 속성은 무엇인가?\n- 메소드를 정의할 때 반드시 지켜야 할 규칙은 무엇인가?\n- 특별 메소드란 무엇인가?\n- 생성자의 역할은 무엇인가?\n- 인스턴스라는 말은 객체와 혼용하여도 무방한가?\n- 클래스의 이름은 어떻게 시작하는 게 좋은가?\n- 메소드와 속성의 이름 중복은 허용되는가?\n- `인터페이스가 같다` 라는 말을 다르게 이야기하면 무엇인가?\n- 객체의 일반적인 성질 4가지는 무엇인가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제 \n\n1. 다음 코드의 결과를 예측하세요.\n\n   ```python\n   class Lady:\n       def __init__(self, name):\n           self.name = name + \u0022양\u0022\n   \n   merry = Lady('메리')\n   print(merry.name)\n\n   ```\n\n1. 다음 클래스를 만드세요. `Cup` 클래스는 용량을 나타내는 `capacity` 속성을 가지려 합니다. `Cup` 객체가 생성될 때, 생성자를 통해 `capacity`를 받아들이고자 합니다.\n\n1. 방금 만든 `Cup` 클래스를 보강하세요. `Cup` 클래스는 현재 물의 양을 나타내는 `now` 속성도 만들고자 합니다. 하지만 이 `now`는 객체가 생성될 때 `0`으로 초기화됩니다.\n\n1. `Cup` 클래스를 계속해서 보강하고자 합니다. `Cup` 객체가 생성될 때 `~~ 용량 만큼의 컵이 생성되었습니다`라는 메세지를 `print` 하고자 합니다. 제대로 동작하는지 테스트까지 진행하세요.\n\n1. `Cup` 클래스에 `fill` 메소드를 추가하고자 합니다. 이 메소드는 물의 양을 인수로 받으며, 그 만큼 `now` 속성에 더하도록 합니다. 만약 `now`가 `capacity`보다 커지게 된다면 `물이 가득찼습니다` 메세지를 출력합니다. 별 다른 반환값은 없습니다. 제대로 동작하는지 테스트까지 진행하세요.\n\n1. `Cup` 클래스에 `pour` 메소드를 추가하고자 합니다. 이 메소드는 `~~ 만큼의 물을 부어냅니다`라는 메세지를 출력하며 현재 가진 물의 양인 `now`을 모두 반환합니다. 동시에 `now` 도 `0`으로 만듭니다.\n\n1. 위 `Cup` 클래스를 완성시킨 뒤 다음 코드를 작동시켰을 때 결과가 어떤지 예측해봅시다.\n\n   ```python\n   cup1 = Cup(30)\n   cup2 = Cup(50)\n   \n   cup1.fill(20)\n   cup2.fill(40)\n   cup2.fill(cup1.pour())\n   print(cup1.now)\n   print(cup2.now)\n   ```\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. `메리양`\n\n1. 코드입니다.\n\n   ```python\n   class Cup:\n       def __init__(self, capacity):\n           self.capacity = capacity\n   ```\n\n1. 코드입니다.\n\n   ```python\n   class Cup:\n       def __init__(self, capacity):\n           self.capacity = capacity\n           self.now = 0\n   ```\n\n\n1. 코드입니다.\n\n   ```python\n   class Cup:\n       def __init__(self, capacity):\n           self.capacity = capacity\n           self.now = 0\n           print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')\n   ```\n\n1. 코드입니다.\n\n   ```python\n   class Cup:\n       def __init__(self, capacity):\n           self.capacity = capacity\n           self.now = 0\n           print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')\n   \n       def fill(self, water):\n           self.now += water\n           if self.now \u003e self.capacity:\n               self.now = self.capacity\n               print('물이 가득찼습니다.')\n   ```\n\n1. 코드입니다.\n\n   ```python\n   class Cup:\n       def __init__(self, capacity):\n           self.capacity = capacity\n           self.now = 0\n           print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')\n   \n       def fill(self, water):\n           self.now += water\n           if self.now \u003e self.capacity:\n               self.now = self.capacity\n               print('물이 가득찼습니다.')\n   \n       def pour(self):\n           print(f'물을 {self.now} 만큼 부어냅니다.')\n           outgoing = self.now\n           self.now = 0\n           return outgoing\n   ```\n\n1. 결과입니다.\n\n   ```plaintext\n   용량이 30 만큼의 컵을 생성했습니다.\n   용량이 50 만큼의 컵을 생성했습니다.\n   물을 20 만큼 부어냅니다.\n   물이 가득찼습니다.\n   0\n   50\n   ```\n\n\n\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>많아지는 변수와 함수들</h2>
<p>신조어 중 <em>클라스</em> 라는 말이 종종 등장하죠. 격이 다르다, 차원이 다르다 라는 의미로 &quot;크~ 클라스 오지구연&quot;이라고 내뱉곤 합니다. 여기서의 클라스는 우리가 지금부터 이야기하려는 클래스가 맞습니다. 교실의 classroom까지 떠올릴 필요는 없습니다. ?</p>
<p>어찌 되었건 우리는 클래스라는 새로운 개념을 배울 예정입니다. 본격적으로 배우기 전에 클래스가 왜 필요한지 가상의 예시를 통해 천천히 알아가보죠.</p>
<blockquote>
<p>슈퍼파워 게임 회사는 현재 RPG 게임을 만들고 있다. 지금은 적 몬스터를 만들고자 한다. 적 몬스터의 스펙은 다음과 같다.</p>
<ol>
<li>적 몬스터는 저마다 공격력, 체력을 가지고 있다.</li>
<li>적 몬스터가 아군을 공격하면 몬스터의 공격력 만큼 우리가 피해를 입는다.</li>
<li>아군이 적 몬스터를 공격하면 그만큼 피해를 준다.</li>
<li>적 몬스터의 체력이 다 되면 몬스터는 사망한다.</li>
</ol>
</blockquote>
<p>위 상황을 파이썬 코드로 만들어봅시다. 실제로 싸우는 상황도 코드로 묘사하여 봅시다.</p>
<pre><code class="language-python">attack = 10 # 공격력
health = 125 # 체력

# 몬스터가 아군을 공격할 때
def monsterAttack():
    print(&quot;몬스터가 아군에게 &quot; + str(attack) + &quot;만큼 공격했다!&quot;)
    print(&quot;-----------------&quot;)

# 아군이 몬스터를 공격할 때
def monsterHit(damage):
    global health
    print(&quot;아군이 몬스터에게 &quot; + str(damage) + &quot;의 데미지를 주었다!&quot;)
    if health &lt; 0:
        print(&quot;몬스터는 이미 시체이다.....&quot;)
    else:
        health -= damage
        if health &lt; 0:
            print(&quot;몬스터가 죽었다!&quot;)
        else :
            print(&quot;현재 몬스터의 체력은 &quot; + str(health) + &quot;이다.&quot;)
    print(&quot;-----------------&quot;)

monsterAttack()
monsterHit(30)
monsterHit(90)
monsterAttack()
monsterHit(20)
monsterHit(5)
</code></pre>
<pre><code class="language-plaintext">몬스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 30의 데미지를 주었다!
현재 몬스터의 체력은 95이다.
-----------------
아군이 몬스터에게 90의 데미지를 주었다!
현재 몬스터의 체력은 5이다.
-----------------
몬스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 20의 데미지를 주었다!
몬스터가 죽었다!
-----------------
아군이 몬스터에게 5의 데미지를 주었다!
몬스터는 이미 시체이다.....
-----------------
</code></pre>
<blockquote>
<p>global 키워드는 해당 함수의 바깥에 전역으로 정의되어 있는 변수를 이용하겠다는 선언입니다. 자세한 내용은 다음을 참조하세요. (추가 예정)</p>
</blockquote>
<p>간단한 로직인 것 같으면서도 생각보다 긴 코드가 만들어졌습니다. 자 첫번째 몬스터 구상을 완성했군요. 하지만 게임에는 몬스터가 단 한마리만 등장하는 법은 없죠. 3마리까지 추가한다고 칩시다. 같은 변수명을 쓰면 겹치게 되니 변수명 뒤에 숫자를 붙여서 몬스터를 구분할 수 있도록 해요. 예감이 되시나요? 코드가 아주 길어질 게 분명합니다.. 일단 해 봅시다.</p>
<pre><code class="language-python">attack1 = 10
health1 = 125
attack2 = 20
health2 = 50
attack3 = 40
health3 = 300

def monsterAttack1():
    print(&quot;몬스터가 아군에게 &quot; + str(attack1) + &quot;만큼 공격했다!&quot;)
    print(&quot;-----------------&quot;)

def monsterHit1(damage):
    global health1
    print(&quot;아군이 몬스터에게 &quot; + str(damage) + &quot;의 데미지를 주었다!&quot;)
    if health1 &lt; 0:
        print(&quot;몬스터는 이미 시체이다.....&quot;)
    else:
        health1 -= damage
        if health1 &lt; 0:
            print(&quot;몬스터가 죽었다!&quot;)
        else :
            print(&quot;현재 몬스터의 체력은 &quot; + str(health1) + &quot;이다.&quot;)
    print(&quot;-----------------&quot;)

def monsterAttack2():
    print(&quot;몬스터가 아군에게 &quot; + str(attack2) + &quot;만큼 공격했다!&quot;)
    print(&quot;-----------------&quot;)

def monsterHit2(damage):
    global health2
    print(&quot;아군이 몬스터에게 &quot; + str(damage) + &quot;의 데미지를 주었다!&quot;)
    if health2 &lt; 0:
        print(&quot;몬스터는 이미 시체이다.....&quot;)
    else:
        health2 -= damage
        if health2 &lt; 0:
            print(&quot;몬스터가 죽었다!&quot;)
        else :
            print(&quot;현재 몬스터의 체력은 &quot; + str(health2) + &quot;이다.&quot;)
    print(&quot;-----------------&quot;)

def monsterAttack3():
    print(&quot;몬스터가 아군에게 &quot; + str(attack3) + &quot;만큼 공격했다!&quot;)
    print(&quot;-----------------&quot;)

def monsterHit3(damage):
    global health3
    print(&quot;아군이 몬스터에게 &quot; + str(damage) + &quot;의 데미지를 주었다!&quot;)
    if health3 &lt; 0:
        print(&quot;몬스터는 이미 시체이다.....&quot;)
    else:
        health3 -= damage
        if health3 &lt; 0:
            print(&quot;몬스터가 죽었다!&quot;)
        else :
            print(&quot;현재 몬스터의 체력은 &quot; + str(health3) + &quot;이다.&quot;)
    print(&quot;-----------------&quot;)

monsterAttack1()
monsterHit1(30)
monsterHit1(90)
monsterAttack1()
monsterHit2(30)
print(&quot;필살기!! 모든 몬스터에게 1000의 공격!!&quot;)
monsterHit1(1000)
monsterHit2(1000)
monsterHit3(1000)
</code></pre>
<pre><code class="language-plaintext">스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 30의 데미지를 주었다!
현재 몬스터의 체력은 95이다.
-----------------
아군이 몬스터에게 90의 데미지를 주었다!
현재 몬스터의 체력은 5이다.
-----------------
몬스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 30의 데미지를 주었다!
현재 몬스터의 체력은 20이다.
-----------------
모든 몬스터에게 1000의 공격!!
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
</code></pre>
<p>핫하.. 귀찮아서 필살기를 써서 모든 몬스터를 죽여버렸습니다.</p>
<p>어찌어찌 해결이 되었나요? 근데 단 3개의 몬스터를 만드는데도 60줄 가까이 코드를 작성했습니다. 하지만 몬스터가 10마리가 필요하다면? 그 뿐만 아니라 몬스터에게 이름이 주어질 수도 있고, 방어력이 생길 수도 있습니다. 어쩌면 몬스터가 마법을 쓸 수도 있죠! 골치가 아파집니다. 모든 몬스터에게 일일히 변수와 함수를 추가할 생각을 하니 머리가 지끈거리지 않나요?</p>
<hr>
<h2>클래스 등장</h2>
<p>이제 클래스가 등장합니다. 예시를 우선 봅시다. ##1## 등의 번호를 누르면 해당 설명으로 곧장 이동합니다.</p>
<pre><code class="language-python">class Monster: ##a_1##
    def __init__(self, attack, health): ##a_2##
        self.attack = attack ##a_3##
        self.health = health
    
    def doAttack(self): ##a_4##
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;) ##a_5##
        print(&quot;-----------------&quot;)

    def hit(self, damage): ##a_6##
        print(&quot;아군이 몬스터에게 &quot; + str(damage) + &quot;의 데미지를 주었다!&quot;)
        if self.health &lt;= 0:
            print(&quot;몬스터는 이미 시체이다.....&quot;)
        else:
            self.health -= damage
            if self.health &lt;= 0:
                print(&quot;몬스터가 죽었다!&quot;)
            else :
                print(&quot;현재 몬스터의 체력은 &quot; + str(self.health) + &quot;이다.&quot;)
        print(&quot;-----------------&quot;)

mon1 = Monster(10, 125) ##a_7##
mon2 = Monster(20, 50)
mon3 = Monster(40, 300)

mon1.doAttack() ##a_8##
mon1.hit(30)
mon1.hit(90)
mon1.doAttack()
mon2.hit(30)
print(&quot;필살기!! 모든 몬스터에게 1000의 공격!!&quot;)
for mon in [mon1, mon2, mon3]: ##a_9##
    mon.hit(1000)
</code></pre>
<p>천천히 하나하나 설명할게요.</p>
<h3><em>a_1</em>(1.) 클래스 정의</h3>
<pre><code class="language-python">class Monster:
</code></pre>
<p><code>Monster</code>라는 이름의 <strong>클래스(class)</strong> 를 정의합니다. <code>class</code>라는 새로운 키워드가 등장했고, 함수 정의와 마찬가지로 콜론(<code>:</code>)으로 하여 블록을 만들어 <code>Monster</code> 클래스의 자세한 내용을 써넣을 수 있도록 합니다.</p>
<h3><em>a_2</em>(2.) 생성자 정의</h3>
<pre><code class="language-python">    def __init__(self, attack, health):
</code></pre>
<p><code>__init__</code>이라는 이름의 <strong>메소드(method)</strong> 를 정의합니다. 메소드는 <strong>객체(object)</strong> 의 동작을 만들 때 이용합니다. 이 요상하게 생긴 메소드의 이름은 언더바(<code>_</code>) 두개, <code>init</code>, 다시 언더바 두개로 이루어집니다.</p>
<p>메소드를 정의하는 방법은 함수와 완전히 동일하나, 첫번째 인수를 무조건 <strong><code>self</code></strong> 로 지정합니다. 계속해서 설명하겠지만, 메소드들이 호출될 때 제일 앞에 있는 <code>self</code> 인수는 자동으로 채워집니다. 그래서 만약 인수를 하나도 받지 않는 메소드를 정의하고 싶다면 <code>self</code> 하나만 작성하고, 인수를 위 예제처럼 <code>attack</code>, <code>health</code> 두 개를 받아 이용하고 싶다면 <code>self</code>를 먼저 적은 후 <code>attack</code>, <code>health</code>를 적어서 총 3개의 인수를 받도록 정의합니다.</p>
<p><code>self</code>는 특별한 존재입니다. <code>Monster</code> 클래스를 통해서 어떤 객체가 만들어지면, 그 객체의 자기 자신을 뜻하게 됩니다.</p>
<p><code>__init__</code> 메소드는 <strong>생성자(Constructor)</strong> 라는 <strong>특별 메소드(Special Method)</strong> 입니다. 특별 메소드는 생성자 말고도 다양한 종류가 있는데요, 차차 알아보면 됩니다. 생성자를 특히 먼저 배우는 이유는, 객체가 생성될 때 객체가 사용할 <strong>속성(Attribute)</strong> 을 초기화하는 역할을 맡은 메소드이기 때문입니다.</p>
<p>클래스를 정의할 때 <code>__init__</code> 메소드를 필수로 정의해야 하는 건 아닙니다.</p>
<h3><em>a_3</em>(3.) 속성 초기화</h3>
<pre><code class="language-python">        self.attack = attack
</code></pre>
<p><code>self.attack</code> 이라는 표현이 등장합니다. 여기서 점(<code>.</code>)은 왼쪽에 있는 객체가 소유하고 있는, 혹은 포함하고 있는 무언가를 가져오겠다는 뜻입니다. 즉 여기서는 <code>self</code>라는 객체가 가지고 있는, <code>attack</code>이라는 속성에 함수의 인수로 들어온 <code>attack</code>을 대입하겠다는 뜻이지요. 두 <code>attack</code>은 서로 다르다는 점을 유념해주시기 바랍니다.</p>
<p>우리가 변수를 정의할 때 단지 대입문을 통하여 정의했던 것과 마찬가지로 속성 정의도 대입문으로 진행됩니다. 간단하게 <code>self.attack = attack</code>으로 이 객체는 <code>attack</code>이라는 속성을 가질 수 있게 되었습니다.</p>
<h3><em>a_4</em>(4.) 인수가 없는 일반 메소드 정의</h3>
<pre><code class="language-python">    def doAttack(self):
</code></pre>
<p><code>doAttack</code> 이라는 이름을 가진 메소드를 정의합니다. 이 메소드는 언더바가 있지 않으므로 특별 메소드에 포함되지 않습니다. 인수는 <code>self</code> 하나를 가지고 있습니다.</p>
<h3><em>a_5</em>(5.) 속성 접근</h3>
<pre><code class="language-python">        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
</code></pre>
<p><code>self.attack</code>을 통해 이 객체가 갖고 있는 속성에 접근합니다.</p>
<h3><em>a_6</em>(6.) 인수가 있는 일반 메소드 정의</h3>
<pre><code class="language-python">    def hit(self, damage):
</code></pre>
<p><code>hit</code>이라는 이름을 가진 메소드를 정의합니다. 마찬가지로 특별 메소드가 아니지요. 이 메소드는 <code>self</code>, <code>damage</code>와 같이 두 개의 인수를 받고 있습니다. 이 메소드의 행동은 다음과 같습니다. 객체의 <code>health</code> 속성이 0 이하일 경우 <code>이미 죽어있다</code>는 메시지를 출력하고, <code>health</code>가 남아있다면 <code>damage</code>만큼 차감시켜 여전히 살아있는지 판단합니다. 아직 살아있다면 남은 <code>health</code>를 출력합니다.</p>
<h3><em>a_7</em>(7.) 객체 생성</h3>
<pre><code class="language-python">mon1 = Monster(10, 125)
mon2 = Monster(20, 50)
mon3 = Monster(40, 300)
</code></pre>
<p>우리가 클래스를 만들었다고 해서 곧바로 클래스의 기능을 쓸 수 있는 것은 아닙니다. 클래스를 정의해놓고, 그 클래스를 이용해서 객체를 만들어야 비로소 클래스가 가지고 있는 메소드와 속성을 이용할 수 있습니다. 클래스는 일종의 <em>틀</em> 입니다. 틀을 통해 객체를 생성해내는 것이지요. (우리가 함수를 일단 정의해놓고 나중에 쓰고 싶을 때 함수를 호출하는 것과 비슷한 원리입니다.)</p>
<p><code>Monster(10, 125)</code>를 호출하는 순간 <code>Monster</code> 클래스의 <code>__init__</code> 메소드, 즉 생성자가 호출됩니다. 생성자는 앞서 살펴보았던 것처럼 <code>return</code> 문이 별도로 없지만, 특별하게 작동하여 <code>Monster</code> 객체를 만들어 반환(return)합니다. <code>mon1</code>은 <code>Monster</code> 클래스의 <strong>인스턴스(instance)</strong> 입니다.</p>
<p>앞서 생성자를 정의할 때 <code>self</code>, <code>attack</code>, <code>health</code>와 같이 세 개의 인수를 받았습니다. 하지만 <code>Monster(10, 125)</code>에서는 두 개의 인수만을 이용했습니다. 메소드는 함수와는 다르게 호출할 때 첫번째 인수는 무조건 자동으로 채워집니다. 바로 '자기 자신'으로요.</p>
<p><code>mon1</code>, <code>mon2</code>, <code>mon3</code>이 각각 호출하는 생성자는 동일한 메소드입니다. 메모리에 오직 하나로 존재하는 완전히 같은 함수를 호출하고 있습니다. 하지만 호출할 때마다 <code>self</code> 인수에는 각각의 객체로 자동으로 채워집니다. 그리하여 생성자 내부에서의 표현은 <code>self.attack</code>으로 동일했지만, <code>attack</code> 속성은 <code>mon1</code>, <code>mon2</code>, <code>mon3</code> 각각 개별적 및 독립적으로 존재할 수 있게 됩니다.</p>
<h3><em>a_8</em>(8.) 메소드 호출</h3>
<pre><code class="language-python">mon1.doAttack()
</code></pre>
<p><code>mon1</code> 이 지니고 있는 <code>doAttack</code> 메소드를 호출합니다. <code>doAttack</code> 메소드 내부에서의 <code>self</code>는 <code>mon1</code>을 가리키게 되어 <code>mon1</code>의 <code>attack</code> 속성을 출력하게 됩니다.</p>
<h3><em>a_9</em>(9.) 한 번에 메소드 접근</h3>
<pre><code class="language-python">for mon in [mon1, mon2, mon3]:
    mon.hit(1000)

</code></pre>
<p>몬스터들은 모두 같은 <code>Monster</code> 클래스로 생성하였으므로 지니고 있는 메소드명과 속성명 또한 동일합니다. 이를 <strong>인터페이스(Interface)가 같다</strong> 라고도 표현할 수 있는데요, 이 또한 뒤에 계속해서 설명할 수 있도록 하겠습니다.</p>
<p><code>mon</code>은 차례로 <code>mon1</code>, <code>mon2</code>, <code>mon3</code>을 가리키게 되고, 몬스터 모두 <code>hit</code>이라는 메소드를 가지고 있으므로 문제 없이 작동합니다. 몬스터가 더 많아진다 하더라도 리스트에 넣어 관리한다면 편리하게 일괄적으로 공격받게 할 수 있겠지요.</p>
<p>결과는 동일합니다.</p>
<pre><code class="language-plaintext">몬스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 30의 데미지를 주었다!
현재 몬스터의 체력은 95이다.
-----------------
아군이 몬스터에게 90의 데미지를 주었다!
현재 몬스터의 체력은 5이다.
-----------------
몬스터가 아군에게 10만큼 공격했다!
-----------------
아군이 몬스터에게 30의 데미지를 주었다!
현재 몬스터의 체력은 20이다.
-----------------
필살기!! 모든 몬스터에게 1000의 공격!!
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
아군이 몬스터에게 1000의 데미지를 주었다!
몬스터가 죽었다!
-----------------
</code></pre>
<hr>
<h2>패러다임 분리</h2>
<p>클래스의 장점은 명확합니다. 똑같이 동작하는 부분과 다르게 동작하는 부분을 명확하게 분리시켜서 코드 작성을 훨씬 손쉽게 할 수 있습니다. 위 <code>Monster</code> 클래스를 이용하여 세 개의 인스턴스를 만들어 보았는데요, 각각 몬스터의 같은 점과 다른 점은 다음과 같습니다.</p>
<table>
<thead>
<tr>
<th>같은 점</th>
<th>다른 점</th>
</tr>
</thead>
<tbody>
<tr>
<td>데미지 받는 동작, 공격을 주는 동작, <code>attack</code>과 <code>health</code>라는 속성의 용도</td>
<td>각 몬스터의 <code>attack</code>, <code>health</code> 실제 값</td>
</tr>
</tbody>
</table>
<p>냉혹한 프로그래밍의 세계에서는, 중복으로 코딩하는 것을 손쉽게 허용하지 않습니다. 작성할 때의 귀찮음도 크겠지만, 무엇보다도 수정해야 할 사항이 있을 때 일일히 변경해야 한다는 게 너무 번거롭기 때문입니다. 클래스의 장점이 조금은 이해가 되셨나요?</p>
<hr>
<p>이제 용어를 정리할 시간입니다. 위 예제를 설명하면서 수많은 용어가 등장했습니다.</p>
<h2>꼭 기억해요!</h2>
<ol>
<li>모든 <strong>객체(Object)</strong> 에게는 저마다의 <strong>클래스(Class)</strong> 가 존재합니다. 다른 말로 표현하면 클래스는 일종의 틀이고, 클래스를 통해 객체를 찍어낼(생성할) 수 있습니다. 클래스를 다른 말로 <strong>타입(Type)</strong> 이라고도 합니다.</li>
<li><strong>메소드(Method)</strong> 란, 클래스에서 정의되는 함수로, 객체의 동작을 표현합니다.</li>
<li><strong>속성(Attribute)</strong> 이란, 클래스에서 정의되는 변수로, 각 객체의 고유값을 나타냅니다.</li>
<li>모든 메소드는 반드시 첫번째 인수로 <strong><code>self</code></strong> 를 가집니다. 메소드를 호출할 때에 <code>self</code>는 '자기 자신'으로 자동으로 채워지므로 <code>self가 없다</code> 상정하고 메소드를 호출합니다.</li>
<li><strong>특별 메소드(Special Method)</strong> 란, 파이썬에서 특별하게 취급되는 메소드를 말합니다. 종류는 굉장히 많지만 명확히 정해져 있고, 각자 특별한 역할이 있습니다. 이름이 앞 뒤로 언더바 두개(<code>__</code>)로 구성되어 다른 메소드와 구별됩니다. 특별 메소드와 관련해서는 다음을 참조하세요. (추가 예정)</li>
<li><strong>생성자(Constructor)</strong> 란, 특별 메소드 중 하나입니다. 객체를 새로이 생성할 때 사용되는 메소드이며, 객체를 초기화하는 역할을 가지고 있습니다. 별도의 <code>return</code> 문은 없습니다. <code>클래스명(인수1, 인수2, ...)</code>와 같이 호출합니다.</li>
<li>본래 <strong>인스턴스(Instance)</strong> 란, 클래스가 <em>설계도</em> 라는 개념으로 이야기할 때 그 반대급부인 <em>구현된 실체</em> 라는 대비되는 개념으로 사용됩니다. 파이썬에서는 객체와 거의 동일한 뜻으로 사용되므로 혼용하여도 무방합니다.</li>
</ol>
<p>용어 정리를 간단하게 했습니다. 이 정도면 간단한 겁니다. ? 이제 다시 위의 몬스터 예제를 읽어내려서 이해가 가지 않는 지점이 혹시나 있는지 체크해 주세요. 이해가 다 되었다면 다음으로 진행해주시기 바랍니다.</p>
<blockquote>
<p>세상에는 용도와 목적에 따라 아주 다양한 프로그래밍 언어가 생겨났습니다. 하지만 더 효율적이고 범용적인 프로그래밍 언어 사용을 위해 언어가 어떤 특성을 지니고 있는지, 어떤 개념을 이용하는지에 대해서 정리해야 할 필요성이 생겼습니다. 그리하여 프로그래밍 언어 패러다임이 어느정도 정립되는데요, 그 중 <strong>객체 지향 프로그래밍(OOP)</strong> 은 아주 유서깊은 패러다임입니다. OOP는 <code>객체</code>라는 추상적인 존재를 클래스와 클래스의 복잡한 관계를 통해 구현하고자 합니다. OOP에 대항하는 또 다른 패러다임도 존재하지만, 이미 OOP는 프로그래머와 프로그램 그 자체에 깊숙히 자리잡고 있습니다.</p>
</blockquote>
<hr>
<h2>개념 추가 정리</h2>
<p>핵심 개념과 더불어서, 파이썬에서 클래스를 사용할 때의 유의점과 참고할 만한 사항을 정리합니다. 선 요약하면 다음과 같습니다.</p>
<ol>
<li>클래스의 이름은 대문자로, 메소드와 속성의 이름은 소문자로 시작하도록 합니다.</li>
<li>생성자를 정의했다면 거기에 맞춰 객체를 생성해야 합니다.</li>
<li>메소드와 속성은 이름 중복이 허용되지 않습니다.</li>
<li><strong>인터페이스(Interface)가 같다</strong> 라는 말은 파이썬에서는 쉽게 얘기하여 <code>서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다</code>라고 말할 수 있습니다.</li>
<li>파이썬의 세계에서 모든 변수(variable)는 <strong>객체(Object)</strong> 입니다.</li>
</ol>
<hr>
<h3>클래스의 이름은 대문자로, 메소드와 속성의 이름은 소문자로 시작하도록 합니다.</h3>
<p>스타일에 관한 내용입니다. 개발자 조상님들은 대대로 클래스 명에는 대문자로, 메소드와 속성 명에는 소문자로 시작하도록 해왔습니다. 유명한 파이썬 모듈도 모두 그렇게 해왔습니다. 프로그래머간의 약속입니다.</p>
<blockquote>
<p>예외가 있습니다. 파이썬에서 기초 자료형이라 불리우는 것들은 소문자로 시작하는 클래스입니다. <code>int</code>, <code>float</code>, <code>str</code>, <code>list</code> 등이 있습니다.</p>
</blockquote>
<p><code>power</code>라는 가상의 모듈을 불러와 사용하는, 김 부장님이 쓴 코드를 맥락없이 마주하게 되었다고 가정합시다.</p>
<pre><code class="language-python">import power
a = power.man.Data()
</code></pre>
<p>우리가 알 수 있는 정보는 극히 적습니다. <code>power.man</code>이 뭔지는 모릅니다. 하지만 이 함수는 <code>power.man</code>이라는 것 안에 있는 <code>Data()</code>라는 메소드를 호출한 것이 아닌, <code>power.man</code>이라는 것 안에 정의되어 있는 <code>Data</code>라는 클래스의 생성자를 호출하여 새 객체를 만들었음을 시사하고 있습니다. (클래스의 정의는 어디서든지 가능합니다.) 우리가 <code>a</code>를 어떻게 사용하는지 파악하려면, <code>Data</code> 클래스가 어떤 속성과 메소드를 정의해놓았는지 찾아보면 됩니다.</p>
<p>또 다른 예제를 봅시다. 이름 모를 나그네가 소리소문없이 코드만 쓰고 떠나갔습니다.</p>
<pre><code class="language-python"># This function returns Data.
def getSomething(index=0 ... 후략
... (중략)
</code></pre>
<p>함수 정의 앞에 간단하게 주석으로 <code>This function returns Data.</code>라고 설명해놓았네요. 근데 대소문자 구분이 뭔가 보이시나요? 단순히 data가 아닌 <code>Data</code>를 반환한다고 합니다. 이게 어떤 의미일까요? 바로 <code>Data</code>라는 클래스를 기반으로 만들어진 객체를 반환한다는 사실을 함축적으로 표현하고 있습니다.</p>
<p>코드 작성에서 '다른 사람'이라 함은 과거의 나, 미래의 나가 될 수 있다는 사실을 항상 유념해주세요. 옛날에 쓴 코드를 왜 이렇게 썼는지 현재의 내가 이해할 수 없을 수도 있고, 현재의 내가 당연하게 썼던 코드를 미래의 내가 왜 이렇게 썼는지 도무지 이해할 수 없을 수도 있습니다. 상식을 고수하는 건 스스로에게도 좋습니다.</p>
<hr>
<h3>생성자를 정의했다면 거기에 맞춰 객체를 생성해야 합니다.</h3>
<pre><code class="language-python">class Car:
    def __init__(self, name):
        self.name = name

kiss = Car()
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 5, in &lt;module&gt;
    kiss = Car()
TypeError: __init__() missing 1 required positional argument: 'name'
</code></pre>
<p>에러가 발생합니다. 생성자가 1개의 인수를 필요로 하지만 위 예제에서는 생성자에 아무런 인수도 넘겨주지 않아 에러가 발생했습니다.</p>
<hr>
<pre><code class="language-python">class Car:
    def __init__(self, name):
        self.name = name

kiss = Car('power', 31)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 5, in &lt;module&gt;
    kiss = Car('power', 31)
TypeError: __init__() takes 2 positional arguments but 3 were given
</code></pre>
<p>클래스는 동일하고 이번에는 인수를 2개 넘겨주었는데요, 마찬가지로 개수가 맞지 않아 에러가 발생했습니다.</p>
<hr>
<h3>메소드와 속성은 이름 중복이 허용되지 않습니다.</h3>
<pre><code class="language-python">class Gun:
    def __init__(self, bang):
        self.bang = bang

    def bang(self):
        print(&quot;빵야빵야!&quot;)

kiss = Gun('뱅뱅')
kiss.bang()
</code></pre>
<pre><code class="language-plaintext">  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 9, in &lt;module&gt;
    kiss.bang()
TypeError: 'str' object is not callable
</code></pre>
<p><code>str</code> 객체를 호출할 수 없다고 에러가 뜹니다. 메소드와 속성의 이름이 <code>bang</code>으로 같으므로 생성자가 불리우는 순간 메소드였던 <code>self.bang</code>은 사라지고 속성으로서 덮어쓰여집니다. <code>kiss.bang</code> 은 메소드가 아니라 속성인 셈이죠. 속성을 호출하려고 하니 에러가 뜰 수 밖에요.</p>
<hr>
<h3>인터페이스가 같다 라는 말은 파이썬에서는 쉽게 얘기하여 <code>서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다</code>라고 말할 수 있습니다.</h3>
<p>간단히 예제를 보고 설명합시다.</p>
<pre><code class="language-python">class Woman:
    def cry(self):
        print(&quot;훌쩍훌쩍..&quot;)

class Man:
    def cry(self):
        print(&quot;으흐흑..&quot;)
        
class Baby:
    def cry(self):
        print(&quot;응애응애!!&quot;)

people = []
people.append(Woman())
people.append(Man())
people.append(Baby())
people.append(Baby())
people.append(Man())
people.append(Woman())
people.append(Woman())
for person in people:
    person.cry()
</code></pre>
<pre><code class="language-plaintext">훌쩍훌쩍..
으흐흑..
응애응애!!
응애응애!!
으흐흑..
훌쩍훌쩍..
훌쩍훌쩍..
</code></pre>
<p><code>Woman</code>, <code>Man</code>, <code>Baby</code>라는 3개의 클래스를 정의했습니다. 이 클래스들은 완전히 다르지만, 오로지 공통점이라고는 <code>cry</code>라는 메소드를 정의해놓은 것 뿐입니다. 그러고는  <code>people</code>이라는 리스트를 만들고 거기에 <code>Woman</code>, <code>Man</code>, <code>Baby</code> 객체를 생성하여 직접 넣어주고 있습니다. <code>for</code> 문에서는 <code>people</code> 안에 있는 요소를 순회하며 <code>cry</code> 메소드를 호출하고 있습니다.</p>
<p>한번 더 강조하지만 세 개의 클래스들은 완전히 <strong>독립된</strong> 클래스입니다. 피가 하나도 섞이지 않은 완전 남이나 마찬가지인 클래스들이죠. 하지만 이 클래스를 이용하는 방법은 우연찮게 같았습니다. 이러한 상황 속에서 우리는 두 가지 새삼스러운 사실을 다시 한번 확인할 수 있습니다.</p>
<p>첫째, <strong>서로 다른 객체가 이름이 같고 기능이 비슷한 메소드를 가지고 있다면 이 객체를 사용하는 방법은 동일하다는 점입니다.</strong> 아까 전에 이를 <strong>인터페이스가 같다</strong> 고 이야기하였죠. 반대로 이야기하면 <code>이 객체들이 운다(cry)는 행위의 인터페이스를 제공한다</code>고도 말할 수 있습니다. 어떤 객체가 인수를 하나도 받지 않고 우는 소리를 출력하는 메소드를 가지고 있다면 그 객체는 <strong>울 수 있는</strong> 객체이며, 사용법과 용도는 같기 때문에 코드의 사용자 입장에서는 <strong>cry 메소드 내부가 어떻게 되어 있는지 신경쓰지 않고</strong> 코드를 사용할 수 있습니다. 어떤 메소드의 내부가 어떻게 구현되어 있는지 신경쓰지 않아도 된다는 점은 객체와 클래스를 다룰 때 중요한 특징 중 하나입니다.</p>
<p>둘째, <strong>인터페이스가 같다고 판단하는 것은 또 다른 차원의 문제라는 점입니다.</strong> 위 코드에서는 단순히 <code>for</code> 문을 돌려서 <code>cry</code> 메소드를 호출했습니다. 객체가 <code>cry</code> 메소드를 가지고 있는지 체크하는 작업은 없었지요. 만약 <code>Baby</code> 클래스의 <code>cry</code> 메소드가 아래와 같이 정의되어 있었다면 어떨까요?</p>
<pre><code class="language-python">(중략)
class Baby:
    def cry(self, isHungry):
        if isHungry:
            print(&quot;밥줘!!&quot;)
        else
            print(&quot;응애응애!!&quot;)
(후략)
</code></pre>
<p>결과는 다음과 같습니다.</p>
<pre><code class="language-plaintext">훌쩍훌쩍..
으흐흑..
Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/coding-class/oh/191201/test.py&quot;, line 25, in &lt;module&gt;
    person.cry()
TypeError: cry() missing 1 required positional argument: 'isHungry'
</code></pre>
<p><code>Baby</code> 클래스의 <code>cry</code> 메소드만 취하는 인수가 달라졌습니다. 이제 더이상 <code>인터페이스가 같다</code> 라고 말할 수 없습니다. 왜냐하면 사용하는 방법이 다르기 때문이지요. 이처럼 인터페이스가 다르다면 에러가 발생하는 상황은 꽤 빈번하게 발생합니다.</p>
<p>이러한 문제를 해결하고자 하는 두 가지 접근법이 있습니다. 하나는 <code>그 메소드가 실제로 존재하는지 실행하기 전에 체크해보자.</code> 이고, 또 다른 하나는 <code>일단 그 메소드가 존재한다고 가정하고 실행해보고, 에러가 발생하면 따로 처리하자.</code> 입니다. 파이썬은 명확하게 후자의 길을 걷고 있습니다. 파이썬은 에러 처리에 관한 기능을 강력하게 제공해주고 있지요. 이것은 예외에서 자세히 살펴보도록 합시다. (추가 예정)</p>
<hr>
<h3>파이썬의 세계에서 모든 변수는 객체 입니다.</h3>
<p>이것은 좀 충격적인 사실입니다. <code>class Something:</code>으로 클래스를 정의하고 생성자를 <code>Something()</code> 이렇게 호출해야 비로소 객체가 생성되는 것이 아닌가요? 그냥 단순히 <code>number = 10</code>으로 해도 <code>number</code>가 객체가 된다니요? 그걸 어떻게 증명하죠?</p>
<p>파이썬에서는 <code>type</code>이라는 클래스를 제공합니다. 생성자 안에 무엇이든 넣으면 그것에 관한 클래스(타입)에 대한 정보를 알 수가 있어요. 시험 삼아 다음 코드를 실행해볼까요?</p>
<pre><code class="language-python">list1 = [[1,2,3],'4',5,(6,7),{8,9},{10:11, 12:13}, 14.15]
for item in list1:
    print(type(item))

import math
class Duck:
    def makeNoise(self):
        print(&quot;꽥꽥&quot;)
yellow = Duck()


list2 = [math, math.pow(2,0.5), yellow, yellow.makeNoise, yellow.makeNoise()]
for item in list2:
    print(type(item))
</code></pre>
<pre><code class="language-plaintext">&lt;class 'list'&gt;
&lt;class 'str'&gt;
&lt;class 'int'&gt;
&lt;class 'tuple'&gt;
&lt;class 'set'&gt;
&lt;class 'dict'&gt;
&lt;class 'float'&gt;
꽥꽥
&lt;class 'module'&gt;
&lt;class 'float'&gt;
&lt;class '__main__.Duck'&gt;
&lt;class 'method'&gt;
&lt;class 'NoneType'&gt;
</code></pre>
<p>결과가 나왔습니다. 죄다 <code>class</code> 라고 합니다. <code>list</code>(리스트), <code>str</code>(문자열), <code>tuple</code>(튜플), <code>int</code>, <code>set</code>(세트), <code>dict</code>(딕셔너리), <code>float</code> 모두 클래스네요.</p>
<p>자주 쓰는 <code>math</code> 모듈 또한 <code>module</code> 클래스 기반이고, 우리가 직접 만든 <code>Duck</code> 클래스의 인스턴스인 <code>yellow</code>는 물론 객체겠지만, 메소드를 호출하지 않고 메소드 그 자체를 가르킨 <code>yellow.makeNoise</code> 또한 <code>method</code>라는 클래스의 객체랍니다. 더욱 더 놀라운 점은 <code>makeNoise</code> 메소드는 아무것도 반환하지 않아서 <code>yellow.makeNoise()</code>와 같이 호출하여도 아무것도 남지 않는데, 아무것도 아닌 것조차 <code>NoneType</code>이라는 클래스의 객체라는 점입니다.</p>
<p>이것이 시사하는 바는 도대체 무엇일까요?</p>
<p>그것은 바로 <strong>변수들을 객체로서 설명 가능하다는 사실입니다.</strong> 클래스가 같은 객체나 값은 결국 같은 용도의 메소드와 속성을 가지고 있으며, 오직 다른 것은 속성에 존재하는 값임을 알 수 있습니다. 또한 객체의 일반적인 성질을 이용할 수 있다는 것인데요, 이는 다음과 같습니다.</p>
<ol>
<li>프로그램이 실행하는 도중에 생성할 수 있습니다.</li>
<li>이름으로써 접근할 수 있습니다. (변수명을 떠올리세요)</li>
<li>함수의 인수로 전달할 수 있습니다.</li>
<li>함수의 결과로 반환할 수 있습니다.</li>
</ol>
<p>즉, 어떤 클래스를 정의해 놓았다 해도 특정 메소드를 프로그램 실행 도중에 추가하거나 삭제할 수도 있으며, 리스트나 딕셔너리에 메소드를 직접 저장할 수도 있는 등 무궁무진한 활용법을 기대해볼 수 있다는 것이죠. 심지어 메소드의 인수나 반환 값으로 함수를 받을 수도 있구요.</p>
<p>함수가 값이다? 무슨 말인지 알쏭달쏭할 것 같습니다. 이러한 활용법은 꽤 고급 활용법에 해당하므로 직접 구현할 일은 앞으로도 없을 수 있지만, 실제 유용한 모듈이나 라이브러리가 이러한 객체적 특성을 이용하여 편리한 기능을 제공하고 있다는 사실을 알고 있어야 제대로 된 활용을 할 수 있을 것입니다.</p>
<h2>더 나아가기</h2>
<ul>
<li>클래스의 계층 구조 - <a href="981">상속</a> 참조</li>
<li>객체로서의 함수 (일급 함수) (추가 예정)</li>
<li>객체로서의 클래스 (메타프로그래밍) (추가 예정)</li>
</ul>
<hr>
<h2>연습 문제</h2>
<ul>
<li>객체와 클래스는 무엇인가? 서로의 관계로 설명해보라.</li>
<li>메소드는 무엇인가?</li>
<li>속성은 무엇인가?</li>
<li>메소드를 정의할 때 반드시 지켜야 할 규칙은 무엇인가?</li>
<li>특별 메소드란 무엇인가?</li>
<li>생성자의 역할은 무엇인가?</li>
<li>인스턴스라는 말은 객체와 혼용하여도 무방한가?</li>
<li>클래스의 이름은 어떻게 시작하는 게 좋은가?</li>
<li>메소드와 속성의 이름 중복은 허용되는가?</li>
<li><code>인터페이스가 같다</code> 라는 말을 다르게 이야기하면 무엇인가?</li>
<li>객체의 일반적인 성질 4가지는 무엇인가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<ol>
<li>
<p>다음 코드의 결과를 예측하세요.</p>
<pre><code class="language-python">class Lady:
    def __init__(self, name):
        self.name = name + &quot;양&quot;

merry = Lady('메리')
print(merry.name)

</code></pre>
</li>
<li>
<p>다음 클래스를 만드세요. <code>Cup</code> 클래스는 용량을 나타내는 <code>capacity</code> 속성을 가지려 합니다. <code>Cup</code> 객체가 생성될 때, 생성자를 통해 <code>capacity</code>를 받아들이고자 합니다.</p>
</li>
<li>
<p>방금 만든 <code>Cup</code> 클래스를 보강하세요. <code>Cup</code> 클래스는 현재 물의 양을 나타내는 <code>now</code> 속성도 만들고자 합니다. 하지만 이 <code>now</code>는 객체가 생성될 때 <code>0</code>으로 초기화됩니다.</p>
</li>
<li>
<p><code>Cup</code> 클래스를 계속해서 보강하고자 합니다. <code>Cup</code> 객체가 생성될 때 <code>~~ 용량 만큼의 컵이 생성되었습니다</code>라는 메세지를 <code>print</code> 하고자 합니다. 제대로 동작하는지 테스트까지 진행하세요.</p>
</li>
<li>
<p><code>Cup</code> 클래스에 <code>fill</code> 메소드를 추가하고자 합니다. 이 메소드는 물의 양을 인수로 받으며, 그 만큼 <code>now</code> 속성에 더하도록 합니다. 만약 <code>now</code>가 <code>capacity</code>보다 커지게 된다면 <code>물이 가득찼습니다</code> 메세지를 출력합니다. 별 다른 반환값은 없습니다. 제대로 동작하는지 테스트까지 진행하세요.</p>
</li>
<li>
<p><code>Cup</code> 클래스에 <code>pour</code> 메소드를 추가하고자 합니다. 이 메소드는 <code>~~ 만큼의 물을 부어냅니다</code>라는 메세지를 출력하며 현재 가진 물의 양인 <code>now</code>을 모두 반환합니다. 동시에 <code>now</code> 도 <code>0</code>으로 만듭니다.</p>
</li>
<li>
<p>위 <code>Cup</code> 클래스를 완성시킨 뒤 다음 코드를 작동시켰을 때 결과가 어떤지 예측해봅시다.</p>
<pre><code class="language-python">cup1 = Cup(30)
cup2 = Cup(50)

cup1.fill(20)
cup2.fill(40)
cup2.fill(cup1.pour())
print(cup1.now)
print(cup2.now)
</code></pre>
</li>
</ol>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p><code>메리양</code></p>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, capacity):
        self.capacity = capacity
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, capacity):
        self.capacity = capacity
        self.now = 0
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, capacity):
        self.capacity = capacity
        self.now = 0
        print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, capacity):
        self.capacity = capacity
        self.now = 0
        print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')

    def fill(self, water):
        self.now += water
        if self.now &gt; self.capacity:
            self.now = self.capacity
            print('물이 가득찼습니다.')
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, capacity):
        self.capacity = capacity
        self.now = 0
        print(f'용량이 {capacity} 만큼의 컵을 생성했습니다.')

    def fill(self, water):
        self.now += water
        if self.now &gt; self.capacity:
            self.now = self.capacity
            print('물이 가득찼습니다.')

    def pour(self):
        print(f'물을 {self.now} 만큼 부어냅니다.')
        outgoing = self.now
        self.now = 0
        return outgoing
</code></pre>
</li>
<li>
<p>결과입니다.</p>
<pre><code class="language-plaintext">용량이 30 만큼의 컵을 생성했습니다.
용량이 50 만큼의 컵을 생성했습니다.
물을 20 만큼 부어냅니다.
물이 가득찼습니다.
0
50
</code></pre>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2019-12-17 10:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-17 01:32:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 06:47:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-27 21:47:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%81%b4%eb%9e%98%ec%8a%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>7618</wp:comment_id>
			<wp:comment_author><![CDATA[겸겸]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[magiclily@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.43.118.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-17 21:13:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-17 12:13:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[self.attack=attack
와 이제 이해가 되네요~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631880825.337345;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1632017068.84029;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 조건문 ~ 분기를 만들기]]></title>
		<link>https://elvanov.com/217</link>
		<pubDate>Wed, 18 Dec 2019 04:33:26 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 실컷 때릴 수 있는 허수아비\n\n지금까지 배운 방법으로는 위에서 아래로, 순차적으로 한줄 한줄 실행하는 프로그램밖에 만들지 못합니다. 이제 조건을 만들어 프로그램의 분기를 만들어 볼텐데요, 간단한 예제를 통해 보면서 진행해보도록 합시다.\n\n슈퍼파워 게임회사는 RPG 게임을 제작하고 있습니다. 초보 모험가를 위해 실컷 때릴 수 있는 허수아비를 세워두려고 합니다. 규칙은 다음과 같습니다.\n\n\u003e 1. 허수아비의 체력은 100입니다.\n\u003e 2. 플레이어의 공격을 수치로 입력받습니다.\n\u003e 3. 허수아비의 체력을 넘는 공격을 준다면 허수아비가 쓰러집니다.\n\u003e 4. 허수아비 체력을 밑도는 공격을 준다면 허수아비는 쓰러지지 않습니다.\n\u003e 5. 공격력이 10 정도로 모자라다면 지나가던 개가 \u0022아쉽네\u0022라고 말합니다.\n\n일단 실행 코드와 결과를 봅시다. 코드의 [##1##](#a_1-explain)을 클릭하면 설명으로 바로 이동합니다.\n\n### 실행 코드\n\n```python\nhealth = 100 ##a_1##\nattack = int(input()) ##a_2##\nif attack \u003e= health: ##a_3##\n    print(\u0022털썩! 허수아비가 쓰러졌습니다!\u0022) ##a_4##\nelse: ##a_5##\n    print(\u0022허수아비가 쓰러지지 않았네요.\u0022) ##a_6##\n    if attack \u003e= health - 10: ##a_7##\n        print(\u0022지나가던 개 : 아쉽네\u0022) ##a_8##\n```\n\n### 결과\n```plaintext\n\u002d\u002d\u002d\u002d-첫번째 실행\u002d\u002d\u002d\u002d-\n200\n털썩! 허수아비가 쓰러졌습니다!\n\u002d\u002d\u002d\u002d-두번째 실행\u002d\u002d\u002d\u002d-\n70\n허수아비가 쓰러지지 않았네요.\n\u002d\u002d\u002d\u002d-세번째 실행\u002d\u002d\u002d\u002d-\n95\n허수아비가 쓰러지지 않았네요.\n지나가던 개 : 아쉽네\n```\n\n\u002d\u002d-\n\n이제 설명의 차례입니다. 천천히 한 문장 한 문장 음미하며 읽도록 합시다.\n\n### *a_1*(1.) 설명\n\n```python\nhealth = 100\n```\n\n허수아비의 체력을 담는 `health` 라는 변수를 정의하여, 초깃값 `100`으로 두었습니다. 이 변수의 값은 이후에 입력받은 값을 비교하는 데 쓰이고 프로그램 내에서 다시 변하지는 않습니다.\n\n### *a_2*(2.) 설명\n\n```python\nattack = int(input())\n```\n\n`int(input())`이라는 요상한 모양이 등장했습니다. `int`라는 것이 정확히 어떤 역할인지는 모르나, 우리는 변수의 종류를 배울 때 `int`라는 정수형이 존재한다는 것을 배웠습니다. 여기서 `int`는 `소괄호 안의 값을 정수형으로 변환하겠다!` 라는 뜻으로 쓰입니다. 쓰는 방법은 `print` 와 같은 함수처럼 소괄호를 이용합니다. 일반적인 사용법은 [내장 함수](371)를 참조해주시고, 좀 더 정확하고 심화적인 내용은 [클래스](182)를 참조하세요.\n\n우선 두 개로 분리하여 생각합시다. 바깥쪽을 감싸고 있는 `int( ... )`와, 내부의 `input()`입니다. 소괄호가 여러 개 등장한다면 안의 것 부터 작동한다고 생각하세요. 즉 `input()`이 먼저 작동하고 그 결과값이 `int( ... )`에 적용합니다. 그러니까 `attack = int(input())`은, 우선 사용자로부터 입력을 받고, 그 값을 정수형으로 변환하도록 하고, 그 값을 `attack`이라는 새로운 변수를 정의하면서 초기값으로 넣는다는 뜻입니다.\n\n`input()`의 결과값은 무조건 문자열(`str`)이기 때문에 숫자를 입력받는다 해도 `'200'`과 같은 문자열을 받게 됩니다. 앞서 배웠던 산술 연산자를 이용하기 위해서는 이 값을 숫자로 변환하여야 하기 때문에 이 같은 과정은 필수입니다.\n\n### *a_3*(3.) 설명\n\n```python\nif attack \u003e= health:\n```\n\n새로운 **`if`** 라는 키워드가 등장했습니다. `\u003e=` 라는 **비교 연산자(Comparison Operator)** 가 등장하였고 콜론(`:`)도 눈에 띄네요. \n\n`if`는 앞으로 `if`문, 혹은 조건문이라고도 불리우는 문법의 핵심 키워드입니다. 우리는 `if`와 그 바로 뒤에 따라오는 조건을 통해 프로그램의 흐름을 제어할 수 있습니다. 여기서는 `attack \u003e= health`라는 게 조건입니다. 엑셀의 `if` 함수를 써본 경험이 있다면 이해가 빠를 수도 있겠습니다.\n\n`attack \u003e= health`란 `attack이 health보다 크거나 같은가?`라는 뜻이며, 이 조건을 충족한다면 뒤따라오는 블록(block)으로 진행하도록 하고, 충족하지 않다면 그 블록은 아예 건너뛰도록 합니다.\n\n콜론(`:`)은 새로운 블록을 시작하라는 뜻입니다. 블록 내부에서부터 들여쓰기가 시작되고, 블록을 끝내려면 들여쓰기를 원상복귀하면 됩니다. 들여쓰기는 띄어쓰기 4개를 원칙으로 합니다. 콜론을 쓰지 않고서는 새로운 블록을 시작할 수 없습니다. 블록 안에는 또 다른 블록이 포함될 수 있으며, 들여쓰기를 그만큼 더 추가합니다. \n\n### *a_4*(4.) 설명\n\n```python\n    print(\u0022털썩! 허수아비가 쓰러졌습니다!\u0022)\n```\n\n새로운 블록으로 시작했으니 들여쓰기가 띄어쓰기 4개로 이루어졌습니다. 바로 앞 조건문에서 조건이 충족된다면 이 블록이 실행이 됩니다. 결과의 첫번째 실행에서는 `100`보다 높은 `200`을 입력하였고, 조건을 충족하여 `print` 함수가 호출됩니다. 하지만 두번째 실행에서 `70`을 입력하였고, 조건을 충족하지 못해 이 블록은 건너뛰게 됩니다.\n\n### *a_5*(5.) 설명\n\n```python\nelse:\n```\n\n새로운 키워드가 등장했으나, 그 전에 다시 들여쓰기가 원상복귀 되었다는 점을 유념해주세요. 즉 앞선 블록이 끝났다는 뜻입니다. \n\n여기서는 `else`라는 키워드가 등장합니다. 조건문에서 `else`는 `if`와 마찬가지로 아주 중요한 키워드입니다. `else`는 홀로 등장할 수 없습니다. 반드시 앞쪽의 `if`와 짝지어집니다.\n\n기억을 더듬어볼까요, 앞선 조건은 `attack \u003e= health` 이었고, 우리가 `attack`을 입력받고 `health`는 `100`으로 두었었죠. `else`의 뜻은 `if의 조건이 충족되지 않으면 다음 블록을 실행하라`입니다. `200`을 입력받았을 때에는 조건에 충족되기 때문에 `if`가 지니고 있는 블록이 실행되며, `else`는 실행되지 않습니다. 하지만 `70`과 `95`와 같은 경우는 앞선 조건이 충족되지 않으므로 `if`의 블록은 건너뛰되, `else`가 가지고 있는 블록이 즉시 실행됩니다.\n\n`else`는 특별한 조건을 받지 않습니다. 곧 바로 콜론(`:`)이 등장하여 새 블록을 엽니다.\n\n### *a_6*(6.) 설명\n\n```python\n    print(\u0022허수아비가 쓰러지지 않았네요.\u0022)\n```\n\n새로운 블록이 시작했으니 다시 들여쓰기가 적용되었습니다. \n\n### *a_7*(7.) 설명\n\n```python\n    if attack \u003c 10:\n```\n\n들여쓰기가 계속 유지되고 있습니다. 그러므로 여기서의 `if`문은 `else`의 블록 안에 포함된다고 말할 수 있습니다. 이 `if` 문 또한 바깥의 `if`와 완전히 동일한 메커니즘을 가지고 있습니다. 조건이 충족되면 바로 뒤따라오는 블록을 실행시킨다는 것이죠.\n\n여기서 조건은 `attack \u003e= health - 10`입니다. 비교 연산자는 산술 연산자보다 나중에 처리됩니다. 즉 health - 10이 먼저 처리되고, 그 결과값인 `90`을 이용해 `attack \u003e= 90`과 같은 형태가 만들어집니다. `70`은 충족하지 못하고 `95`는 충족하게 되겠네요.\n\n콜론(`:`)으로 새로운 블록을 시작합니다.\n\n### *a_8*(8.) 설명\n\n```python\n        print(\u0022지나가던 개 : 아쉽네\u0022)\n```\n\n새로운 블록이 시작되어 들여쓰기가 이중 적용되었습니다. 왼쪽으로부터 코드가 점점 더 동떨어지고 있네요.\n\n결과적으로 이 `print` 함수는 `attack`이 90 ~ 99의 범위에 있을 때 실행됩니다. 왜 그럴까요? `if`와 `else`가 중첩으로 하여 존재하기 때문입니다. 조건만 생각하여 순서를 상기해보면 다음과 같습니다.\n\n1. `attack \u003e= health` 가 충족하지 않을 때 (즉 attack \u003c health 일 때)\n2. `attack \u003e= health - 10` 이 충족할 때\n\n1번 조건이 첫번째 if 문에서 갈렸던 분기이고, 2번 조건이 두번째 if문에서의 조건입니다. 1번과 2번이 동시에 충족해야 지나가던 개가 \u0022아쉽다\u0022며 오지랖을 부릴 수 있게 됩니다.\n\n\u002d\u002d-\n\n## 핵심 개념 정리\n\n위 예제를 통해 새롭게 알게 된 사실을 정리해봅시다.\n\n- **`if`** 는 조건을 이용하여 프로그램의 분기를 만들때 쓰는 키워드입니다.\n- **`else`** 는 짝지어진 `if`의 조건에 충족하기 못할 때 실행됩니다. `else`를 반드시 사용할 필요는 없습니다.\n- **비교 연산자(Comparison Operator)** 란 주로 조건에 쓰는 연산자입니다.\n- `if`와 `else`는 실행 범위를 바로 뒤따라오는 **블록(block)** 으로 제한합니다.\n- 블록은 콜론(**`:`**)으로 시작할 수 있으며, 동일한 들여쓰기(**공백 4칸**) 동안 블록을 유지할 수 있고, 블록을 끝내려면 들여쓰기를 **원상복귀** 하면 됩니다. 블록은 **중첩될** 수 있습니다.\n- `if`, `else`, 조건, 실행 블록을 통틀어 **조건문(if statement)** 이라고 말합니다.\n\n그리고 앞서 배웠던 상식은 다소 금이 갔습니다.\n\n- 명령은 무조건 위에서 아래로 차례대로 실행된다? 기본적으로는 그렇지만 조건에 따라 건너뛸 수도 있다!\n\n\u002d\u002d-\n\n## 비교 연산자(Comparison Operator)\n\n우리는 앞서 대입 연산자(`=`), 각종 산술 연산자(`+`, `-` 등)를 배웠습니다. 이번에는 새로운 비교 연산자입니다. 비교 연산자의 특징은 **불리언(boolean)** 값을 결과로 내놓는다는 점입니다. 앞서 변수의 종류를 논할 때 우리는 불리언을 짧게나마 소개하고 지나갔습니다. 하지만 다시 꺼내 봅시다.\n\n- **`bool`** : 불리언(boolean)입니다. `True` 혹은 `False` 값 밖에 가지지 못합니다.\n\nTrue란 참이고, False는 거짓입니다. 이분법적인 사고를 현대사회에서는 지양하라고는 하지만 컴퓨터의 세계에서는 흔한 논리입니다. `if`에서 조건을 충족하는지, 그렇지 않은지 판단할 때는 이 불리언 값을 활용합니다.\n\n```python\nif 100 \u003e 200:\n    print(\u0022100은 200보다 크다는 건 참이다.\u0022)\nelse:\n    print(\u0022100은 200보다 크다는 건 거짓이다.\u0022)\n```\n\n위 예제에서 `100 \u003e 200`은 `False` 값을 내놓습니다. 즉 `if False:` 로 작동한다는 것입니다. `if`는 조건이 `False` 이므로 조건에 충족되지 않았다고 판단하고 `else` 블록을 찾아 실행시킵니다.\n\n```plaintext\n100은 200보다 크다는 건 거짓이다.\n```\n\n\u002d\u002d-\n\n하지만 다음 예제와 같이 조건을 참으로 만들면 `if` 블록이 실행되겠지요.\n\n```python\nif 300 \u003e 200:\n    print(\u0022300은 200보다 크다는 건 참이다.\u0022)\nelse:\n    print(\u0022300은 200보다 크다는 건 거짓이다.\u0022)\n```\n```plaintext\n300은 200보다 크다는 건 참이다.\n```\n\n\u002d\u002d-\n\n`bool` 형은 물론 숫자나 문자열 같은 변수이기 때문에 대입할 수 있습니다. \n\n```python\ncondition = 300 \u003e 20\nif condition:\n    print(\u0022300은 200보다 크다는 건 참이다.\u0022)\nelse:\n    print(\u0022300은 200보다 크다는 건 거짓이다.\u0022)\n```\n```plaintext\n300은 200보다 크다는 건 참이다.\n```\n\n\u002d\u002d-\n\n### 비교 연산자의 종류\n\n\n|비교 연산자|설명|\n|:\u002d\u002d-:|:\u002d\u002d-:|\n|**`a == b`**|`a`와 `b`가 같다|\n|**`a != b`**|`a`와 `b`가 다르다|\n|**`a \u003e b`**|`a`가 `b`보다 크다|\n|**`a \u003c b`**|`a`가 `b`보다 작다|\n|**`a \u003e= b`**|`a`가 `b`보다 크거나 같다|\n|**`a \u003c= b`**|`a`가 `b`보다 작거나 같다|\n\n\u002d\u002d-\n\n## 논리 연산자 (Logical Operator)\n\n여러 개의 비교 연산자를 동시에 사용하고 싶다고 가정합시다. 앞서 허수아비를 거의 쓰러뜨렸지만 아쉽게 그러지 못했던 상황을 기억하시나요? 90 ~ 99의 공격력으로 때린 것만 조건으로서 활용하고 싶습니다. health 변수는 조건을 좀 더 명확하게 보기 위해 삭제하도록 하겠습니다. 다음 코드를 실행해 보세요.\n\n```python\nattack = int(input()) \nif attack \u003e= 90: \n    if attack \u003c 100:\n        print(\u0022지나가던 개 : 아쉽구려\u0022)\n```\n```plaintext\n95\n지나가던 개 : 아쉽구려\n```\n\n\u002d\u002d-\n\n조건문을 중첩으로 두어 조건 2개가 둘다 만족해야 `print` 되도록 코드를 짰습니다. 하지만 파이썬에서는 논리 연산자를 이용해 두 비교 연산자를 결합할 수 있습니다. 다음 코드를 보세요.\n\n```python\nattack = int(input()) \nif attack \u003e= 90 and attack \u003c 100: \n    print(\u0022지나가던 개 : 아쉽구려\u0022)\n```\n```plaintext\n95\n지나가던 개 : 아쉽구려\n```\n\n\u002d\u002d-\n\n결과는 동일합니다. `and` 라는 새로운 키워드가 등장했습니다. 아주 쉽고 간편하게 나타낼 수 있지 않나요? 논리 연산자는 피연산자와 결과값 모두 `boolean` 형을 활용하는 연산자입니다. 논리 연산자의 종류는 3가지가 있고, 설명은 다음과 같습니다.\n\n\u002d\u002d-\n\n### 논리 연산자의 종류\n\n|연산자|설명|\n|:\u002d\u002d-:|\u002d\u002d-|\n|`x or y`|`x`와 `y` 중 하나라도 `True`이면, `True`이다|\n|`x and y`|`x`와 `y` 모두 `True`이어야 `True`이다|\n|`not x`|`x`가 `False`이면 `True`이다|\n\n\u002d\u002d-\n\n### 논리 연산자 결과 표\n\n|`x`|`y`|`x or y`|`x and y`|`not x`|\n|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|\n|`False`|`False`|`False`|`False`|`True`|\n|`True`|`False`|`True`|`False`|`False`|\n|`False`|`True`|`True`|`False`|`True`|\n|`True`|`True`|`True`|`True`|`False`|\n\n\u002d\u002d-\n\n## 여러 개의 분기를 한꺼번에 만들기 (`elif`)\n\n지나가던 개가 오지랖을 오질나게 부린다고 가정합시다. 너무 맥없이 때리면 젊은이가 힘이 없다 혀를 차고, 너무 세게 때리면 다 부술 일 있냐며 화내는 등 반응을 추가하여 봅시다. 이번 예제에서도 `health` 변수를 삭제했습니다.\n\n```python\nattack = int(input()) \nif attack \u003e= 200: \n    print(\u0022지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누\u0022)\nelse:\n    if attack \u003e= 100:\n         print(\u0022지나가던 개 : 오, 허수아비를 쓰러뜨렸군.\u0022)\n    else:\n        if attack \u003e= 90:\n            print(\u0022지나가던 개 : 아깝소\u0022)\n        else: \n            if attack \u003e= 10:\n                print(\u0022지나가던 개 : 힘좀 더 쓰지 그래..?\u0022)\n            else:\n                print(\u0022지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...\u0022)\n```\n\n\u002d\u002d-\n\n`200`, `100`, `90`, `10`의 기준점을 새롭게 만들어서 다른 메시지를 출력할 수 있도록 했습니다. 결과는 다음과 같습니다.\n\n```plaintext\n\u002d\u002d\u002d\u002d- 1번째 실행 \u002d\u002d\u002d\u002d-\n300\n지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누\n\u002d\u002d\u002d\u002d- 2번째 실행 \u002d\u002d\u002d\u002d-\n150\n지나가던 개 : 오, 허수아비를 쓰러뜨렸군.\n\u002d\u002d\u002d\u002d- 3번째 실행 \u002d\u002d\u002d\u002d-\n95\n지나가던 개 : 아깝소\n\u002d\u002d\u002d\u002d- 4번째 실행 \u002d\u002d\u002d\u002d-\n50\n지나가던 개 : 힘좀 더 쓰지 그래..?\n\u002d\u002d\u002d\u002d- 5번째 실행 \u002d\u002d\u002d\u002d-\n5\n지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...\n```\n\n\u002d\u002d-\n\n뭔가 석연찮습니다. 흐름을 제어하기 위해 계속해서 `else` 블록 안에 `if`를 중첨해서 사용하고 있습니다. 이대로 계속 가다간 블록이 끝도 없이 늘어날 것 같습니다. 이러한 상황을 해결하기 위해 `elif`라는 새로운 키워드를 활용하여 흐름을 제어해봅시다.\n\n```python\nattack = int(input()) \nif attack \u003e= 200: \n    print(\u0022지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누\u0022)\nelif attack \u003e= 100:\n    print(\u0022지나가던 개 : 오, 허수아비를 쓰러뜨렸군.\u0022)\nelif attack \u003e= 90:\n    print(\u0022지나가던 개 : 아깝소\u0022)\nelif attack \u003e= 10:\n    print(\u0022지나가던 개 : 힘좀 더 쓰지 그래..?\u0022)\nelse:\n    print(\u0022지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...\u0022)\n```\n\n\u002d\u002d-\n\n오! 보기에 깔끔해졌습니다!\n\n`elif`는 바로 앞서 실행된 조건에 대해서 `충족하지 않으면 다른 조건을 적용하여` 흐름을 제어합니다. `elif`는 `if` 다음부터 존재할 수 있습니다. `elif`는 하나도 없어도 되고, 아주 많은 수가 있어도 됩니다. 조건과 실행 블록을 활용하는 법은 `if`와 동일합니다. `else`는 항상 마지막에 단 하나만 등장합니다. `else`는 없어도 상관없습니다.\n\n앞서 `if`와 `else`의 구문을 포함하여 조건문이라고 했는데요, 여기에 `elif`도 포함시킵시다. \n\n- `if`, `elif`, `else`, 그 조건과 실행 블록을 모두 포함하여 **조건문** 이라고 합니다.\n\n\u002d\u002d-\n\n## 유의사항\n\n### if는 무조건 조건을 검사합니다.\n\n아래와 같은 코드를 봅시다.\n\n```python\nattack = int(input()) \nif attack \u003e= 200: \n    print(\u0022지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누\u0022)\nif attack \u003e= 100:\n    print(\u0022지나가던 개 : 오, 허수아비를 쓰러뜨렸군.\u0022)\nif attack \u003e= 90:\n    print(\u0022지나가던 개 : 아깝소\u0022)\nif attack \u003e= 10:\n    print(\u0022지나가던 개 : 힘좀 더 쓰지 그래..?\u0022)\n```\n```plaintext\n250\n지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누\n지나가던 개 : 오, 허수아비를 쓰러뜨렸군.\n지나가던 개 : 아깝소\n지나가던 개 : 힘좀 더 쓰지 그래..?\n```\n\n여기서는 앞서 살펴보았던 예제와 달리 `elif`가 아닌 `if`가 독립적으로 쓰였습니다. 이 때에는 모든 조건을 차례로 검사하게 되므로 `200` 이상이라면 모든 `print`가 동작하게 될 것입니다.\n\n### 비교 연산자의 양쪽에는 무조건 값이 있어야 합니다.\n\n`if num \u003e= 0 and \u003c= 1000:` 같은 형태는 에러입니다. `if num \u003c 0 or num \u003e 1000` 처럼 써야 올바른 형태입니다.\n\n### 블록을 마음대로 시작하면 에러가 발생합니다.\n\n연산자와 변수 사이의 공백은 들어가도 되고 들어가지 않아도 되지만, 코드의 들여쓰기(공백 4칸)는 엄연한 문법이므로 잘 지켜야 합니다. 다른 프로그래밍 언어에서는 중괄호(`{}`)로 블록을 구분하기 때문에 들여쓰기가 의무사항은 아니지만, 파이썬에서는 의무사항입니다!\n\n### 같은지 판단할 때 대입 연산자를 사용하지 마세요.\n\n대입 연산자(`=`)는 대입하는 동작을 뜻할 뿐이지 같다고 비교하지 않습니다. 같은지 비교하는 연산자는 `==` 입니다. `if`의 조건에는 거의 웬만하면 `==`가 들어간다고 보시면 되겠습니다.\n\n### `else`, `elif`는 같은 블록에 있는 `if`와 짝지어집니다. \n\n중첩된 `if`에서 유의해주시면 되겠습니다.\n\n\n\u002d\u002d-\n\n\n## 더 나아가기\n\ntruthy value와 falsy value (추가 예정)\n\n\u002d\u002d\n\n## 연습 문제\n\n- `if`는 무슨 역할인가?\n- 비교 연산자의 종류 여섯 가지는 무엇인가?\n- 논리 연산자의 종류 세 가지는 무엇인가?\n- `if`의 조건에는 주로 어떤 연산자가 들어가는가?\n- `:`의 역할은 무엇인가?\n- 블록을 계속 유지시키려면 어떻게 해야 하는가?\n- 블록을 끝내려면 어떻게 해야 하는가?\n- 블록 안에 블록을 포함되는 것이 가능한가?\n- `else`는 무슨 역할인가?\n- `elif`는 무슨 역할인가?\n- `else`에는 조건이 들어갈 수 없는가?\n- `else`는 조건문에서 가장 마지막에만 와야 하는가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n1. 하나의 숫자를 입력받습니다. `0` 미만이거나 `1000`을 초과하는 숫자가 입력되었을 경우 `범위를 벗어났습니다`라고 출력합니다. \n\n1. 하나의 점수를 입력받습니다. 100점이면 `A+`, 90~99점이면 `A`, 80~89점이면 `B`, 70~79점이면 `C`, 69점 이하면 `F`를 출력합니다.\n\n1. 0~200 범위의 숫자를 입력받습니다. 범위를 벗어나면 `범위를 벗어났습니다`라고 출력합니다. 숫자가 한 자리수면 `한자리 수`, 두 자리수면 `두자리 수`, 세 자리수면 `세자리 수`라고 출력합니다.\n\n1. 작은 수와 큰 수를 먼저 입력받습니다. 다음 마지막 수를 입력받는데요, 이 마지막 수가 두 수의 범위 밖에 있다면 `범위를 벗어났습니다`라고 출력하고, 두 수의 범위 내에 있다면, 가까이 있는 수를 출력하면서 `그 수와 가깝습니다`라고 출력하고, 두 수간의 차이가 같다면 `중간값입니다`라고 출력합니다. \n\n예 : `20`과 `50`이라고 입력한 후, 마지막 숫자에 따른 출력은 다음과 같습니다.\n- `10` → `범위를 벗어났습니다`\n- `30` → `20과 가깝습니다`\n- `45` → `50과 가깝습니다`\n- `35` → `중간값입니다`\n\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. 코드입니다.\n\n   ```python\n   num = int(input())\n   if num \u003c 0 or num \u003e 1000:\n       print(\u0022범위를 벗어났습니다.\u0022)\n   ```\n\n1. 코드입니다.\n\n   ```python\n   score = int(input())\n   if score == 100:\n       print(\u0022A+\u0022)\n   elif score \u003e= 90:\n       print(\u0022A\u0022)\n   elif score \u003e= 80:\n       print(\u0022B\u0022)\n   elif score \u003e= 70:\n       print(\u0022C\u0022)\n   else:\n       print(\u0022F\u0022)\n   ```\n\n1. 코드입니다.\n\n   ```python\n   num = int(input())\n   if num \u003c 0 or num \u003e 200:\n       print(\u0022범위를 벗어났습니다.\u0022)\n   elif num // 100 \u003e 0:\n       print(\u0022세자리 수\u0022)\n   elif num // 10 \u003e 0:\n       print(\u0022두자리 수\u0022)\n   else:\n       print(\u0022한자리 수\u0022)\n   ```\n\n1. 코드입니다.\n\n   ```python\n   small = int(input(\u0022작은 수를 입력하세요 \u003e\u003e \u0022))\n   big = int(input(\u0022큰 수를 입력하세요 \u003e\u003e \u0022))\n   last = int(input(\u0022마지막 수를 입력하세요 \u003e\u003e \u0022))\n   \n   if small \u003e last or big \u003c last:\n       print(\u0022범위를 벗어났습니다\u0022)\n   else:\n       small_dif = last - small\n       big_diff = big - last\n   \n       if small_dif \u003c big_diff:\n           print(small, \u0022과 가깝습니다\u0022)\n       elif big_diff \u003c small_dif:\n           print(big, \u0022과 가깝습니다\u0022)\n       else:\n           print(\u0022중간값입니다\u0022)\n   ```"} -->
<div class="wp-block-jetpack-markdown"><h2>실컷 때릴 수 있는 허수아비</h2>
<p>지금까지 배운 방법으로는 위에서 아래로, 순차적으로 한줄 한줄 실행하는 프로그램밖에 만들지 못합니다. 이제 조건을 만들어 프로그램의 분기를 만들어 볼텐데요, 간단한 예제를 통해 보면서 진행해보도록 합시다.</p>
<p>슈퍼파워 게임회사는 RPG 게임을 제작하고 있습니다. 초보 모험가를 위해 실컷 때릴 수 있는 허수아비를 세워두려고 합니다. 규칙은 다음과 같습니다.</p>
<blockquote>
<ol>
<li>허수아비의 체력은 100입니다.</li>
<li>플레이어의 공격을 수치로 입력받습니다.</li>
<li>허수아비의 체력을 넘는 공격을 준다면 허수아비가 쓰러집니다.</li>
<li>허수아비 체력을 밑도는 공격을 준다면 허수아비는 쓰러지지 않습니다.</li>
<li>공격력이 10 정도로 모자라다면 지나가던 개가 &quot;아쉽네&quot;라고 말합니다.</li>
</ol>
</blockquote>
<p>일단 실행 코드와 결과를 봅시다. 코드의 <a href="#a_1-explain">##1##</a>을 클릭하면 설명으로 바로 이동합니다.</p>
<h3>실행 코드</h3>
<pre><code class="language-python">health = 100 ##a_1##
attack = int(input()) ##a_2##
if attack &gt;= health: ##a_3##
    print(&quot;털썩! 허수아비가 쓰러졌습니다!&quot;) ##a_4##
else: ##a_5##
    print(&quot;허수아비가 쓰러지지 않았네요.&quot;) ##a_6##
    if attack &gt;= health - 10: ##a_7##
        print(&quot;지나가던 개 : 아쉽네&quot;) ##a_8##
</code></pre>
<h3>결과</h3>
<pre><code class="language-plaintext">-----첫번째 실행-----
200
털썩! 허수아비가 쓰러졌습니다!
-----두번째 실행-----
70
허수아비가 쓰러지지 않았네요.
-----세번째 실행-----
95
허수아비가 쓰러지지 않았네요.
지나가던 개 : 아쉽네
</code></pre>
<hr>
<p>이제 설명의 차례입니다. 천천히 한 문장 한 문장 음미하며 읽도록 합시다.</p>
<h3><em>a_1</em>(1.) 설명</h3>
<pre><code class="language-python">health = 100
</code></pre>
<p>허수아비의 체력을 담는 <code>health</code> 라는 변수를 정의하여, 초깃값 <code>100</code>으로 두었습니다. 이 변수의 값은 이후에 입력받은 값을 비교하는 데 쓰이고 프로그램 내에서 다시 변하지는 않습니다.</p>
<h3><em>a_2</em>(2.) 설명</h3>
<pre><code class="language-python">attack = int(input())
</code></pre>
<p><code>int(input())</code>이라는 요상한 모양이 등장했습니다. <code>int</code>라는 것이 정확히 어떤 역할인지는 모르나, 우리는 변수의 종류를 배울 때 <code>int</code>라는 정수형이 존재한다는 것을 배웠습니다. 여기서 <code>int</code>는 <code>소괄호 안의 값을 정수형으로 변환하겠다!</code> 라는 뜻으로 쓰입니다. 쓰는 방법은 <code>print</code> 와 같은 함수처럼 소괄호를 이용합니다. 일반적인 사용법은 <a href="371">내장 함수</a>를 참조해주시고, 좀 더 정확하고 심화적인 내용은 <a href="182">클래스</a>를 참조하세요.</p>
<p>우선 두 개로 분리하여 생각합시다. 바깥쪽을 감싸고 있는 <code>int( ... )</code>와, 내부의 <code>input()</code>입니다. 소괄호가 여러 개 등장한다면 안의 것 부터 작동한다고 생각하세요. 즉 <code>input()</code>이 먼저 작동하고 그 결과값이 <code>int( ... )</code>에 적용합니다. 그러니까 <code>attack = int(input())</code>은, 우선 사용자로부터 입력을 받고, 그 값을 정수형으로 변환하도록 하고, 그 값을 <code>attack</code>이라는 새로운 변수를 정의하면서 초기값으로 넣는다는 뜻입니다.</p>
<p><code>input()</code>의 결과값은 무조건 문자열(<code>str</code>)이기 때문에 숫자를 입력받는다 해도 <code>'200'</code>과 같은 문자열을 받게 됩니다. 앞서 배웠던 산술 연산자를 이용하기 위해서는 이 값을 숫자로 변환하여야 하기 때문에 이 같은 과정은 필수입니다.</p>
<h3><em>a_3</em>(3.) 설명</h3>
<pre><code class="language-python">if attack &gt;= health:
</code></pre>
<p>새로운 <strong><code>if</code></strong> 라는 키워드가 등장했습니다. <code>&gt;=</code> 라는 <strong>비교 연산자(Comparison Operator)</strong> 가 등장하였고 콜론(<code>:</code>)도 눈에 띄네요.</p>
<p><code>if</code>는 앞으로 <code>if</code>문, 혹은 조건문이라고도 불리우는 문법의 핵심 키워드입니다. 우리는 <code>if</code>와 그 바로 뒤에 따라오는 조건을 통해 프로그램의 흐름을 제어할 수 있습니다. 여기서는 <code>attack &gt;= health</code>라는 게 조건입니다. 엑셀의 <code>if</code> 함수를 써본 경험이 있다면 이해가 빠를 수도 있겠습니다.</p>
<p><code>attack &gt;= health</code>란 <code>attack이 health보다 크거나 같은가?</code>라는 뜻이며, 이 조건을 충족한다면 뒤따라오는 블록(block)으로 진행하도록 하고, 충족하지 않다면 그 블록은 아예 건너뛰도록 합니다.</p>
<p>콜론(<code>:</code>)은 새로운 블록을 시작하라는 뜻입니다. 블록 내부에서부터 들여쓰기가 시작되고, 블록을 끝내려면 들여쓰기를 원상복귀하면 됩니다. 들여쓰기는 띄어쓰기 4개를 원칙으로 합니다. 콜론을 쓰지 않고서는 새로운 블록을 시작할 수 없습니다. 블록 안에는 또 다른 블록이 포함될 수 있으며, 들여쓰기를 그만큼 더 추가합니다.</p>
<h3><em>a_4</em>(4.) 설명</h3>
<pre><code class="language-python">    print(&quot;털썩! 허수아비가 쓰러졌습니다!&quot;)
</code></pre>
<p>새로운 블록으로 시작했으니 들여쓰기가 띄어쓰기 4개로 이루어졌습니다. 바로 앞 조건문에서 조건이 충족된다면 이 블록이 실행이 됩니다. 결과의 첫번째 실행에서는 <code>100</code>보다 높은 <code>200</code>을 입력하였고, 조건을 충족하여 <code>print</code> 함수가 호출됩니다. 하지만 두번째 실행에서 <code>70</code>을 입력하였고, 조건을 충족하지 못해 이 블록은 건너뛰게 됩니다.</p>
<h3><em>a_5</em>(5.) 설명</h3>
<pre><code class="language-python">else:
</code></pre>
<p>새로운 키워드가 등장했으나, 그 전에 다시 들여쓰기가 원상복귀 되었다는 점을 유념해주세요. 즉 앞선 블록이 끝났다는 뜻입니다.</p>
<p>여기서는 <code>else</code>라는 키워드가 등장합니다. 조건문에서 <code>else</code>는 <code>if</code>와 마찬가지로 아주 중요한 키워드입니다. <code>else</code>는 홀로 등장할 수 없습니다. 반드시 앞쪽의 <code>if</code>와 짝지어집니다.</p>
<p>기억을 더듬어볼까요, 앞선 조건은 <code>attack &gt;= health</code> 이었고, 우리가 <code>attack</code>을 입력받고 <code>health</code>는 <code>100</code>으로 두었었죠. <code>else</code>의 뜻은 <code>if의 조건이 충족되지 않으면 다음 블록을 실행하라</code>입니다. <code>200</code>을 입력받았을 때에는 조건에 충족되기 때문에 <code>if</code>가 지니고 있는 블록이 실행되며, <code>else</code>는 실행되지 않습니다. 하지만 <code>70</code>과 <code>95</code>와 같은 경우는 앞선 조건이 충족되지 않으므로 <code>if</code>의 블록은 건너뛰되, <code>else</code>가 가지고 있는 블록이 즉시 실행됩니다.</p>
<p><code>else</code>는 특별한 조건을 받지 않습니다. 곧 바로 콜론(<code>:</code>)이 등장하여 새 블록을 엽니다.</p>
<h3><em>a_6</em>(6.) 설명</h3>
<pre><code class="language-python">    print(&quot;허수아비가 쓰러지지 않았네요.&quot;)
</code></pre>
<p>새로운 블록이 시작했으니 다시 들여쓰기가 적용되었습니다.</p>
<h3><em>a_7</em>(7.) 설명</h3>
<pre><code class="language-python">    if attack &lt; 10:
</code></pre>
<p>들여쓰기가 계속 유지되고 있습니다. 그러므로 여기서의 <code>if</code>문은 <code>else</code>의 블록 안에 포함된다고 말할 수 있습니다. 이 <code>if</code> 문 또한 바깥의 <code>if</code>와 완전히 동일한 메커니즘을 가지고 있습니다. 조건이 충족되면 바로 뒤따라오는 블록을 실행시킨다는 것이죠.</p>
<p>여기서 조건은 <code>attack &gt;= health - 10</code>입니다. 비교 연산자는 산술 연산자보다 나중에 처리됩니다. 즉 health - 10이 먼저 처리되고, 그 결과값인 <code>90</code>을 이용해 <code>attack &gt;= 90</code>과 같은 형태가 만들어집니다. <code>70</code>은 충족하지 못하고 <code>95</code>는 충족하게 되겠네요.</p>
<p>콜론(<code>:</code>)으로 새로운 블록을 시작합니다.</p>
<h3><em>a_8</em>(8.) 설명</h3>
<pre><code class="language-python">        print(&quot;지나가던 개 : 아쉽네&quot;)
</code></pre>
<p>새로운 블록이 시작되어 들여쓰기가 이중 적용되었습니다. 왼쪽으로부터 코드가 점점 더 동떨어지고 있네요.</p>
<p>결과적으로 이 <code>print</code> 함수는 <code>attack</code>이 90 ~ 99의 범위에 있을 때 실행됩니다. 왜 그럴까요? <code>if</code>와 <code>else</code>가 중첩으로 하여 존재하기 때문입니다. 조건만 생각하여 순서를 상기해보면 다음과 같습니다.</p>
<ol>
<li><code>attack &gt;= health</code> 가 충족하지 않을 때 (즉 attack &lt; health 일 때)</li>
<li><code>attack &gt;= health - 10</code> 이 충족할 때</li>
</ol>
<p>1번 조건이 첫번째 if 문에서 갈렸던 분기이고, 2번 조건이 두번째 if문에서의 조건입니다. 1번과 2번이 동시에 충족해야 지나가던 개가 &quot;아쉽다&quot;며 오지랖을 부릴 수 있게 됩니다.</p>
<hr>
<h2>핵심 개념 정리</h2>
<p>위 예제를 통해 새롭게 알게 된 사실을 정리해봅시다.</p>
<ul>
<li><strong><code>if</code></strong> 는 조건을 이용하여 프로그램의 분기를 만들때 쓰는 키워드입니다.</li>
<li><strong><code>else</code></strong> 는 짝지어진 <code>if</code>의 조건에 충족하기 못할 때 실행됩니다. <code>else</code>를 반드시 사용할 필요는 없습니다.</li>
<li><strong>비교 연산자(Comparison Operator)</strong> 란 주로 조건에 쓰는 연산자입니다.</li>
<li><code>if</code>와 <code>else</code>는 실행 범위를 바로 뒤따라오는 <strong>블록(block)</strong> 으로 제한합니다.</li>
<li>블록은 콜론(<strong><code>:</code></strong>)으로 시작할 수 있으며, 동일한 들여쓰기(<strong>공백 4칸</strong>) 동안 블록을 유지할 수 있고, 블록을 끝내려면 들여쓰기를 <strong>원상복귀</strong> 하면 됩니다. 블록은 <strong>중첩될</strong> 수 있습니다.</li>
<li><code>if</code>, <code>else</code>, 조건, 실행 블록을 통틀어 <strong>조건문(if statement)</strong> 이라고 말합니다.</li>
</ul>
<p>그리고 앞서 배웠던 상식은 다소 금이 갔습니다.</p>
<ul>
<li>명령은 무조건 위에서 아래로 차례대로 실행된다? 기본적으로는 그렇지만 조건에 따라 건너뛸 수도 있다!</li>
</ul>
<hr>
<h2>비교 연산자(Comparison Operator)</h2>
<p>우리는 앞서 대입 연산자(<code>=</code>), 각종 산술 연산자(<code>+</code>, <code>-</code> 등)를 배웠습니다. 이번에는 새로운 비교 연산자입니다. 비교 연산자의 특징은 <strong>불리언(boolean)</strong> 값을 결과로 내놓는다는 점입니다. 앞서 변수의 종류를 논할 때 우리는 불리언을 짧게나마 소개하고 지나갔습니다. 하지만 다시 꺼내 봅시다.</p>
<ul>
<li><strong><code>bool</code></strong> : 불리언(boolean)입니다. <code>True</code> 혹은 <code>False</code> 값 밖에 가지지 못합니다.</li>
</ul>
<p>True란 참이고, False는 거짓입니다. 이분법적인 사고를 현대사회에서는 지양하라고는 하지만 컴퓨터의 세계에서는 흔한 논리입니다. <code>if</code>에서 조건을 충족하는지, 그렇지 않은지 판단할 때는 이 불리언 값을 활용합니다.</p>
<pre><code class="language-python">if 100 &gt; 200:
    print(&quot;100은 200보다 크다는 건 참이다.&quot;)
else:
    print(&quot;100은 200보다 크다는 건 거짓이다.&quot;)
</code></pre>
<p>위 예제에서 <code>100 &gt; 200</code>은 <code>False</code> 값을 내놓습니다. 즉 <code>if False:</code> 로 작동한다는 것입니다. <code>if</code>는 조건이 <code>False</code> 이므로 조건에 충족되지 않았다고 판단하고 <code>else</code> 블록을 찾아 실행시킵니다.</p>
<pre><code class="language-plaintext">100은 200보다 크다는 건 거짓이다.
</code></pre>
<hr>
<p>하지만 다음 예제와 같이 조건을 참으로 만들면 <code>if</code> 블록이 실행되겠지요.</p>
<pre><code class="language-python">if 300 &gt; 200:
    print(&quot;300은 200보다 크다는 건 참이다.&quot;)
else:
    print(&quot;300은 200보다 크다는 건 거짓이다.&quot;)
</code></pre>
<pre><code class="language-plaintext">300은 200보다 크다는 건 참이다.
</code></pre>
<hr>
<p><code>bool</code> 형은 물론 숫자나 문자열 같은 변수이기 때문에 대입할 수 있습니다.</p>
<pre><code class="language-python">condition = 300 &gt; 20
if condition:
    print(&quot;300은 200보다 크다는 건 참이다.&quot;)
else:
    print(&quot;300은 200보다 크다는 건 거짓이다.&quot;)
</code></pre>
<pre><code class="language-plaintext">300은 200보다 크다는 건 참이다.
</code></pre>
<hr>
<h3>비교 연산자의 종류</h3>
<table>
<thead>
<tr>
<th style="text-align:center">비교 연산자</th>
<th style="text-align:center">설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong><code>a == b</code></strong></td>
<td style="text-align:center"><code>a</code>와 <code>b</code>가 같다</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>a != b</code></strong></td>
<td style="text-align:center"><code>a</code>와 <code>b</code>가 다르다</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>a &gt; b</code></strong></td>
<td style="text-align:center"><code>a</code>가 <code>b</code>보다 크다</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>a &lt; b</code></strong></td>
<td style="text-align:center"><code>a</code>가 <code>b</code>보다 작다</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>a &gt;= b</code></strong></td>
<td style="text-align:center"><code>a</code>가 <code>b</code>보다 크거나 같다</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>a &lt;= b</code></strong></td>
<td style="text-align:center"><code>a</code>가 <code>b</code>보다 작거나 같다</td>
</tr>
</tbody>
</table>
<hr>
<h2>논리 연산자 (Logical Operator)</h2>
<p>여러 개의 비교 연산자를 동시에 사용하고 싶다고 가정합시다. 앞서 허수아비를 거의 쓰러뜨렸지만 아쉽게 그러지 못했던 상황을 기억하시나요? 90 ~ 99의 공격력으로 때린 것만 조건으로서 활용하고 싶습니다. health 변수는 조건을 좀 더 명확하게 보기 위해 삭제하도록 하겠습니다. 다음 코드를 실행해 보세요.</p>
<pre><code class="language-python">attack = int(input()) 
if attack &gt;= 90: 
    if attack &lt; 100:
        print(&quot;지나가던 개 : 아쉽구려&quot;)
</code></pre>
<pre><code class="language-plaintext">95
지나가던 개 : 아쉽구려
</code></pre>
<hr>
<p>조건문을 중첩으로 두어 조건 2개가 둘다 만족해야 <code>print</code> 되도록 코드를 짰습니다. 하지만 파이썬에서는 논리 연산자를 이용해 두 비교 연산자를 결합할 수 있습니다. 다음 코드를 보세요.</p>
<pre><code class="language-python">attack = int(input()) 
if attack &gt;= 90 and attack &lt; 100: 
    print(&quot;지나가던 개 : 아쉽구려&quot;)
</code></pre>
<pre><code class="language-plaintext">95
지나가던 개 : 아쉽구려
</code></pre>
<hr>
<p>결과는 동일합니다. <code>and</code> 라는 새로운 키워드가 등장했습니다. 아주 쉽고 간편하게 나타낼 수 있지 않나요? 논리 연산자는 피연산자와 결과값 모두 <code>boolean</code> 형을 활용하는 연산자입니다. 논리 연산자의 종류는 3가지가 있고, 설명은 다음과 같습니다.</p>
<hr>
<h3>논리 연산자의 종류</h3>
<table>
<thead>
<tr>
<th style="text-align:center">연산자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>x or y</code></td>
<td><code>x</code>와 <code>y</code> 중 하나라도 <code>True</code>이면, <code>True</code>이다</td>
</tr>
<tr>
<td style="text-align:center"><code>x and y</code></td>
<td><code>x</code>와 <code>y</code> 모두 <code>True</code>이어야 <code>True</code>이다</td>
</tr>
<tr>
<td style="text-align:center"><code>not x</code></td>
<td><code>x</code>가 <code>False</code>이면 <code>True</code>이다</td>
</tr>
</tbody>
</table>
<hr>
<h3>논리 연산자 결과 표</h3>
<table>
<thead>
<tr>
<th style="text-align:center"><code>x</code></th>
<th style="text-align:center"><code>y</code></th>
<th style="text-align:center"><code>x or y</code></th>
<th style="text-align:center"><code>x and y</code></th>
<th style="text-align:center"><code>not x</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>True</code></td>
</tr>
<tr>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>False</code></td>
</tr>
<tr>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>False</code></td>
<td style="text-align:center"><code>True</code></td>
</tr>
<tr>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>True</code></td>
<td style="text-align:center"><code>False</code></td>
</tr>
</tbody>
</table>
<hr>
<h2>여러 개의 분기를 한꺼번에 만들기 (<code>elif</code>)</h2>
<p>지나가던 개가 오지랖을 오질나게 부린다고 가정합시다. 너무 맥없이 때리면 젊은이가 힘이 없다 혀를 차고, 너무 세게 때리면 다 부술 일 있냐며 화내는 등 반응을 추가하여 봅시다. 이번 예제에서도 <code>health</code> 변수를 삭제했습니다.</p>
<pre><code class="language-python">attack = int(input()) 
if attack &gt;= 200: 
    print(&quot;지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누&quot;)
else:
    if attack &gt;= 100:
         print(&quot;지나가던 개 : 오, 허수아비를 쓰러뜨렸군.&quot;)
    else:
        if attack &gt;= 90:
            print(&quot;지나가던 개 : 아깝소&quot;)
        else: 
            if attack &gt;= 10:
                print(&quot;지나가던 개 : 힘좀 더 쓰지 그래..?&quot;)
            else:
                print(&quot;지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...&quot;)
</code></pre>
<hr>
<p><code>200</code>, <code>100</code>, <code>90</code>, <code>10</code>의 기준점을 새롭게 만들어서 다른 메시지를 출력할 수 있도록 했습니다. 결과는 다음과 같습니다.</p>
<pre><code class="language-plaintext">----- 1번째 실행 -----
300
지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누
----- 2번째 실행 -----
150
지나가던 개 : 오, 허수아비를 쓰러뜨렸군.
----- 3번째 실행 -----
95
지나가던 개 : 아깝소
----- 4번째 실행 -----
50
지나가던 개 : 힘좀 더 쓰지 그래..?
----- 5번째 실행 -----
5
지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...
</code></pre>
<hr>
<p>뭔가 석연찮습니다. 흐름을 제어하기 위해 계속해서 <code>else</code> 블록 안에 <code>if</code>를 중첨해서 사용하고 있습니다. 이대로 계속 가다간 블록이 끝도 없이 늘어날 것 같습니다. 이러한 상황을 해결하기 위해 <code>elif</code>라는 새로운 키워드를 활용하여 흐름을 제어해봅시다.</p>
<pre><code class="language-python">attack = int(input()) 
if attack &gt;= 200: 
    print(&quot;지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누&quot;)
elif attack &gt;= 100:
    print(&quot;지나가던 개 : 오, 허수아비를 쓰러뜨렸군.&quot;)
elif attack &gt;= 90:
    print(&quot;지나가던 개 : 아깝소&quot;)
elif attack &gt;= 10:
    print(&quot;지나가던 개 : 힘좀 더 쓰지 그래..?&quot;)
else:
    print(&quot;지나가던 개 : 요새 젊은이들은 힘이 없어.. 쯧쯧...&quot;)
</code></pre>
<hr>
<p>오! 보기에 깔끔해졌습니다!</p>
<p><code>elif</code>는 바로 앞서 실행된 조건에 대해서 <code>충족하지 않으면 다른 조건을 적용하여</code> 흐름을 제어합니다. <code>elif</code>는 <code>if</code> 다음부터 존재할 수 있습니다. <code>elif</code>는 하나도 없어도 되고, 아주 많은 수가 있어도 됩니다. 조건과 실행 블록을 활용하는 법은 <code>if</code>와 동일합니다. <code>else</code>는 항상 마지막에 단 하나만 등장합니다. <code>else</code>는 없어도 상관없습니다.</p>
<p>앞서 <code>if</code>와 <code>else</code>의 구문을 포함하여 조건문이라고 했는데요, 여기에 <code>elif</code>도 포함시킵시다.</p>
<ul>
<li><code>if</code>, <code>elif</code>, <code>else</code>, 그 조건과 실행 블록을 모두 포함하여 <strong>조건문</strong> 이라고 합니다.</li>
</ul>
<hr>
<h2>유의사항</h2>
<h3>if는 무조건 조건을 검사합니다.</h3>
<p>아래와 같은 코드를 봅시다.</p>
<pre><code class="language-python">attack = int(input()) 
if attack &gt;= 200: 
    print(&quot;지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누&quot;)
if attack &gt;= 100:
    print(&quot;지나가던 개 : 오, 허수아비를 쓰러뜨렸군.&quot;)
if attack &gt;= 90:
    print(&quot;지나가던 개 : 아깝소&quot;)
if attack &gt;= 10:
    print(&quot;지나가던 개 : 힘좀 더 쓰지 그래..?&quot;)
</code></pre>
<pre><code class="language-plaintext">250
지나가던 개 : 전부 다 부실 일 있나?? 왜 이렇게 세게 치누
지나가던 개 : 오, 허수아비를 쓰러뜨렸군.
지나가던 개 : 아깝소
지나가던 개 : 힘좀 더 쓰지 그래..?
</code></pre>
<p>여기서는 앞서 살펴보았던 예제와 달리 <code>elif</code>가 아닌 <code>if</code>가 독립적으로 쓰였습니다. 이 때에는 모든 조건을 차례로 검사하게 되므로 <code>200</code> 이상이라면 모든 <code>print</code>가 동작하게 될 것입니다.</p>
<h3>비교 연산자의 양쪽에는 무조건 값이 있어야 합니다.</h3>
<p><code>if num &gt;= 0 and &lt;= 1000:</code> 같은 형태는 에러입니다. <code>if num &lt; 0 or num &gt; 1000</code> 처럼 써야 올바른 형태입니다.</p>
<h3>블록을 마음대로 시작하면 에러가 발생합니다.</h3>
<p>연산자와 변수 사이의 공백은 들어가도 되고 들어가지 않아도 되지만, 코드의 들여쓰기(공백 4칸)는 엄연한 문법이므로 잘 지켜야 합니다. 다른 프로그래밍 언어에서는 중괄호(<code>{}</code>)로 블록을 구분하기 때문에 들여쓰기가 의무사항은 아니지만, 파이썬에서는 의무사항입니다!</p>
<h3>같은지 판단할 때 대입 연산자를 사용하지 마세요.</h3>
<p>대입 연산자(<code>=</code>)는 대입하는 동작을 뜻할 뿐이지 같다고 비교하지 않습니다. 같은지 비교하는 연산자는 <code>==</code> 입니다. <code>if</code>의 조건에는 거의 웬만하면 <code>==</code>가 들어간다고 보시면 되겠습니다.</p>
<h3><code>else</code>, <code>elif</code>는 같은 블록에 있는 <code>if</code>와 짝지어집니다.</h3>
<p>중첩된 <code>if</code>에서 유의해주시면 되겠습니다.</p>
<hr>
<h2>더 나아가기</h2>
<p>truthy value와 falsy value (추가 예정)</p>
<p>--</p>
<h2>연습 문제</h2>
<ul>
<li><code>if</code>는 무슨 역할인가?</li>
<li>비교 연산자의 종류 여섯 가지는 무엇인가?</li>
<li>논리 연산자의 종류 세 가지는 무엇인가?</li>
<li><code>if</code>의 조건에는 주로 어떤 연산자가 들어가는가?</li>
<li><code>:</code>의 역할은 무엇인가?</li>
<li>블록을 계속 유지시키려면 어떻게 해야 하는가?</li>
<li>블록을 끝내려면 어떻게 해야 하는가?</li>
<li>블록 안에 블록을 포함되는 것이 가능한가?</li>
<li><code>else</code>는 무슨 역할인가?</li>
<li><code>elif</code>는 무슨 역할인가?</li>
<li><code>else</code>에는 조건이 들어갈 수 없는가?</li>
<li><code>else</code>는 조건문에서 가장 마지막에만 와야 하는가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<ol>
<li>
<p>하나의 숫자를 입력받습니다. <code>0</code> 미만이거나 <code>1000</code>을 초과하는 숫자가 입력되었을 경우 <code>범위를 벗어났습니다</code>라고 출력합니다.</p>
</li>
<li>
<p>하나의 점수를 입력받습니다. 100점이면 <code>A+</code>, 90~99점이면 <code>A</code>, 80~89점이면 <code>B</code>, 70~79점이면 <code>C</code>, 69점 이하면 <code>F</code>를 출력합니다.</p>
</li>
<li>
<p>0~200 범위의 숫자를 입력받습니다. 범위를 벗어나면 <code>범위를 벗어났습니다</code>라고 출력합니다. 숫자가 한 자리수면 <code>한자리 수</code>, 두 자리수면 <code>두자리 수</code>, 세 자리수면 <code>세자리 수</code>라고 출력합니다.</p>
</li>
<li>
<p>작은 수와 큰 수를 먼저 입력받습니다. 다음 마지막 수를 입력받는데요, 이 마지막 수가 두 수의 범위 밖에 있다면 <code>범위를 벗어났습니다</code>라고 출력하고, 두 수의 범위 내에 있다면, 가까이 있는 수를 출력하면서 <code>그 수와 가깝습니다</code>라고 출력하고, 두 수간의 차이가 같다면 <code>중간값입니다</code>라고 출력합니다.</p>
</li>
</ol>
<p>예 : <code>20</code>과 <code>50</code>이라고 입력한 후, 마지막 숫자에 따른 출력은 다음과 같습니다.</p>
<ul>
<li><code>10</code> → <code>범위를 벗어났습니다</code></li>
<li><code>30</code> → <code>20과 가깝습니다</code></li>
<li><code>45</code> → <code>50과 가깝습니다</code></li>
<li><code>35</code> → <code>중간값입니다</code></li>
</ul>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">num = int(input())
if num &lt; 0 or num &gt; 1000:
    print(&quot;범위를 벗어났습니다.&quot;)
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">score = int(input())
if score == 100:
    print(&quot;A+&quot;)
elif score &gt;= 90:
    print(&quot;A&quot;)
elif score &gt;= 80:
    print(&quot;B&quot;)
elif score &gt;= 70:
    print(&quot;C&quot;)
else:
    print(&quot;F&quot;)
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">num = int(input())
if num &lt; 0 or num &gt; 200:
    print(&quot;범위를 벗어났습니다.&quot;)
elif num // 100 &gt; 0:
    print(&quot;세자리 수&quot;)
elif num // 10 &gt; 0:
    print(&quot;두자리 수&quot;)
else:
    print(&quot;한자리 수&quot;)
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">small = int(input(&quot;작은 수를 입력하세요 &gt;&gt; &quot;))
big = int(input(&quot;큰 수를 입력하세요 &gt;&gt; &quot;))
last = int(input(&quot;마지막 수를 입력하세요 &gt;&gt; &quot;))

if small &gt; last or big &lt; last:
    print(&quot;범위를 벗어났습니다&quot;)
else:
    small_dif = last - small
    big_diff = big - last

    if small_dif &lt; big_diff:
        print(small, &quot;과 가깝습니다&quot;)
    elif big_diff &lt; small_dif:
        print(big, &quot;과 가깝습니다&quot;)
    else:
        print(&quot;중간값입니다&quot;)
</code></pre>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 13:33:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 04:33:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-23 00:22:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-22 15:22:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%a1%b0%ea%b1%b4%eb%ac%b8-%eb%b6%84%ea%b8%b0%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.220.160.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-19 13:22:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-19 04:22:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[== 와 = 구분하기]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1576729328.327524;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1377</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 명령문, 표현식 ~ 문법을 이루는 것들 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/622</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-13 19:15:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-13 10:15:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 조건문 – 분기를 만들기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589364930.795052;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589364912.729468;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 반복문 ~ 비슷한 작업을 반복하기]]></title>
		<link>https://elvanov.com/257</link>
		<pubDate>Wed, 18 Dec 2019 09:23:26 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>때릴 수록 강력해지는 공격력</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>계속해서 새로운 개념을 배워나가고 있습니다. 이번 시간에는 반복문을 알아볼 겁니다. 역시나 예제로 시작합시다. 반복문의 필요성을 깨우쳐야 배울 힘이 나겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>슈퍼파워 게임회사는 플레이어가 훈련할 수 있는 샌드백을 만들고 있습니다.</li><li>플레이어의 처음 공격력은 1밖에 되지 않지만 샌드백을 한 번 때릴 때마다 공격력이 1씩 증가합니다.</li><li>샌드백은 공격받을 때마다 때린 사람의 공격력만큼 내구도가 낮아집니다.</li><li>샌드백이 내구도가 0이 되면 샌드백은 부서집니다. (부서질 때에도 공격력은 성장합니다)</li><li>샌드백의 내구도를 임의로 설정해보고 나서, 플레이어가 최종적으로 공격력이 몇인지 궁금합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>좋습니다. 샌드백의 내구도를&nbsp;<code>durability</code>, 플레이어의 공격력을&nbsp;<code>attack</code>이라 명명하고 코드를 짜 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
durability -= attack
attack += 1
if durability &lt;= 0:
    print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")
else:
    durability -= attack
    attack += 1
    if durability &lt;= 0:
        print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")
    else:
        durability -= attack
        attack += 1
        if durability &lt;= 0:
            print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")
        else:
            durability -= attack
            attack += 1
            if durability &lt;= 0:
                print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")
            else:
                durability -= attack
                attack += 1
                if durability &lt;= 0:
                    print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>----- 1번째 실행 -----
샌드백의 내구도를 입력하세요 >> 13
샌드백이 부서졌습니다! 최종 힘은 6입니다.
----- 2번째 실행 -----
샌드백의 내구도를 입력하세요 >> 17</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드는 조건문을 이용하여 계속해서&nbsp;<code>durability</code>를&nbsp;<code>attack</code>&nbsp;만큼 차감시키고&nbsp;<code>attack</code>을&nbsp;<code>1</code>씩 증가시키고 있습니다.&nbsp;<code>durability</code>은 최대 5번 차감될 수 있습니다. 왜냐하면&nbsp;<code>durability -= attack</code>&nbsp;부분이 5번 밖에 등장하지 않으니까요. 그래서 플레이어 또한 5번 밖에 성장하지 못합니다. 내구도가&nbsp;<code>13</code>이라면 5회의 성장 안에 샌드백을 부술 수 있지만 내구도가&nbsp;<code>17</code>이라면 성장 횟수가 부족하여 샌드백을 부수지 못합니다. (샌드백이 부숴졌다는 메세지가 뜨지 않습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:quote -->
<blockquote class="wp-block-quote"><p>오, 선생님!&nbsp;<code>durability</code>의 피해 값은 딱봐도 등차수열의 합이라서&nbsp;<code>durability = attack * (attack + 1) / 2</code>&nbsp;의 식을 풀어, 이차방정식을 만들어 양의 해를 구하기만 하면 끝날 문제 아닌가요? </p><p>어… 네 그렇게 생각 할 수도 있겠지만 매번 공식을 이용해 문제를 해결한다면, 상황이 바뀌었을 때 해당 공식을 매번 수정해야 하는 불편함이 있습니다. 지금은 직접 코드로 시뮬레이션한다고 생각하시면 좋을 듯 합니다.</p><p></p></blockquote>
<!-- /wp:quote --></div></div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<p>여하튼 계속해서 반복하기에는 무리가 있습니다. 복사 붙여넣기는 만능이 아니지요. 만약&nbsp;<code>10000</code>과 같은, 아주 큰 내구도를 집어넣는다면 도대체 얼마나 많이 복붙해야 할지 가늠도 오지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이러한 상황속에서 반복문은 빛나는 동아줄이 되어 우리를 구원해줄 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
while durability > 0: ##a_1##
    durability -= attack
    attack += 1
print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>----- 1번째 실행 -----
샌드백의 내구도를 입력하세요 >> 28
샌드백이 부서졌습니다! 최종 공격력은 8입니다.
----- 2번째 실행 -----
샌드백의 내구도를 입력하세요 >> 28371
샌드백이 부서졌습니다! 최종 공격력은 239입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이게 무슨 일이죠? 코드의 양이 완전히 줄어들었습니다. 더군다나&nbsp;<code>28</code>은 물론이고&nbsp;<code>28371</code>&nbsp;같은 아주 높은 숫자도 문제 없이 실행한다는 사실을 확인할 수 있습니다. 이만 팔천의 샌드백을 죽어라 때리고 때려서 공격력이&nbsp;<code>239</code>까지 성장했다니! 그 사실을 바로 알 수 있다니. 정말 놀라울 따름입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_1</em>(1.) 코드 설명</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>while durability > 0:</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 행이 이번 시간의 핵심입니다.&nbsp;<code>while</code>&nbsp;이라는 새로운 키워드가 등장하였고, 그 바로 뒤에는 비교 연산자가 들어간 식이 들어갑니다. 행의 끝에 콜론(<code>:</code>)을 통해 새로운 블록을 시작한다고 말하는 것까지, 어찌 조건문과 굉장히 비슷하게 생겼습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>while</code>의 동작 원리를 알려드리겠습니다.&nbsp;<strong>뒤따르는 조건이&nbsp;<code>True</code>&nbsp;라면, 뒤따르는 블록을 실행합니다. 다시 돌아와 조건을 체크합니다.&nbsp;<code>True</code>라면 블록을 실행합니다. 다시 조건 체크 후 블록을 실행합니다. 계속, 무한 반복합니다. 조건이&nbsp;<code>False</code>가 되어야 블록을 건너뛰고 다음으로 넘어갑니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이&nbsp;<code>while</code>의 조건은&nbsp;<code><strong>durability &gt; 0</strong></code>&nbsp;입니다.&nbsp;<code>durability</code>&nbsp;변수이고 계속 우리가 차감시켜주고 있기 때문에 값이 계속해서 변합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>다음 코드는 바로 위 코드와 같지만,&nbsp;<strong><code>while</code>&nbsp;내부에&nbsp;<code>print</code>&nbsp;함수 하나를 추가하여 루프가 돌고 있는 시점에서 값이 어떻게 변화하는지 실시간으로 확인</strong>할 수 있도록 했습니다. 코드를 실행하여 결과를 확인해보세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
while durability > 0: 
    print("현재 공격력은 " + str(attack) + " 이며, 샌드백의 내구도는 " + str(durability) + " 입니다." )
    durability -= attack
    attack += 1
print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>입력을&nbsp;<code>28371</code>로 해보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(중략)
현재 공격력은 226 이며, 샌드백의 내구도는 2946 입니다.
현재 공격력은 227 이며, 샌드백의 내구도는 2720 입니다.
현재 공격력은 228 이며, 샌드백의 내구도는 2493 입니다.
현재 공격력은 229 이며, 샌드백의 내구도는 2265 입니다.
현재 공격력은 230 이며, 샌드백의 내구도는 2036 입니다.
현재 공격력은 231 이며, 샌드백의 내구도는 1806 입니다.
현재 공격력은 232 이며, 샌드백의 내구도는 1575 입니다.
현재 공격력은 233 이며, 샌드백의 내구도는 1343 입니다.
현재 공격력은 234 이며, 샌드백의 내구도는 1110 입니다.
현재 공격력은 235 이며, 샌드백의 내구도는 876 입니다.
현재 공격력은 236 이며, 샌드백의 내구도는 641 입니다.
현재 공격력은 237 이며, 샌드백의 내구도는 405 입니다.
현재 공격력은 238 이며, 샌드백의 내구도는 168 입니다.
샌드백이 부서졌습니다! 최종 공격력은 239입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>컴퓨터가 공식을 이용하거나 편법을 쓰지 않았다는 사실을 우리는 알 수 있습니다. 정말 순수하게 공격력을 1씩 올려가며 내구도를 닳게 하고 샌드백을 부서뜨립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>break</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>while</code>은 조건을 검사해봤을 때&nbsp;<code>False</code>가 나오는 순간 바로 반복문을 빠져나옵니다. 그렇다면 반복문을 빠져나올 방법은 조건에서&nbsp;<code>False</code>가 나오도록 유도하는 방법 뿐일까요? 다행스럽게도 반복문을 빠져나올 수 있는 방법은 한 가지 더 있습니다. 바로&nbsp;<code>break</code>를 이용하는 것입니다. 다음 예문을 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
while True: 
    print("현재 공격력은 " + str(attack) + " 이며, 샌드백의 내구도는 " + str(durability) + " 입니다." )
    durability -= attack
    attack += 1
    if durability &lt;= 0:
        break

print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>break</code>는 그냥 단독으로&nbsp;<code>break</code>라고 씁니다. <strong>파이썬 인터프리터가&nbsp;<code>break</code>를 맞닥뜨리게 된다면, 그 즉시&nbsp;<code>while</code>&nbsp;블록 바깥으로 빠져나옵니다.</strong>&nbsp;<code>while</code>&nbsp;조건과 상관없이,&nbsp;<code>while</code>문의 한복판에 있더라도 예외없이 동작합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>while True:</code>&nbsp;라는 뜻은, 이&nbsp;<code>while</code>&nbsp;블록을 영원히 반복하면서 실행시킬 것이라는 뜻입니다.&nbsp;<code>True</code>&nbsp;값은 영원히&nbsp;<code>True</code>&nbsp;이므로 조건은 영원히 참이 되어 영원히 실행되게 되겠지요. 하지만&nbsp;<strong><code>while</code>&nbsp;블록 내부에서&nbsp;<code>break</code>를 사용한다면 이 루프문을 빠져나갈 수 있는 열쇠가 되어 </strong>프로그램의 흐름을 제어할 수 있게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>개념 정리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>개념 정리의 시간입니다. 정리할 개념은 생각보다 많이 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong><code>while</code></strong>&nbsp;은 조건이&nbsp;<strong><code>True</code></strong>&nbsp;이면&nbsp;<code>while</code>&nbsp;블록을 실행한다. 실행을 끝마치고 조건 검사부터 무한 반복한다.</li><li><code>while</code>문의 조건이 한번이라도&nbsp;<strong><code>False</code></strong>&nbsp;가 되면 반복을 종료한다.</li><li><code>break</code>를 통해&nbsp;<code>while</code>&nbsp;문 중간에 즉시 중단할 수 있다.</li><li><code>while</code>&nbsp;내부에&nbsp;<code>print</code>&nbsp;함수를 추가하여 반복이 진행되고 있는 시점에서 값이 어떻게 변화하는지 실시간으로 확인할 수 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>else</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제껏 잘 써왔던 예문을 살짝 수정하고자 합니다. 다음 예시는 공격력이&nbsp;<code>100</code>까지 되었다면 단련이 충분하다 판단하고, 그만두면서 남은 내구도를 출력합니다. 그리고&nbsp;<code>100</code>이 되기 전에 샌드백이 부셔졌다면 샌드백이 부서졌다고 출력합니다. 또한 둘 중 어느 경우라도 최종 공격력을 출력합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
while durability > 0: 
    print("공격력: " + str(attack) + ", 내구도: " + str(durability))
    durability -= attack
    attack += 1
    if attack >= 100:
        print("충분히 단련했습니다. 남은 내구도는 " + str(durability) + "입니다.")
        break
else: ##b_1##
    print("샌드백이 부서졌습니다!")
print("최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>8000</code>을 입력했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(중략)
공격력: 97, 내구도: 3344
공격력: 98, 내구도: 3247
공격력: 99, 내구도: 3149
충분히 단련했습니다. 남은 내구도는 3050입니다.
최종 공격력은 100입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>300</code>을 입력했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(중략)
공격력: 22, 내구도: 69
공격력: 23, 내구도: 47
공격력: 24, 내구도: 24
샌드백이 부서졌습니다!
최종 공격력은 25입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><em>b_1</em>(1.) 코드 설명</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>else</code>가 등장했습니다.&nbsp;<code>else</code>는 앞서 조건문에서 등장한 바 있습니다. 하지만 이&nbsp;<code>else</code>는&nbsp;<code>if</code>와 짝지어지지 않고&nbsp;<code>while</code>과 짝지어졌습니다. 이게 뜻하는 바는 무엇일까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>while</code>과 짝지어진&nbsp;<code>else</code>는&nbsp;<code>if</code>와 비슷하게 작동되는데요,&nbsp;<code>while</code>에 붙어 있는 조건식을 검사할 때, 이 값이&nbsp;<code>False</code>가 나온다면 여기&nbsp;<code>else</code>&nbsp;블록을 실행하도록 합니다. 즉 조건에 의해 루프문을 빠져나왔을 때&nbsp;<code>else</code>&nbsp;블록이 실행되는 것이죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>여기서 유의해야 할 점은&nbsp;<strong><code>break</code>를 통해 루프문을 빠져나왔을 때에는 이&nbsp;<code>else</code>&nbsp;블록이 실행되지 않는다는 점</strong>&nbsp;입니다.&nbsp;<code>else</code>는&nbsp;<code>while</code>에 붙어 있는 조건이 거짓일 때에만 실행되지,&nbsp;<code>break</code>와는 전혀 인연이 없다는 점을 꼭 명심해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>보통의 다른 프로그래밍 언어에서는&nbsp;<code>else</code>는&nbsp;<code>if</code>와 같은 조건문에나 있지&nbsp;<code>while</code>문 같은 반복문에는 잘 없습니다. 반복문에서&nbsp;<code>else</code>를 사용할 수 있다는 점은 파이썬만의 특징이라고 볼 수 있습니다. <strong>반복문에 붙어있는&nbsp;<code>else</code>를 통해&nbsp;<code>break</code>로 빠져나왔는지 그렇지 않은지 곧바로 체크할 수 있기</strong> 때문에 종종 쓰이곤 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 프로그램에 대한 흐름도를 그리면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\n  i1[\u0022durability = int(input('샌드백의 내구도를 입력하세요 \u003e\u003e '))\u003cbr\u003eattack = 1\u0022]\n  i2[\u0022attack = 1\u0022]\n  i1\u002d\u002d\u003ei2\u002d\u002d\u003ec\n  c{\u0022durability \u003e 0\u0022}\n  c\u002d\u002d\u003e|True|p\n  p[\u0022print('공격력: ' + str(attack) + ', 내구도: ' + str(durability))\u003cbr\u003e\n    durability -= attack\u003cbr\u003e\n    attack += 1\u0022]\n  p\u002d\u002d\u003ec2\n  c2{\u0022attack \u003e= 100\u0022}\n  c2\u002d\u002d\u003e|True|br[\u0022print('충분히 단련했습니다. 남은 내구도는 ' + str(durability) + '입니다.')\u003cbr\u003e\n        break\u0022]\u002d\u002d\u003elp\n  lp[\u0022print('최종 공격력은 ' + str(attack) + '입니다.')\u0022]\n  c2\u002d\u002d\u003e|False|c\n  c\u002d\u002d\u003e|False|l[\u0022print('샌드백이 부서졌습니다!')\u0022]\n  l\u002d\u002d\u003elp\n  class i1,i2,c,p,br,c2,l,lp code\n```\n*샌드백 최종 코드에 대한 순서도*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
  i1[&quot;durability = int(input('샌드백의 내구도를 입력하세요 &gt;&gt; '))&lt;br&gt;attack = 1&quot;]
  i2[&quot;attack = 1&quot;]
  i1--&gt;i2--&gt;c
  c{&quot;durability &gt; 0&quot;}
  c--&gt;|True|p
  p[&quot;print('공격력: ' + str(attack) + ', 내구도: ' + str(durability))&lt;br&gt;
    durability -= attack&lt;br&gt;
    attack += 1&quot;]
  p--&gt;c2
  c2{&quot;attack &gt;= 100&quot;}
  c2--&gt;|True|br[&quot;print('충분히 단련했습니다. 남은 내구도는 ' + str(durability) + '입니다.')&lt;br&gt;
        break&quot;]--&gt;lp
  lp[&quot;print('최종 공격력은 ' + str(attack) + '입니다.')&quot;]
  c2--&gt;|False|c
  c--&gt;|False|l[&quot;print('샌드백이 부서졌습니다!')&quot;]
  l--&gt;lp
  class i1,i2,c,p,br,c2,l,lp code
</code></pre>
<p><em>샌드백 최종 코드에 대한 순서도</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>continue</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>반복문 중에서 우리가 또 쓸 수 있는 용법이 있습니다. 뭐이리 많냐구요? 아니에요, 조금만 프로그래밍에 익숙해진다면 이런 기능을 찾게 될 거예요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>continue</code>는 반복문 안에서 사용할 수 있는데요, <strong>파이썬 인터프리터가 <code>continue</code>를 만나게 되면 즉시 <span style="text-decoration: underline;">다음 루프</span>로 넘어갑니다.</strong> <code>break</code>는 실행되자마자 즉시 반복문 자체를 종료하는데, 기능이 조금 다르지요? 아래 예제는 위 예제와 기능상으로는 똑같습니다. 하지만 흐름은 조금 다르다는 걸 알게 될 거예요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
while durability > 0: 
    print("공격력: " + str(attack) + ", 내구도: " + str(durability))
    durability -= attack
    attack += 1
    if attack &lt; 100:
        continue

    print("충분히 단련했습니다. 남은 내구도는 " + str(durability) + "입니다.")
    break

else:
    print("샌드백이 부서졌습니다!")
print("최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>8000</code>을 입력했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(중략)
공격력: 97, 내구도: 3344
공격력: 98, 내구도: 3247
공격력: 99, 내구도: 3149
충분히 단련했습니다. 남은 내구도는 3050입니다.
최종 공격력은 100입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>사실 위의 예제는 <code>continue</code>의 용법을 단지 설명하기 위해 인의적으로 집어넣었습니다. <code>continue</code>는 루프에서 <strong>어떤 조건에 맞지 않으면 더이상 이번 루프에서는 할 일이 없어서 다음번 루프로 넘기고자 할 때</strong> 유용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>위 코드를 흐름도로 그리면 다음과 같습니다. 기존의 흐름과는 굉장히 유사합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\n  i1[\u0022durability = int(input('샌드백의 내구도를 입력하세요 \u003e\u003e '))\u003cbr\u003eattack = 1\u0022]\n  i2[\u0022attack = 1\u0022]\n  i1\u002d\u002d\u003ei2\u002d\u002d\u003ec\n  c{\u0022durability \u003e 0\u0022}\n  c\u002d\u002d\u003e|True|p\n  p[\u0022print('공격력: ' + str(attack) + ', 내구도: ' + str(durability))\u003cbr\u003e\n    durability -= attack\u003cbr\u003e\n    attack += 1\u0022]\n  p\u002d\u002d\u003ec2\n  c2{\u0022attack \u003c 100\u0022}\n  c2\u002d\u002d\u003e|False|br[\u0022print('충분히 단련했습니다. 남은 내구도는 ' + str(durability) + '입니다.')\u003cbr\u003e\n        break\u0022]\u002d\u002d\u003elp\n  lp[\u0022print('최종 공격력은 ' + str(attack) + '입니다.')\u0022]\n  c2\u002d\u002d\u003e|Ture|oo[continue]\u002d\u002d\u003ec\n  c\u002d\u002d\u003e|False|l[\u0022print('샌드백이 부서졌습니다!')\u0022]\n  l\u002d\u002d\u003elp\n```\n*`continue`가 들어간 코드의 흐름*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
  i1[&quot;durability = int(input('샌드백의 내구도를 입력하세요 &gt;&gt; '))&lt;br&gt;attack = 1&quot;]
  i2[&quot;attack = 1&quot;]
  i1--&gt;i2--&gt;c
  c{&quot;durability &gt; 0&quot;}
  c--&gt;|True|p
  p[&quot;print('공격력: ' + str(attack) + ', 내구도: ' + str(durability))&lt;br&gt;
    durability -= attack&lt;br&gt;
    attack += 1&quot;]
  p--&gt;c2
  c2{&quot;attack &lt; 100&quot;}
  c2--&gt;|False|br[&quot;print('충분히 단련했습니다. 남은 내구도는 ' + str(durability) + '입니다.')&lt;br&gt;
        break&quot;]--&gt;lp
  lp[&quot;print('최종 공격력은 ' + str(attack) + '입니다.')&quot;]
  c2--&gt;|Ture|oo[continue]--&gt;c
  c--&gt;|False|l[&quot;print('샌드백이 부서졌습니다!')&quot;]
  l--&gt;lp
</code></pre>
<p><em><code>continue</code>가 들어간 코드의 흐름</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>여담</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이러한 순서놀이를 왜 하는 건지 이해가 되지 않는 분들도 있으실 겁니다. 이후에는 사실&nbsp;<a href="https://elvanov.com/545"><code>for</code>&nbsp;반복문</a>이라는, 더 직관적이고 간편한 방법도 있지요. 하지만 동작 원리를 바탕으로 실제 동작 과정을 머릿속으로 상상하는 추론력을 기르셔야 합니다. 그 방법은&nbsp;<code>while</code>&nbsp;이 참 좋다고 생각합니다. <strong>간단한 원리이지만 아주 깊은 생각을 해야 실제 동작을 상상해낼 수 있기 때문입니다.</strong> 앞으로는 더 편한 함수, 더 편한 모듈을 사용해나가며 한결 수월하게 문제를 해결해나갈 것입니다만, 이러한 추론력이 뒷받침 되어주어야, 가지고 있는 도구를 비로소 효율적으로 활용할 수 있게 될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>반복문은 왜 사용하는가?</li><li><code>while</code>의 조건이 무엇일때&nbsp;<code>while</code>&nbsp;블록이 실행되는가?</li><li><code>while</code>&nbsp;중간에서 즉시 루프를 마치려면 어떻게 해야 하는가?</li><li>반복문이 진행중일 때 그 상황을 알고 싶다면 어떻게 해야 하는가?</li><li>언제&nbsp;<code>break</code>를 사용하는가?</li><li><code>while</code>과 짝지어진&nbsp;<code>else</code>는 무슨 역할인가?</li><li><code>while</code>과 짝지어진&nbsp;<code>else</code>는 언제 실행되지 않는가?</li><li><code>continue</code>의 기능은 무엇인가?</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://elvanov.com/1809">반복문을 설계하는 방법</a>을 익힌 후 본격적으로 프로그래밍 문제를 풀어보도록 하겠습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 18:23:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 09:23:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 20:14:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 11:14:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%b0%98%eb%b3%b5%eb%ac%b8-%eb%b9%84%ec%8a%b7%ed%95%9c-%ec%9e%91%ec%97%85%ec%9d%84-%eb%b0%98%eb%b3%b5%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1212</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 반복문 코딩하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1809</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-30 09:14:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-30 00:14:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 반복문 – 비슷한 작업을 반복하기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588205697.828964;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588207488.764638;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 함수를 직접 만들기 ~ 자주 쓰는 기능을 묶기]]></title>
		<link>https://elvanov.com/270</link>
		<pubDate>Wed, 18 Dec 2019 13:14:30 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n## 함수의 필요성 (추가 예정)\n\n사실 함수의 필요성은 `print`, `input`, `max`, `min`을 함수로 해놓은 것만 봐도 쉽게 느낄 수 있습니다. 필요한 **복잡한** 기능을 언제나 어디서든지 사용하고 싶을 때에 사용할 수 있다는 치명적인 장점이 있는 함수입니다. 예제를 들어 설명하기엔 갑자기 귀찮으므로.. 일단 뒤로 미루고, 임시 예제를 살펴봅시다.\n\n\u002d\u002d-\n\n## 예제로 만들어 본 `getMax`\n\n이미 파이썬 설계자가 만든 환상적인 `max`라는 함수가 있지만, 굳이굳이 설명을 위해 최대값을 구하는 (결함 많은) 함수를 만들어봅시다.\n\n```python\ndef getMax(numbers): ##a_1##\n    result = -9999 ##a_2##\n    for number in numbers:\n        if result \u003c number:\n            result = number\n    return result ##a_3##\n# print(result, numbers) ##a_2##\nexamples = [4,1,7,5,8,3,1,3,1]\nprint(getMax(examples)) ##a_4##\n```\n결과는 다음과 같습니다.\n```plaintext\n8\n```\n\n\u002d\u002d-\n\n### *a_1*(1.) 설명\n\n```python\ndef getMax(numbers):\n```\n\n함수를 정의하는 부분입니다. `def`라는 생소한 키워드로 시작합니다. `def`는 define의 준말입니다. 이 함수는 `numbers` 라는 **인수(argument)** 를 취합니다. 그리고 콜론(`:`)으로 새로운 블록을 시작합니다.\n\n인수는 함수의 호출 시점에서 항상 다르게 지정할 수 있습니다. 좀 더 다양한 상황에서 사용할 수 있도록 말이죠. 우리는 `print` 함수를 호출하면서 항상 다른 문자열 인수를 넣어주곤 했습니다. 그 인수를 정의하는 자리인 것입니다. 뒤에서 자세히 설명하도록 하겠습니다.\n\n**함수를 정의한다고 해서 프로그램이 실제로 어떤 동작을 하지는 않습니다. 함수의 실제 동작은 함수를 호출하는 시점에서 이루어집니다.** 이것은 중요한 개념이라 뒤에서 다시 설명합니다.\n\n\n### *a_2*(2.) 설명\n\n```python\n    result = -9999\n(중략)\n# print(result, numbers) #주석을 해제하면 아래와 같은 에러가 발생합니다.\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 7, in \u003cmodule\u003e\n    print(result, numbers)\nNameError: name 'result' is not defined\n```\n\n함수를 정의할 때 `numbers` 인수가 쓰였다는 걸 기억하시나요? `numbers`는 **함수 내에서만 사용되는 변수** 입니다. 이를 변수의 **범위(scope)** 는 함수로 국한된다고도 표현합니다. 함수 밖에서 사용하려면 에러가 발생합니다.\n\n`result`는 인수는 아닙니다. 함수 내부에서 정의한 변수입니다. 하지만 이 변수 또한 함수 내부로 범위가 국한됩니다. 그래서 함수 바깥 쪽에 있는 `print`에서 `result`를 이용하려고 하니 에러가 나버리게 됩니다.\n\n왜 변수의 범위를 이렇게 제한할까요? 궁금하신가요? 그럼 좀 있다 다시 설명할게요.\n\n\n### *a_3*(3.) 설명\n```python\n    return result\n```\n\n`return` 이라는 새로운 키워드가 등장합니다. `return`은 되돌려준다는 뜻입니다. 리턴한다, 반환한다 라고도 표현할 수 있습니다. 함수 내에서 `return`을 맞닥뜨리게 되면 함수는 즉시 끝나면서 `return` 바로 뒤에 따라오는 값을 호출하는 지점으로 되돌려줍니다.\n\n다음과 같은 함수는 아무것도 반환(리턴)하지 않습니다.\n- 함수 내부에 `return`이 없는 경우\n- `return` 뒤에 아무런 값도 없이 덜렁 `return`만 있는 경우\n\n### *a_4*(4.) 설명\n```python\nprint(getMax(examples))\n```\n\n실제로 함수를 호출하는 부분입니다. 이제서야 `getMax` 함수가 동작하게 됩니다. 그리하여 함수의 `numbers` 인수에는 `examples`가 대입되어 들어갑니다. 즉 지금 getMax 함수를 지금 호출한 시점에서 함수 내부에서 `numbers`를 다루는 것은 `examples`를 다루는 것과 같다는 뜻입니다. 인수로서 `examples`가 아닌 다른 것을 넘겨준다면, 그 다른 것이 `numbers`가 되어 작동하게 되겠죠.\n\n함수의 내부에서 `return result` 가 있었습니다. 그리하여 `getMax` 함수 호출의 결과값으로 `result`가 계산되어 반환됩니다. 마침내 그 값이 `print` 되는 것이죠.\n\n\n\u002d\u002d-\n\n\n## 기본적인 사용 방법\n\n```python\n# 함수의 정의\ndef 함수명(인수명1, 인수명2, ...):\n    내용\n    return 무언가. # return 은 있어도 되고, 없어도 된다.\n\n# 함수의 호출\n함수명(인수1, 인수2, ...)\n```\n\n함수명과 인수명을 정할 때의 규칙은 변수명을 정하는 규칙과 동일합니다.\n  \n블록은 `if`, `while`과 동일하게 들여쓰기를 이용합니다. 해당 블록에 있는 모든 내용이 곧 함수의 내용입니다. \n\n**인수** 란 함수에게 넘겨주는 값입니다. 함수명 바로 뒤로 이어지는 소괄호 안에 인수가 들어가게 됩니다. 인수는 다음과 같은 특성을 가집니다.\n\n  - 인수는 쉼표(`,`)로 구분됩니다.\n  - 인수의 개수는 제한이 없습니다. 하나도 취하지 않을 수도 있습니다.\n\n\n**인수** 는 **매개변수, 인자, argument(아규먼트), parameter(파라미터)** 등의 이름으로 불립니다. [미묘한 차이](https://wayhome25.github.io/etc/2017/12/31/parameter-argument/)가 있지만 함수에 어떤 값을 넘겨준다는 의미에서 전부 큰 차이가 없으므로 일단은 넘어가되 용어의 존재만 확실하게 기억하고 가도록 합시다. 총 5가지 입니다.\n\n\n함수 블록 내부에는 `return` 문이 삽입될 수 있습니다. `return` 의 특징은 다음과 같습니다.\n\n  - 없어도 되고, 한번 써도 되고, 여러번 써도 됩니다.\n  - `return` 을 맞닥뜨리는 순간 함수가 종료됩니다.\n  - `return` 바로 뒤에 값이 있다면 그 값이 반환되고, 값이 없다면 아무것도 반환되지 않습니다.\n\n함수는 **호출(call)** 해야 비로소 작동합니다. 호출에 대한 특징은 다음과 같습니다.\n\n  - 호출하는 방법은 함수명을 적고 바로 뒤에 소괄호를 사용하면 됩니다. \n  - 함수 호출시 인수가 순서대로 **전달(pass)** 됩니다.\n  - 함수 호출시 정의했던 인수의 개수가 다르다면 에러가 납니다.\n\n\n\u002d\u002d-\n\n## 함수의 특징 (장점)\n\n- 변수명을 더 자유롭게 사용할 수 있습니다. (변수의 범위를 제한하는 이유)\n- 코드 작성의 효율이 높아집니다.\n- 가독성이 좋아집니다.\n- 작동 방식을 이해하기 위하여 코드를 직접 분석하는 일은, 필요 없습니다.\n\n\u002d\u002d-\n\n### 변수명을 더 자유롭게 사용할 수 있습니다. (변수의 범위를 제한하는 이유)\n\n금방 전 함수의 특징 중 하나가 변수의 범위를 제한한다고 하였습니다. 그 이유는 그렇게 함으로써 변수명을 더 자유롭게 사용할 수 있기 때문입니다. 이게 무슨 말일까요? 범위를 제한하는 것이 오히려 더 자유롭게 사용할 수 있다니요?\n\n함수의 밖과 안은 기본적으로 서로 격리되어 있습니다. 그렇기 때문에 서로에게 영향을 줄 수 없습니다. 즉 함수 밖에서 정의된 변수는 내부에서 접근할 수 없고, 내부에서 정의된 변수는 바깥에서 접근할 수 없습니다. 다른 말로 하자면 함수 내부에서 변수를 정의할 때 **함수 외부의 이름과 겹치지 않을까 같은 걱정은 전혀 필요없다** 는 뜻입니다. 반대의 상황도 마찬가지고요.\n\n만약 다음과 같은 코드가 있다고 생각합시다.\n\n```python\nresult = \u0022안녕?\u0022\ndef getMax(numbers):\n    result = -9999\n    for number in numbers:\n        if result \u003c number:\n            result = number\n    return result\nprint(result)\n```\n\n사실 `result`라는 이름은 꽤 자주 쓰이는 단어입니다. 그래서 예제와 같이 이름이 중복될 가능성이 있습니다. 하지만 외부의 이름과 겹칠까에 대한 걱정은 전혀 필요가 없습니다. 함수 내부에서의 `result`는 오직 이 함수 안에서만 작동하고 외부의 `result`와는 전혀 연관이 없으니까요. 그래서 다음과 같이 외부의 `result`는 변동이 없다는 것을 확인할 수 있습니다.\n\n```plaintext\n안녕?\n```\n\n이렇듯 함수는 기본적으로 외부와 격리하려고 합니다. 하지만 함수 내부에서 외부의 값을 직접 변경하고 싶을 때가 있을 수 있습니다. 이는 심화 내용이므로, 아래쪽 *더 나아가기* 에서 확인해보세요.\n\n\u002d\u002d-\n\n### 코드 작성의 효율이 높아집니다.\n\n사실 함수를 하나도 작성하지 않아도 프로그램을 작성할 수 있습니다. 하지만 함수는 다음과 같은 상황에서 아주 강력합니다.\n\n- 동일한 (비슷한) 기능을 여러 번 사용해야 할 때 \n- 여러 곳에서 쓰인 동일한 (비슷한) 기능을 한꺼번에 수정해야 할 때\n\n완전히 같은 기능만 함수로서 만들어야 할까요? 그렇지 않습니다. 함수를 만들 때 미묘하게 다른 기능에 대해서는 바로 인수를 통해서 기능을 쉽게 세분화시킬 수 있기 때문이죠. 이로 인하여 함수 하나를 정의하였다 하더라도 인수를 다양한 방식으로 조합하여 호출할수 있다는 말이죠. 함수 호출 시 매번 같은 점과 다른 점은 다음과 같습니다.\n\n|같은 점|다른 점|\n|\u002d\u002d-|\u002d\u002d-|\n|함수의 용도와 이름, 인수의 위치 및 용도|인수가 가지는 값|\n\n\u002d\u002d-\n\n### 가독성이 좋아집니다.\n\n함수는 정의하는 부분과 실제로 사용하는 부분(호출)이 나뉘어져 있습니다. 프로그램은 앞서 얘기한 것처럼 위에서부터 아래로 차례대로 진행되는데요, 함수 호출을 만나게 되면 프로그램 흐름은 그 함수의 정의된 부분으로 순간이동합니다. 함수가 `return` 문을 만나거나 끝까지 실행을 다 하게 되면 호출한 부분으로 다시 돌아와 원래의 진행으로 돌아옵니다. 프로그램 흐름이 여기로 갔다 저기로 갔다 하니 좀 헷갈리게 되는 건 아닐까요?\n\n전혀요. 헷갈리지 않습니다. 왜냐하면 우리는 함수 내부에 대해서는 별 생각을 안하고 있기 때문입니다. 우리가 `print` 함수를 사용할 때 내부가 어떻게 되었는지 고민해본 적이 있나요? 파이썬 인터프리터는 `print` 함수의 호출을 만나는 순간 파이썬이 언어 설계자가 만들어놓은 `print` 함수가 정의한 내용으로 순간이동하여 적절한 작업을 하겠지요. 하지만 뭐, 상관없습니다. `print` 함수는 항상 말썽없이 잘 작동하기 때문입니다. 만약 에러가 발생한다면 우리는 `print` 함수의 문제가 아니라 우리의 인수에 대해 문제가 있는지를 살펴봅 것입니다. \n\n결론은 이렇습니다. **코드를 기능 별로 구분해놓으니 일관된 논리에 따라 코드를 작성할 수 있어 가독성이 크게 향상됩니다.**\n\n\u002d\u002d-\n\n### 작동 방식을 이해하기 위하여 코드를 직접 분석하는 일은, 필요 없습니다.\n\n일반적으로 함수의 다음 네 가지 요소를 안다면 함수의 실제 내용을 몰라도 곧장 이용할 수 있습니다.\n\n- 이름은 무엇인가? (호출하려면 어떻게 해야 하는가?)\n- 어떤 역할인가? 어떤 역할을 하는가?\n- 어떤 인수를 받는가? 각 인수의 용도는 무엇인가?\n- 결과값(return)이 존재하는가? 있다면, 어떤 값인가?\n\n코드 몇 줄 단위보다는 함수 하나하나에 대해 문서를 작성하는 것이 작성하는 사람에게도, 그 기능을 이용하려는 사람에게도 아주 편합니다. 이용하려는 사람은 굳이 소스 코드를 뜯어보지 않아도 그 함수에 대한 문서를 읽고 적절하게 사용하면 됩니다. 즉 **내부가 어떻게 동작하는지 알 필요가 없다는 것** 인데요, 이런 개념을 캡슐화라고 합니다.\n\n물론 문서가 없는 함수는 직접 코드를 뜯어봐야 알 수 있겠지요. 함수를 만들 일이 있다면 이름을 기억하기 좋게 만들거나 짧은 설명 한 줄 정도는 _미래의 나_ 를 위해 써놓읍시다.\n\n\u002d\u002d-\n\n## 더 나아가기\n\n### 공유에 의한 전달 (pass by sharing)\n\n우리는 함수를 호출할 때 변수로 호출할 수도 있습니다. 그럼 다음과 같은 코드는 어떻게 작동할까요?\n\n```python\ndef plus(number):\n    number += 1\npo = 10\nplus(po)\nprint(po)\n```\n```plaintext\n10\n```\n\n얼핏 생각하면 인수로 `po`를 넘겼으니 `po`에 대해서 수정이 일어날 것 같습니다. 하지만 `po`에게는 아무런 일도 일어나지 않습니다. `po` 또한 함수 입장에서는 바깥 변수이기 때문에 영향이 가지 않습니다. `number`는 `po`의 값을 가지고 있었지만 `po`와는 다른 존재입니다.\n\n객체와 클래스까지 배우게 된다면, 인수로 넘겨질 때의 특정한 메커니즘이 발동해서, 인수로 넘겨진 본체가 **수정이 가해질 수도 있는데**, 그 특정 메커니즘을 공유에 의한 전달(pass by sharing)이라고 하고, 이것에 대한 설명은 다음 시간 언젠가 하도록 합시다.\n\n(추가 예정)\n\n### global, nonlocal\n\n함수 내부에서 외부의 값을 수정하고 싶을 때도 있다고 했습니다. 그럴 때는 global 키워드를 사용하여 **\u0022이 변수는 외부에서 정의한 것이라도 갖다 쓰겠다!\u0022** 라고 파이썬 인터프리터에게 일방적으로 통보하면 됩니다. 다음 예시를 봐주세요.\n\n```python \ndef getOld():\n    global boy\n    boy += 1\nboy = 10\ngetOld()\nprint(boy)\n```\n```plaintext\n11\n```\n\n`global boy`로 나는 외부의 `boy`를 가져다 쓰겠다고 파이썬 인터프리터에게 입장을 분명히 했습니다. 하지만 입장을 분명히 한다고 해서 특별히 무슨 일이 벌어지는 것은 아닙니다. 실제 `getOld` 함수가 호출되고 `boy`를 수정하려는 시도인 `boy += 1`에 와서야 외부에 정의된 `boy`를 탐색합니다. 함수가 정의되는 시점에는 `boy`가 없어도 되지만 함수가 호출되는 시점에 `boy`가 없다면 에러가 나리라는 것은 당연하겠지요?\n\n`global`을 간략하게 알아보았는데, 이런 `global`과 비슷한 `nonlocal`이라는 키워드가 있습니다. 이는 변수의 범위(scope)에 대한 자세한 내용을 설명할 때 함께 이야기하도록 하겠습니다.\n\n(추가 예정)\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 함수의 특징 (장점) 크게 네 가지는 무엇인가?\n- 인수를 뜻하는 다른 말 네 가지는 무엇인가?\n- 함수 정의시, 인수 여러 개를 사용하고자 할 때 그들의 구분은 어떻게 하는가?\n- 함수 정의시, 인수를 하나도 사용하지 않아도 되는가?\n- 내부가 어떻게 동작하는지 알 필요가 없다는 개념을 무엇이라고 하는가?\n- 함수의 실제 내용을 몰라도 '이것'들만 알면 함수를 곧장 이용할 수 있다는데, '이것' 네 가지는 무엇인가?\n- 함수 내부에서 외부의 값을 수정하고자 한다면 어떻게 해야 하는가?\n- 함수를 호출하는 방법은 무엇인가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n아래 함수를 정의하여, 기능이 제대로 동작하는지 테스트해보세요.\n\n1. 인수를 하나도 받지 않고, \u0022왈왈\u0022이라고 출력하는 bark 함수를 만들어보세요. 리턴 값은 없습니다.\n\n1. 숫자 하나를 인수로 받으세요. 그리고 이 숫자의 모든 약수를 출력하는 함수를 만들어보세요. 리턴 값은 없습니다.\n\n1. 숫자 하나를 인수로 받으세요. 그리고 이 숫자의 모든 약수를 담은 리스트를 반환하는 (리턴하는) 함수를 만드세요. 이 함수는 아무것도 출력하지 않습니다.\n\n1. 숫자 두 개를 입력받고, 이들의 중간 값을 반환하는 함수를 만드세요. 이 함수는 아무것도 출력하지 않습니다.\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n\n1. 코드입니다.\n\n   ```python\n   def bark():\n       print('왈왈')\n   \n   bark()\n   ```\n   ```plaintext\n   왈왈\n   ```\n\n1. 코드입니다.\n   \n   ```python\n   def ali(num):\n       for i in range(1, num+1):\n          if num % i == 0:\n               print(i)\n   \n   ali(192)\n   ```\n   ```plaintext\n   1\n   2\n   3\n   4\n   6\n   8\n   12\n   16\n   24\n   32\n   48\n   64\n   96\n   192\n   ```\n\n1. 코드입니다.\n\n   ```python\n   def ali1(num):\n       numbers = []\n       for i in range(1, num+1):\n           if num % i == 0:\n               numbers.append(i)\n       return numbers\n   \n   def ali2(num):\n       return [i for i in range(1, num+1) if num % i == 0]\n   \n   print(ali1(192))\n   print(ali2(192))\n   ```\n   ```plaintext\n   [1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 192]\n   [1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 192]\n   ```\n\n   `ali1` 단계만 구현해도 성공하셨습니다! 축하드립니다. `ali2`는 리스트 컴프리핸션(list comprehension)(추가 예정)을 이용한 것입니다. 추후 다시 내용을 다뤄보도록 하겠습니다.\n\n1. 코드입니다.\n\n   ```python\n   def middle(num1, num2):\n       return (num1 + num2)/2\n   \n   print(middle(12, 21))\n   ```\n   ```plaintext\n   16.5\n   ```"} -->
<div class="wp-block-jetpack-markdown"><hr>
<h2>함수의 필요성 (추가 예정)</h2>
<p>사실 함수의 필요성은 <code>print</code>, <code>input</code>, <code>max</code>, <code>min</code>을 함수로 해놓은 것만 봐도 쉽게 느낄 수 있습니다. 필요한 <strong>복잡한</strong> 기능을 언제나 어디서든지 사용하고 싶을 때에 사용할 수 있다는 치명적인 장점이 있는 함수입니다. 예제를 들어 설명하기엔 갑자기 귀찮으므로.. 일단 뒤로 미루고, 임시 예제를 살펴봅시다.</p>
<hr>
<h2>예제로 만들어 본 <code>getMax</code></h2>
<p>이미 파이썬 설계자가 만든 환상적인 <code>max</code>라는 함수가 있지만, 굳이굳이 설명을 위해 최대값을 구하는 (결함 많은) 함수를 만들어봅시다.</p>
<pre><code class="language-python">def getMax(numbers): ##a_1##
    result = -9999 ##a_2##
    for number in numbers:
        if result &lt; number:
            result = number
    return result ##a_3##
# print(result, numbers) ##a_2##
examples = [4,1,7,5,8,3,1,3,1]
print(getMax(examples)) ##a_4##
</code></pre>
<p>결과는 다음과 같습니다.</p>
<pre><code class="language-plaintext">8
</code></pre>
<hr>
<h3><em>a_1</em>(1.) 설명</h3>
<pre><code class="language-python">def getMax(numbers):
</code></pre>
<p>함수를 정의하는 부분입니다. <code>def</code>라는 생소한 키워드로 시작합니다. <code>def</code>는 define의 준말입니다. 이 함수는 <code>numbers</code> 라는 <strong>인수(argument)</strong> 를 취합니다. 그리고 콜론(<code>:</code>)으로 새로운 블록을 시작합니다.</p>
<p>인수는 함수의 호출 시점에서 항상 다르게 지정할 수 있습니다. 좀 더 다양한 상황에서 사용할 수 있도록 말이죠. 우리는 <code>print</code> 함수를 호출하면서 항상 다른 문자열 인수를 넣어주곤 했습니다. 그 인수를 정의하는 자리인 것입니다. 뒤에서 자세히 설명하도록 하겠습니다.</p>
<p><strong>함수를 정의한다고 해서 프로그램이 실제로 어떤 동작을 하지는 않습니다. 함수의 실제 동작은 함수를 호출하는 시점에서 이루어집니다.</strong> 이것은 중요한 개념이라 뒤에서 다시 설명합니다.</p>
<h3><em>a_2</em>(2.) 설명</h3>
<pre><code class="language-python">    result = -9999
(중략)
# print(result, numbers) #주석을 해제하면 아래와 같은 에러가 발생합니다.
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 7, in &lt;module&gt;
    print(result, numbers)
NameError: name 'result' is not defined
</code></pre>
<p>함수를 정의할 때 <code>numbers</code> 인수가 쓰였다는 걸 기억하시나요? <code>numbers</code>는 <strong>함수 내에서만 사용되는 변수</strong> 입니다. 이를 변수의 <strong>범위(scope)</strong> 는 함수로 국한된다고도 표현합니다. 함수 밖에서 사용하려면 에러가 발생합니다.</p>
<p><code>result</code>는 인수는 아닙니다. 함수 내부에서 정의한 변수입니다. 하지만 이 변수 또한 함수 내부로 범위가 국한됩니다. 그래서 함수 바깥 쪽에 있는 <code>print</code>에서 <code>result</code>를 이용하려고 하니 에러가 나버리게 됩니다.</p>
<p>왜 변수의 범위를 이렇게 제한할까요? 궁금하신가요? 그럼 좀 있다 다시 설명할게요.</p>
<h3><em>a_3</em>(3.) 설명</h3>
<pre><code class="language-python">    return result
</code></pre>
<p><code>return</code> 이라는 새로운 키워드가 등장합니다. <code>return</code>은 되돌려준다는 뜻입니다. 리턴한다, 반환한다 라고도 표현할 수 있습니다. 함수 내에서 <code>return</code>을 맞닥뜨리게 되면 함수는 즉시 끝나면서 <code>return</code> 바로 뒤에 따라오는 값을 호출하는 지점으로 되돌려줍니다.</p>
<p>다음과 같은 함수는 아무것도 반환(리턴)하지 않습니다.</p>
<ul>
<li>함수 내부에 <code>return</code>이 없는 경우</li>
<li><code>return</code> 뒤에 아무런 값도 없이 덜렁 <code>return</code>만 있는 경우</li>
</ul>
<h3><em>a_4</em>(4.) 설명</h3>
<pre><code class="language-python">print(getMax(examples))
</code></pre>
<p>실제로 함수를 호출하는 부분입니다. 이제서야 <code>getMax</code> 함수가 동작하게 됩니다. 그리하여 함수의 <code>numbers</code> 인수에는 <code>examples</code>가 대입되어 들어갑니다. 즉 지금 getMax 함수를 지금 호출한 시점에서 함수 내부에서 <code>numbers</code>를 다루는 것은 <code>examples</code>를 다루는 것과 같다는 뜻입니다. 인수로서 <code>examples</code>가 아닌 다른 것을 넘겨준다면, 그 다른 것이 <code>numbers</code>가 되어 작동하게 되겠죠.</p>
<p>함수의 내부에서 <code>return result</code> 가 있었습니다. 그리하여 <code>getMax</code> 함수 호출의 결과값으로 <code>result</code>가 계산되어 반환됩니다. 마침내 그 값이 <code>print</code> 되는 것이죠.</p>
<hr>
<h2>기본적인 사용 방법</h2>
<pre><code class="language-python"># 함수의 정의
def 함수명(인수명1, 인수명2, ...):
    내용
    return 무언가. # return 은 있어도 되고, 없어도 된다.

# 함수의 호출
함수명(인수1, 인수2, ...)
</code></pre>
<p>함수명과 인수명을 정할 때의 규칙은 변수명을 정하는 규칙과 동일합니다.</p>
<p>블록은 <code>if</code>, <code>while</code>과 동일하게 들여쓰기를 이용합니다. 해당 블록에 있는 모든 내용이 곧 함수의 내용입니다.</p>
<p><strong>인수</strong> 란 함수에게 넘겨주는 값입니다. 함수명 바로 뒤로 이어지는 소괄호 안에 인수가 들어가게 됩니다. 인수는 다음과 같은 특성을 가집니다.</p>
<ul>
<li>인수는 쉼표(<code>,</code>)로 구분됩니다.</li>
<li>인수의 개수는 제한이 없습니다. 하나도 취하지 않을 수도 있습니다.</li>
</ul>
<p><strong>인수</strong> 는 <strong>매개변수, 인자, argument(아규먼트), parameter(파라미터)</strong> 등의 이름으로 불립니다. <a href="https://wayhome25.github.io/etc/2017/12/31/parameter-argument/">미묘한 차이</a>가 있지만 함수에 어떤 값을 넘겨준다는 의미에서 전부 큰 차이가 없으므로 일단은 넘어가되 용어의 존재만 확실하게 기억하고 가도록 합시다. 총 5가지 입니다.</p>
<p>함수 블록 내부에는 <code>return</code> 문이 삽입될 수 있습니다. <code>return</code> 의 특징은 다음과 같습니다.</p>
<ul>
<li>없어도 되고, 한번 써도 되고, 여러번 써도 됩니다.</li>
<li><code>return</code> 을 맞닥뜨리는 순간 함수가 종료됩니다.</li>
<li><code>return</code> 바로 뒤에 값이 있다면 그 값이 반환되고, 값이 없다면 아무것도 반환되지 않습니다.</li>
</ul>
<p>함수는 <strong>호출(call)</strong> 해야 비로소 작동합니다. 호출에 대한 특징은 다음과 같습니다.</p>
<ul>
<li>호출하는 방법은 함수명을 적고 바로 뒤에 소괄호를 사용하면 됩니다.</li>
<li>함수 호출시 인수가 순서대로 <strong>전달(pass)</strong> 됩니다.</li>
<li>함수 호출시 정의했던 인수의 개수가 다르다면 에러가 납니다.</li>
</ul>
<hr>
<h2>함수의 특징 (장점)</h2>
<ul>
<li>변수명을 더 자유롭게 사용할 수 있습니다. (변수의 범위를 제한하는 이유)</li>
<li>코드 작성의 효율이 높아집니다.</li>
<li>가독성이 좋아집니다.</li>
<li>작동 방식을 이해하기 위하여 코드를 직접 분석하는 일은, 필요 없습니다.</li>
</ul>
<hr>
<h3>변수명을 더 자유롭게 사용할 수 있습니다. (변수의 범위를 제한하는 이유)</h3>
<p>금방 전 함수의 특징 중 하나가 변수의 범위를 제한한다고 하였습니다. 그 이유는 그렇게 함으로써 변수명을 더 자유롭게 사용할 수 있기 때문입니다. 이게 무슨 말일까요? 범위를 제한하는 것이 오히려 더 자유롭게 사용할 수 있다니요?</p>
<p>함수의 밖과 안은 기본적으로 서로 격리되어 있습니다. 그렇기 때문에 서로에게 영향을 줄 수 없습니다. 즉 함수 밖에서 정의된 변수는 내부에서 접근할 수 없고, 내부에서 정의된 변수는 바깥에서 접근할 수 없습니다. 다른 말로 하자면 함수 내부에서 변수를 정의할 때 <strong>함수 외부의 이름과 겹치지 않을까 같은 걱정은 전혀 필요없다</strong> 는 뜻입니다. 반대의 상황도 마찬가지고요.</p>
<p>만약 다음과 같은 코드가 있다고 생각합시다.</p>
<pre><code class="language-python">result = &quot;안녕?&quot;
def getMax(numbers):
    result = -9999
    for number in numbers:
        if result &lt; number:
            result = number
    return result
print(result)
</code></pre>
<p>사실 <code>result</code>라는 이름은 꽤 자주 쓰이는 단어입니다. 그래서 예제와 같이 이름이 중복될 가능성이 있습니다. 하지만 외부의 이름과 겹칠까에 대한 걱정은 전혀 필요가 없습니다. 함수 내부에서의 <code>result</code>는 오직 이 함수 안에서만 작동하고 외부의 <code>result</code>와는 전혀 연관이 없으니까요. 그래서 다음과 같이 외부의 <code>result</code>는 변동이 없다는 것을 확인할 수 있습니다.</p>
<pre><code class="language-plaintext">안녕?
</code></pre>
<p>이렇듯 함수는 기본적으로 외부와 격리하려고 합니다. 하지만 함수 내부에서 외부의 값을 직접 변경하고 싶을 때가 있을 수 있습니다. 이는 심화 내용이므로, 아래쪽 <em>더 나아가기</em> 에서 확인해보세요.</p>
<hr>
<h3>코드 작성의 효율이 높아집니다.</h3>
<p>사실 함수를 하나도 작성하지 않아도 프로그램을 작성할 수 있습니다. 하지만 함수는 다음과 같은 상황에서 아주 강력합니다.</p>
<ul>
<li>동일한 (비슷한) 기능을 여러 번 사용해야 할 때</li>
<li>여러 곳에서 쓰인 동일한 (비슷한) 기능을 한꺼번에 수정해야 할 때</li>
</ul>
<p>완전히 같은 기능만 함수로서 만들어야 할까요? 그렇지 않습니다. 함수를 만들 때 미묘하게 다른 기능에 대해서는 바로 인수를 통해서 기능을 쉽게 세분화시킬 수 있기 때문이죠. 이로 인하여 함수 하나를 정의하였다 하더라도 인수를 다양한 방식으로 조합하여 호출할수 있다는 말이죠. 함수 호출 시 매번 같은 점과 다른 점은 다음과 같습니다.</p>
<table>
<thead>
<tr>
<th>같은 점</th>
<th>다른 점</th>
</tr>
</thead>
<tbody>
<tr>
<td>함수의 용도와 이름, 인수의 위치 및 용도</td>
<td>인수가 가지는 값</td>
</tr>
</tbody>
</table>
<hr>
<h3>가독성이 좋아집니다.</h3>
<p>함수는 정의하는 부분과 실제로 사용하는 부분(호출)이 나뉘어져 있습니다. 프로그램은 앞서 얘기한 것처럼 위에서부터 아래로 차례대로 진행되는데요, 함수 호출을 만나게 되면 프로그램 흐름은 그 함수의 정의된 부분으로 순간이동합니다. 함수가 <code>return</code> 문을 만나거나 끝까지 실행을 다 하게 되면 호출한 부분으로 다시 돌아와 원래의 진행으로 돌아옵니다. 프로그램 흐름이 여기로 갔다 저기로 갔다 하니 좀 헷갈리게 되는 건 아닐까요?</p>
<p>전혀요. 헷갈리지 않습니다. 왜냐하면 우리는 함수 내부에 대해서는 별 생각을 안하고 있기 때문입니다. 우리가 <code>print</code> 함수를 사용할 때 내부가 어떻게 되었는지 고민해본 적이 있나요? 파이썬 인터프리터는 <code>print</code> 함수의 호출을 만나는 순간 파이썬이 언어 설계자가 만들어놓은 <code>print</code> 함수가 정의한 내용으로 순간이동하여 적절한 작업을 하겠지요. 하지만 뭐, 상관없습니다. <code>print</code> 함수는 항상 말썽없이 잘 작동하기 때문입니다. 만약 에러가 발생한다면 우리는 <code>print</code> 함수의 문제가 아니라 우리의 인수에 대해 문제가 있는지를 살펴봅 것입니다.</p>
<p>결론은 이렇습니다. <strong>코드를 기능 별로 구분해놓으니 일관된 논리에 따라 코드를 작성할 수 있어 가독성이 크게 향상됩니다.</strong></p>
<hr>
<h3>작동 방식을 이해하기 위하여 코드를 직접 분석하는 일은, 필요 없습니다.</h3>
<p>일반적으로 함수의 다음 네 가지 요소를 안다면 함수의 실제 내용을 몰라도 곧장 이용할 수 있습니다.</p>
<ul>
<li>이름은 무엇인가? (호출하려면 어떻게 해야 하는가?)</li>
<li>어떤 역할인가? 어떤 역할을 하는가?</li>
<li>어떤 인수를 받는가? 각 인수의 용도는 무엇인가?</li>
<li>결과값(return)이 존재하는가? 있다면, 어떤 값인가?</li>
</ul>
<p>코드 몇 줄 단위보다는 함수 하나하나에 대해 문서를 작성하는 것이 작성하는 사람에게도, 그 기능을 이용하려는 사람에게도 아주 편합니다. 이용하려는 사람은 굳이 소스 코드를 뜯어보지 않아도 그 함수에 대한 문서를 읽고 적절하게 사용하면 됩니다. 즉 <strong>내부가 어떻게 동작하는지 알 필요가 없다는 것</strong> 인데요, 이런 개념을 캡슐화라고 합니다.</p>
<p>물론 문서가 없는 함수는 직접 코드를 뜯어봐야 알 수 있겠지요. 함수를 만들 일이 있다면 이름을 기억하기 좋게 만들거나 짧은 설명 한 줄 정도는 <em>미래의 나</em> 를 위해 써놓읍시다.</p>
<hr>
<h2>더 나아가기</h2>
<h3>공유에 의한 전달 (pass by sharing)</h3>
<p>우리는 함수를 호출할 때 변수로 호출할 수도 있습니다. 그럼 다음과 같은 코드는 어떻게 작동할까요?</p>
<pre><code class="language-python">def plus(number):
    number += 1
po = 10
plus(po)
print(po)
</code></pre>
<pre><code class="language-plaintext">10
</code></pre>
<p>얼핏 생각하면 인수로 <code>po</code>를 넘겼으니 <code>po</code>에 대해서 수정이 일어날 것 같습니다. 하지만 <code>po</code>에게는 아무런 일도 일어나지 않습니다. <code>po</code> 또한 함수 입장에서는 바깥 변수이기 때문에 영향이 가지 않습니다. <code>number</code>는 <code>po</code>의 값을 가지고 있었지만 <code>po</code>와는 다른 존재입니다.</p>
<p>객체와 클래스까지 배우게 된다면, 인수로 넘겨질 때의 특정한 메커니즘이 발동해서, 인수로 넘겨진 본체가 <strong>수정이 가해질 수도 있는데</strong>, 그 특정 메커니즘을 공유에 의한 전달(pass by sharing)이라고 하고, 이것에 대한 설명은 다음 시간 언젠가 하도록 합시다.</p>
<p>(추가 예정)</p>
<h3>global, nonlocal</h3>
<p>함수 내부에서 외부의 값을 수정하고 싶을 때도 있다고 했습니다. 그럴 때는 global 키워드를 사용하여 <strong>&quot;이 변수는 외부에서 정의한 것이라도 갖다 쓰겠다!&quot;</strong> 라고 파이썬 인터프리터에게 일방적으로 통보하면 됩니다. 다음 예시를 봐주세요.</p>
<pre><code class="language-python">def getOld():
    global boy
    boy += 1
boy = 10
getOld()
print(boy)
</code></pre>
<pre><code class="language-plaintext">11
</code></pre>
<p><code>global boy</code>로 나는 외부의 <code>boy</code>를 가져다 쓰겠다고 파이썬 인터프리터에게 입장을 분명히 했습니다. 하지만 입장을 분명히 한다고 해서 특별히 무슨 일이 벌어지는 것은 아닙니다. 실제 <code>getOld</code> 함수가 호출되고 <code>boy</code>를 수정하려는 시도인 <code>boy += 1</code>에 와서야 외부에 정의된 <code>boy</code>를 탐색합니다. 함수가 정의되는 시점에는 <code>boy</code>가 없어도 되지만 함수가 호출되는 시점에 <code>boy</code>가 없다면 에러가 나리라는 것은 당연하겠지요?</p>
<p><code>global</code>을 간략하게 알아보았는데, 이런 <code>global</code>과 비슷한 <code>nonlocal</code>이라는 키워드가 있습니다. 이는 변수의 범위(scope)에 대한 자세한 내용을 설명할 때 함께 이야기하도록 하겠습니다.</p>
<p>(추가 예정)</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>함수의 특징 (장점) 크게 네 가지는 무엇인가?</li>
<li>인수를 뜻하는 다른 말 네 가지는 무엇인가?</li>
<li>함수 정의시, 인수 여러 개를 사용하고자 할 때 그들의 구분은 어떻게 하는가?</li>
<li>함수 정의시, 인수를 하나도 사용하지 않아도 되는가?</li>
<li>내부가 어떻게 동작하는지 알 필요가 없다는 개념을 무엇이라고 하는가?</li>
<li>함수의 실제 내용을 몰라도 '이것'들만 알면 함수를 곧장 이용할 수 있다는데, '이것' 네 가지는 무엇인가?</li>
<li>함수 내부에서 외부의 값을 수정하고자 한다면 어떻게 해야 하는가?</li>
<li>함수를 호출하는 방법은 무엇인가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<p>아래 함수를 정의하여, 기능이 제대로 동작하는지 테스트해보세요.</p>
<ol>
<li>
<p>인수를 하나도 받지 않고, &quot;왈왈&quot;이라고 출력하는 bark 함수를 만들어보세요. 리턴 값은 없습니다.</p>
</li>
<li>
<p>숫자 하나를 인수로 받으세요. 그리고 이 숫자의 모든 약수를 출력하는 함수를 만들어보세요. 리턴 값은 없습니다.</p>
</li>
<li>
<p>숫자 하나를 인수로 받으세요. 그리고 이 숫자의 모든 약수를 담은 리스트를 반환하는 (리턴하는) 함수를 만드세요. 이 함수는 아무것도 출력하지 않습니다.</p>
</li>
<li>
<p>숫자 두 개를 입력받고, 이들의 중간 값을 반환하는 함수를 만드세요. 이 함수는 아무것도 출력하지 않습니다.</p>
</li>
</ol>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">def bark():
    print('왈왈')

bark()
</code></pre>
<pre><code class="language-plaintext">왈왈
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">def ali(num):
    for i in range(1, num+1):
       if num % i == 0:
            print(i)

ali(192)
</code></pre>
<pre><code class="language-plaintext">1
2
3
4
6
8
12
16
24
32
48
64
96
192
</code></pre>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">def ali1(num):
    numbers = []
    for i in range(1, num+1):
        if num % i == 0:
            numbers.append(i)
    return numbers

def ali2(num):
    return [i for i in range(1, num+1) if num % i == 0]

print(ali1(192))
print(ali2(192))
</code></pre>
<pre><code class="language-plaintext">[1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 192]
[1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 192]
</code></pre>
<p><code>ali1</code> 단계만 구현해도 성공하셨습니다! 축하드립니다. <code>ali2</code>는 리스트 컴프리핸션(list comprehension)(추가 예정)을 이용한 것입니다. 추후 다시 내용을 다뤄보도록 하겠습니다.</p>
</li>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">def middle(num1, num2):
    return (num1 + num2)/2

print(middle(12, 21))
</code></pre>
<pre><code class="language-plaintext">16.5
</code></pre>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 22:14:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 13:14:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-17 16:38:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-17 07:38:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%95%a8%ec%88%98-%eb%b9%84%ec%8a%b7%ed%95%9c-%ec%9e%91%ec%97%85%ec%9d%84-%eb%ac%b6%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 변수와 리스트 ~  비슷한 변수들을 묶기]]></title>
		<link>https://elvanov.com/273</link>
		<pubDate>Thu, 19 Dec 2019 01:51:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=273</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 학습 목표\n\n이번 시간에 배울 항목은 다음과 같습니다.\n\n- 변수의 자세한 동작 과정\n- `list` 개념\n- `print`, `max`, `min`과 `list`의 티키타카\n- `list`의 각종 기능\n\n## 학생들 점수를 다루기\n\n### 코딩의 어려움\n\n학생들 10명의 점수를 받고자 합니다. 그리고 이 점수들을 계속 프로그램 실행 중에 갖고 있으려고 합니다. 학생 하나하나의 점수는 중요하고, 여러가지 통계를 내는 데 점수를 계속 기억하고 있으면 좋으니까요.\n\n다음은 `while`문을 통해서 평균**만** 구하는 프로그램입니다. \n\n```python \ni = 0\nscoreAll = 0\nwhile i \u003c 10:\n    scoreAll += int(input())\n    i += 1\naverage = scoreAll / 10\n\nprint(average)\n```\n```plaintext\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n3.5\n```\n\n변수 `i`는 오직 `while`의 루프 횟수를 조정하기 위한 변수입니다. `i = 0`으로 초기화를 해주었고 `i \u003c 10`일 때까지 동작하며 루프를 돌 때마다 `1`씩 증감해주고 있습니다. `i`는 `0`부터 `9`까지 변화하면서 루프는 총 10회 동작하게 되겠습니다.\n\n우리의 의도대로 동작합니다. 하지만 점수 정보는 `scoreAll` 변수에 대입되고 사라집니다. 우리는 `input()`으로 입력받은 모든 값들을 기억하고 싶습니다. 그럼 10개의 변수를 써야만 하는 것일까요? 다음 예시를 봅시다.\n\n```python\nstudent0 = int(input())\nstudent1 = int(input())\nstudent2 = int(input())\nstudent3 = int(input())\nstudent4 = int(input())\nstudent5 = int(input())\nstudent6 = int(input())\nstudent7 = int(input())\nstudent8 = int(input())\nstudent9 = int(input())\n\nscoreAll = (student0 + student1 + student2 + student3 + student4 + \n    student5 + student6 + student7 + student8 + student9)\n\naverage = scoreAll / 10 # 평균입니다.\n\nmaxScore = max(student0, student1, student2, student3, student4, \n    student5, student6, student7, student8, student9)\n\nminScore = min(student0, student1, student2, student3, student4, \n    student5, student6, student7, student8, student9)\n\nprint(\u0022평균은\u0022, average, \u0022입니다.\u0022)\nprint(\u0022최대 점수는\u0022, maxScore, \u0022입니다.\u0022)\nprint(\u0022최소 점수는\u0022, minScore, \u0022입니다.\u0022)\n```\n\n```plaintext\n3\n5\n4\n6\n10\n40\n20\n70\n30\n48\n평균은 23.6 입니다.\n최대 점수는 70 입니다.\n최소 점수는 3 입니다.\n```\n\n\u003e 파이썬에서는 마음대로 줄을 바꾸거나 들여쓰기를 하면 안 됩니다. 그런 것도 하나의 엄연한 문법이기 때문이지요. 하지만 한 줄에 너무 긴 코드가 들어갈 경우에는 가독성을 헤치는 문제가 발생합니다. 이러한 상황을 극복하기 위해 파이썬에서는 **소괄호로 묶는다면 줄을 바꿔도 된다는 규칙** 이 있습니다. 위 예제에서는 `student0` 부터 `student9` 까지 더하는 데 소괄호로 묶어서 줄을 바꿨습니다. \n\n\n\n\u003e `print`는 쉼표(`,`)를 이용해 여러 항목을 넣을 수 있습니다.\n\n`max`와 `min`은 아래에서 다시 설명하도록 하겠습니다. 우선은 쉼표로 구분된 항목들 중 최댓값과 최솟값을 구하는 함수라고 이해하시면 되겠습니다.\n\n\u002d\u002d-\n\n뭔가 문제가 보이시나요? 독립적인 변수를 `student0`부터 `student9`까지 만들어 각각 값을 할당하고 있습니다. 이런 상황이 되었을 때 우리는 다음과 같은 문제점을 봉착하게 됩니다.\n\n- 코드의 중복이 늘어납니다. `int(input())`가 10번 반복되고 있습니다. 학생들이 늘어날 때마다 `int(input())`을 한 번 더 써주어야 할 것입니다. 코드가 계속해서 중복되면 처리가 힘들어집니다.\n- 한번에 처리하기가 힘듭니다. 학생들의 합계를 구하려면 `student0`부터 `student9`까지 일일히 더해야 합니다. 최댓값과 최소값을 구하는 `max`, `min` 함수를 이용할 때에도 마찬가지입니다. 학생들이 늘어날 때마다 쉼표와 변수명을 더 추가해서 적어주어야겠죠.\n\n그래서 우리는 어떤 비슷한 목적을 가진 변수들을 한데 모아 손쉽게 관리해줄 수 있는 무언가가 있으면 참 좋겠다고 생각이 듭니다. 그렇다면 코드를 중복해서 쓰지 않아도 되고, 한번에 처리하기 쉬워질 텐데요.\n\n이 때 등장하는 혜성은 바로 **`list`** 입니다. 리스트는 여러가지 값을 가지고 있는 변수입니다. 무슨 말인지 이해가 잘 안되시죠? 일단 변수의 본질을 다소 파헤쳐보고, 리스트의 기본적인 사용법을 익힌 후 위 예제를 수정해봅시다.\n\n\u002d\u002d-\n\n### 리스트의 초초 기본 사용법\n\n```python\nscoreList = [1, 2, 3]\nprint(scoreList)\n```\n```plaintext\n[1, 2, 3]\n```\n\n`scoreList`는 우리가 평소처럼 변수를 사용하는 것처럼 이름을 정했습니다. 그리고 대입문의 오른쪽에는 `[1, 2, 3]`이 등장했네요. 여기서 대괄호 `[]`의 뜻은 리스트를 새롭게 만들겠다는 뜻이고, `1, 2, 3`은 이 리스트가 가지고 있을 변수를 지정해준다는 뜻입니다.\n\n\u002d\u002d-\n\n우리가 이전에 변수의 종류에서 `int`, `float`, `bool`, `str` 등을 배웠었지요, `list`도 동일선상의 개념입니다. 리스트 또한 다른 변수와 마찬가지로 대입을 통해 값을 변경할 수 있습니다. \n\n```python\na = [1, 2, 3]\nprint(a)\na = [\u0022abc\u0022, \u0022cde\u0022, \u0022efg\u0022]\nprint(a)\n```\n```plaintext\n[1, 2, 3]\n['abc', 'cde', 'efg']\n```\n\n\u002d\u002d-\n\n리스트는 대괄호를 이용해서 항목 하나하나에 접근할 수 있습니다. 변수명을 먼저 쓰고 그 직후에 `[숫자]`를 적으면 됩니다. `0`이 첫 번째 항목이고, `1`이 두 번째 항목입니다. 예제를 보겠습니다. \n\n```python\na = [1, 2, 3]\nprint(a[0])\nprint(a[1])\n```\n```plaintext\n1\n2\n```\n\n\u002d\u002d-\n\n리스트 내부에는 여러 개의 값을 가질 수 있습니다. 하지만 이는 예전에 배운 개념과 다소 혼동됩니다. 변수 하나는 하나의 값을 가질 수 있던 게 아닌가요? 어떻게 변수 하나가 여러 개의 값을 가질 수 있는 것일까요? 이는 변수의 동작 방식을 조금 더 파헤쳐야 비로소 이해할 수 있습니다.\n\n\u002d\u002d-\n\n## 변수에 대한 통찰\n\n### 변수의 본질\n\n변수의 본질을 더 자세히 살펴봅시다. \n\n아주 초기에 [컴퓨터](120)에 대한 공부를 할 때 메모리의 존재에 대해 기억하시나요? 메모리는 프로그램이 실행되는 동안의 모든 정보가 저장되는 곳입니다. 변수 또한 계속해서 메모리에 새롭게 생성되고 삭제됩니다. 메모리를 거대한 창고라고 상상하세요. 파이썬 인터프리터가 거대한 메모리라는 창고에서 변수로 값을 찾는 과정은 다음과 같습니다.\n\n|파이썬 인터프리터의 동작|실생활의 예시|\n|\u002d\u002d-|\u002d\u002d-|\n|변수명을 읽는다.|물건의 이름을 인식한다.|\n|변수의 종류(타입)을 파악한다.|물건의 종류, 크기 등을 파악한다.|\n|변수명에 대응되는 메모리의 주소를 얻는다. (예: 1219942213)|재고표에서 물건의 위치를 파악한다. (예: F구역 왼쪽 선반의 3번째)|\n|해당 주소에서 값을 종류(타입)에 맞게 추출한다.|해당 위치로 가서 물건을 찾는다. (물건이 크다면 카트트로 물건을 빼온다.)|\n\n여기서의 핵심은 **실제 데이터(값), 변수의 이름(name), 변수의 타입(type)**, 이 세 가지를 구분해서 생각할 수 있다는 점입니다. 실제 데이터는 `0`과 `1`의 조합으로 메모리에 저장되어 있습니다. 이 데이터를 어떻게 조작할 지가 관건인데, 실생활의 예시에서처럼 일종의 재고표가 있어 파이썬 인터프리터는 변수 이름을 통해 메모리의 위치를 즉각적으로 알 수 있고, 변수의 타입으로 메모리의 값을 어떻게 얼마나 읽고 쓸지 알 수 있습니다. \n\n이제부터 강좌 통틀어서 처음으로 다이어그램이 등장하는데요, 변수는 다음과 같이 표현하도록 하겠습니다. 타입에 관한 정보는 따로 표시하지 않습니다.\n\n```python\na = 5\nb = '안녕'\n```\n\n![이름과 데이터의 구분 다이어그램](elvanov/wp-content/uploads/2020/01/python6.svg)\n*이름과 데이터의 구분*\n \n\n\u002d\u002d-\n\n### 실생활과 컴퓨터의 차이점\n\n실생활의 창고에서 물건을 찾을 때에는 사실 위치정보를 대충 알아도 됩니다. 왜냐하면 물건끼리 구분이 어느정도 되어있기 때문입니다. 나사 하나를 찾아본다고 상상해보세요. 물리적으로 하나하나 분리되어 있기 때문에 대략적으로 어디에 있는지만 알고, 그 위치로 가서 눈대중으로 대충 물건의 크기를 파악해서 손으로 가져올 수 있습니다.\n\n하지만 메모리에 저장된 데이터는 어디까지가 유의미하고 무의미한지, 그 데이터를 직접 보기만 해서는 답을 내릴 수 없습니다. `0000000000000000`을 보더라도 이게 숫자 0을 의미하는 건지, 문자열 `'0'`을 의미하는 건지, 심지어 실제 데이터가 어디서부터 시작하는 건지, 혹은 그냥 아무런 의미없는 공간인건지조차 판단이 불가능합니다. 그 때문에 재고표에 위치(변수의 이름과 메모리 주소)를 똑바로 작성하고 물건의 종류(변수의 타입)까지 미리 파악해야 함은 선택사항이 아니라 필수사항입니다.\n\n실생활보다 다소 좋은 점은, 컴퓨터는 메모리의 주소만 안다면 즉시 그 곳으로 순간이동하여 값이 무엇인지 알 수 있다는 점입니다. 주소가 적인 포스트잇을 들고 길찾기 어플을 켜서 직접 발걸음을 옮겨 찾아나서야 하는 우리랑은 효율의 차원이 다르지요.\n\n\u002d\u002d-\n\n### 더 자세히는 알 필요 없다\n\n축복받은 점은, 메모리와 관련된 작업은 파이썬에서는 자동으로 이루어진다는 점입니다. 컴퓨터공학의 달인들이 오랜 세월 갈고 닦은 정수를 이미 파이썬에 녹였습니다. 다음과 같은 과정은 파이썬 인터프리터가 자동으로 처리하므로 우리가 전혀 신경쓸 필요가 없는 것들입니다. \n\n- 변수가 새로 생성될 때 사용 가능한 (비어 있는) 메모리의 구역을 확보하기\n- 올바른 방식으로 데이터를 메모리에서 읽고 쓰기\n- 쓸모 없어진 변수를 판단하여, 다른 변수도 사용할 수 있도록 그 메모리에 해당하는 데이터를 삭제하기\n\n우리는 단지 우리가 배운 대로 변수를 생성해서 우리 입맛대로 사용하기만 하면 됩니다. 그렇다면 이같은 과정이 있다는 것을 왜 학습하는 것일까요? 왜냐하면 변수가 어떻게 작동하는지 알아야 변수를 자유자재로 사용할 수 있기 때문입니다. `if`를 이용한 조건문은 데이터를 비교연산자로 이용하여 단순히 `True`와 `False`로 나누었지만, `while` 반복문만 하여도 우리가 루프를 제어하기 위해 별도의 변수를 곧장 만들곤 했습니다. 앞으로 배울 `for`를 비롯한 각종 문법은 변수에 대한 개념이 확실히 잡혀있어야 이해할 수 있습니다.\n\n\u002d\u002d-\n\n### 변수의 낯을 드러내다\n\n묻고 따지지 말고 다음 코드를 복사하여 실행시켜보세요. 변수의 실제 주소, 크기, 실제 데이터를 출력하는 코드입니다.\n\n```python\nfrom ctypes import string_at\nfrom sys import getsizeof\nfrom binascii import hexlify\n\ndef print_raw(a):\n    print(a, \u0022\\t:\u003cmemory at \u0022, id(a), \u0022 (\u0022, getsizeof(a), \u0022)\u003e\\t\u0022,\n          hexlify(string_at(id(a), getsizeof(a))), sep=\u0022\u0022)\n\np = 52\nprint_raw(p)\np = '안녕하십니까? 저는 김철수라고 합니다. 만나서 반갑습니다~!'\nprint_raw(p)\n```\n\n`52`라는 값을 가지고 있는 `int`형 변수를 한번 분석해보았더니 다음과 같은 결과가 나왔습니다.\n\n- 메모리 주소 : `140723826314496`\n- 차지하는 공간 : 28 bytes\n- 실제 데이터 : `0600000000000000103daad1fc7f0000010000000000000034000000`\n\n`안녕하십니까? 저는 김철수라고 합니다. 만나서 반갑습니다~!`라는 값을 가지고 있는 `str`형 변수를 분석해보았습니다.\n\n- 메모리 주소 : `2787455457728`\n- 차지하는 공간 : 140 bytes\n- 실제 데이터 : `0500000000000000f002100000(중략)cb5c2c8b2e4b27e0021000000`\n\n이러한 예제를 보여주는 이유는 실제로 변수가 컴퓨터에서 어떻게 작동하는지를 엿보게 하기 위해서입니다. 당연하지만 변수마다 메모리 주소와 차지하는 공간, 내부에서 저장되는 데이터가 모두 다른 것을 확인할 수 있습니다. 완전히 동일한 변수일지라도, 컴퓨터마다 환경이 다르고 실행시점마다 메모리의 상황이 달라지니 메모리 주소의 값은 항상 바뀔 수 있습니다.\n\n\u002d\u002d-\n\n### 중간 정리\n\n앞서 이야기했을 때에는 **실제 데이터(값), 변수의 이름(name), 변수의 타입(type)** 세 가지를 확실히 나누어 언급했으나, 파이썬 인터프리터에서는 **변수의 타입이 변수의 데이터에 포함될 수 있습니다.** 그러므로 다음과 같이 더 콤팩트하게 정리할 수 있습니다. \n\n- **변수를 구성하는 것은 데이터(값), 이름이다.**\n- **변수의 데이터(값)은 메모리 어딘가에 저장되어 있다.**\n- **변수의 이름으로 메모리 주소와 데이터 다루는 법을 알 수 있다.**\n\n이 세 가지가 꼭 이해가 되어야 할 텐데요... 하하\n\n또 한가지 짚고 넘어갈 게 있습니다. 파이썬 인터프리터는 변수의 이름을 통해 데이터가 들어있는 메모리의 주소를 알 수 있다고 하였습니다. 표현하기 나름입니다만, 이를 **변수는 데이터를 가리킨다.** 라고 표현할 수 있습니다. 마치 변수를 집주소가 적혀있는 포스트잇으로 비유하는 표현이죠. 이를 이용하여 이전에 배웠던 다음 문장과 연관지어서 바꿀 수 있습니다.\n\n- 변경 전 : 변수는 하나의 값만 가질 수 있다.\n- 변경 후 : **변수는 하나의 데이터만 가리킬 수 있다.**\n\n\u003e ### 이름이 없는 변수?\n\u003e\n\u003e 만약 변수에 이름이 없는 상황이 있을까요? 바로 `print(10)`과 같은 상황입니다. `10`은 데이터로서만 존재할 뿐이며, 이름은 없습니다. 그래서 `10`은 `print`가 한 번 사용하고 버려집니다. `10`이라는 데이터는 메모리 어딘가에 존재하였겠지만, 거기에 다다를 이름이 없으니 파이썬 인터프리터는 결국 의미없다 판단하고 `10`을 지워버립니다. 한 마디로 정리할 수 있겠습니다. 이름이 없는 변수는 존재할 수는 있지만, 사라질 운명에 놓여있다구요.\n\n\u002d\u002d-\n\n## 리스트는 변수의 이름을 가지고 있는 변수이다\n\n리스트는 지금껏 사용해 온 `int`나 `str`과 사뭇 다릅니다. 리스트는 어떤 값들에 대해서 특별한 이름을 부여한 후 리스트 그 자체의 데이터로서 그 이름들을 가지고 있습니다. 지금부터 머릿속으로 열심히 상상을 해봅시다. 리스트에서 이름과 데이터(값)을 구분해보자구요. 앞의 예제를 땡겨옵시다. \n\n```python\na = [1, 2, 3]\nprint(a[0])\nprint(a[1])\n```\n```plaintext\n1\n2\n```\n\n자, 여기서 새로운 리스트를 만들어 대입하는 `a = [1, 2, 3]` 이 단계에서는 다음과 같은 일들이 벌어집니다.\n\n1. 리스트 데이터를 생성합니다.\n1. 리스트의 0번째 항목이라는 이름으로, `1`이라는 값을 생성합니다.\n1. 리스트의 1번째 항목이라는 이름으로, `2`라는 값을 생성합니다.\n1. 리스트의 2번째 항목이라는 이름으로, `3`이라는 값을 생성합니다.\n1. 이 리스트의 이름을 `a`로 지정합니다.\n\n그림으로 정리하면 다음과 같습니다.\n\n![리스트 관계도](elvanov/wp-content/uploads/2020/01/python.svg)\n*리스트 관계도*\n\n위 그림과 같이 리스트 `a`의 데이터에는 다른 변수들의 이름밖에 없습니다. 그 이름은 내부적으로 `0`, `1`, `2`와 같이 순차적 및 자동으로 정해집니다. 그 각각의 이름에 대해서 데이터들은 리스트 외부에 있습니다. 중요한 지점은 우리가 `a`라는 이름을 통해 또 다른 변수의 이름에 접근할 수 있다는 것입니다. `a[0]`과 같이 적게 되면 `a` 리스트 내에 있는, `0`이라는 이름이 가리키는 실제 데이터를 가져오게 됩니다. 그리하여 `print(a[0])`을 했을 때 `1`이 출력되는 것입니다. 대괄호 안에는 또 다른 변수를 이용할 수 있으므로 다음과 같이 반복문을 돌리는 것도 가능하게 됩니다.\n\n```python\na = [5, 8, 14]\ni = 0\nwhile i \u003c 3:\n    print(a[i])\n    i += 1\n```\n```plaintext\n5\n8\n14\n```\n\n\u002d\u002d-\n\n## 리스트의 기능\n\n`list`는 다른 변수들의 이름을 지닐 수 있다는 특징 외에도 다양한 기능이 있습니다. 위에서 언급했던 기능만 사용할 수 있었다면 딱히 자주 사용될 이유가 없었겠죠. 기본적인 몇 가지를 먼저 말하자면 다음과 같습니다.\n\n- `list` 내의 항목을 언제든지 추가하고 삭제할 수 있습니다.\n- `list` 내의 항목을 예쁘게 출력할 수 있습니다.\n- `list` 내 모든 항목에 손쉽게 접근할 수 있습니다.\n\n또 어디서 이런 생뚱맞은 기능들이 등장한 겁니까? 왜 이렇게 새로운 기능이 쉴 새 없이 튀어나오냐 이 말입니다!! 네, 이러한 기능은 파이썬 설계자들이 아주 오래전부터 고심하여 만든 기능들입니다만, 천천히 알아봅시다.\n\n### 항목 추가하기\n\n우선 항목을 추가하는 기능은 `리스트명.append(추가할것)`으로 기능을 사용할 수 있습니다.\n\n```python\na = [3, 4, 7]\nb = [5, 8, 10, 15]\n\nprint('a:', a, 'b:', b)\na.append(4)\nb.append(2)\nprint('a:', a, 'b:', b)\n```\n```plaintext\na: [3, 4, 7] b: [5, 8, 10, 15]\na: [3, 4, 7, 4] b: [5, 8, 10, 15, 2]\n```\n\n\u002d\u002d-\n\n`append`라는 것이 처음 등장했는데, 이러한 기능은 도대체 어디에서 어떻게 작동하는 걸까요?\n\n\n![리스트 기능 구조도](elvanov/wp-content/uploads/2020/01/python2.svg)\n*리스트 기능 구조도*\n\n\n이전에 변수의 타입은 변수의 데이터에 포함될 수 있다고 이야기한 것을 기억하시나요? 위 그림과 같이 데이터에는 타입이 어떻다고 이야기만 해주는 조그마한 정보가 끼여 있습니다. 파이썬 인터프리터는 그 정보를 따라가서, `list`가 사용할 수 있는 다양한 기능들이 모여있는 황금창고를 발견합니다. 아까 언급했듯이 이 황금창고는 파이썬 언어 설계자들이 미리 만들어놓았습니다. 우리는 언제든지 여기에 있는 기능을 꺼내쓸 수 있습니다. 바로 `.`를 통해서요. \n\n여기서 새로운 사실을 또 알아갑시다. 바로 **기능(`.`)은 타입에 따라 다르다**는 점 입니다. 리스트는 리스트의 기능을 사용할 수 있으리라는 점은 당연합니다. 그렇지만 `int`나 `str`의 변수가 리스트의 기능을 사용할 수 있을까요? 아니오, 사용할 수 없습니다! 이 또한 당연해보일지 모르겠지만 중요한 점입니다. 다음의 두 예시는 에러가 일어납니다.\n\n\n```python\na = \u0022hi\u0022\na.append(\u0022ho\u0022)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 2, in \u003cmodule\u003e\n    a.append(\u0022ho\u0022)\nAttributeError: 'str' object has no attribute 'append'\n```\n\n\u002d\u002d-\n\n```python\na = 3\na.append(6)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 2, in \u003cmodule\u003e\n    a.append(6)\nAttributeError: 'int' object has no attribute 'append'\n```\n\n\u002d\u002d-\n\n### 예제 부수기\n\n자, 여기까지 배웠다면 이번 시간의 처음에 맞닥뜨렸던 학생 여러명의 점수를 한번 다루어봅시다. **비슷한 용도나 목적이 있는 변수가 다수 있는** 상황에는 리스트의 특성상 아주 효율적으로 코딩할 수 있습니다.\n\n```python\ni = 0\nscoreAll = 0\nstudents = []  ##a_1##\nwhile i \u003c 10:\n    students.append(int(input()))  ##a_2##\n    i += 1\n\ni = 0\nwhile i \u003c 10:\n    scoreAll += students[i] ##a_3##\n    i += 1\n\nprint(\u0022점수출력:\u0022, students) ##a_4##\nprint(\u0022평균:\u0022, scoreAll / 10) ##a_5##\nprint(\u0022최대:\u0022, max(students)) ##a_6##\nprint(\u0022최소:\u0022, min(students)) ##a_7##\n```\n```plaintext\n4\n2\n7\n4\n39\n5\n28\n73\n49\n1\n점수출력: [4, 2, 7, 4, 39, 5, 28, 73, 49, 1]\n평균: 21.2\n최대: 73\n최소: 1\n```\n\n#### *a_1*(1.) 빈 리스트 만들기\n\n대괄호 `[]` 사이에 아무것도 넣어주지 않으면 아무런 항목이 없는, 즉 비어있는 리스트를 만든다는 뜻입니다.\n\n#### *a_2*(2.) 추가 반복하기 \n\n`students` 리스트에 계속해서 항목을 추가하고 있습니다. `i`는 `0`에서부터 시작하여 `10` 미만까지 `1`씩 증감하며 총 10번 반복합니다. 각각의 `input()`은 `students` 리스트에서 전부 기억되고 있습니다.\n\n#### *a_3*(3.) 덧셈 누적하기\n\n마찬가지로 `i`는 `0 ~ 9`동안 반복되며 리스트 내 항목의 값을 읽어오고 있습니다. `scoreAll` 변수에 덧셈이 누적되고 있습니다.\n\n#### *a_4*(4.) 그대로 출력하기\n\n`print` 함수를 이용하여 그대로 출력하고 있습니다. 별다른 반복문을 쓰지 않았는데도 `print`는 알아서 리스트 내부의 모든 항목을 **예쁘게** 출력하고 있습니다. 조금 있다가 다시 설명합니다.\n\n#### *a_5*(5.) 평균 출력하기\n\n`scoreAll` 변수를 이용해서 평균을 구하여 출력합니다.\n\n#### *a_6*(6.) 최댓값 출력하기\n\n`max` 함수는 쉼표로 여러가지 항목들을 넣어줄 수 있지만, 딸랑 리스트 하나만 넣어줄 수도 있습니다. 그렇게 하게 되면 `max` 함수는 알아서 리스트 내부의 모든 항목을 읽어서 최댓값을 구합니다. 조금 있다가 다시 설명합니다.\n\n#### *a_7*(7.) 최솟값 출력하기\n\n`min` 함수또한 `max`와 동일하게 작동하지만 한 가지 차이점은 최솟값을 구한다는 점입니다.\n\n\u002d\u002d-\n\n### `print`가 리스트를 다루는 방법\n\n`print` 함수에 리스트를 넣어주었을 때 아무런 오류 없이 잘 작동하는 것을 확인하실 수 있습니다. 사실, 당연하게 느껴집니다. 왜냐하면 `print`는 이때까지 아무거나 넣어도 잘 작동하기 때문입니다. 하지만 `print`도 나름의 동작 방식이 있습니다. 리스트를 보여주는 방식이 왜 하필 대괄호와 쉼표를 써서 `[4, 2, 7, 4, 39, 5, 28, 73, 49, 1]` 가 되는 것일까요? 중괄호를 이용하고 내부 개수가 너무 많으면 ...으로 표시해서 `{4,2,7,...}` 뭐, 이렇게 할 수도 있고, 아니면 항목의 개수만 짤막하게 출력해줄 수도 있을 텐데, 왜 하필? 이는 `print`가 어떤 식으로 동작하는지 알면 조금 더 이해할 수 있습니다.\n\n```mermaid-execute\ngraph TD  \nsubgraph 리스트의 기능  \nr1(리스트를 예쁘게\u003cbr/\u003e보여주는 법)  \nr2(리스트의 항목에\u003cbr/\u003e접근하는 법)  \nr3(리스트의 항목을\u003cbr/\u003e추가/삭제하는 법)  \nr4(기타 등등)  \nr1 -.- r2\nr2 -.- r3\nr3 -.- r4\nr4 -.- r1\nend  \na1[\u0022print(students)를 만난다\u0022]  \na1 \u002d\u002d\u003e a2[students의 타입을 찾아본다 \u003cbr/\u003e... 리스트이다!]  \na2 \u002d\u002d\u003e a3{\u0022리스트의 기능 중\u003cbr/\u003e 예쁘게 보여주는\u003cbr/\u003e 방법이 있나?\u0022}  \nr1 -.- a3\na3 \u002d\u002d\u003e|있다!| a4[그 방법을 이용해 출력한다.]  \na3 \u002d\u002d\u003e|없다| a5[날 것의 데이터로 출력하거나\u003cbr/\u003e에러를 일으킨다.]  \nclass r1,a1,a2,a3,a4 em\n```\n*`print(students)`가 동작하는 과정*\n\n중요한 점은, 우리가 `리스트를 예쁘게 보여주는 법`이 어떤 식으로 구현되어 있는지도 모르고, 심지어 어떻게 쓰는지도 알 필요가 없다는 점입니다. 이 비기를 이용하는 주체는 손가락으로 열심히 영단어를 타이핑치는 우리가 아니라 바로 `print`입니다. `print`가 알아서 A부터 Z까지 다 해주므로 우리는 `print`를 쓰는 방법만 제대로 익히면 됩니다.\n\n그렇다면 `print`를 쓰는 방법만 알면 될 것이지, 왜 `print`가 내부적으로 어떻게 돌아가는지까지 학습하냐구요? 왜냐하면 `print(123)`, `print([1, 2, 3])`, `print(student)` 등의 다양한 변수를 넣어도 어떻게 동작할 수 있는지에 대해 이해하기 위함입니다. `print`와 같이 다양한 쓰임새가 있는 함수는 한두 개가 아니며, 심지어는 다음 시간에서 배울 핵심 문법인 `for` 반복문에서도 비슷한 형식으로 작동합니다.\n\n\u002d\u002d-\n\n### `max`와 `min` 함수\n\n사실 `max` 함수는 이번 시간에 처음 등장합니다. `max` 함수란 소괄호 `()` 내에 쉼표 `,`로 구분된 값들을 비교해서 가장 큰 값을 반환하는 함수입니다. `min`도 동일하게 동작합니다. 다음 예제를 간단히 봅시다.\n\n```python\nprint(max(6, 1, 2, 4))\nprint(min(6, 1, 2, 4))\n```\n```plaintext\n6\n1\n```\n\n하지만 `max`는 상황에 따라 리스트 하나만 값으로 집어넣을 수 있습니다. 그렇게 되면 `max`는 이 하나의 값이 리스트인지 우선 검사하고, 리스트가 지니고 있는 변수들의 값을 가져올 수 있는지 다시 검사를 한 후에, 리스트의 변수들 간 비교작업을 시작합니다. 간단히 순서도로 그리면 아래와 같습니다.\n\n```mermaid-execute\ngraph TD  \nsubgraph 리스트의 기능  \nr1(리스트를 예쁘게\u003cbr/\u003e보여주는 법)\nr2(리스트의 항목에\u003cbr/\u003e접근하는 법)\nr3(리스트의 항목을\u003cbr/\u003e추가/삭제하는 법)\nr4(기타 등등)\nr1 -.- r2\nr2 -.- r3\nr3 -.- r4\nr4 -.- r1\nend  \na1[\u0022max(students)\u003cbr/\u003e를 만난다\u0022]  \na1 \u002d\u002d\u003e a2{\u0022max로 들어오는\u003cbr/\u003e값이 몇 개인가?\u0022}\na2 \u002d\u002d\u003e |여러 개이다| a3[\u0022이 값들 중 \u003cbr/\u003e최댓값을 계산해본다.\u0022]\na2 \u002d\u002d\u003e |하나이다| a4[\u0022이 값(students)의\u003cbr/\u003e타입을 찾아본다\u003cbr/\u003e ... 리스트이다!\u0022]\na4 \u002d\u002d\u003e a5{\u0022리스트의 기능 중\u003cbr/\u003e항목에 접근하는\u003cbr/\u003e방법이 있나?\u0022}\na5 -.- r2\na5 \u002d\u002d\u003e |있다| a7[\u0022모든 항목에\u003cbr/\u003e접근하여 최댓값을\u003cbr/\u003e계산한다\u0022]\na5 \u002d\u002d\u003e |없다| a6[\u0022알아서 처리되거나\u003cbr/\u003e에러를 일으킨다.\u0022]\nclass a1,a2,a4,a5,a7,r2 em\n\n```\n*`max(students)`가 동작하는 과정* \n\n\n\u002d\u002d-\n\n## 중간 정리\n\n변수에 대해서는 우리가 다음과 같이 정리를 했습니다.\n\n- **변수를 구성하는 것은 데이터(값), 이름이다.**\n- **변수의 데이터(값)은 메모리 어딘가에 저장되어 있다.**\n- **변수의 이름으로 메모리 주소와 데이터 다루는 법을 알 수 있다.**\n- **변수의 데이터에 타입 정보가 포함되어 있다.**\n- **변수는 하나의 데이터만 가리킬 수 있다.**\n\n변수의 정리에 따라서 리스트의 특징을 다음과 같이 정리하겠습니다.\n\n- **리스트는 변수의 이름을 가지는 변수이다. (리스트의 데이터에는 변수의 이름들이 들어가 있다.)**\n- **리스트 내 항목의 데이터는 리스트 외부에 있다.**\n- 리스트는 **비슷한 용도나 목적이 있는 변수가 다수 있는 상황**에 적합하다.\n\n리스트의 기본적인 사용법은 다음과 같습니다.\n\n- 빈 리스트는 `[]`로 만든다.\n- 내용이 있는 리스트는 `[1, 2, 3]`과 같이 만든다.\n- 항목에 접근하려면 `변수명[숫자]`로 한다. 이 때, 숫자는 `0`부터 시작한다.\n\n그리고 타입으로서의 `list`는 다음과 같이 정리할 수 있습니다.\n\n- **저마다의 변수의 타입(종류)에는 저마다의 기능이 있다.**\n- **이 기능을 이용하려면 변수명 뒤에 `.`을 붙여 이용한다. (예: `student.append(~~~~)`)**\n- **다른 타입의 기능은 이용할 수 없다. (`int`가 `list`의 기능을 이용할 수 없다.)**\n- **`print`, `max`, `min`같은 함수는 `list`의 기능을 활용할 줄 안다.**\n\n... 그리고, 리스트의 기능 중 다음의 기능이 대충 존재한다는 것만 알게 되었습니다.\n\n- 리스트의 항목을 추가하는 법 (`student.append(~~~~)`)\n- 리스트를 예쁘게 보여주는 법 (`print`가 활용)\n- 리스트의 항목에 접근하는 법 (`max`, `min`이 활용)\n\n아래에서는 리스트의 각종 기능과 사용법을 추가로 학습합니다.\n\n\u003e ### 항목? 요소?\n\u003e \n\u003e 리스트와 같은 나열된 자료구조에서 그 내부에 존재하는 것을 지칭하는 말을 지금껏 `항목`이라고 표기했습니다. 하지만 이 또한 여러 단어가 있습니다. 한국어로는 `항목`, `요소`라 칭하고 영어에서는 대부분 `item`이라고 하지만 간혹 `element`라고도 부릅니다.\n\n\u002d\u002d-\n\n## `in` 연산자\n\n파이썬 공식 문서에서는 멤버십 검사 연산자라고 소개하고 있습니다.\n\n`in` 연산자는 왼쪽에 있는 항목이 오른쪽에 포함되어 있는지를 검사합니다. 만약 포함되어 있다면 `True`를 반환하고, 그렇지 않다면 `False`를 반환합니다. 예제를 봅시다.\n\n```python\nprint(1 in [1, 2, 3])\nprint(\u0022안녕\u0022 in [\u0022하이\u0022, \u0022안녕하세요\u0022, \u0022철수야 안녕?\u0022])\n```\n```plaintext\nTrue\nFalse\n```\n\n`in`의 결과를 반대로 하고 싶다면, 즉 포함되어 있지 않은지에 대해 검사하고 싶다면 `not in`이라고 작성해도 됩니다.\n\n\u002d\u002d-\n\n## 대괄호의 두 가지 사용법\n\n앞서 언급한 대로, 대괄호를 이용해 새로운 리스트를 만들기도 하며, 이미 존재하는 리스트의 항목에 접근할 수도 있습니다. 하지만 아무래도 같은 대괄호를 사용하다 보니 이 두 개 간에 혼동이 올 수 있습니다. 예시를 통해서 한번 더 짚고 넘어가도록 하겠습니다.\n\n### 리스트를 직접 만들기\n\n리스트는 대괄호 안에 항목을 나열하여 직접 만들 수 있습니다. 항목을 구분할 때는 쉼표(`,`)를 이용하면 됩니다. 리스트 안에는 어떠한 타입의 값이 와도 상관 없습니다. \n \n```python\nstuff = [1, \u0022안녕\u0022, 2, 3, ['this is another list!', 'wow~!']]\nprint(stuff)\n```\n```plaintext\n[1, \u0022안녕\u0022, 2, 3, ['this is another list!', 'wow~!']]\n```\n\n위 예제를 잘 보시면 리스트 안에 리스트가 들어갈 수 있음을 확인할 수 있습니다. 그림으로 정리하면 다음과 같이 될 것입니다.\n\n![stuff의 구조도](elvanov/wp-content/uploads/2020/01/python3.svg)\n*stuff의 구조도*\n\n\u002d\u002d-\n\n### 리스트 항목에 접근하기\n\n예시를 바로 보면서 이야기합시다.\n\n```python\nnumbers = [1, 3, 6, 4, 13, 25]\nprint(numbers[3])\nprint(numbers[3] + numbers[5])\nprint(numbers[-2])\nprint(numbers[10]) # 에러입니다.\n```\n```plaintext\n4\n29\n13\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 5, in \u003cmodule\u003e\n    print(numbers[10])\nIndexError: list index out of range\n```\n\n항목에 접근할 때에는 `numbers[3]`과 같이 변수와 대괄호를 함께 쓰면 됩니다. 안에는 **정수** 하나만 들어갑니다. 내부의 `3`이란 뜻은 **4번째** 의 항목을 가지고 오라는 뜻입니다. 중요한 지점입니다. 첫번째 항목을 가지고 오려면 `numbers[0]`와 같이 써야 하고, 두번째는 `numbers[1]`입니다.\n\n대괄호 안에 있는 수, 즉 리스트의 항목에 접근할 때 쓰는 수를 일반적으로 **인덱스(index)** 라고 이야기합니다.\n\n대괄호 안에 음수를 넣어줄 수도 있습니다. 이는 끝에서 몇 번째의 항목을 가지고 오라는 뜻입니다. 즉 `-2`라면 뒤에서 두 번째를 뽑아내겠다는 뜻이죠. 그래서 `13`이 뽑혔습니다. 대괄호로 만약 잘못된 접근을 한다면 위 결과와 같이 `IndexError`가 발생합니다. 리스트 내 항목이 최소한 `11`개가 되어야 `numbers[10]`이 작동하는데, 그 보다는 한참 모자르니까요.\n\n\u002d\u002d-\n\n대괄호(`[]`)의 두 가지 용법을 어떻게 확실하게 구분할까요? 바로 대괄호 바로 앞에 변수명이 붙어있나 없나로 구분합니다. 변수가 따라온다면 \u0022**리스트의 항목에 접근해!**\u0022라는 뜻이고 변수 없이 휑하니 대괄호만 있다면 \u0022**새로운 리스트를 만들어!**\u0022라는 뜻입니다.\n\n한번 다음 코드가 어떻게 작동할지 상상해보세요.\n\n```python\nprint([1, 4, 7, 10, 13, 16][4])\n```\n```plaintext\n13\n```\n\n\u002d\u002d-\n\n## 리스트를 다루는 편의 함수들\n\n리스트를 다루는 함수는 앞서 살펴 본 `max`, `min` 외에 다양한 함수가 있습니다.\n\n\u002d\u002d-\n\n### sum\n- 사용법 : `sum(list)`\n- 설명 : 리스트 내 모든 항목을 더합니다. 숫자형만 작동합니다.\n\n### max\n- 사용법 : `max(list)`\n- 설명 : 리스트 내 항목의 최대값을 구합니다. 숫자형만 작동합니다.\n\n### min\n- 사용법 : `min(list)`\n- 설명 : 리스트 내 항목의 최소값을 구합니다. 숫자형만 작동합니다.\n\n### len\n- 사용법 : `len(list)`\n- 설명 : 리스트 내 항목의 개수를 구합니다.\n\n### 예제\n\n```python\nnumbers = [3, 6, 2, 9, 4]\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\nprint(len(numbers))\n```\n```plaintext\n2\n9\n24\n5\n```\n\n\u002d\u002d-\n\n### 그 외\n\n`any`, `all` 등의 리스트 내 항목을 검사하는 함수도 있지만 좀 더 고급 용법이므로 다음 시간에 알아봅시다. (추가 예정)\n\n\u002d\u002d-\n\n## 리스트의 편의 기능들\n\n좀 더 정확한 설명은 파이썬 공식 문서를 참조해주세요.\n\n[https://docs.python.org/ko/3/tutorial/datastructures.html#more-on-lists](https://docs.python.org/ko/3/tutorial/datastructures.html#more-on-lists)\n\n\u002d\u002d-\n\n### append\n- 사용법 : `list.append(x)`\n- 설명 : 리스트의 끝에 항목 `x`을 더합니다.\n- 예시\n```python\npeople = ['철수', '영미']\npeople.append('영철')\nprint(people)\n```\n- 결과\n```plaintext\n['철수', '영미', '영철']\n```\n\n\u002d\u002d-\n\n### extend\n- 사용법 : `list.extend(x)`\n- 설명 : 리스트의 끝에 리스트 `x`를 덧붙여 확장합니다. (리스트와 비슷한 것도 전부 됩니다.)\n- 예시\n```python\npeople = ['철수', '영미']\npeople.append(['영철', '수영'])\nprint(people)\n```\n- 결과\n```plaintext\n['철수', '영미', '영철', '수영']\n```\n\n\u002d\u002d-\n\n### insert\n\n- 사용법 : `list.insert(i, x)`\n- 설명 : 리스트의 인덱스 `i`로 항목 `x`을 삽입합니다. 기존에 있던 항목과 그 뒤의 모든 항목은 한 칸씩 뒤로 밀려납니다.\n- 예시\n```python\npeople = ['철수', '영미']\npeople.insert(1, '영철')\nprint(people)\n```\n- 결과\n```plaintext\n['철수', '영철', '영미']\n```\n\n\u002d\u002d-\n\n### remove\n \n- 사용법 : `list.remove(x)`\n- 설명 : 리스트에서 값이 `x`와 같은 첫 번째 항목을 삭제합니다. 그런 항목이 없으면 에러를 일으킵니다.\n- 예시\n```python\npeople = ['철수', '영미']\npeople.remove('철수')\nprint(people)\n```\n- 결과\n```plaintext\n['영미']\n```\n\n\u002d\u002d-\n\n### pop\n \n- 사용법 : `list.pop(i)` 또는 `list.pop()`\n- 설명 : 리스트에서 인덱스 i에 있는 항목을 삭제하고 그 항목을 반환합니다. i를 지정하지 않으면 리스트의 마지막 항목을 삭제하고 그 항목을 반환합니다.\n- 예시\n```python\npeople = ['철수', '영미', '영환']\nprint(people.pop(0))\nprint(people.pop())\nprint(people)\n```\n- 결과\n```plaintext\n철수\n영환\n['영미']\n```\n\n\u002d\u002d-\n\n### clear\n\n- 사용법 : `list.clear()`\n- 설명 : 리스트 내의 모든 항목을 삭제합니다.\n- 예시\n```python\npeople = ['철수', '영미', '영환']\npeople.clear()\nprint(people)\n```\n- 결과\n```plaintext\n[]\n```\n\n\u002d\u002d-\n\n### index\n\n- 사용법 : `list.index(x)`\n- 설명 : 리스트에 있는 항목 중 값이 `x`와 같은 것의 인덱스를 반환합니다. 리스트 내 `x`가 여러 개이면 첫번째 항목의 인덱스를 반환하고, `x`가 없으면 에러입니다.\n- 예시\n```python\npeople = ['철수', '영미', '영환']\ni = people.index('영미')\nprint(i)\n```\n- 결과\n```plaintext\n1\n```\n\n\u002d\u002d-\n\n### count\n\n- 사용법 : `list.count(x)`\n- 설명 : 리스트에서 x가 등장하는 횟수를 반환합니다.\n- 예시\n```python\nnumbers = [1,5,2,2,5,8,3,2,3,1]\nc = numbers.count(2)\nprint(c)\n```\n- 결과\n```plaintext\n3\n```\n\n\u002d\u002d-\n\n\n### sort\n\n- 사용법 : `list.sort()` 또는 `list.sort(reverse=True)`\n- 설명 : 리스트를 정렬합니다. 기본으로는 오름차순 정렬이지만 `reverse=True`를 넣게 되면 내림차순으로 정렬됩니다. 정렬과 관련된 고급 기능은 다음 번에 다시 알아보도록 합시다.\n- 예시\n```python\nnumbers = [1,5,2,2,5,8,3,2,3,1]\nnumbers.sort()\nprint(numbers)\nnumbers.sort(reverse=True)\nprint(numbers)\n```\n- 결과\n```plaintext\n[1, 1, 2, 2, 2, 3, 3, 5, 5, 8]\n[8, 5, 5, 3, 3, 2, 2, 2, 1, 1]\n```\n\n\u002d\u002d-\n\n### reverse\n\n- 사용법 : `list.reverse()`\n- 설명 : 리스트 항목들의 순서를 뒤바꿉니다.\n- 예시\n```python\npeople = ['똥개', '영순', '돌쇠', '사슴']\npeople.reverse()\nprint(people)\n```\n- 결과\n```plaintext\n['사슴', '돌쇠', '영순', '똥개']\n```\n\n\u002d\u002d-\n\n### copy\n\n- 사용법 : `list.copy()`\n- 설명 : 리스트의 사본을 반환합니다. 리스트를 다룰 때 단순히 대입하게 되면 **같은 리스트에 이름이 두 개가 됩니다. 그래서 별도의 리스트를 만들려면 복사를 해야 합니다.** 이는 [클래스와 객체](182)를 배운 후 정체성(추가 예정)에서 자세히 다룰 예정입니다. \n- 예시\n```python\nnumbers1 = [1,3,2,4]\nnumbers2 = numbers1\nnumbers2.pop() ##b_1## number1에도 영향을 줍니다.\nprint('numbers1:', numbers1)\nprint('numbers2:', numbers2)\nnumbers2 = numbers1.copy() ##b_2## 이제 number1과 number2는 완전히 별도입니다.\nnumbers2.append(10)\nprint('numbers1:', numbers1)\nprint('numbers2:', numbers2)\n```\n- 결과\n```plaintext\nnumbers1: [1, 3, 2]\nnumbers2: [1, 3, 2]\nnumbers1: [1, 3, 2]\nnumbers2: [1, 3, 2, 10]\n```\n\n\u002d\u002d-\n\n#### *b_1*(1.) `copy` 이전\n\n![`number1`과 `number2`의 `copy` 이전 구조도](elvanov/wp-content/uploads/2020/01/python4.svg)\n*`number1`과 `number2`의 `copy` 이전 구조도*\n\n#### *b_2*(2.) `copy` 이후\n\n![`number1`과 `number2`의 `copy` 이후 구조도](elvanov/wp-content/uploads/2020/01/python5.svg)\n*`number1`과 `number2`의 `copy` 이후 구조도*\n\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 빈 리스트를 어떻게 만드는가?\n- 리스트의 길이를 구하는 함수는 무엇인가?\n- 숫자 세 개 들어있는 리스트를 어떻게 만드는가?\n- 변수의 타입 정보는 어디에 포함되어 있는가?\n- 리스트에서 항목을 어떻게 추가할 수 있는가? (한 가지만)\n- `print([1,3,2])`로 출력하면 결과는 무엇인가?\n- 리스트는 무엇을 가지는 변수인가?\n- 리스트는 어떤 상황에 적합한가?\n- 변수를 구성하는 것 크게 두 가지는 무엇인가?\n- `int` 변수가 `list`의 기능을 사용할 수 있는가?\n- 리스트 내 모든 항목을 더하는 함수는 무엇인가?\n- 변수의 데이터는 어디에 저장되어 있는가?\n- `list` 변수를 `print`하고자 할 때 `print`는 `list`의 기능을 활용하는가?\n- 어떤 값이 리스트의 항목으로 포함되어 있는지 알 수 있는 방법은 무엇인가? \n- 변수는 몇 개의 데이터를 가리킬 수 있는가?\n- 리스트의 항목에 접근하려면 어떻게 해야 하는가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n1. 총 개수인 `n`을 먼저 입력받고, `n`의 수만큼 숫자를 입력받아 리스트에 저장시킨다. 입력을 마친 후 리스트를 출력하라.\n\n   - 예시입력  \n   4  \n   2  \n   3  \n   1  \n   5  \n\n   - 예시 출력  \n   [2, 3, 1, 5]\n  \n1. 5개의 숫자를 입력받는다. 입력받은 숫자들에서 홀수의 합과 짝수의 합을 구하고, 홀수의 합이 크다면 `홀수가 이겼습니다`라고 출력하고 짝수의 합이 크다면 `짝수가 이겼습니다`라고 출력하라.\n\n1. 총 개수인 `n`을 먼저 입력받고, `n`의 수만큼 숫자를 입력받아, 이 숫자들 중 두 번째로 큰 수를 출력하라. (힌트 : `sort`를 이용하면 다소 쉽게 풀 수 있다. `sort`를 이용하지 않고도 한번 도전해보자.)\n\n1. 5개의 문자열을 입력받는다. 입력받은 문자열 중 길이가 가장 긴 문자열을 출력하라. (힌트 : `len(a)` 하게 되면 문자열 `a`의 길이를 알 수 있다.)\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. 코드입니다.\n\n   ```python\n   count = int(input())\n   i = 0\n   nums = []\n   while i \u003c count:\n       nums.append(int(input()))\n       i += 1\n   print(nums)\n   ```\n\n1. 코드입니다.\n\n1. 코드입니다.\n\n1. 코드입니다.\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>학습 목표</h2>
<p>이번 시간에 배울 항목은 다음과 같습니다.</p>
<ul>
<li>변수의 자세한 동작 과정</li>
<li><code>list</code> 개념</li>
<li><code>print</code>, <code>max</code>, <code>min</code>과 <code>list</code>의 티키타카</li>
<li><code>list</code>의 각종 기능</li>
</ul>
<h2>학생들 점수를 다루기</h2>
<h3>코딩의 어려움</h3>
<p>학생들 10명의 점수를 받고자 합니다. 그리고 이 점수들을 계속 프로그램 실행 중에 갖고 있으려고 합니다. 학생 하나하나의 점수는 중요하고, 여러가지 통계를 내는 데 점수를 계속 기억하고 있으면 좋으니까요.</p>
<p>다음은 <code>while</code>문을 통해서 평균<strong>만</strong> 구하는 프로그램입니다.</p>
<pre><code class="language-python">i = 0
scoreAll = 0
while i &lt; 10:
    scoreAll += int(input())
    i += 1
average = scoreAll / 10

print(average)
</code></pre>
<pre><code class="language-plaintext">2
3
4
5
6
1
2
3
4
5
3.5
</code></pre>
<p>변수 <code>i</code>는 오직 <code>while</code>의 루프 횟수를 조정하기 위한 변수입니다. <code>i = 0</code>으로 초기화를 해주었고 <code>i &lt; 10</code>일 때까지 동작하며 루프를 돌 때마다 <code>1</code>씩 증감해주고 있습니다. <code>i</code>는 <code>0</code>부터 <code>9</code>까지 변화하면서 루프는 총 10회 동작하게 되겠습니다.</p>
<p>우리의 의도대로 동작합니다. 하지만 점수 정보는 <code>scoreAll</code> 변수에 대입되고 사라집니다. 우리는 <code>input()</code>으로 입력받은 모든 값들을 기억하고 싶습니다. 그럼 10개의 변수를 써야만 하는 것일까요? 다음 예시를 봅시다.</p>
<pre><code class="language-python">student0 = int(input())
student1 = int(input())
student2 = int(input())
student3 = int(input())
student4 = int(input())
student5 = int(input())
student6 = int(input())
student7 = int(input())
student8 = int(input())
student9 = int(input())

scoreAll = (student0 + student1 + student2 + student3 + student4 + 
    student5 + student6 + student7 + student8 + student9)

average = scoreAll / 10 # 평균입니다.

maxScore = max(student0, student1, student2, student3, student4, 
    student5, student6, student7, student8, student9)

minScore = min(student0, student1, student2, student3, student4, 
    student5, student6, student7, student8, student9)

print(&quot;평균은&quot;, average, &quot;입니다.&quot;)
print(&quot;최대 점수는&quot;, maxScore, &quot;입니다.&quot;)
print(&quot;최소 점수는&quot;, minScore, &quot;입니다.&quot;)
</code></pre>
<pre><code class="language-plaintext">3
5
4
6
10
40
20
70
30
48
평균은 23.6 입니다.
최대 점수는 70 입니다.
최소 점수는 3 입니다.
</code></pre>
<blockquote>
<p>파이썬에서는 마음대로 줄을 바꾸거나 들여쓰기를 하면 안 됩니다. 그런 것도 하나의 엄연한 문법이기 때문이지요. 하지만 한 줄에 너무 긴 코드가 들어갈 경우에는 가독성을 헤치는 문제가 발생합니다. 이러한 상황을 극복하기 위해 파이썬에서는 <strong>소괄호로 묶는다면 줄을 바꿔도 된다는 규칙</strong> 이 있습니다. 위 예제에서는 <code>student0</code> 부터 <code>student9</code> 까지 더하는 데 소괄호로 묶어서 줄을 바꿨습니다.</p>
</blockquote>
<blockquote>
<p><code>print</code>는 쉼표(<code>,</code>)를 이용해 여러 항목을 넣을 수 있습니다.</p>
</blockquote>
<p><code>max</code>와 <code>min</code>은 아래에서 다시 설명하도록 하겠습니다. 우선은 쉼표로 구분된 항목들 중 최댓값과 최솟값을 구하는 함수라고 이해하시면 되겠습니다.</p>
<hr>
<p>뭔가 문제가 보이시나요? 독립적인 변수를 <code>student0</code>부터 <code>student9</code>까지 만들어 각각 값을 할당하고 있습니다. 이런 상황이 되었을 때 우리는 다음과 같은 문제점을 봉착하게 됩니다.</p>
<ul>
<li>코드의 중복이 늘어납니다. <code>int(input())</code>가 10번 반복되고 있습니다. 학생들이 늘어날 때마다 <code>int(input())</code>을 한 번 더 써주어야 할 것입니다. 코드가 계속해서 중복되면 처리가 힘들어집니다.</li>
<li>한번에 처리하기가 힘듭니다. 학생들의 합계를 구하려면 <code>student0</code>부터 <code>student9</code>까지 일일히 더해야 합니다. 최댓값과 최소값을 구하는 <code>max</code>, <code>min</code> 함수를 이용할 때에도 마찬가지입니다. 학생들이 늘어날 때마다 쉼표와 변수명을 더 추가해서 적어주어야겠죠.</li>
</ul>
<p>그래서 우리는 어떤 비슷한 목적을 가진 변수들을 한데 모아 손쉽게 관리해줄 수 있는 무언가가 있으면 참 좋겠다고 생각이 듭니다. 그렇다면 코드를 중복해서 쓰지 않아도 되고, 한번에 처리하기 쉬워질 텐데요.</p>
<p>이 때 등장하는 혜성은 바로 <strong><code>list</code></strong> 입니다. 리스트는 여러가지 값을 가지고 있는 변수입니다. 무슨 말인지 이해가 잘 안되시죠? 일단 변수의 본질을 다소 파헤쳐보고, 리스트의 기본적인 사용법을 익힌 후 위 예제를 수정해봅시다.</p>
<hr>
<h3>리스트의 초초 기본 사용법</h3>
<pre><code class="language-python">scoreList = [1, 2, 3]
print(scoreList)
</code></pre>
<pre><code class="language-plaintext">[1, 2, 3]
</code></pre>
<p><code>scoreList</code>는 우리가 평소처럼 변수를 사용하는 것처럼 이름을 정했습니다. 그리고 대입문의 오른쪽에는 <code>[1, 2, 3]</code>이 등장했네요. 여기서 대괄호 <code>[]</code>의 뜻은 리스트를 새롭게 만들겠다는 뜻이고, <code>1, 2, 3</code>은 이 리스트가 가지고 있을 변수를 지정해준다는 뜻입니다.</p>
<hr>
<p>우리가 이전에 변수의 종류에서 <code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code> 등을 배웠었지요, <code>list</code>도 동일선상의 개념입니다. 리스트 또한 다른 변수와 마찬가지로 대입을 통해 값을 변경할 수 있습니다.</p>
<pre><code class="language-python">a = [1, 2, 3]
print(a)
a = [&quot;abc&quot;, &quot;cde&quot;, &quot;efg&quot;]
print(a)
</code></pre>
<pre><code class="language-plaintext">[1, 2, 3]
['abc', 'cde', 'efg']
</code></pre>
<hr>
<p>리스트는 대괄호를 이용해서 항목 하나하나에 접근할 수 있습니다. 변수명을 먼저 쓰고 그 직후에 <code>[숫자]</code>를 적으면 됩니다. <code>0</code>이 첫 번째 항목이고, <code>1</code>이 두 번째 항목입니다. 예제를 보겠습니다.</p>
<pre><code class="language-python">a = [1, 2, 3]
print(a[0])
print(a[1])
</code></pre>
<pre><code class="language-plaintext">1
2
</code></pre>
<hr>
<p>리스트 내부에는 여러 개의 값을 가질 수 있습니다. 하지만 이는 예전에 배운 개념과 다소 혼동됩니다. 변수 하나는 하나의 값을 가질 수 있던 게 아닌가요? 어떻게 변수 하나가 여러 개의 값을 가질 수 있는 것일까요? 이는 변수의 동작 방식을 조금 더 파헤쳐야 비로소 이해할 수 있습니다.</p>
<hr>
<h2>변수에 대한 통찰</h2>
<h3>변수의 본질</h3>
<p>변수의 본질을 더 자세히 살펴봅시다.</p>
<p>아주 초기에 <a href="120">컴퓨터</a>에 대한 공부를 할 때 메모리의 존재에 대해 기억하시나요? 메모리는 프로그램이 실행되는 동안의 모든 정보가 저장되는 곳입니다. 변수 또한 계속해서 메모리에 새롭게 생성되고 삭제됩니다. 메모리를 거대한 창고라고 상상하세요. 파이썬 인터프리터가 거대한 메모리라는 창고에서 변수로 값을 찾는 과정은 다음과 같습니다.</p>
<table>
<thead>
<tr>
<th>파이썬 인터프리터의 동작</th>
<th>실생활의 예시</th>
</tr>
</thead>
<tbody>
<tr>
<td>변수명을 읽는다.</td>
<td>물건의 이름을 인식한다.</td>
</tr>
<tr>
<td>변수의 종류(타입)을 파악한다.</td>
<td>물건의 종류, 크기 등을 파악한다.</td>
</tr>
<tr>
<td>변수명에 대응되는 메모리의 주소를 얻는다. (예: 1219942213)</td>
<td>재고표에서 물건의 위치를 파악한다. (예: F구역 왼쪽 선반의 3번째)</td>
</tr>
<tr>
<td>해당 주소에서 값을 종류(타입)에 맞게 추출한다.</td>
<td>해당 위치로 가서 물건을 찾는다. (물건이 크다면 카트트로 물건을 빼온다.)</td>
</tr>
</tbody>
</table>
<p>여기서의 핵심은 <strong>실제 데이터(값), 변수의 이름(name), 변수의 타입(type)</strong>, 이 세 가지를 구분해서 생각할 수 있다는 점입니다. 실제 데이터는 <code>0</code>과 <code>1</code>의 조합으로 메모리에 저장되어 있습니다. 이 데이터를 어떻게 조작할 지가 관건인데, 실생활의 예시에서처럼 일종의 재고표가 있어 파이썬 인터프리터는 변수 이름을 통해 메모리의 위치를 즉각적으로 알 수 있고, 변수의 타입으로 메모리의 값을 어떻게 얼마나 읽고 쓸지 알 수 있습니다.</p>
<p>이제부터 강좌 통틀어서 처음으로 다이어그램이 등장하는데요, 변수는 다음과 같이 표현하도록 하겠습니다. 타입에 관한 정보는 따로 표시하지 않습니다.</p>
<pre><code class="language-python">a = 5
b = '안녕'
</code></pre>
<p><img src="elvanov/wp-content/uploads/2020/01/python6.svg" alt="이름과 데이터의 구분 다이어그램">
<em>이름과 데이터의 구분</em></p>
<hr>
<h3>실생활과 컴퓨터의 차이점</h3>
<p>실생활의 창고에서 물건을 찾을 때에는 사실 위치정보를 대충 알아도 됩니다. 왜냐하면 물건끼리 구분이 어느정도 되어있기 때문입니다. 나사 하나를 찾아본다고 상상해보세요. 물리적으로 하나하나 분리되어 있기 때문에 대략적으로 어디에 있는지만 알고, 그 위치로 가서 눈대중으로 대충 물건의 크기를 파악해서 손으로 가져올 수 있습니다.</p>
<p>하지만 메모리에 저장된 데이터는 어디까지가 유의미하고 무의미한지, 그 데이터를 직접 보기만 해서는 답을 내릴 수 없습니다. <code>0000000000000000</code>을 보더라도 이게 숫자 0을 의미하는 건지, 문자열 <code>'0'</code>을 의미하는 건지, 심지어 실제 데이터가 어디서부터 시작하는 건지, 혹은 그냥 아무런 의미없는 공간인건지조차 판단이 불가능합니다. 그 때문에 재고표에 위치(변수의 이름과 메모리 주소)를 똑바로 작성하고 물건의 종류(변수의 타입)까지 미리 파악해야 함은 선택사항이 아니라 필수사항입니다.</p>
<p>실생활보다 다소 좋은 점은, 컴퓨터는 메모리의 주소만 안다면 즉시 그 곳으로 순간이동하여 값이 무엇인지 알 수 있다는 점입니다. 주소가 적인 포스트잇을 들고 길찾기 어플을 켜서 직접 발걸음을 옮겨 찾아나서야 하는 우리랑은 효율의 차원이 다르지요.</p>
<hr>
<h3>더 자세히는 알 필요 없다</h3>
<p>축복받은 점은, 메모리와 관련된 작업은 파이썬에서는 자동으로 이루어진다는 점입니다. 컴퓨터공학의 달인들이 오랜 세월 갈고 닦은 정수를 이미 파이썬에 녹였습니다. 다음과 같은 과정은 파이썬 인터프리터가 자동으로 처리하므로 우리가 전혀 신경쓸 필요가 없는 것들입니다.</p>
<ul>
<li>변수가 새로 생성될 때 사용 가능한 (비어 있는) 메모리의 구역을 확보하기</li>
<li>올바른 방식으로 데이터를 메모리에서 읽고 쓰기</li>
<li>쓸모 없어진 변수를 판단하여, 다른 변수도 사용할 수 있도록 그 메모리에 해당하는 데이터를 삭제하기</li>
</ul>
<p>우리는 단지 우리가 배운 대로 변수를 생성해서 우리 입맛대로 사용하기만 하면 됩니다. 그렇다면 이같은 과정이 있다는 것을 왜 학습하는 것일까요? 왜냐하면 변수가 어떻게 작동하는지 알아야 변수를 자유자재로 사용할 수 있기 때문입니다. <code>if</code>를 이용한 조건문은 데이터를 비교연산자로 이용하여 단순히 <code>True</code>와 <code>False</code>로 나누었지만, <code>while</code> 반복문만 하여도 우리가 루프를 제어하기 위해 별도의 변수를 곧장 만들곤 했습니다. 앞으로 배울 <code>for</code>를 비롯한 각종 문법은 변수에 대한 개념이 확실히 잡혀있어야 이해할 수 있습니다.</p>
<hr>
<h3>변수의 낯을 드러내다</h3>
<p>묻고 따지지 말고 다음 코드를 복사하여 실행시켜보세요. 변수의 실제 주소, 크기, 실제 데이터를 출력하는 코드입니다.</p>
<pre><code class="language-python">from ctypes import string_at
from sys import getsizeof
from binascii import hexlify

def print_raw(a):
    print(a, &quot;\t:&lt;memory at &quot;, id(a), &quot; (&quot;, getsizeof(a), &quot;)&gt;\t&quot;,
          hexlify(string_at(id(a), getsizeof(a))), sep=&quot;&quot;)

p = 52
print_raw(p)
p = '안녕하십니까? 저는 김철수라고 합니다. 만나서 반갑습니다~!'
print_raw(p)
</code></pre>
<p><code>52</code>라는 값을 가지고 있는 <code>int</code>형 변수를 한번 분석해보았더니 다음과 같은 결과가 나왔습니다.</p>
<ul>
<li>메모리 주소 : <code>140723826314496</code></li>
<li>차지하는 공간 : 28 bytes</li>
<li>실제 데이터 : <code>0600000000000000103daad1fc7f0000010000000000000034000000</code></li>
</ul>
<p><code>안녕하십니까? 저는 김철수라고 합니다. 만나서 반갑습니다~!</code>라는 값을 가지고 있는 <code>str</code>형 변수를 분석해보았습니다.</p>
<ul>
<li>메모리 주소 : <code>2787455457728</code></li>
<li>차지하는 공간 : 140 bytes</li>
<li>실제 데이터 : <code>0500000000000000f002100000(중략)cb5c2c8b2e4b27e0021000000</code></li>
</ul>
<p>이러한 예제를 보여주는 이유는 실제로 변수가 컴퓨터에서 어떻게 작동하는지를 엿보게 하기 위해서입니다. 당연하지만 변수마다 메모리 주소와 차지하는 공간, 내부에서 저장되는 데이터가 모두 다른 것을 확인할 수 있습니다. 완전히 동일한 변수일지라도, 컴퓨터마다 환경이 다르고 실행시점마다 메모리의 상황이 달라지니 메모리 주소의 값은 항상 바뀔 수 있습니다.</p>
<hr>
<h3>중간 정리</h3>
<p>앞서 이야기했을 때에는 <strong>실제 데이터(값), 변수의 이름(name), 변수의 타입(type)</strong> 세 가지를 확실히 나누어 언급했으나, 파이썬 인터프리터에서는 <strong>변수의 타입이 변수의 데이터에 포함될 수 있습니다.</strong> 그러므로 다음과 같이 더 콤팩트하게 정리할 수 있습니다.</p>
<ul>
<li><strong>변수를 구성하는 것은 데이터(값), 이름이다.</strong></li>
<li><strong>변수의 데이터(값)은 메모리 어딘가에 저장되어 있다.</strong></li>
<li><strong>변수의 이름으로 메모리 주소와 데이터 다루는 법을 알 수 있다.</strong></li>
</ul>
<p>이 세 가지가 꼭 이해가 되어야 할 텐데요... 하하</p>
<p>또 한가지 짚고 넘어갈 게 있습니다. 파이썬 인터프리터는 변수의 이름을 통해 데이터가 들어있는 메모리의 주소를 알 수 있다고 하였습니다. 표현하기 나름입니다만, 이를 <strong>변수는 데이터를 가리킨다.</strong> 라고 표현할 수 있습니다. 마치 변수를 집주소가 적혀있는 포스트잇으로 비유하는 표현이죠. 이를 이용하여 이전에 배웠던 다음 문장과 연관지어서 바꿀 수 있습니다.</p>
<ul>
<li>변경 전 : 변수는 하나의 값만 가질 수 있다.</li>
<li>변경 후 : <strong>변수는 하나의 데이터만 가리킬 수 있다.</strong></li>
</ul>
<blockquote>
<h3>이름이 없는 변수?</h3>
<p>만약 변수에 이름이 없는 상황이 있을까요? 바로 <code>print(10)</code>과 같은 상황입니다. <code>10</code>은 데이터로서만 존재할 뿐이며, 이름은 없습니다. 그래서 <code>10</code>은 <code>print</code>가 한 번 사용하고 버려집니다. <code>10</code>이라는 데이터는 메모리 어딘가에 존재하였겠지만, 거기에 다다를 이름이 없으니 파이썬 인터프리터는 결국 의미없다 판단하고 <code>10</code>을 지워버립니다. 한 마디로 정리할 수 있겠습니다. 이름이 없는 변수는 존재할 수는 있지만, 사라질 운명에 놓여있다구요.</p>
</blockquote>
<hr>
<h2>리스트는 변수의 이름을 가지고 있는 변수이다</h2>
<p>리스트는 지금껏 사용해 온 <code>int</code>나 <code>str</code>과 사뭇 다릅니다. 리스트는 어떤 값들에 대해서 특별한 이름을 부여한 후 리스트 그 자체의 데이터로서 그 이름들을 가지고 있습니다. 지금부터 머릿속으로 열심히 상상을 해봅시다. 리스트에서 이름과 데이터(값)을 구분해보자구요. 앞의 예제를 땡겨옵시다.</p>
<pre><code class="language-python">a = [1, 2, 3]
print(a[0])
print(a[1])
</code></pre>
<pre><code class="language-plaintext">1
2
</code></pre>
<p>자, 여기서 새로운 리스트를 만들어 대입하는 <code>a = [1, 2, 3]</code> 이 단계에서는 다음과 같은 일들이 벌어집니다.</p>
<ol>
<li>리스트 데이터를 생성합니다.</li>
<li>리스트의 0번째 항목이라는 이름으로, <code>1</code>이라는 값을 생성합니다.</li>
<li>리스트의 1번째 항목이라는 이름으로, <code>2</code>라는 값을 생성합니다.</li>
<li>리스트의 2번째 항목이라는 이름으로, <code>3</code>이라는 값을 생성합니다.</li>
<li>이 리스트의 이름을 <code>a</code>로 지정합니다.</li>
</ol>
<p>그림으로 정리하면 다음과 같습니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/python.svg" alt="리스트 관계도">
<em>리스트 관계도</em></p>
<p>위 그림과 같이 리스트 <code>a</code>의 데이터에는 다른 변수들의 이름밖에 없습니다. 그 이름은 내부적으로 <code>0</code>, <code>1</code>, <code>2</code>와 같이 순차적 및 자동으로 정해집니다. 그 각각의 이름에 대해서 데이터들은 리스트 외부에 있습니다. 중요한 지점은 우리가 <code>a</code>라는 이름을 통해 또 다른 변수의 이름에 접근할 수 있다는 것입니다. <code>a[0]</code>과 같이 적게 되면 <code>a</code> 리스트 내에 있는, <code>0</code>이라는 이름이 가리키는 실제 데이터를 가져오게 됩니다. 그리하여 <code>print(a[0])</code>을 했을 때 <code>1</code>이 출력되는 것입니다. 대괄호 안에는 또 다른 변수를 이용할 수 있으므로 다음과 같이 반복문을 돌리는 것도 가능하게 됩니다.</p>
<pre><code class="language-python">a = [5, 8, 14]
i = 0
while i &lt; 3:
    print(a[i])
    i += 1
</code></pre>
<pre><code class="language-plaintext">5
8
14
</code></pre>
<hr>
<h2>리스트의 기능</h2>
<p><code>list</code>는 다른 변수들의 이름을 지닐 수 있다는 특징 외에도 다양한 기능이 있습니다. 위에서 언급했던 기능만 사용할 수 있었다면 딱히 자주 사용될 이유가 없었겠죠. 기본적인 몇 가지를 먼저 말하자면 다음과 같습니다.</p>
<ul>
<li><code>list</code> 내의 항목을 언제든지 추가하고 삭제할 수 있습니다.</li>
<li><code>list</code> 내의 항목을 예쁘게 출력할 수 있습니다.</li>
<li><code>list</code> 내 모든 항목에 손쉽게 접근할 수 있습니다.</li>
</ul>
<p>또 어디서 이런 생뚱맞은 기능들이 등장한 겁니까? 왜 이렇게 새로운 기능이 쉴 새 없이 튀어나오냐 이 말입니다!! 네, 이러한 기능은 파이썬 설계자들이 아주 오래전부터 고심하여 만든 기능들입니다만, 천천히 알아봅시다.</p>
<h3>항목 추가하기</h3>
<p>우선 항목을 추가하는 기능은 <code>리스트명.append(추가할것)</code>으로 기능을 사용할 수 있습니다.</p>
<pre><code class="language-python">a = [3, 4, 7]
b = [5, 8, 10, 15]

print('a:', a, 'b:', b)
a.append(4)
b.append(2)
print('a:', a, 'b:', b)
</code></pre>
<pre><code class="language-plaintext">a: [3, 4, 7] b: [5, 8, 10, 15]
a: [3, 4, 7, 4] b: [5, 8, 10, 15, 2]
</code></pre>
<hr>
<p><code>append</code>라는 것이 처음 등장했는데, 이러한 기능은 도대체 어디에서 어떻게 작동하는 걸까요?</p>
<p><img src="elvanov/wp-content/uploads/2020/01/python2.svg" alt="리스트 기능 구조도">
<em>리스트 기능 구조도</em></p>
<p>이전에 변수의 타입은 변수의 데이터에 포함될 수 있다고 이야기한 것을 기억하시나요? 위 그림과 같이 데이터에는 타입이 어떻다고 이야기만 해주는 조그마한 정보가 끼여 있습니다. 파이썬 인터프리터는 그 정보를 따라가서, <code>list</code>가 사용할 수 있는 다양한 기능들이 모여있는 황금창고를 발견합니다. 아까 언급했듯이 이 황금창고는 파이썬 언어 설계자들이 미리 만들어놓았습니다. 우리는 언제든지 여기에 있는 기능을 꺼내쓸 수 있습니다. 바로 <code>.</code>를 통해서요.</p>
<p>여기서 새로운 사실을 또 알아갑시다. 바로 <strong>기능(<code>.</code>)은 타입에 따라 다르다</strong>는 점 입니다. 리스트는 리스트의 기능을 사용할 수 있으리라는 점은 당연합니다. 그렇지만 <code>int</code>나 <code>str</code>의 변수가 리스트의 기능을 사용할 수 있을까요? 아니오, 사용할 수 없습니다! 이 또한 당연해보일지 모르겠지만 중요한 점입니다. 다음의 두 예시는 에러가 일어납니다.</p>
<pre><code class="language-python">a = &quot;hi&quot;
a.append(&quot;ho&quot;)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 2, in &lt;module&gt;
    a.append(&quot;ho&quot;)
AttributeError: 'str' object has no attribute 'append'
</code></pre>
<hr>
<pre><code class="language-python">a = 3
a.append(6)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 2, in &lt;module&gt;
    a.append(6)
AttributeError: 'int' object has no attribute 'append'
</code></pre>
<hr>
<h3>예제 부수기</h3>
<p>자, 여기까지 배웠다면 이번 시간의 처음에 맞닥뜨렸던 학생 여러명의 점수를 한번 다루어봅시다. <strong>비슷한 용도나 목적이 있는 변수가 다수 있는</strong> 상황에는 리스트의 특성상 아주 효율적으로 코딩할 수 있습니다.</p>
<pre><code class="language-python">i = 0
scoreAll = 0
students = []  ##a_1##
while i &lt; 10:
    students.append(int(input()))  ##a_2##
    i += 1

i = 0
while i &lt; 10:
    scoreAll += students[i] ##a_3##
    i += 1

print(&quot;점수출력:&quot;, students) ##a_4##
print(&quot;평균:&quot;, scoreAll / 10) ##a_5##
print(&quot;최대:&quot;, max(students)) ##a_6##
print(&quot;최소:&quot;, min(students)) ##a_7##
</code></pre>
<pre><code class="language-plaintext">4
2
7
4
39
5
28
73
49
1
점수출력: [4, 2, 7, 4, 39, 5, 28, 73, 49, 1]
평균: 21.2
최대: 73
최소: 1
</code></pre>
<h4><em>a_1</em>(1.) 빈 리스트 만들기</h4>
<p>대괄호 <code>[]</code> 사이에 아무것도 넣어주지 않으면 아무런 항목이 없는, 즉 비어있는 리스트를 만든다는 뜻입니다.</p>
<h4><em>a_2</em>(2.) 추가 반복하기</h4>
<p><code>students</code> 리스트에 계속해서 항목을 추가하고 있습니다. <code>i</code>는 <code>0</code>에서부터 시작하여 <code>10</code> 미만까지 <code>1</code>씩 증감하며 총 10번 반복합니다. 각각의 <code>input()</code>은 <code>students</code> 리스트에서 전부 기억되고 있습니다.</p>
<h4><em>a_3</em>(3.) 덧셈 누적하기</h4>
<p>마찬가지로 <code>i</code>는 <code>0 ~ 9</code>동안 반복되며 리스트 내 항목의 값을 읽어오고 있습니다. <code>scoreAll</code> 변수에 덧셈이 누적되고 있습니다.</p>
<h4><em>a_4</em>(4.) 그대로 출력하기</h4>
<p><code>print</code> 함수를 이용하여 그대로 출력하고 있습니다. 별다른 반복문을 쓰지 않았는데도 <code>print</code>는 알아서 리스트 내부의 모든 항목을 <strong>예쁘게</strong> 출력하고 있습니다. 조금 있다가 다시 설명합니다.</p>
<h4><em>a_5</em>(5.) 평균 출력하기</h4>
<p><code>scoreAll</code> 변수를 이용해서 평균을 구하여 출력합니다.</p>
<h4><em>a_6</em>(6.) 최댓값 출력하기</h4>
<p><code>max</code> 함수는 쉼표로 여러가지 항목들을 넣어줄 수 있지만, 딸랑 리스트 하나만 넣어줄 수도 있습니다. 그렇게 하게 되면 <code>max</code> 함수는 알아서 리스트 내부의 모든 항목을 읽어서 최댓값을 구합니다. 조금 있다가 다시 설명합니다.</p>
<h4><em>a_7</em>(7.) 최솟값 출력하기</h4>
<p><code>min</code> 함수또한 <code>max</code>와 동일하게 작동하지만 한 가지 차이점은 최솟값을 구한다는 점입니다.</p>
<hr>
<h3><code>print</code>가 리스트를 다루는 방법</h3>
<p><code>print</code> 함수에 리스트를 넣어주었을 때 아무런 오류 없이 잘 작동하는 것을 확인하실 수 있습니다. 사실, 당연하게 느껴집니다. 왜냐하면 <code>print</code>는 이때까지 아무거나 넣어도 잘 작동하기 때문입니다. 하지만 <code>print</code>도 나름의 동작 방식이 있습니다. 리스트를 보여주는 방식이 왜 하필 대괄호와 쉼표를 써서 <code>[4, 2, 7, 4, 39, 5, 28, 73, 49, 1]</code> 가 되는 것일까요? 중괄호를 이용하고 내부 개수가 너무 많으면 ...으로 표시해서 <code>{4,2,7,...}</code> 뭐, 이렇게 할 수도 있고, 아니면 항목의 개수만 짤막하게 출력해줄 수도 있을 텐데, 왜 하필? 이는 <code>print</code>가 어떤 식으로 동작하는지 알면 조금 더 이해할 수 있습니다.</p>
<pre><code class="language-mermaid-execute">graph TD  
subgraph 리스트의 기능  
r1(리스트를 예쁘게&lt;br/&gt;보여주는 법)  
r2(리스트의 항목에&lt;br/&gt;접근하는 법)  
r3(리스트의 항목을&lt;br/&gt;추가/삭제하는 법)  
r4(기타 등등)  
r1 -.- r2
r2 -.- r3
r3 -.- r4
r4 -.- r1
end  
a1[&quot;print(students)를 만난다&quot;]  
a1 --&gt; a2[students의 타입을 찾아본다 &lt;br/&gt;... 리스트이다!]  
a2 --&gt; a3{&quot;리스트의 기능 중&lt;br/&gt; 예쁘게 보여주는&lt;br/&gt; 방법이 있나?&quot;}  
r1 -.- a3
a3 --&gt;|있다!| a4[그 방법을 이용해 출력한다.]  
a3 --&gt;|없다| a5[날 것의 데이터로 출력하거나&lt;br/&gt;에러를 일으킨다.]  
class r1,a1,a2,a3,a4 em
</code></pre>
<p><em><code>print(students)</code>가 동작하는 과정</em></p>
<p>중요한 점은, 우리가 <code>리스트를 예쁘게 보여주는 법</code>이 어떤 식으로 구현되어 있는지도 모르고, 심지어 어떻게 쓰는지도 알 필요가 없다는 점입니다. 이 비기를 이용하는 주체는 손가락으로 열심히 영단어를 타이핑치는 우리가 아니라 바로 <code>print</code>입니다. <code>print</code>가 알아서 A부터 Z까지 다 해주므로 우리는 <code>print</code>를 쓰는 방법만 제대로 익히면 됩니다.</p>
<p>그렇다면 <code>print</code>를 쓰는 방법만 알면 될 것이지, 왜 <code>print</code>가 내부적으로 어떻게 돌아가는지까지 학습하냐구요? 왜냐하면 <code>print(123)</code>, <code>print([1, 2, 3])</code>, <code>print(student)</code> 등의 다양한 변수를 넣어도 어떻게 동작할 수 있는지에 대해 이해하기 위함입니다. <code>print</code>와 같이 다양한 쓰임새가 있는 함수는 한두 개가 아니며, 심지어는 다음 시간에서 배울 핵심 문법인 <code>for</code> 반복문에서도 비슷한 형식으로 작동합니다.</p>
<hr>
<h3><code>max</code>와 <code>min</code> 함수</h3>
<p>사실 <code>max</code> 함수는 이번 시간에 처음 등장합니다. <code>max</code> 함수란 소괄호 <code>()</code> 내에 쉼표 <code>,</code>로 구분된 값들을 비교해서 가장 큰 값을 반환하는 함수입니다. <code>min</code>도 동일하게 동작합니다. 다음 예제를 간단히 봅시다.</p>
<pre><code class="language-python">print(max(6, 1, 2, 4))
print(min(6, 1, 2, 4))
</code></pre>
<pre><code class="language-plaintext">6
1
</code></pre>
<p>하지만 <code>max</code>는 상황에 따라 리스트 하나만 값으로 집어넣을 수 있습니다. 그렇게 되면 <code>max</code>는 이 하나의 값이 리스트인지 우선 검사하고, 리스트가 지니고 있는 변수들의 값을 가져올 수 있는지 다시 검사를 한 후에, 리스트의 변수들 간 비교작업을 시작합니다. 간단히 순서도로 그리면 아래와 같습니다.</p>
<pre><code class="language-mermaid-execute">graph TD  
subgraph 리스트의 기능  
r1(리스트를 예쁘게&lt;br/&gt;보여주는 법)
r2(리스트의 항목에&lt;br/&gt;접근하는 법)
r3(리스트의 항목을&lt;br/&gt;추가/삭제하는 법)
r4(기타 등등)
r1 -.- r2
r2 -.- r3
r3 -.- r4
r4 -.- r1
end  
a1[&quot;max(students)&lt;br/&gt;를 만난다&quot;]  
a1 --&gt; a2{&quot;max로 들어오는&lt;br/&gt;값이 몇 개인가?&quot;}
a2 --&gt; |여러 개이다| a3[&quot;이 값들 중 &lt;br/&gt;최댓값을 계산해본다.&quot;]
a2 --&gt; |하나이다| a4[&quot;이 값(students)의&lt;br/&gt;타입을 찾아본다&lt;br/&gt; ... 리스트이다!&quot;]
a4 --&gt; a5{&quot;리스트의 기능 중&lt;br/&gt;항목에 접근하는&lt;br/&gt;방법이 있나?&quot;}
a5 -.- r2
a5 --&gt; |있다| a7[&quot;모든 항목에&lt;br/&gt;접근하여 최댓값을&lt;br/&gt;계산한다&quot;]
a5 --&gt; |없다| a6[&quot;알아서 처리되거나&lt;br/&gt;에러를 일으킨다.&quot;]
class a1,a2,a4,a5,a7,r2 em

</code></pre>
<p><em><code>max(students)</code>가 동작하는 과정</em></p>
<hr>
<h2>중간 정리</h2>
<p>변수에 대해서는 우리가 다음과 같이 정리를 했습니다.</p>
<ul>
<li><strong>변수를 구성하는 것은 데이터(값), 이름이다.</strong></li>
<li><strong>변수의 데이터(값)은 메모리 어딘가에 저장되어 있다.</strong></li>
<li><strong>변수의 이름으로 메모리 주소와 데이터 다루는 법을 알 수 있다.</strong></li>
<li><strong>변수의 데이터에 타입 정보가 포함되어 있다.</strong></li>
<li><strong>변수는 하나의 데이터만 가리킬 수 있다.</strong></li>
</ul>
<p>변수의 정리에 따라서 리스트의 특징을 다음과 같이 정리하겠습니다.</p>
<ul>
<li><strong>리스트는 변수의 이름을 가지는 변수이다. (리스트의 데이터에는 변수의 이름들이 들어가 있다.)</strong></li>
<li><strong>리스트 내 항목의 데이터는 리스트 외부에 있다.</strong></li>
<li>리스트는 <strong>비슷한 용도나 목적이 있는 변수가 다수 있는 상황</strong>에 적합하다.</li>
</ul>
<p>리스트의 기본적인 사용법은 다음과 같습니다.</p>
<ul>
<li>빈 리스트는 <code>[]</code>로 만든다.</li>
<li>내용이 있는 리스트는 <code>[1, 2, 3]</code>과 같이 만든다.</li>
<li>항목에 접근하려면 <code>변수명[숫자]</code>로 한다. 이 때, 숫자는 <code>0</code>부터 시작한다.</li>
</ul>
<p>그리고 타입으로서의 <code>list</code>는 다음과 같이 정리할 수 있습니다.</p>
<ul>
<li><strong>저마다의 변수의 타입(종류)에는 저마다의 기능이 있다.</strong></li>
<li><strong>이 기능을 이용하려면 변수명 뒤에 <code>.</code>을 붙여 이용한다. (예: <code>student.append(~~~~)</code>)</strong></li>
<li><strong>다른 타입의 기능은 이용할 수 없다. (<code>int</code>가 <code>list</code>의 기능을 이용할 수 없다.)</strong></li>
<li><strong><code>print</code>, <code>max</code>, <code>min</code>같은 함수는 <code>list</code>의 기능을 활용할 줄 안다.</strong></li>
</ul>
<p>... 그리고, 리스트의 기능 중 다음의 기능이 대충 존재한다는 것만 알게 되었습니다.</p>
<ul>
<li>리스트의 항목을 추가하는 법 (<code>student.append(~~~~)</code>)</li>
<li>리스트를 예쁘게 보여주는 법 (<code>print</code>가 활용)</li>
<li>리스트의 항목에 접근하는 법 (<code>max</code>, <code>min</code>이 활용)</li>
</ul>
<p>아래에서는 리스트의 각종 기능과 사용법을 추가로 학습합니다.</p>
<blockquote>
<h3>항목? 요소?</h3>
<p>리스트와 같은 나열된 자료구조에서 그 내부에 존재하는 것을 지칭하는 말을 지금껏 <code>항목</code>이라고 표기했습니다. 하지만 이 또한 여러 단어가 있습니다. 한국어로는 <code>항목</code>, <code>요소</code>라 칭하고 영어에서는 대부분 <code>item</code>이라고 하지만 간혹 <code>element</code>라고도 부릅니다.</p>
</blockquote>
<hr>
<h2><code>in</code> 연산자</h2>
<p>파이썬 공식 문서에서는 멤버십 검사 연산자라고 소개하고 있습니다.</p>
<p><code>in</code> 연산자는 왼쪽에 있는 항목이 오른쪽에 포함되어 있는지를 검사합니다. 만약 포함되어 있다면 <code>True</code>를 반환하고, 그렇지 않다면 <code>False</code>를 반환합니다. 예제를 봅시다.</p>
<pre><code class="language-python">print(1 in [1, 2, 3])
print(&quot;안녕&quot; in [&quot;하이&quot;, &quot;안녕하세요&quot;, &quot;철수야 안녕?&quot;])
</code></pre>
<pre><code class="language-plaintext">True
False
</code></pre>
<p><code>in</code>의 결과를 반대로 하고 싶다면, 즉 포함되어 있지 않은지에 대해 검사하고 싶다면 <code>not in</code>이라고 작성해도 됩니다.</p>
<hr>
<h2>대괄호의 두 가지 사용법</h2>
<p>앞서 언급한 대로, 대괄호를 이용해 새로운 리스트를 만들기도 하며, 이미 존재하는 리스트의 항목에 접근할 수도 있습니다. 하지만 아무래도 같은 대괄호를 사용하다 보니 이 두 개 간에 혼동이 올 수 있습니다. 예시를 통해서 한번 더 짚고 넘어가도록 하겠습니다.</p>
<h3>리스트를 직접 만들기</h3>
<p>리스트는 대괄호 안에 항목을 나열하여 직접 만들 수 있습니다. 항목을 구분할 때는 쉼표(<code>,</code>)를 이용하면 됩니다. 리스트 안에는 어떠한 타입의 값이 와도 상관 없습니다.</p>
<pre><code class="language-python">stuff = [1, &quot;안녕&quot;, 2, 3, ['this is another list!', 'wow~!']]
print(stuff)
</code></pre>
<pre><code class="language-plaintext">[1, &quot;안녕&quot;, 2, 3, ['this is another list!', 'wow~!']]
</code></pre>
<p>위 예제를 잘 보시면 리스트 안에 리스트가 들어갈 수 있음을 확인할 수 있습니다. 그림으로 정리하면 다음과 같이 될 것입니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/python3.svg" alt="stuff의 구조도">
<em>stuff의 구조도</em></p>
<hr>
<h3>리스트 항목에 접근하기</h3>
<p>예시를 바로 보면서 이야기합시다.</p>
<pre><code class="language-python">numbers = [1, 3, 6, 4, 13, 25]
print(numbers[3])
print(numbers[3] + numbers[5])
print(numbers[-2])
print(numbers[10]) # 에러입니다.
</code></pre>
<pre><code class="language-plaintext">4
29
13
Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 5, in &lt;module&gt;
    print(numbers[10])
IndexError: list index out of range
</code></pre>
<p>항목에 접근할 때에는 <code>numbers[3]</code>과 같이 변수와 대괄호를 함께 쓰면 됩니다. 안에는 <strong>정수</strong> 하나만 들어갑니다. 내부의 <code>3</code>이란 뜻은 <strong>4번째</strong> 의 항목을 가지고 오라는 뜻입니다. 중요한 지점입니다. 첫번째 항목을 가지고 오려면 <code>numbers[0]</code>와 같이 써야 하고, 두번째는 <code>numbers[1]</code>입니다.</p>
<p>대괄호 안에 있는 수, 즉 리스트의 항목에 접근할 때 쓰는 수를 일반적으로 <strong>인덱스(index)</strong> 라고 이야기합니다.</p>
<p>대괄호 안에 음수를 넣어줄 수도 있습니다. 이는 끝에서 몇 번째의 항목을 가지고 오라는 뜻입니다. 즉 <code>-2</code>라면 뒤에서 두 번째를 뽑아내겠다는 뜻이죠. 그래서 <code>13</code>이 뽑혔습니다. 대괄호로 만약 잘못된 접근을 한다면 위 결과와 같이 <code>IndexError</code>가 발생합니다. 리스트 내 항목이 최소한 <code>11</code>개가 되어야 <code>numbers[10]</code>이 작동하는데, 그 보다는 한참 모자르니까요.</p>
<hr>
<p>대괄호(<code>[]</code>)의 두 가지 용법을 어떻게 확실하게 구분할까요? 바로 대괄호 바로 앞에 변수명이 붙어있나 없나로 구분합니다. 변수가 따라온다면 &quot;<strong>리스트의 항목에 접근해!</strong>&quot;라는 뜻이고 변수 없이 휑하니 대괄호만 있다면 &quot;<strong>새로운 리스트를 만들어!</strong>&quot;라는 뜻입니다.</p>
<p>한번 다음 코드가 어떻게 작동할지 상상해보세요.</p>
<pre><code class="language-python">print([1, 4, 7, 10, 13, 16][4])
</code></pre>
<pre><code class="language-plaintext">13
</code></pre>
<hr>
<h2>리스트를 다루는 편의 함수들</h2>
<p>리스트를 다루는 함수는 앞서 살펴 본 <code>max</code>, <code>min</code> 외에 다양한 함수가 있습니다.</p>
<hr>
<h3>sum</h3>
<ul>
<li>사용법 : <code>sum(list)</code></li>
<li>설명 : 리스트 내 모든 항목을 더합니다. 숫자형만 작동합니다.</li>
</ul>
<h3>max</h3>
<ul>
<li>사용법 : <code>max(list)</code></li>
<li>설명 : 리스트 내 항목의 최대값을 구합니다. 숫자형만 작동합니다.</li>
</ul>
<h3>min</h3>
<ul>
<li>사용법 : <code>min(list)</code></li>
<li>설명 : 리스트 내 항목의 최소값을 구합니다. 숫자형만 작동합니다.</li>
</ul>
<h3>len</h3>
<ul>
<li>사용법 : <code>len(list)</code></li>
<li>설명 : 리스트 내 항목의 개수를 구합니다.</li>
</ul>
<h3>예제</h3>
<pre><code class="language-python">numbers = [3, 6, 2, 9, 4]
print(min(numbers))
print(max(numbers))
print(sum(numbers))
print(len(numbers))
</code></pre>
<pre><code class="language-plaintext">2
9
24
5
</code></pre>
<hr>
<h3>그 외</h3>
<p><code>any</code>, <code>all</code> 등의 리스트 내 항목을 검사하는 함수도 있지만 좀 더 고급 용법이므로 다음 시간에 알아봅시다. (추가 예정)</p>
<hr>
<h2>리스트의 편의 기능들</h2>
<p>좀 더 정확한 설명은 파이썬 공식 문서를 참조해주세요.</p>
<p><a href="https://docs.python.org/ko/3/tutorial/datastructures.html#more-on-lists">https://docs.python.org/ko/3/tutorial/datastructures.html#more-on-lists</a></p>
<hr>
<h3>append</h3>
<ul>
<li>사용법 : <code>list.append(x)</code></li>
<li>설명 : 리스트의 끝에 항목 <code>x</code>을 더합니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미']
people.append('영철')
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">['철수', '영미', '영철']
</code></pre>
<hr>
<h3>extend</h3>
<ul>
<li>사용법 : <code>list.extend(x)</code></li>
<li>설명 : 리스트의 끝에 리스트 <code>x</code>를 덧붙여 확장합니다. (리스트와 비슷한 것도 전부 됩니다.)</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미']
people.append(['영철', '수영'])
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">['철수', '영미', '영철', '수영']
</code></pre>
<hr>
<h3>insert</h3>
<ul>
<li>사용법 : <code>list.insert(i, x)</code></li>
<li>설명 : 리스트의 인덱스 <code>i</code>로 항목 <code>x</code>을 삽입합니다. 기존에 있던 항목과 그 뒤의 모든 항목은 한 칸씩 뒤로 밀려납니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미']
people.insert(1, '영철')
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">['철수', '영철', '영미']
</code></pre>
<hr>
<h3>remove</h3>
<ul>
<li>사용법 : <code>list.remove(x)</code></li>
<li>설명 : 리스트에서 값이 <code>x</code>와 같은 첫 번째 항목을 삭제합니다. 그런 항목이 없으면 에러를 일으킵니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미']
people.remove('철수')
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">['영미']
</code></pre>
<hr>
<h3>pop</h3>
<ul>
<li>사용법 : <code>list.pop(i)</code> 또는 <code>list.pop()</code></li>
<li>설명 : 리스트에서 인덱스 i에 있는 항목을 삭제하고 그 항목을 반환합니다. i를 지정하지 않으면 리스트의 마지막 항목을 삭제하고 그 항목을 반환합니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미', '영환']
print(people.pop(0))
print(people.pop())
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">철수
영환
['영미']
</code></pre>
<hr>
<h3>clear</h3>
<ul>
<li>사용법 : <code>list.clear()</code></li>
<li>설명 : 리스트 내의 모든 항목을 삭제합니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미', '영환']
people.clear()
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">[]
</code></pre>
<hr>
<h3>index</h3>
<ul>
<li>사용법 : <code>list.index(x)</code></li>
<li>설명 : 리스트에 있는 항목 중 값이 <code>x</code>와 같은 것의 인덱스를 반환합니다. 리스트 내 <code>x</code>가 여러 개이면 첫번째 항목의 인덱스를 반환하고, <code>x</code>가 없으면 에러입니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['철수', '영미', '영환']
i = people.index('영미')
print(i)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">1
</code></pre>
<hr>
<h3>count</h3>
<ul>
<li>사용법 : <code>list.count(x)</code></li>
<li>설명 : 리스트에서 x가 등장하는 횟수를 반환합니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">numbers = [1,5,2,2,5,8,3,2,3,1]
c = numbers.count(2)
print(c)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">3
</code></pre>
<hr>
<h3>sort</h3>
<ul>
<li>사용법 : <code>list.sort()</code> 또는 <code>list.sort(reverse=True)</code></li>
<li>설명 : 리스트를 정렬합니다. 기본으로는 오름차순 정렬이지만 <code>reverse=True</code>를 넣게 되면 내림차순으로 정렬됩니다. 정렬과 관련된 고급 기능은 다음 번에 다시 알아보도록 합시다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">numbers = [1,5,2,2,5,8,3,2,3,1]
numbers.sort()
print(numbers)
numbers.sort(reverse=True)
print(numbers)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">[1, 1, 2, 2, 2, 3, 3, 5, 5, 8]
[8, 5, 5, 3, 3, 2, 2, 2, 1, 1]
</code></pre>
<hr>
<h3>reverse</h3>
<ul>
<li>사용법 : <code>list.reverse()</code></li>
<li>설명 : 리스트 항목들의 순서를 뒤바꿉니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">people = ['똥개', '영순', '돌쇠', '사슴']
people.reverse()
print(people)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">['사슴', '돌쇠', '영순', '똥개']
</code></pre>
<hr>
<h3>copy</h3>
<ul>
<li>사용법 : <code>list.copy()</code></li>
<li>설명 : 리스트의 사본을 반환합니다. 리스트를 다룰 때 단순히 대입하게 되면 <strong>같은 리스트에 이름이 두 개가 됩니다. 그래서 별도의 리스트를 만들려면 복사를 해야 합니다.</strong> 이는 <a href="182">클래스와 객체</a>를 배운 후 정체성(추가 예정)에서 자세히 다룰 예정입니다.</li>
<li>예시</li>
</ul>
<pre><code class="language-python">numbers1 = [1,3,2,4]
numbers2 = numbers1
numbers2.pop() ##b_1## number1에도 영향을 줍니다.
print('numbers1:', numbers1)
print('numbers2:', numbers2)
numbers2 = numbers1.copy() ##b_2## 이제 number1과 number2는 완전히 별도입니다.
numbers2.append(10)
print('numbers1:', numbers1)
print('numbers2:', numbers2)
</code></pre>
<ul>
<li>결과</li>
</ul>
<pre><code class="language-plaintext">numbers1: [1, 3, 2]
numbers2: [1, 3, 2]
numbers1: [1, 3, 2]
numbers2: [1, 3, 2, 10]
</code></pre>
<hr>
<h4><em>b_1</em>(1.) <code>copy</code> 이전</h4>
<p><img src="elvanov/wp-content/uploads/2020/01/python4.svg" alt="과 의  이전 구조도">
<em><code>number1</code>과 <code>number2</code>의 <code>copy</code> 이전 구조도</em></p>
<h4><em>b_2</em>(2.) <code>copy</code> 이후</h4>
<p><img src="elvanov/wp-content/uploads/2020/01/python5.svg" alt="과 의  이후 구조도">
<em><code>number1</code>과 <code>number2</code>의 <code>copy</code> 이후 구조도</em></p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>빈 리스트를 어떻게 만드는가?</li>
<li>리스트의 길이를 구하는 함수는 무엇인가?</li>
<li>숫자 세 개 들어있는 리스트를 어떻게 만드는가?</li>
<li>변수의 타입 정보는 어디에 포함되어 있는가?</li>
<li>리스트에서 항목을 어떻게 추가할 수 있는가? (한 가지만)</li>
<li><code>print([1,3,2])</code>로 출력하면 결과는 무엇인가?</li>
<li>리스트는 무엇을 가지는 변수인가?</li>
<li>리스트는 어떤 상황에 적합한가?</li>
<li>변수를 구성하는 것 크게 두 가지는 무엇인가?</li>
<li><code>int</code> 변수가 <code>list</code>의 기능을 사용할 수 있는가?</li>
<li>리스트 내 모든 항목을 더하는 함수는 무엇인가?</li>
<li>변수의 데이터는 어디에 저장되어 있는가?</li>
<li><code>list</code> 변수를 <code>print</code>하고자 할 때 <code>print</code>는 <code>list</code>의 기능을 활용하는가?</li>
<li>어떤 값이 리스트의 항목으로 포함되어 있는지 알 수 있는 방법은 무엇인가?</li>
<li>변수는 몇 개의 데이터를 가리킬 수 있는가?</li>
<li>리스트의 항목에 접근하려면 어떻게 해야 하는가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<ol>
<li>
<p>총 개수인 <code>n</code>을 먼저 입력받고, <code>n</code>의 수만큼 숫자를 입력받아 리스트에 저장시킨다. 입력을 마친 후 리스트를 출력하라.</p>
<ul>
<li>
<p>예시입력<br>
4<br>
2<br>
3<br>
1<br>
5</p>
</li>
<li>
<p>예시 출력<br>
[2, 3, 1, 5]</p>
</li>
</ul>
</li>
<li>
<p>5개의 숫자를 입력받는다. 입력받은 숫자들에서 홀수의 합과 짝수의 합을 구하고, 홀수의 합이 크다면 <code>홀수가 이겼습니다</code>라고 출력하고 짝수의 합이 크다면 <code>짝수가 이겼습니다</code>라고 출력하라.</p>
</li>
<li>
<p>총 개수인 <code>n</code>을 먼저 입력받고, <code>n</code>의 수만큼 숫자를 입력받아, 이 숫자들 중 두 번째로 큰 수를 출력하라. (힌트 : <code>sort</code>를 이용하면 다소 쉽게 풀 수 있다. <code>sort</code>를 이용하지 않고도 한번 도전해보자.)</p>
</li>
<li>
<p>5개의 문자열을 입력받는다. 입력받은 문자열 중 길이가 가장 긴 문자열을 출력하라. (힌트 : <code>len(a)</code> 하게 되면 문자열 <code>a</code>의 길이를 알 수 있다.)</p>
</li>
</ol>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">count = int(input())
i = 0
nums = []
while i &lt; count:
    nums.append(int(input()))
    i += 1
print(nums)
</code></pre>
</li>
<li>
<p>코드입니다.</p>
</li>
<li>
<p>코드입니다.</p>
</li>
<li>
<p>코드입니다.</p>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2019-12-19 10:51:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-19 01:51:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-15 14:23:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-15 05:23:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%a6%ac%ec%8a%a4%ed%8a%b8%ec%99%80-for-%eb%b9%84%ec%8a%b7%ed%95%9c-%eb%b3%80%ec%88%98%eb%93%a4%ec%9d%84-%eb%8b%a4%eb%a3%a8%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1457</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; for, range ~ 리스트의 항목을 다루기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/545</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-17 09:36:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-17 00:36:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 변수와 리스트 – 비슷한 변수들을 묶기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1590647627.82393;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589675790.83913;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 다양한 함수 인수 ~ 유연한 함수 만들기]]></title>
		<link>https://elvanov.com/304</link>
		<pubDate>Sun, 22 Dec 2019 05:21:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n## 기본값(default) 지정\n\n파이썬에서는 함수를 호출할 때 인수가 적절하게 들어가있어야 합니다. 하지만 기본값이 정해진 인수는 함수 호출 시 생략하여도 무방합니다. 기본값을 설정하는 방법은 **함수 정의 시 `변수명=값`** 으로 작성하는 것입니다. (함수 호출시 등호(=)를 이용하는 건 또 다른 개념입니다.) 다음 예제를 참고해주세요.\n\n```python\ndef say_hi(a='철수', b=10, c=20):\n    print('안녕 ' + str(a) + '야, ' + '나는 ' + str(b) + \n        '살이고 내 형은 ' + str(c) + '살이야.')\n\nsay_hi()\nsay_hi('영미')\nsay_hi('영미', 15)\nsay_hi('영미', 15, 25)\n```\n다음은 결과입니다.\n```plaintext\n안녕 철수야, 나는 10살이고 내 형은 20살이야.\n안녕 영미야, 나는 10살이고 내 형은 20살이야.\n안녕 영미야, 나는 15살이고 내 형은 20살이야.\n안녕 영미야, 나는 15살이고 내 형은 25살이야.\n```\n\n\u002d\u002d-\n\n기본값을 넣은 인수 이후에는 기본값이 없는 인수가 등장할 수 없습니다. 아래와 같은 코드를 사용하게 되면 **함수 정의 단계에서** 에러가 발생합니다.\n\n```python\ndef say_hi(a='철수', b, c=20):\n    print('안녕 ' + str(a) + '야, ' + '나는 ' + str(b) + \n        '살이고 내 형은 ' + str(c) + '살이야.')\n```\n```plaintext\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 1\n    def say_hi(a='철수', b, c=20):\n              ^\nSyntaxError: non-default argument follows default argument\n```\n\n`b`는 기본값이 없으므로 무조건 채워야 하는데, `b`의 위치는 두번째입니다. 즉 `b`의 내용을 채워넣으려면 첫번째인 `a` 또한 매번 인수로 값을 받을 수 밖에 상황이기에 `a`의 `default`는 사실상 필요가 없어집니다. 이러한 설계상의 결함을 최소화하기 위해 아예 에러로 처리하는 파이썬 인터프리터의 모습을 확인할 수 있습니다. (추가 예정)\n\n\u002d\u002d-\n\n## 가변 인수 (variadic arguments)\n\n파이썬은 가변 인수를 활용할 수 있습니다. 가변 인수란 \u0022인수의 개수가 변할 수 있다\u0022라는 뜻입니다. 특징은 다음과 같습니다.\n- 변수명 바로 앞에 별표(`*`)만 첨가하여 바로 사용할 수 있습니다. \n- 함수 내에서  **튜플(tuple)** 로 제공됩니다. \n- 기본값을 지정할 수 없습니다.\n- 함수에 하나에 최대 하나만 존재합니다. `def example(a, *b, *c):`와 괕이 정의하면 바로 에러가 발생합니다.\n- 함수를 호출할 때 가변 인수에 값이 하나도 전달되지 않아도 됩니다.\n\n\n```python\ndef example(apple, banana, *stuff):\n    print(apple, banana, stuff)\nexample('철수', '영미')\nexample('철수', '영미', '진수', '나영', '태현')\n```\n```plaintext\n철수 영미 ()\n철수 영미 ('진수', '나영', '태현')\n```\n\n위 예제에서 stuff는 인수가 나열된 튜플입니다. 우리는 `for` 가등을 이용하여 인수를 활용해볼 수 있을 것입니다.\n\n\n\u002d\u002d-\n\n## 위치 인수와 키워드 전용 인수\n\n이 용어는 `전문가를 위한 파이썬`의 번역본을 그대로 가져왔습니다.\n\n**위치 인수(positional argumnet)** 란 함수에게 인수를 전달할 때 첫 번째 위치, 두 번째 위치 등 위치 기반으로 전달되는 인수입니다. 모든 위치 인수는 키워드로서 전달할 수 있습니다. 키워드로서 전달하는 방법은 **함수 호출 시** 인수를 적을 때 `인수명=값`과 같이 작성하면 됩니다. 아래 예시를 참고해주세요.\n\n\n```python\ndef example(apple, banana):\n    print(apple, banana)\nexample('철수', '영미')\nexample(banana='철수', apple='영미')\n```\n\n```plaintext\n철수 영미\n영미 철수\n```\n\n키워드 인수와 위치 인수는 혼합하여 사용할 수 있습니다. 다만 함수 호출 시 키워드로서 인수 전달은 반드시 위치 인수 뒤에 있어야 합니다. 다음 예제를 참조해주세요.\n\n```python\ndef example(apple, banana):\n    print(apple, banana)\n# example(banana='철수', '영미')\n# 설명 : 에러입니다. 키워드 인수 전달은 반드시 위치 인수보다 뒤에 있어야 합니다.\n\n# example('철수', apple='영미')\n# 설명 : 에러입니다. 첫번째 두번째 모두 apple 인수를 가리키고 있습니다.\n\nexample('철수', banana='영미') \n# 설명 : 성공입니다.\n```\n```plaintext\n철수 영미\n```\n\n\u002d\u002d-\n\n**키워드 전용 인수(keyword-only argumnet)** 는 결코 위치 기반으로 전달될 수 없는 인수를 뜻합니다. 특징은 다음과 같습니다.\n- 키워드 전용 인수로 설정하는 방법은 크게 어렵지 않습니다. 별표(`*`) 뒤에, 즉 가변 위치 인수 뒤의 것들은 모두 키워드 전용이 됩니다. \n- 기본값(default)를 지정해도 되고 지정하지 않아도 됩니다. \n- 위치 인수와 달리 기본값이 있는 것과 없는 것 사이의 순서는 상관이 없습니다. \n\n```python\ndef example(apple, banana, *stuff, magic='마술', car):\n    print(apple, banana, stuff, car, magic)\n\n# example('철수', '영미')\n# 설명: 에러입니다. car을 무조건 지정해야 합니다.\n\n# example('철수', '영미', '진수', '나영', '태현') \n# 설명: 에러입니다. 가변 인수는 모두 stuff로 들어가기 때문에 \n# 마찬가지로 car이 지정되지 않았습니다.\n\nexample('철수', '영미', '진수', '나영', '태현', car='포르쉐') \n# 설명: 성공적입니다.\n```\n```plaintext\n철수 영미 ('진수', '나영', '태현') 포르쉐 마술\n```\n\n\u002d\u002d-\n\n### 가변 인수 없는 키워드 전용 인수\n\n가변 인수 없이 키워드 전용 인수를 사용하고 싶다면, 별표(`*`)만 하나 들어간 인수를 설정해주면 됩니다.\n\n```python\ndef f(a, *, b):\n    print(a + b)\n\nf(1, b=2)\n# f(3, 4) ## 에러입니다. b는 무조건 키워드로 접근해야 합니다.\n```\n```plaintext\n3\n```\n\n\u002d\u002d-\n\n### 키워드 전용 가변 인수\n\n키워드 전용 인수 또한 가변 인수를 설정할 수 있습니다. 방법은 위치 가변 인수와 비슷한데, 별표(`*`) 하나가 아니라 두개(`**`)를 변수명 앞에 붙여주면 됩니다. 특징은 다음과 같습니다.\n\n- 함수 내에서  **딕셔너리(dictionary)** 로 제공됩니다. \n- 마찬가지로 기본값을 지정할 수 없습니다.\n- 마찬가지로 함수에 하나에 최대 하나만 존재합니다. `def example(a, **b, **c):`와 같이 정의하면 바로 에러가 발생합니다.\n- 위치 가변 인수와 함께 사용할 수 있습니다. `def example(a, *b, **c):`는 문제 없습니다.\n- 위치 가변 인수 뒤에 존재해야 합니다. `def example(a, **b, *c):`는 에러입니다.\n- 뒤에 키워드 전용 인수가 올 수 없습니다. `def example(a, *b, **c, d=10)`는 에러를 일으킵니다.\n- 함수를 호출할 때 가변 인수에 값이 하나도 전달되지 않아도 됩니다.\n\n아래는 예시입니다.\n\n```python\ndef example(apple, banana, **stuff):\n    print(apple, banana, stuff)\nexample('철수', '영미')\n\n# example('철수', '영미', '민수')\n# 설명 : 위치 인수는 가변 인수 없이 2개만 \n# 받고 있으므로 '민수'는 갈 데가 없어서\n# 에러가 발생합니다.\n\nexample('철수', '영미', smart='민수')\n```\n```plaintext\n철수 영미 {}\n철수 영미 {'smart': '민수'}\n```\n\n\u002d\u002d-\n\n## 위치 전용 인수\n\n2019년 10월 14일 업데이트 된 파이썬 3.8에서 새롭게 추가된 내용입니다. 기본적으로 인수는 위치 인수이고, 키워드를 통해서도 접근할 수 있다고 하였습니다. 하지만 위치로만 접근할 수 있고 키워드로는 접근할 수 없도록 제한하는 방법이 새로이 등장했습니다. 그것은 위치 인수 사이에 `/`라는 인수를 추가하는 것입니다. `/`를 기준으로 왼쪽에 있는 변수들은 모두 위치 전용 인수가 됩니다.\n\n```python\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n# a, b는 위치 전용 인수이고 c, d는 일반 위치 인수이고 e, f는 키워드 전용 인수입니다.\n\nf(10, 20, 30, d=40, e=50, f=60)\n# 올바른 사용입니다. \n\nf(10, b=20, c=30, d=40, e=50, f=60)\n# 에러입니다. b는 키워드로 접근할 수 없습니다.\n\nf(10, 20, 30, 40, 50, f=60)   \n# 에러입니다. e는 위치 기반으로 접근할 수 없습니다.\n```\n\n위치 전용 인수는 일반 사용자보다는 라이브러리 설계자가 이용하도록 고안된 것이며 우리가 함수를 정의할 때 이를 사용하는 일은 드물 것입니다. 하지만 파이썬 표준에 포함된 만큼 어떤 라이브러리가 `/`를 사용한다고 했을 때 무슨 용도인지는 이해하여야 할 것이기에, 짧게나마 소개해봤습니다.\n\n\u002d\u002d-\n\n## 순서\n\n함수를 정의할 때 인수의 순서는 명확하게 정리되겠죠? 왼쪽에서부터 오른쪽까지 다음 순서입니다.\n\n1. **위치 인수 (기본값 X)**\n1. **위치 인수 (기본값 O)**\n1. **`/` (위치 인수들 어딘가에 존재)**\n1. **위치 가변 인수 (`*`)**\n1. **키워드 전용 인수 (기본값 유무 상관 없음)**\n1. **키워드 전용 가변 인수 (`**`)**\n\n다음은 함수를 호출할 때의 순서입니다.\n\n1. **키워드 없이, 차례대로**\n2. **키워드 있게, 순서 상관없이**\n\n\u002d\u002d-\n\n## 팁\n\n### 기본 값 없이 선택사항으로 만들고 싶을 때\n\n기본 값을 특별히 만들고 싶지는 않지만 선택사항으로 두어 인수를 빼먹어도 에러가 나지 않도록 프로그램을 만들고 싶습니다. 그렇다면 None 객체를 활용합시다. 다음은 예시입니다.\n\n```python\ndef example(a, b, c=None):\n    print(f'a({a})와 b({b})는 필수입니다.')\n    if c is not None:\n        print(f'c 값이 들어왔습니다. ==\u003e {c}')\n    else:\n        print('c 값이 들어오지 않았습니다.')\n\nexample(10, 20)\nexample(300, 400, 500)\n```\n```plaintext\na(10)와 b(20)는 필수입니다.\nc 값이 들어오지 않았습니다.\na(300)와 b(400)는 필수입니다.\nc 값이 들어왔습니다. ==\u003e 500\n```\n\n\u002d\u002d-\n\n## 문서 읽어보기\n\n### print\n우리가 밥먹듯이 쓰는 print 함수의 문서를 찾아봅시다. 정의는 다음과 같습니다.\n\n```python\nprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False):\n    # 내용\n```\n\n첫번째로 가변 인수 `objects`가 등장합니다. 즉 우리가 `print('안녕', '파워', '맨~', '커피')`와 같이 인수를 무제한으로 넣어도 잘 작동됨을 확인할 수 있습니다. `sep`, `end`, `file`, `flush`는 **기본값이 있는 키워드 전용 인수** 임을 확인할 수 있습니다. 기본값이 있기 때문에 따로 지정해주지 않아도 알아서 잘 작동했구나 알 수 있습니다.\n\n인수가 각각 어떤 역할을 하는지 좀 더 문서를 자세히 살펴봐야겠습니다. 여러분께서 직접 찾아보셔도 되지만, `file`과 `flush`는 출력 방식과 관련된 내용이라 어려우니 패스하고 `sep`와 `end`가 어떤 역할인지만 살펴봅시다.\n\n- `sep` : `print`의 인수로 여러 개가 들어왔을 때 그것들을 구분할 문자\n- `end` : `print`가 모든 문자열의 출력을 마치고 마지막으로 출력할 문자\n\n위에서 살펴 보았듯 `sep`에는 공백 하나가 기본값으로 되어 있고, `end`는 줄바꿈으로 되어있습니다. 직접 내용을 설정해서 호출해 볼까요?\n\n```python\nprint('안녕','하세요','반갑','습니다','하하',sep='(^o^)',end=' 뽜이야~')\nprint('  줄이 안바뀌었네요..?')\n```\n```plaintext\n안녕(^o^)하세요(^o^)반갑(^o^)습니다(^o^)하하 뽜이야~  줄이 안바뀌었네요..?\n```\n\n어떤가요? 문서가 좀 더 잘 이해되시나요?\n\n\u002d\u002d-\n\n### pandas.read_excel\n\n```python\npandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skip_footer=0, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)\n```\n\n어마어마하게 기네요.. `io`는 필수로 넣어야 할 위치 인수임을 바로 확인할 수 있고, 나머지는 선택 사항인 인수들입니다. 그 다음에는 마지막으로 `kwds`라는 **키워드 전용 가변 인수** 가 등장합니다. 설명은 따로 다시 찾아봐야 하겠지만, 함수 사용법을 일차적으로 이해하는 데 큰 의의가 있다는 것을 명심해주세요!\n\n\u002d\u002d-\n\n## 여담\n\n별표는 영어로 **Asterisk** 라고 합니다. 아스터리스크 라고 읽는지..는 잘 모르겠습니다 호호. 별표를 영어로 검색할 일이 있을 때 참고하도록 합니다.\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 함수를 정의할 때 인수의 순서가 어떻게 되는가?\n- 인수의 기본값은 어떻게 지정하는가?\n- 함수를 호출할 때 키워드를 지정하는 방법은 무엇인가?\n- 가변 인수란 무엇인가?\n- 가변 인수를 함수 내에서 이용하려면 (값을 뽑아내려면) 어떻게 해야 하는가?\n- 키워드 전용 가변 인수는 무엇인가?\n- 키워드 전용 가변 인수를 함수 내에서 이용하려면 (값을 뽑아내려면) 어떻게 해야 하는가?\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n### `argparse`\n\n`argparse` 모듈은 파이썬 스크립트를 콘솔에서 실행시킬 때 명령행 인자를 더 편리하게 관리해주는 기능을 제공합니다. 단순한 문자열의 리스트로 들어오는 데이터를 유의미한 데이터로 쉽게 변환하는 데 그 의의가 있습니다. 기본적인 사용 흐름과 예시는 다음과 같습니다.\n\n```mermaid-execute\ngraph TD\np1[\u0022python test.py data.xlsx \u002d\u002dtemp template.html\u003cbr\u003e를 콘솔에 입력합니다.\u0022]\np1 \u002d\u002d\u003e p2\np2[\u0022sys.argv에 문자열을\u003cbr\u003e 담은 리스트 형태로\u003cBr\u003e데이터가 생성됩니다.\u003cbr\u003e(공백으로 리스트의\u003cbr\u003e항목이 구분됩니다.)\u0022]\np2 -.- s1[\u0022import sys\u003cbr\u003eprint(sys.argv)\u0022]\ns1 -.-\u003e s2[\u0022['test.py', 'foo', '\u002d\u002dbar', 'data.xlsx']\u0022]\np2 \u002d\u002d\u003e p3[\u0022parser.parse_args()\u003cbr\u003e를 통해 미리 작성된\u003cbr\u003e설정을 바탕으로 sys.argv\u003cbr\u003e를 읽고 데이터가 담긴\u003cbr\u003e객체를 반환합니다.\u0022]\na1[\u0022import argparse\u003cbr\u003eparser = argparse.ArgumentParser(...)\u003cbr\u003e를 통해 ArgumentParser 객체를 생성합니다.\u0022]\na2[\u0022parser.add_argument(...)\u003cbr\u003e를 통해 불러올 데이터를\u003cbr\u003e미리 설정합니다.\u0022]\na2 \u002d\u002d\u003e a2\na1 \u002d\u002d\u003e a2\na2 \u002d\u002d\u003e p3\n```\n*`argparse` 모듈을 사용하는 흐름*\n\n그리고 `test.py` 파일을 아래와 같이 작성합니다.\n\n```python\nimport argparse\nimport sys\nparser = argparse.ArgumentParser()\nparser.add_argument('data')\nparser.add_argument('-t', '\u002d\u002dtemp')\nargs = parser.parse_args()\nprint(sys.argv)\nprint(args)\n```\n\n그리고 콘솔에서 `cd` 명령을 통해 작업 디렉토리를 파이썬 코드가 있는 폴더로 옮깁니다. 예제의 경우에는 바탕화면에 저장되어 있으므로 `cd desktop`으로 하였습니다. 그 이후 `python` 명령으로 작성한 파일을 실행시킵니다. \n\n```plaintext\nPS C:\\Users\\tooth\u003e cd desktop\nPS C:\\Users\\tooth\\Desktop\u003e python test.py data.xlsx \u002d\u002dtemp template.html\n['test2.py', 'data.xlsx', '\u002d\u002dtemp', 'template.html']\nNamespace(data='data.xlsx', temp='template.html')\n```\n\n여기서 [`add_argument` 메서드의 설명](https://docs.python.org/ko/3/library/argparse.html)을 잠시 끌어와보겠습니다.\n\n`\nArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])\n`\n\n- `default` : 해당 옵션의 기본 값을 지정합니다.\n- `help` : 해당 옵션의 도움말을 지정합니다.\n- `choices` : 해당 옵션의 선택가능한 리스트를 지정합니다. 예를 들어 `['red', 'black']`이라고 지정하면 `red`, `black` 외의 문자열은 지정할 수 없습니다.\n- `required` : 해당 옵션의 필수 유무를 지정합니다. 기본적으로는 `False` 입니다.\n\n\n(후략)\n\n\u002d\u002d-\n\n#### 문제\n\n1. `parser.add_argument('\u002d\u002dname', default=\u0022Peter\u0022)`는 어떻게 동작하는가?\n\n1. `parser.add_argument('-d', '\u002d\u002ddata', required=True)`는 어떻게 동작하는가?\n\n1. `parser.add_argument('type', help=\u0022색깔을 정하세요\u0022, choices=['red', 'black', 'blue'])` 는 어떻게 동작하는가?\n\n1. 데이터 엑셀 파일과 템플릿 HTML 파일을 인수로 받고자 한다. 데이터 엑셀 파일의 기본 값은 `data.xlsx`, HTML 파일은 `template.html`로 지정하고자 하고 이 인수를 필수로 받고자 한다. 그에 따라 `add_argument` 메소드를 적절히 호출하라.\n\n\n\u002d\u002d-\n\n"} -->
<div class="wp-block-jetpack-markdown"><hr>
<h2>기본값(default) 지정</h2>
<p>파이썬에서는 함수를 호출할 때 인수가 적절하게 들어가있어야 합니다. 하지만 기본값이 정해진 인수는 함수 호출 시 생략하여도 무방합니다. 기본값을 설정하는 방법은 <strong>함수 정의 시 <code>변수명=값</code></strong> 으로 작성하는 것입니다. (함수 호출시 등호(=)를 이용하는 건 또 다른 개념입니다.) 다음 예제를 참고해주세요.</p>
<pre><code class="language-python">def say_hi(a='철수', b=10, c=20):
    print('안녕 ' + str(a) + '야, ' + '나는 ' + str(b) + 
        '살이고 내 형은 ' + str(c) + '살이야.')

say_hi()
say_hi('영미')
say_hi('영미', 15)
say_hi('영미', 15, 25)
</code></pre>
<p>다음은 결과입니다.</p>
<pre><code class="language-plaintext">안녕 철수야, 나는 10살이고 내 형은 20살이야.
안녕 영미야, 나는 10살이고 내 형은 20살이야.
안녕 영미야, 나는 15살이고 내 형은 20살이야.
안녕 영미야, 나는 15살이고 내 형은 25살이야.
</code></pre>
<hr>
<p>기본값을 넣은 인수 이후에는 기본값이 없는 인수가 등장할 수 없습니다. 아래와 같은 코드를 사용하게 되면 <strong>함수 정의 단계에서</strong> 에러가 발생합니다.</p>
<pre><code class="language-python">def say_hi(a='철수', b, c=20):
    print('안녕 ' + str(a) + '야, ' + '나는 ' + str(b) + 
        '살이고 내 형은 ' + str(c) + '살이야.')
</code></pre>
<pre><code class="language-plaintext">  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 1
    def say_hi(a='철수', b, c=20):
              ^
SyntaxError: non-default argument follows default argument
</code></pre>
<p><code>b</code>는 기본값이 없으므로 무조건 채워야 하는데, <code>b</code>의 위치는 두번째입니다. 즉 <code>b</code>의 내용을 채워넣으려면 첫번째인 <code>a</code> 또한 매번 인수로 값을 받을 수 밖에 상황이기에 <code>a</code>의 <code>default</code>는 사실상 필요가 없어집니다. 이러한 설계상의 결함을 최소화하기 위해 아예 에러로 처리하는 파이썬 인터프리터의 모습을 확인할 수 있습니다. (추가 예정)</p>
<hr>
<h2>가변 인수 (variadic arguments)</h2>
<p>파이썬은 가변 인수를 활용할 수 있습니다. 가변 인수란 &quot;인수의 개수가 변할 수 있다&quot;라는 뜻입니다. 특징은 다음과 같습니다.</p>
<ul>
<li>변수명 바로 앞에 별표(<code>*</code>)만 첨가하여 바로 사용할 수 있습니다.</li>
<li>함수 내에서  <strong>튜플(tuple)</strong> 로 제공됩니다.</li>
<li>기본값을 지정할 수 없습니다.</li>
<li>함수에 하나에 최대 하나만 존재합니다. <code>def example(a, *b, *c):</code>와 괕이 정의하면 바로 에러가 발생합니다.</li>
<li>함수를 호출할 때 가변 인수에 값이 하나도 전달되지 않아도 됩니다.</li>
</ul>
<pre><code class="language-python">def example(apple, banana, *stuff):
    print(apple, banana, stuff)
example('철수', '영미')
example('철수', '영미', '진수', '나영', '태현')
</code></pre>
<pre><code class="language-plaintext">철수 영미 ()
철수 영미 ('진수', '나영', '태현')
</code></pre>
<p>위 예제에서 stuff는 인수가 나열된 튜플입니다. 우리는 <code>for</code> 가등을 이용하여 인수를 활용해볼 수 있을 것입니다.</p>
<hr>
<h2>위치 인수와 키워드 전용 인수</h2>
<p>이 용어는 <code>전문가를 위한 파이썬</code>의 번역본을 그대로 가져왔습니다.</p>
<p><strong>위치 인수(positional argumnet)</strong> 란 함수에게 인수를 전달할 때 첫 번째 위치, 두 번째 위치 등 위치 기반으로 전달되는 인수입니다. 모든 위치 인수는 키워드로서 전달할 수 있습니다. 키워드로서 전달하는 방법은 <strong>함수 호출 시</strong> 인수를 적을 때 <code>인수명=값</code>과 같이 작성하면 됩니다. 아래 예시를 참고해주세요.</p>
<pre><code class="language-python">def example(apple, banana):
    print(apple, banana)
example('철수', '영미')
example(banana='철수', apple='영미')
</code></pre>
<pre><code class="language-plaintext">철수 영미
영미 철수
</code></pre>
<p>키워드 인수와 위치 인수는 혼합하여 사용할 수 있습니다. 다만 함수 호출 시 키워드로서 인수 전달은 반드시 위치 인수 뒤에 있어야 합니다. 다음 예제를 참조해주세요.</p>
<pre><code class="language-python">def example(apple, banana):
    print(apple, banana)
# example(banana='철수', '영미')
# 설명 : 에러입니다. 키워드 인수 전달은 반드시 위치 인수보다 뒤에 있어야 합니다.

# example('철수', apple='영미')
# 설명 : 에러입니다. 첫번째 두번째 모두 apple 인수를 가리키고 있습니다.

example('철수', banana='영미') 
# 설명 : 성공입니다.
</code></pre>
<pre><code class="language-plaintext">철수 영미
</code></pre>
<hr>
<p><strong>키워드 전용 인수(keyword-only argumnet)</strong> 는 결코 위치 기반으로 전달될 수 없는 인수를 뜻합니다. 특징은 다음과 같습니다.</p>
<ul>
<li>키워드 전용 인수로 설정하는 방법은 크게 어렵지 않습니다. 별표(<code>*</code>) 뒤에, 즉 가변 위치 인수 뒤의 것들은 모두 키워드 전용이 됩니다.</li>
<li>기본값(default)를 지정해도 되고 지정하지 않아도 됩니다.</li>
<li>위치 인수와 달리 기본값이 있는 것과 없는 것 사이의 순서는 상관이 없습니다.</li>
</ul>
<pre><code class="language-python">def example(apple, banana, *stuff, magic='마술', car):
    print(apple, banana, stuff, car, magic)

# example('철수', '영미')
# 설명: 에러입니다. car을 무조건 지정해야 합니다.

# example('철수', '영미', '진수', '나영', '태현') 
# 설명: 에러입니다. 가변 인수는 모두 stuff로 들어가기 때문에 
# 마찬가지로 car이 지정되지 않았습니다.

example('철수', '영미', '진수', '나영', '태현', car='포르쉐') 
# 설명: 성공적입니다.
</code></pre>
<pre><code class="language-plaintext">철수 영미 ('진수', '나영', '태현') 포르쉐 마술
</code></pre>
<hr>
<h3>가변 인수 없는 키워드 전용 인수</h3>
<p>가변 인수 없이 키워드 전용 인수를 사용하고 싶다면, 별표(<code>*</code>)만 하나 들어간 인수를 설정해주면 됩니다.</p>
<pre><code class="language-python">def f(a, *, b):
    print(a + b)

f(1, b=2)
# f(3, 4) ## 에러입니다. b는 무조건 키워드로 접근해야 합니다.
</code></pre>
<pre><code class="language-plaintext">3
</code></pre>
<hr>
<h3>키워드 전용 가변 인수</h3>
<p>키워드 전용 인수 또한 가변 인수를 설정할 수 있습니다. 방법은 위치 가변 인수와 비슷한데, 별표(<code>*</code>) 하나가 아니라 두개(<code>**</code>)를 변수명 앞에 붙여주면 됩니다. 특징은 다음과 같습니다.</p>
<ul>
<li>함수 내에서  <strong>딕셔너리(dictionary)</strong> 로 제공됩니다.</li>
<li>마찬가지로 기본값을 지정할 수 없습니다.</li>
<li>마찬가지로 함수에 하나에 최대 하나만 존재합니다. <code>def example(a, **b, **c):</code>와 같이 정의하면 바로 에러가 발생합니다.</li>
<li>위치 가변 인수와 함께 사용할 수 있습니다. <code>def example(a, *b, **c):</code>는 문제 없습니다.</li>
<li>위치 가변 인수 뒤에 존재해야 합니다. <code>def example(a, **b, *c):</code>는 에러입니다.</li>
<li>뒤에 키워드 전용 인수가 올 수 없습니다. <code>def example(a, *b, **c, d=10)</code>는 에러를 일으킵니다.</li>
<li>함수를 호출할 때 가변 인수에 값이 하나도 전달되지 않아도 됩니다.</li>
</ul>
<p>아래는 예시입니다.</p>
<pre><code class="language-python">def example(apple, banana, **stuff):
    print(apple, banana, stuff)
example('철수', '영미')

# example('철수', '영미', '민수')
# 설명 : 위치 인수는 가변 인수 없이 2개만 
# 받고 있으므로 '민수'는 갈 데가 없어서
# 에러가 발생합니다.

example('철수', '영미', smart='민수')
</code></pre>
<pre><code class="language-plaintext">철수 영미 {}
철수 영미 {'smart': '민수'}
</code></pre>
<hr>
<h2>위치 전용 인수</h2>
<p>2019년 10월 14일 업데이트 된 파이썬 3.8에서 새롭게 추가된 내용입니다. 기본적으로 인수는 위치 인수이고, 키워드를 통해서도 접근할 수 있다고 하였습니다. 하지만 위치로만 접근할 수 있고 키워드로는 접근할 수 없도록 제한하는 방법이 새로이 등장했습니다. 그것은 위치 인수 사이에 <code>/</code>라는 인수를 추가하는 것입니다. <code>/</code>를 기준으로 왼쪽에 있는 변수들은 모두 위치 전용 인수가 됩니다.</p>
<pre><code class="language-python">def f(a, b, /, c, d, *, e, f):
    print(a, b, c, d, e, f)
# a, b는 위치 전용 인수이고 c, d는 일반 위치 인수이고 e, f는 키워드 전용 인수입니다.

f(10, 20, 30, d=40, e=50, f=60)
# 올바른 사용입니다. 

f(10, b=20, c=30, d=40, e=50, f=60)
# 에러입니다. b는 키워드로 접근할 수 없습니다.

f(10, 20, 30, 40, 50, f=60)   
# 에러입니다. e는 위치 기반으로 접근할 수 없습니다.
</code></pre>
<p>위치 전용 인수는 일반 사용자보다는 라이브러리 설계자가 이용하도록 고안된 것이며 우리가 함수를 정의할 때 이를 사용하는 일은 드물 것입니다. 하지만 파이썬 표준에 포함된 만큼 어떤 라이브러리가 <code>/</code>를 사용한다고 했을 때 무슨 용도인지는 이해하여야 할 것이기에, 짧게나마 소개해봤습니다.</p>
<hr>
<h2>순서</h2>
<p>함수를 정의할 때 인수의 순서는 명확하게 정리되겠죠? 왼쪽에서부터 오른쪽까지 다음 순서입니다.</p>
<ol>
<li><strong>위치 인수 (기본값 X)</strong></li>
<li><strong>위치 인수 (기본값 O)</strong></li>
<li><strong><code>/</code> (위치 인수들 어딘가에 존재)</strong></li>
<li><strong>위치 가변 인수 (<code>*</code>)</strong></li>
<li><strong>키워드 전용 인수 (기본값 유무 상관 없음)</strong></li>
<li><strong>키워드 전용 가변 인수 (<code>**</code>)</strong></li>
</ol>
<p>다음은 함수를 호출할 때의 순서입니다.</p>
<ol>
<li><strong>키워드 없이, 차례대로</strong></li>
<li><strong>키워드 있게, 순서 상관없이</strong></li>
</ol>
<hr>
<h2>팁</h2>
<h3>기본 값 없이 선택사항으로 만들고 싶을 때</h3>
<p>기본 값을 특별히 만들고 싶지는 않지만 선택사항으로 두어 인수를 빼먹어도 에러가 나지 않도록 프로그램을 만들고 싶습니다. 그렇다면 None 객체를 활용합시다. 다음은 예시입니다.</p>
<pre><code class="language-python">def example(a, b, c=None):
    print(f'a({a})와 b({b})는 필수입니다.')
    if c is not None:
        print(f'c 값이 들어왔습니다. ==&gt; {c}')
    else:
        print('c 값이 들어오지 않았습니다.')

example(10, 20)
example(300, 400, 500)
</code></pre>
<pre><code class="language-plaintext">a(10)와 b(20)는 필수입니다.
c 값이 들어오지 않았습니다.
a(300)와 b(400)는 필수입니다.
c 값이 들어왔습니다. ==&gt; 500
</code></pre>
<hr>
<h2>문서 읽어보기</h2>
<h3>print</h3>
<p>우리가 밥먹듯이 쓰는 print 함수의 문서를 찾아봅시다. 정의는 다음과 같습니다.</p>
<pre><code class="language-python">print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False):
    # 내용
</code></pre>
<p>첫번째로 가변 인수 <code>objects</code>가 등장합니다. 즉 우리가 <code>print('안녕', '파워', '맨~', '커피')</code>와 같이 인수를 무제한으로 넣어도 잘 작동됨을 확인할 수 있습니다. <code>sep</code>, <code>end</code>, <code>file</code>, <code>flush</code>는 <strong>기본값이 있는 키워드 전용 인수</strong> 임을 확인할 수 있습니다. 기본값이 있기 때문에 따로 지정해주지 않아도 알아서 잘 작동했구나 알 수 있습니다.</p>
<p>인수가 각각 어떤 역할을 하는지 좀 더 문서를 자세히 살펴봐야겠습니다. 여러분께서 직접 찾아보셔도 되지만, <code>file</code>과 <code>flush</code>는 출력 방식과 관련된 내용이라 어려우니 패스하고 <code>sep</code>와 <code>end</code>가 어떤 역할인지만 살펴봅시다.</p>
<ul>
<li><code>sep</code> : <code>print</code>의 인수로 여러 개가 들어왔을 때 그것들을 구분할 문자</li>
<li><code>end</code> : <code>print</code>가 모든 문자열의 출력을 마치고 마지막으로 출력할 문자</li>
</ul>
<p>위에서 살펴 보았듯 <code>sep</code>에는 공백 하나가 기본값으로 되어 있고, <code>end</code>는 줄바꿈으로 되어있습니다. 직접 내용을 설정해서 호출해 볼까요?</p>
<pre><code class="language-python">print('안녕','하세요','반갑','습니다','하하',sep='(^o^)',end=' 뽜이야~')
print('  줄이 안바뀌었네요..?')
</code></pre>
<pre><code class="language-plaintext">안녕(^o^)하세요(^o^)반갑(^o^)습니다(^o^)하하 뽜이야~  줄이 안바뀌었네요..?
</code></pre>
<p>어떤가요? 문서가 좀 더 잘 이해되시나요?</p>
<hr>
<h3>pandas.read_excel</h3>
<pre><code class="language-python">pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skip_footer=0, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)
</code></pre>
<p>어마어마하게 기네요.. <code>io</code>는 필수로 넣어야 할 위치 인수임을 바로 확인할 수 있고, 나머지는 선택 사항인 인수들입니다. 그 다음에는 마지막으로 <code>kwds</code>라는 <strong>키워드 전용 가변 인수</strong> 가 등장합니다. 설명은 따로 다시 찾아봐야 하겠지만, 함수 사용법을 일차적으로 이해하는 데 큰 의의가 있다는 것을 명심해주세요!</p>
<hr>
<h2>여담</h2>
<p>별표는 영어로 <strong>Asterisk</strong> 라고 합니다. 아스터리스크 라고 읽는지..는 잘 모르겠습니다 호호. 별표를 영어로 검색할 일이 있을 때 참고하도록 합니다.</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>함수를 정의할 때 인수의 순서가 어떻게 되는가?</li>
<li>인수의 기본값은 어떻게 지정하는가?</li>
<li>함수를 호출할 때 키워드를 지정하는 방법은 무엇인가?</li>
<li>가변 인수란 무엇인가?</li>
<li>가변 인수를 함수 내에서 이용하려면 (값을 뽑아내려면) 어떻게 해야 하는가?</li>
<li>키워드 전용 가변 인수는 무엇인가?</li>
<li>키워드 전용 가변 인수를 함수 내에서 이용하려면 (값을 뽑아내려면) 어떻게 해야 하는가?</li>
</ul>
<hr>
<h2>프로그래밍 문제</h2>
<h3><code>argparse</code></h3>
<p><code>argparse</code> 모듈은 파이썬 스크립트를 콘솔에서 실행시킬 때 명령행 인자를 더 편리하게 관리해주는 기능을 제공합니다. 단순한 문자열의 리스트로 들어오는 데이터를 유의미한 데이터로 쉽게 변환하는 데 그 의의가 있습니다. 기본적인 사용 흐름과 예시는 다음과 같습니다.</p>
<pre><code class="language-mermaid-execute">graph TD
p1[&quot;python test.py data.xlsx --temp template.html&lt;br&gt;를 콘솔에 입력합니다.&quot;]
p1 --&gt; p2
p2[&quot;sys.argv에 문자열을&lt;br&gt; 담은 리스트 형태로&lt;Br&gt;데이터가 생성됩니다.&lt;br&gt;(공백으로 리스트의&lt;br&gt;항목이 구분됩니다.)&quot;]
p2 -.- s1[&quot;import sys&lt;br&gt;print(sys.argv)&quot;]
s1 -.-&gt; s2[&quot;['test.py', 'foo', '--bar', 'data.xlsx']&quot;]
p2 --&gt; p3[&quot;parser.parse_args()&lt;br&gt;를 통해 미리 작성된&lt;br&gt;설정을 바탕으로 sys.argv&lt;br&gt;를 읽고 데이터가 담긴&lt;br&gt;객체를 반환합니다.&quot;]
a1[&quot;import argparse&lt;br&gt;parser = argparse.ArgumentParser(...)&lt;br&gt;를 통해 ArgumentParser 객체를 생성합니다.&quot;]
a2[&quot;parser.add_argument(...)&lt;br&gt;를 통해 불러올 데이터를&lt;br&gt;미리 설정합니다.&quot;]
a2 --&gt; a2
a1 --&gt; a2
a2 --&gt; p3
</code></pre>
<p><em><code>argparse</code> 모듈을 사용하는 흐름</em></p>
<p>그리고 <code>test.py</code> 파일을 아래와 같이 작성합니다.</p>
<pre><code class="language-python">import argparse
import sys
parser = argparse.ArgumentParser()
parser.add_argument('data')
parser.add_argument('-t', '--temp')
args = parser.parse_args()
print(sys.argv)
print(args)
</code></pre>
<p>그리고 콘솔에서 <code>cd</code> 명령을 통해 작업 디렉토리를 파이썬 코드가 있는 폴더로 옮깁니다. 예제의 경우에는 바탕화면에 저장되어 있으므로 <code>cd desktop</code>으로 하였습니다. 그 이후 <code>python</code> 명령으로 작성한 파일을 실행시킵니다.</p>
<pre><code class="language-plaintext">PS C:\Users\tooth&gt; cd desktop
PS C:\Users\tooth\Desktop&gt; python test.py data.xlsx --temp template.html
['test2.py', 'data.xlsx', '--temp', 'template.html']
Namespace(data='data.xlsx', temp='template.html')
</code></pre>
<p>여기서 <a href="https://docs.python.org/ko/3/library/argparse.html"><code>add_argument</code> 메서드의 설명</a>을 잠시 끌어와보겠습니다.</p>
<p><code>ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</code></p>
<ul>
<li><code>default</code> : 해당 옵션의 기본 값을 지정합니다.</li>
<li><code>help</code> : 해당 옵션의 도움말을 지정합니다.</li>
<li><code>choices</code> : 해당 옵션의 선택가능한 리스트를 지정합니다. 예를 들어 <code>['red', 'black']</code>이라고 지정하면 <code>red</code>, <code>black</code> 외의 문자열은 지정할 수 없습니다.</li>
<li><code>required</code> : 해당 옵션의 필수 유무를 지정합니다. 기본적으로는 <code>False</code> 입니다.</li>
</ul>
<p>(후략)</p>
<hr>
<h4>문제</h4>
<ol>
<li>
<p><code>parser.add_argument('--name', default=&quot;Peter&quot;)</code>는 어떻게 동작하는가?</p>
</li>
<li>
<p><code>parser.add_argument('-d', '--data', required=True)</code>는 어떻게 동작하는가?</p>
</li>
<li>
<p><code>parser.add_argument('type', help=&quot;색깔을 정하세요&quot;, choices=['red', 'black', 'blue'])</code> 는 어떻게 동작하는가?</p>
</li>
<li>
<p>데이터 엑셀 파일과 템플릿 HTML 파일을 인수로 받고자 한다. 데이터 엑셀 파일의 기본 값은 <code>data.xlsx</code>, HTML 파일은 <code>template.html</code>로 지정하고자 하고 이 인수를 필수로 받고자 한다. 그에 따라 <code>add_argument</code> 메소드를 적절히 호출하라.</p>
</li>
</ol>
<hr>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2019-12-22 14:21:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-22 05:21:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-27 14:55:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-27 05:55:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%9c%a0%ec%97%b0%ed%95%9c-%ed%95%a8%ec%88%98-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 상속 ~ 클래스 확장하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/981</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-01-12 15:10:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-01-12 06:10:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 매번 attack과 health를 지정해주기 귀찮으니 함수에 기본 값(default)을 설정해보도록 합시다. 다음과 같이 함수의 인수에 =을 붙여주면 해당 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1578809451.949455;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1579008222.38678;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1127</wp:comment_id>
			<wp:comment_author><![CDATA[[파이썬] print의 결과를 변수에 저장하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1618</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-21 15:10:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-21 06:10:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 같은 용법은 위치 기반 가변 인수를 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587449417.024213;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1587507473.553211;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1195</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 정체성, 동질성 ~ 객체의 성질 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/599</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-28 17:17:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-28 08:17:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 다양한 함수 인수 – 유연한 함수 만들기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588061958.762391;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588061839.572687;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1213</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 반복문 코딩하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1809</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-30 09:22:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-30 00:22:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] print에 좀 더 신경쓴 모습입니다. 실제 동작은 똑같습니다. 앞으로 print를 더 잘 쓰는 방법에 대해서 배우게 될 테지만 간략한 방법 하나를 바로 소개해드리겠습니다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588206153.942148;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588207488.761135;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 함수와 메소드의 호출 ~ 편리한 기능 이용하기]]></title>
		<link>https://elvanov.com/371</link>
		<pubDate>Tue, 24 Dec 2019 12:28:25 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=371</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:insert-pages/block {"url":"https://elvanov.com/python-contents","page":240,"display":"content"} /-->

<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n## 함수(function)\n\n우리는 지금까지 `print`와 `input`을 잘 써왔습니다. 이것들을 함수(function)라고 합니다. 여기서 말하는 함수는 수학에서 이야기하는 `y=f(x)` 와는 느낌이 조금 다릅니다.\n\n함수를 이용하여 우리는 편리한 기능을 손쉽게 사용할 수 있습니다. 우리는 함수를 사용한다고 이제껏 이야기 하였습니다. 하지만 함수를 사용하는 동작은 더 정확히 이야기를 하면 함수를 **호출** 한다는 것입니다.\n\n함수를 호출하는 방법은 이전에 했던 대로 함수 이름을 먼저 적고 소괄호 안에 **인수** 를 넣으면 됩니다. `print(\u0022텍스트\u0022)` 이렇게요! 인수란 함수에게 넘어가는 값들을 이야기합니다. 인수는 없을 수도 있고, 하나일 수도 있고, 여러개일 수도 있습니다. 단, 함수마다 받는 인수는 어느 정도 정해져있어서, 쓰라는 대로 알맞게 인수를 넣어야 함수가 의도대로 작동합니다.\n\n호출과 인수에 관한 내용은 우리가 [직접 함수를 만들어보는](270) 시간을 가지면서 더 자세히 알아보도록 합니다. 일단은 넘어갑시다.\n\n\u002d\u002d-\n\n## 함수와 메소드의 차이점\n\n함수(function)와 메소드(method)는 거의 똑같지만 딱 한 가지 차이점이 있습니다. 그것은 바로 메소드는 어딘가에 속해있다는 점입니다. 우리가 리스트 내 수들의 합계를 구할 때 `sum(list)`와 같이 `sum`을 호출하고 `list`를 인수로 두었습니다. 이 때 `sum`은 함수입니다.\n\n하지만 리스트의 항목을 추가하려고 할 때 우리는 `list.append(10)`과 같이 작성했습니다. `append` 왼쪽의 `.`이 보이시나요? 이 `.`은 `list`에 속해있다는 것을 뜻합니다. 우리는 `append(list)`와 같이 사용할 수 없습니다.\n\n\n\n\u002d\u002d-\n\n## 내장 함수\n\n내장 함수란 파이썬 어디에서나 사용할 수 있는 함수를 뜻합니다. 우리는 `print`나 `sum` 같은 함수를 아무런 준비 작업 없이 바로 작성했습니다. 그렇다면 준비 작업이 필요한 함수도 있다는 뜻일까요? 맞습니다. 어떤 함수들은 [모듈(module)](457)이라는 것을 불러와서 사용할 수도 있고, 우리가 직접 만들어서 사용할 수도 있습니다. 둘 다 이번 시간에 다루는 내용은 아니므로 이후로 미뤄둡시다.\n\n\u003e int, list, str 등은 정확히 이야기하면 내장 함수가 아니라 **내장 클래스**이지만, 일단은 함수와 똑같이 작동할 수 있으므로 크게 신경쓰지 않아도 됩니다.\n\n\u002d\u002d-\n\n### 내장 함수는 키워드(문법)가 아닙니다.\n\n내장 함수나 `int` 등의 기본 형의 이름은 키워드가 아닙니다. 키워드가 아니라는 것은 무슨 뜻일까요? 이는 우리가 일반적으로 사용하는 변수처럼 작동한다는 뜻입니다. `if`와 같은 키워드는 우리가 `if = 30` 등으로 변수처럼 이용하려고 해도 불가능합니다. 하지만 `print`는 가능합니다. 다음 예제를 봅시다.\n\n```python\nprint = 30\na = print + 3\nprint(a) # 에러\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 3, in \u003cmodule\u003e\n    print(a)\nTypeError: 'int' object is not callable\n``` \n\n첫째 줄에서 `print = 30`이라고 대입문을 사용했습니다. 이렇게 된다면 이 `print`는 더이상 내장 함수 `print`가 아니라 정수 `30`을 가지고 있는 일반 변수가 되어버립니다. 그래서 마지막에 본래 의도대로 사용하려고 `print(a)`를 작성했으나 에러가 떴습니다. \n\n내장 함수에 대해 조금만 익숙해져도 이름을 겹쳐서 사용할 일은 거의 없을 것입니다. 모든 내장 함수와 정확한 사용법은 다음 링크에서 확인하실 수 있습니다. 초급 단계에서 더 자주 쓰는 함수와 호출법은 이 글 아래쪽에서 간단히 소개합니다.\n[https://docs.python.org/ko/3/library/functions.html](https://docs.python.org/ko/3/library/functions.html)\n\n\u002d\u002d-\n\n## 반환 값\n\n함수의 결과로 어떤 값이 나온다는 것을 더 정확히 이야기해서 **이 함수는 값을 반환한다.** 라고 합니다. `print` 함수는 반환값이 없고, `input`, `sum`과 같은 함수는 반환값이 있지요. 아래 예제를 해봅시다.\n\n```python\na = print(\u0022테스트1\u0022)\nb = input(\u0022테스트2\u0022)\nc = sum([1,3,2,4,6])\nprint(a)\nprint(b)\nprint(c)\n```\n\n`b`는 `input`이라서 \u0022테스트입니다~\u0022라고 적어보았습니다. 결과는 다음과 같습니다.\n\n```plaintext\n테스트1\n테스트2테스트입니다~\nNone\n테스트입니다~\n16\n```\n\n반환 값은 있을 수도, 없을 수도 있습니다. 변수 `a`는 `print`의 반환 값을 받도록 되어있으나, `print` 함수는 반환 값이 없기 때문에 `a`의 출력이 `None`임을 확인하실 수 있습니다. `None`은 아무 것도 아니라는 뜻입니다.\n\n\u002d\u002d-\n\n## 내장 함수 목록\n\n파이썬의 초보 단계에서 자주 접하는 내장 함수는 리스트를 다룰 때 많이 사용했습니다. 리스트를 다루는 내장 함수는 [리스트와 for](https://elvanov.com/273#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB\u002d\u002d28) 강좌를 참조해주세요. 리스트를 다루지 않는 내장 함수 몇 개를 소개합니다.\n\n### input\n\n- 사용법 : `input(message)`\n- 설명 : 사용자의 입력을 받습니다.\n\n### print\n\n- 사용법 : `print(message1, message2, ...)`\n- 설명 : 문자열을 모니터에 차례로 출력합니다.\n\n### abs\n\n- 사용법 : `abs(number)`\n- 설명 : 숫자의 절댓값을 구합니다. \n\n### divmod\n\n- 사용법 : `r1, r2 = abs(a, b)`\n- 설명 : `a`를 `b`로 나눈 몫 `r1`과 나머지 `r2`를 구합니다.\n\n### pow\n\n- 사용법 : `pow(a, b)`\n- 설명 : `a`의 `b`제곱(`a`의 `b`승)을 구합니다. **과 동일합니다.\n\n### round\n\n- 사용법 : `round(a)`또는 `round(a, b)`\n- 설명 : `a`를 반올림합니다. `a`만 넣으면 정수가 되도록 반올림됩니다. `b`를 넣으면 소수점 `b`개까지 보이도록, `b`가 음수라면 `b`만큼 `0`이 보입니다.\n\n### 형 변환과 관련된 것\n\n- 사용법 : `int(a)`\n- 설명 : `a`를 해당 타입으로 변환합니다. 변환에 실패하면 에러가 발생합니다.\n- 종류 : `int`, `float`, `str`, `bool`, `list` 등등\n\n### 기타\n\n- `range` ([for와 리스트 참조](https://elvanov.com/273#range\u002d\u002d17))\n\n### 사용 예제\n\n```python\npo = int(input(\u0022숫자를 입력하세요 \u003e\u003e \u0022))\nprint(po + 3)\nprint(\u0022abs:\u0022, abs(-5))\nr1, r2 = divmod(18, 7)\nprint(\u0022divmod:\u0022, r1, r2)\nprint(\u0022pow:\u0022, pow(2, 5))\nprint(\u0022round a:\u0022, round(1425.35))\nprint(\u0022round a,b(pos):\u0022, round(1425.35, 1))\nprint(\u0022round a,b(neg):\u0022, round(1425.35, -2))\nprint(int(\u00221234\u0022) + 123)\nprint(float(\u002213.24\u0022))\nprint(str(3.14) + \u0022입니다\u0022)\nprint(bool(23))\nprint(list(\u0022I like you\u0022))\n```\n```plaintext\n숫자를 입력하세요 \u003e\u003e 12\n15\nabs: 5\ndivmod: 2 4\npow: 32\nround a: 1425\nround a,b(pos): 1425.3\nround a,b(neg): 1400.0\n1357\n13.24\n3.14입니다\nTrue\n['I', ' ', 'l', 'i', 'k', 'e', ' ', 'y', 'o', 'u']\n```\n\n\u002d\u002d-\n\n## 문자열(str)의 메소드\n\n문자열(str)과 관련된 메소드도 참 편리한 것이 많은데요, 이는 다음 시간에 알아보도록 하겠습니다.\n\n## 연습 문제\n\n추가 예정\n\n## 프로그래밍 문제\n\n추가 예정"} -->
<div class="wp-block-jetpack-markdown"><hr>
<h2>함수(function)</h2>
<p>우리는 지금까지 <code>print</code>와 <code>input</code>을 잘 써왔습니다. 이것들을 함수(function)라고 합니다. 여기서 말하는 함수는 수학에서 이야기하는 <code>y=f(x)</code> 와는 느낌이 조금 다릅니다.</p>
<p>함수를 이용하여 우리는 편리한 기능을 손쉽게 사용할 수 있습니다. 우리는 함수를 사용한다고 이제껏 이야기 하였습니다. 하지만 함수를 사용하는 동작은 더 정확히 이야기를 하면 함수를 <strong>호출</strong> 한다는 것입니다.</p>
<p>함수를 호출하는 방법은 이전에 했던 대로 함수 이름을 먼저 적고 소괄호 안에 <strong>인수</strong> 를 넣으면 됩니다. <code>print(&quot;텍스트&quot;)</code> 이렇게요! 인수란 함수에게 넘어가는 값들을 이야기합니다. 인수는 없을 수도 있고, 하나일 수도 있고, 여러개일 수도 있습니다. 단, 함수마다 받는 인수는 어느 정도 정해져있어서, 쓰라는 대로 알맞게 인수를 넣어야 함수가 의도대로 작동합니다.</p>
<p>호출과 인수에 관한 내용은 우리가 <a href="270">직접 함수를 만들어보는</a> 시간을 가지면서 더 자세히 알아보도록 합니다. 일단은 넘어갑시다.</p>
<hr>
<h2>함수와 메소드의 차이점</h2>
<p>함수(function)와 메소드(method)는 거의 똑같지만 딱 한 가지 차이점이 있습니다. 그것은 바로 메소드는 어딘가에 속해있다는 점입니다. 우리가 리스트 내 수들의 합계를 구할 때 <code>sum(list)</code>와 같이 <code>sum</code>을 호출하고 <code>list</code>를 인수로 두었습니다. 이 때 <code>sum</code>은 함수입니다.</p>
<p>하지만 리스트의 항목을 추가하려고 할 때 우리는 <code>list.append(10)</code>과 같이 작성했습니다. <code>append</code> 왼쪽의 <code>.</code>이 보이시나요? 이 <code>.</code>은 <code>list</code>에 속해있다는 것을 뜻합니다. 우리는 <code>append(list)</code>와 같이 사용할 수 없습니다.</p>
<hr>
<h2>내장 함수</h2>
<p>내장 함수란 파이썬 어디에서나 사용할 수 있는 함수를 뜻합니다. 우리는 <code>print</code>나 <code>sum</code> 같은 함수를 아무런 준비 작업 없이 바로 작성했습니다. 그렇다면 준비 작업이 필요한 함수도 있다는 뜻일까요? 맞습니다. 어떤 함수들은 <a href="457">모듈(module)</a>이라는 것을 불러와서 사용할 수도 있고, 우리가 직접 만들어서 사용할 수도 있습니다. 둘 다 이번 시간에 다루는 내용은 아니므로 이후로 미뤄둡시다.</p>
<blockquote>
<p>int, list, str 등은 정확히 이야기하면 내장 함수가 아니라 <strong>내장 클래스</strong>이지만, 일단은 함수와 똑같이 작동할 수 있으므로 크게 신경쓰지 않아도 됩니다.</p>
</blockquote>
<hr>
<h3>내장 함수는 키워드(문법)가 아닙니다.</h3>
<p>내장 함수나 <code>int</code> 등의 기본 형의 이름은 키워드가 아닙니다. 키워드가 아니라는 것은 무슨 뜻일까요? 이는 우리가 일반적으로 사용하는 변수처럼 작동한다는 뜻입니다. <code>if</code>와 같은 키워드는 우리가 <code>if = 30</code> 등으로 변수처럼 이용하려고 해도 불가능합니다. 하지만 <code>print</code>는 가능합니다. 다음 예제를 봅시다.</p>
<pre><code class="language-python">print = 30
a = print + 3
print(a) # 에러
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 3, in &lt;module&gt;
    print(a)
TypeError: 'int' object is not callable
</code></pre>
<p>첫째 줄에서 <code>print = 30</code>이라고 대입문을 사용했습니다. 이렇게 된다면 이 <code>print</code>는 더이상 내장 함수 <code>print</code>가 아니라 정수 <code>30</code>을 가지고 있는 일반 변수가 되어버립니다. 그래서 마지막에 본래 의도대로 사용하려고 <code>print(a)</code>를 작성했으나 에러가 떴습니다.</p>
<p>내장 함수에 대해 조금만 익숙해져도 이름을 겹쳐서 사용할 일은 거의 없을 것입니다. 모든 내장 함수와 정확한 사용법은 다음 링크에서 확인하실 수 있습니다. 초급 단계에서 더 자주 쓰는 함수와 호출법은 이 글 아래쪽에서 간단히 소개합니다.
<a href="https://docs.python.org/ko/3/library/functions.html">https://docs.python.org/ko/3/library/functions.html</a></p>
<hr>
<h2>반환 값</h2>
<p>함수의 결과로 어떤 값이 나온다는 것을 더 정확히 이야기해서 <strong>이 함수는 값을 반환한다.</strong> 라고 합니다. <code>print</code> 함수는 반환값이 없고, <code>input</code>, <code>sum</code>과 같은 함수는 반환값이 있지요. 아래 예제를 해봅시다.</p>
<pre><code class="language-python">a = print(&quot;테스트1&quot;)
b = input(&quot;테스트2&quot;)
c = sum([1,3,2,4,6])
print(a)
print(b)
print(c)
</code></pre>
<p><code>b</code>는 <code>input</code>이라서 &quot;테스트입니다~&quot;라고 적어보았습니다. 결과는 다음과 같습니다.</p>
<pre><code class="language-plaintext">테스트1
테스트2테스트입니다~
None
테스트입니다~
16
</code></pre>
<p>반환 값은 있을 수도, 없을 수도 있습니다. 변수 <code>a</code>는 <code>print</code>의 반환 값을 받도록 되어있으나, <code>print</code> 함수는 반환 값이 없기 때문에 <code>a</code>의 출력이 <code>None</code>임을 확인하실 수 있습니다. <code>None</code>은 아무 것도 아니라는 뜻입니다.</p>
<hr>
<h2>내장 함수 목록</h2>
<p>파이썬의 초보 단계에서 자주 접하는 내장 함수는 리스트를 다룰 때 많이 사용했습니다. 리스트를 다루는 내장 함수는 <a href="https://elvanov.com/273#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB--28">리스트와 for</a> 강좌를 참조해주세요. 리스트를 다루지 않는 내장 함수 몇 개를 소개합니다.</p>
<h3>input</h3>
<ul>
<li>사용법 : <code>input(message)</code></li>
<li>설명 : 사용자의 입력을 받습니다.</li>
</ul>
<h3>print</h3>
<ul>
<li>사용법 : <code>print(message1, message2, ...)</code></li>
<li>설명 : 문자열을 모니터에 차례로 출력합니다.</li>
</ul>
<h3>abs</h3>
<ul>
<li>사용법 : <code>abs(number)</code></li>
<li>설명 : 숫자의 절댓값을 구합니다.</li>
</ul>
<h3>divmod</h3>
<ul>
<li>사용법 : <code>r1, r2 = abs(a, b)</code></li>
<li>설명 : <code>a</code>를 <code>b</code>로 나눈 몫 <code>r1</code>과 나머지 <code>r2</code>를 구합니다.</li>
</ul>
<h3>pow</h3>
<ul>
<li>사용법 : <code>pow(a, b)</code></li>
<li>설명 : <code>a</code>의 <code>b</code>제곱(<code>a</code>의 <code>b</code>승)을 구합니다. **과 동일합니다.</li>
</ul>
<h3>round</h3>
<ul>
<li>사용법 : <code>round(a)</code>또는 <code>round(a, b)</code></li>
<li>설명 : <code>a</code>를 반올림합니다. <code>a</code>만 넣으면 정수가 되도록 반올림됩니다. <code>b</code>를 넣으면 소수점 <code>b</code>개까지 보이도록, <code>b</code>가 음수라면 <code>b</code>만큼 <code>0</code>이 보입니다.</li>
</ul>
<h3>형 변환과 관련된 것</h3>
<ul>
<li>사용법 : <code>int(a)</code></li>
<li>설명 : <code>a</code>를 해당 타입으로 변환합니다. 변환에 실패하면 에러가 발생합니다.</li>
<li>종류 : <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>list</code> 등등</li>
</ul>
<h3>기타</h3>
<ul>
<li><code>range</code> (<a href="https://elvanov.com/273#range--17">for와 리스트 참조</a>)</li>
</ul>
<h3>사용 예제</h3>
<pre><code class="language-python">po = int(input(&quot;숫자를 입력하세요 &gt;&gt; &quot;))
print(po + 3)
print(&quot;abs:&quot;, abs(-5))
r1, r2 = divmod(18, 7)
print(&quot;divmod:&quot;, r1, r2)
print(&quot;pow:&quot;, pow(2, 5))
print(&quot;round a:&quot;, round(1425.35))
print(&quot;round a,b(pos):&quot;, round(1425.35, 1))
print(&quot;round a,b(neg):&quot;, round(1425.35, -2))
print(int(&quot;1234&quot;) + 123)
print(float(&quot;13.24&quot;))
print(str(3.14) + &quot;입니다&quot;)
print(bool(23))
print(list(&quot;I like you&quot;))
</code></pre>
<pre><code class="language-plaintext">숫자를 입력하세요 &gt;&gt; 12
15
abs: 5
divmod: 2 4
pow: 32
round a: 1425
round a,b(pos): 1425.3
round a,b(neg): 1400.0
1357
13.24
3.14입니다
True
['I', ' ', 'l', 'i', 'k', 'e', ' ', 'y', 'o', 'u']
</code></pre>
<hr>
<h2>문자열(str)의 메소드</h2>
<p>문자열(str)과 관련된 메소드도 참 편리한 것이 많은데요, 이는 다음 시간에 알아보도록 하겠습니다.</p>
<h2>연습 문제</h2>
<p>추가 예정</p>
<h2>프로그래밍 문제</h2>
<p>추가 예정</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date><![CDATA[2019-12-24 21:28:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-24 12:28:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-27 13:58:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-27 04:58:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%95%a8%ec%88%98%ec%99%80-%eb%a9%94%ec%84%9c%eb%93%9c%ec%9d%98-%ed%98%b8%ec%b6%9c-%ed%8e%b8%eb%a6%ac%ed%95%9c-%ea%b8%b0%eb%8a%a5-%ec%9d%b4%ec%9a%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8027</wp:comment_id>
			<wp:comment_author><![CDATA[성스러운 글 부디 올려주세요]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jjj2901@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[168.115.120.228]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-12-04 00:56:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-12-03 15:56:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[좋은 글 올려셔서 감사합니다. 설명을 너무 잘해주셔서 이해가 쏙쏙돼요 
그래서 아직 작성되지 않은 내용까지 너무 궁금합니다..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1638859471.175831;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638547005.724996;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 문자열 ~ 텍스트 다루기]]></title>
		<link>https://elvanov.com/413</link>
		<pubDate>Wed, 25 Dec 2019 05:43:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=413</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:insert-pages/block {"url":"https://elvanov.com/python-contents","page":240,"display":"content"} /-->

<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n이번 시간에는 문자열인 `str` 변수를 좀 더 편하게 사용해보겠습니다~\n\n\u002d\u002d-\n\n## 문자열 안에 특수 문자열 넣기\n\n문자열은 크게 두 가지 표기법이 있습니다. 바로 `'텍스트'`, `\u0022텍스트\u0022`와 같이 텍스트를 따옴표(`'`) 혹은 쌍따옴표(`\u0022`)로 감싸주면 됩니다. 하지만 만약에 파이썬 문법의 일부나 따옴표 혹은 쌍따옴표 그 자체를 문자로 사용하고 싶다면 어떻게 될까요? 다음 예제를 봅시다.\n\n```python\nprint(\u0022문자열 내에서 if와 같은 키워드는 무시됩니다.\u0022)\nprint(\u0022여기는 따옴표'가 들어갈 수 있습니다.\u0022)\nprint('여기는 쌍따옴표 \u0022가 들어갈 수 있습니다.')\nprint(\u0022여기서 쌍따옴표는 \\\u0022라고 써주면 됩니다.\u0022)\n```\n```plaintext\n문자열 내에서 if와 같은 키워드는 무시됩니다.\n여기는 따옴표''가 들어갈 수 있습니다.\n여기는 쌍따옴표 \u0022가 들어갈 수 있습니다.\n여기서 쌍따옴표는 \u0022라고 써주면 됩니다.\n```\n\n역슬래시(`\\`) 문자를 통해서 우리는 쌍따옴표 안에 쌍따옴표를 넣을 수 있습니다. 역슬래시의 기능은 바로 뒤에 나오는 문자를 특수하게 처리하라는 뜻입니다. 즉 `\\\u0022`는 문자열을 닫는 문법적 역할 `\u0022` 이 아닌 문자열 그 자체 `\u0022`로 쓰겠다는 뜻입니다. 슬래시(`/`)가 아님을 주의해주세요. 백스페이스 근처에 있는 역슬래시입니다. 역슬래시는 폰트에 따라서 원화(`￦`)로 표기되기도 하니 다르게 나온다고 해서 당황하시지 않아도 됩니다.\n\n\u002d\u002d-\n\n## 문자열과 for\n\n`for` 안에 문자열을 넣을 수 있습니다. 이 때, 순회하는 변수는 문자열의 각 글자를 가리키게 됩니다.\n\n```python\nfor s in \u0022안녕하세요\u0022:\n    print(s)\n```\n```plaintext\n안\n녕\n하\n세\n요\n```\n\n\u002d\u002d-\n\n## 여러 줄에 걸친 문자열 (긴 주석)\n\n파이썬에서는 여러 줄에 걸친 긴 문자열을 쓸 수 있습니다. 긴 문자열을 쓸 때에는 `'''`나 `\u0022\u0022\u0022`로 여러 줄에 걸친 문자열을 감싸주면 됩니다. 그 사이에 있는 모든 문자가 문자열이 되며, 줄바꿈 문자도 포함됩니다. 이는 아래 예시를 통해 확인하실 수 있습니다.\n\n```python\ntext = '''\nabcd\nefgh\nijkl\n'''\nprint(text)\n```\n```plaintext\n\nabcd\nefgh\nijkl\n\n```\n\n긴 주석을 문법적으로 지원하지는 않지만 이 긴 문자열을 어느 변수에도 대입하지 않는 방식으로 긴 주석처럼 활용할 수 있습니다. 실제로 파이썬에서는 이런 식으로 작성된 문자열을 문서로 취급하여 텍스트 에디터에서 도움말을 불러올 때 등에 자동으로 연동될 수 있도록 합니다.\n\n```python\n'''\n이 프로그램은 OOO입니다.\n어쩌구..저쩌구..\n제작자 : something@naver.com\n'''\n```\n\n\u002d\u002d-\n\n## f-string\n\n정식 명칭은 포맷 문자열 리터럴이며, 포맷을 지정하기 편리한 문자열 작성법입니다. 작성법은 일반 문자열과 거의 비슷하나, 따옴표 혹은 따옴표로 시작하기 직전에 `f`를 붙이는 것이 다릅니다. f-string 내부에는 중괄호(`{}`)와 함께 변수나 값을 씁니다. 예제를 함께 보십시다. 중괄호 내에는 값이 계산될 수 있으므로 `a + b`나 `round(a)`와 같이 식으로 작성할 수도 있습니다.\n\n```python\nnumber = 10\nprint(\u0022숫자는 \u0022 + str(number) + \u0022입니다.\u0022)\nprint(f\u0022숫자는 {number}입니다.\u0022) \n```\n```plaintext\n숫자는 10입니다.\n숫자는 10입니다.\n```\n\n\n기존에는 우리가 문자열 사이에 변수를 집어넣으려면 `+` 연산자와 `str` 내장 함수를 활용했어야 했습니다. 하지만 f-string을 이용하면 아주 쉽게 변수의 값을 끌어다 쓸 수 있다는 것을 확인하실 수 있습니다.\n\n\u002d\u002d-\n\nf-string에는 한층 더 편리한 기능이 있는데요, `{}` 내부에 있는 실제 코드와 함께 출력하고 싶다면 `}`로 닫기 전에 `=`를 넣으면 됩니다. 여기서의 등호는 대입문의 등호와 전혀 연관이 없습니다! 단지 f-string의 부가적인 사용법이라고 생각해주세요. 역시 예제를 확인합시다. 아래 3개의 `print` 문은 똑같은 결과를 출력합니다.\n\n```python\nnum = 14.73\nprint(\u0022round 예제 \u003e\u003e round(num) = \u0022 + str(round(num)))\nprint(f\u0022round 예제 \u003e\u003e round(num) = {round(num)}\u0022)\nprint(f\u0022round 예제 \u003e\u003e {round(num) = }\u0022)\n```\n```plaintext\nround 예제 \u003e\u003e round(num) = 15\nround 예제 \u003e\u003e round(num) = 15\nround 예제 \u003e\u003e round(num) = 15\n```\n\n이제부터 각종 에제에는 f-string을 적극적으로 사용할 예정이니 갑자기 이상한 문법이 나왔다고 해서 당황해주시지 말아 주세요~\n\n\u002d\u002d-\n\n\n## 편리한 메소드\n\n파이썬 자체적으로 제공하는 편리한 str 메소드가 많습니다. 메소드를 호출하는 방법은 크게 두 가지가 있습니다.\n\n- 따옴표 혹은 쌍따옴표 뒤에 바로 호출하기\n\n```python\n\u00221324132121\u0022.count(\u00221\u0022)\n```\n\n- 변수에 값을 넣어서 호출하기\n\n```python\ntem = \u0022{}야, 잘 잤니?\u0022\nresult = tem.format(\u0022철수\u0022)\n```\n\n이제 주로 사용되는 메소드나 기능을 알아보도록 합시다.\n\n\u002d\u002d-\n\n### 포매팅\n\n- 사용법 : `str.format(t1, t2, ...)`\n- 설명 : 해당 문자열의 포함된 필드를 차례로 치환합니다. 필드는 `{}`로 만들 수 있습니다. 일종의 템플릿을 만들어놓고 재사용하고자 할 때 유용합니다.\n\n\n\n- 예제\n```python\ntemplate = \u0022학생의 이름은 {}이고 점수는 {}입니다\u0022\nprint(template.format(\u0022태훈\u0022, 98))\nprint(template.format(\u0022팽수\u0022, 50))\n```\n```plaintext\n학생의 이름은 태훈이고 점수는 98입니다\n학생의 이름은 팽수이고 점수는 50입니다\n```\n\u002d\u002d-\n\n위 예제의 `template` 변수에서 `{}`는 총 2개가 등장합니다. 그에 따라 format 메소드를 호출할 때 2개의 인수를 받는다는 걸 확인할 수 있습니다. (`{}`가 더 많이 등장한다면 인수도 더 많이 받을 것입니다.) `\u0022태훈\u0022`은 앞쪽의 `{}`에 대응되고 `98`은 뒤쪽의 `{}`에 대응됩니다.\n\n일단 format 메소드에 대한 가장 기본적인 사용법에 대해 알려드렸으나, 실은 이 메소드의 사용법은 굉장히 방대하므로 공식 문서 혹은 다른 리소스도 찾아보시면 좋겠습니다.\n\n- 공식 문서 : [https://docs.python.org/ko/3/library/string.html#formatstrings](https://docs.python.org/ko/3/library/string.html#formatstrings)\n\n\n\u002d\u002d-\n\n### 검사 및 체크\n\n\n|사용법|설명|\n|\u002d\u002d-|\u002d\u002d-|\n|`a in text`|`in` 연산자는 리스트와 마찬가지로 내부에 문자열이 포함되어 있는지 여부에 대해 검사합니다.|\n|`text.startswith(a)`|`text`의 시작 부분이 `a`로 시작하는지에 대한 여부를 검사합니다.|\n|`text.endswith(a)`|`text`의 끝 부분이 `a`로 끝나는지에 대한 여부를 검사합니다.|\n|`text.isdigit()`|`text`가 숫자로 이루어진 수인지를 판단합니다.|\n\n- 예제\n\n```python\ntext = \u0022Do you wanna build a snowman?\u0022\nprint(f\u0022{text=}\u0022)\nprint(f\u0022{'build' in text=}\u0022)\nprint(f\u0022{'knock' in text=}\u0022)\nprint(f\u0022{text.startswith('Do')=}\u0022)\nprint(f\u0022{text.startswith('you')=}\u0022)\nprint(f\u0022{text.endswith('?')=}\u0022)\nprint(f\u0022{text.endswith('!')=}\u0022)\nprint(f\u0022{'42'.isdigit()=}\u0022)\nprint(f\u0022{text.isdigit()=}\u0022)\n```\n```plaintext\ntext='Do you wanna build a snowman?'\n'build' in text=True\n'knock' in text=False\ntext.startswith('Do')=True\ntext.startswith('you')=False\ntext.endswith('?')=True\ntext.endswith('!')=False\n'42'.isdigit()=True\ntext.isdigit()=False\n```\n\n\n\u002d\u002d-\n\n### 접근 및 탐색\n\n다음 메소드들은 문자열 내 포함된 문자열에 대해 접근하거나 탐색합니다. 어떤 문자열이 포함되어 있는지 여부만 검사한다면 `in` 연산자를 사용하는 게 더 편리합니다.\n\n|사용법|설명|\n|\u002d\u002d-|\u002d\u002d-|\n|`text[i]`|문자열에서 인덱스 `i`에 있는 문자 하나에 접근합니다. 리스트와 마찬가지로 첫 번째 글자는 `text[0]` 입니다.|\n|`text.count(a)`|문자열에서 `a`가 등장하는 횟수를 반환합니다.|\n|`text.find(a)`|문자열에서 `a`가 등장하는 곳의 인덱스를 반환합니다. `a`가 여러 번 등장한다면 가장 첫 번째의 인덱스를 반환합니다. `a`가 없으면 `-1`을 반환합니다.|\n|`text.index(a)`|`find`와 유사하지만 찾을 수 없는 경우에는 에러를 일으킵니다.|\n\n- 예시\n```python\ntext = \u0022Do you wanna build a snowman?\u0022\nprint(f\u0022{text=}\u0022)\nprint(f\u0022{text[3]=}\u0022)\nprint(f\u0022{text.count('a')=}\u0022)\nprint(f\u0022{text.count('nothing')=}\u0022)\nprint(f\u0022{text.find('build')=}\u0022)\nprint(f\u0022{text.find('nothing')=}\u0022)\nprint(f\u0022{text.index('wanna')=}\u0022)\nprint(f\u0022{text.index('nothing')=}\u0022)\n```\n```plaintext\ntext='Do you wanna build a snowman?'\ntext[3]='y'\ntext.count('a')=4\ntext.count('nothing')=0\ntext.find('build')=13\ntext.find('nothing')=-1\ntext.index('wanna')=7\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 9, in \u003cmodule\u003e\n    print(f\u0022{text.index('nothing')=}\u0022)\nValueError: substring not found\n```\n\n\n\u002d\u002d-\n\n### 조작\n\n다음 메소드들은 텍스트를 수정하거나 조작하는 데 좋습니다. 다만 모든 메소드는 수정된 텍스트가 새로 생성되어 반환되는 식으로 작동합니다. 단순히 메소드 호출만 하여서는 변경사항이 적용되지 않으므로 대입문을 별도로 써주어야 합니다.\n\n|사용법|설명|\n|\u002d\u002d-|\u002d\u002d-|\n|`text.partition(a)`|문자열에서 `a`를 찾습니다. 처음 발견되는 `a`를 기준으로 왼쪽, `a` 그 자체, `a`를 기준으로 오른쪽, 이렇게 세 부분으로 나누어 튜플로 반환합니다. (튜플이란 일단 고정된 리스트라고 생각해주세요. 자세한 내용은 튜플(추가 예정)에서 알아봅시다.)|\n|`text.split(a)`  또는 `text.split(a, b)`|문자열에서 `a`를 구분자로 정하여, 문자열에 있는 단어들의 리스트를 반환합니다. `b`가 주어지면 최대 `b` 번의 분할이 수행됩니다.|\n|`text.replace(a, b)` 또는 `text.replace(a, b, c)`|문자열 내 모든 `a`를 `b`로 치환합니다. `c`가 주어질 경우 최대 `c` 번의 치환이 수행됩니다.|\n|`text.strip()` 또는 `text.strip(a)`|문자열 앞 뒤의 공백을 제거합니다. `a`가 주어질 경우 `a`에 포함되는 모든 문자에 대해서 `text` 앞 뒤의 문자들을 제거합니다.|\n|`text.join(l)`|`l`은 리스트입니다. `text`를 구분자로 이용하여 `l`의 모든 요소를 합쳐서 하나의 문자열을 반환합니다. `\u0022\u0022.join(l)`은 구분자 없이 `l`의 모든 요소를 합칩니다.|\n\n- 예제\n\n```python\ntext = \u0022Do you wanna build a snowman?\u0022\nprint(f\u0022{text.partition('wanna')=}\u0022)\nprint(f\u0022{text.partition('nothing')=}\u0022)\nprint(f\u0022{text.split(' ')=}\u0022)\nprint(f\u0022{text.split('nothing')=}\u0022)\nprint(f\u0022{text.replace('build', 'throw')=}\u0022)\nprint(f\u0022{text.replace('nothing', 'done')=}\u0022)\nprint(f\u0022{'  하이    '.strip()=}\u0022)\nprint(f\u0022{text.strip('Do?anmw')=}\u0022)\nprint(f\u0022text는 수정되지 않았습니다. \u003e\u003e {text}\u0022)\n\nl = ['1','하이','파워','국어']\nprint(f\u0022{l=}\u0022)\nprint(f\u0022{''.join(l)=}\u0022)\nprint(f\u0022{', '.join(l)=}\u0022)\n```\n```plaintext\ntext.partition('wanna')=('Do you ', 'wanna', ' build a snowman?')\ntext.partition('nothing')=('Do you wanna build a snowman?', '', '')\ntext.split(' ')=['Do', 'you', 'wanna', 'build', 'a', 'snowman?']\ntext.split('nothing')=['Do you wanna build a snowman?']\ntext.replace('build', 'throw')='Do you wanna throw a snowman?'\ntext.replace('nothing', 'done')='Do you wanna build a snowman?'\n'  하이    '.strip()='하이'\ntext.strip('Do?anmw')=' you wanna build a s'\ntext는 수정되지 않았습니다. \u003e\u003e Do you wanna build a snowman?\nl=['1', '하이', '파워', '국어']\n''.join(l)='1하이파워국어'\n', '.join(l)='1, 하이, 파워, 국어'\n```\n\n인덱스 기반으로 `text`의 부분 문자열을 가져오는 슬라이싱은 차후 시간에 설명합니다. (추가 예정)\n\n\u002d\u002d-\n\n위에서 설명했던 메소드들은 자주 쓰는, 혹은 초보자들이 쓰기에 알맞은 메소드를 추린 것입니다. 더 자세하게 알고 싶다면 아래 링크를 참조해주세요.\n\n- [다소 간략한 버젼 (일반 블로그 포스팅)](https://withcoding.com/74)\n- [str 메소드 공식 문서](https://docs.python.org/ko/3/library/stdtypes.html#text-sequence-type-str)\n"} -->
<div class="wp-block-jetpack-markdown"><hr>
<p>이번 시간에는 문자열인 <code>str</code> 변수를 좀 더 편하게 사용해보겠습니다~</p>
<hr>
<h2>문자열 안에 특수 문자열 넣기</h2>
<p>문자열은 크게 두 가지 표기법이 있습니다. 바로 <code>'텍스트'</code>, <code>&quot;텍스트&quot;</code>와 같이 텍스트를 따옴표(<code>'</code>) 혹은 쌍따옴표(<code>&quot;</code>)로 감싸주면 됩니다. 하지만 만약에 파이썬 문법의 일부나 따옴표 혹은 쌍따옴표 그 자체를 문자로 사용하고 싶다면 어떻게 될까요? 다음 예제를 봅시다.</p>
<pre><code class="language-python">print(&quot;문자열 내에서 if와 같은 키워드는 무시됩니다.&quot;)
print(&quot;여기는 따옴표'가 들어갈 수 있습니다.&quot;)
print('여기는 쌍따옴표 &quot;가 들어갈 수 있습니다.')
print(&quot;여기서 쌍따옴표는 \&quot;라고 써주면 됩니다.&quot;)
</code></pre>
<pre><code class="language-plaintext">문자열 내에서 if와 같은 키워드는 무시됩니다.
여기는 따옴표''가 들어갈 수 있습니다.
여기는 쌍따옴표 &quot;가 들어갈 수 있습니다.
여기서 쌍따옴표는 &quot;라고 써주면 됩니다.
</code></pre>
<p>역슬래시(<code>\</code>) 문자를 통해서 우리는 쌍따옴표 안에 쌍따옴표를 넣을 수 있습니다. 역슬래시의 기능은 바로 뒤에 나오는 문자를 특수하게 처리하라는 뜻입니다. 즉 <code>\&quot;</code>는 문자열을 닫는 문법적 역할 <code>&quot;</code> 이 아닌 문자열 그 자체 <code>&quot;</code>로 쓰겠다는 뜻입니다. 슬래시(<code>/</code>)가 아님을 주의해주세요. 백스페이스 근처에 있는 역슬래시입니다. 역슬래시는 폰트에 따라서 원화(<code>￦</code>)로 표기되기도 하니 다르게 나온다고 해서 당황하시지 않아도 됩니다.</p>
<hr>
<h2>문자열과 for</h2>
<p><code>for</code> 안에 문자열을 넣을 수 있습니다. 이 때, 순회하는 변수는 문자열의 각 글자를 가리키게 됩니다.</p>
<pre><code class="language-python">for s in &quot;안녕하세요&quot;:
    print(s)
</code></pre>
<pre><code class="language-plaintext">안
녕
하
세
요
</code></pre>
<hr>
<h2>여러 줄에 걸친 문자열 (긴 주석)</h2>
<p>파이썬에서는 여러 줄에 걸친 긴 문자열을 쓸 수 있습니다. 긴 문자열을 쓸 때에는 <code>'''</code>나 <code>&quot;&quot;&quot;</code>로 여러 줄에 걸친 문자열을 감싸주면 됩니다. 그 사이에 있는 모든 문자가 문자열이 되며, 줄바꿈 문자도 포함됩니다. 이는 아래 예시를 통해 확인하실 수 있습니다.</p>
<pre><code class="language-python">text = '''
abcd
efgh
ijkl
'''
print(text)
</code></pre>
<pre><code class="language-plaintext">
abcd
efgh
ijkl

</code></pre>
<p>긴 주석을 문법적으로 지원하지는 않지만 이 긴 문자열을 어느 변수에도 대입하지 않는 방식으로 긴 주석처럼 활용할 수 있습니다. 실제로 파이썬에서는 이런 식으로 작성된 문자열을 문서로 취급하여 텍스트 에디터에서 도움말을 불러올 때 등에 자동으로 연동될 수 있도록 합니다.</p>
<pre><code class="language-python">'''
이 프로그램은 OOO입니다.
어쩌구..저쩌구..
제작자 : something@naver.com
'''
</code></pre>
<hr>
<h2>f-string</h2>
<p>정식 명칭은 포맷 문자열 리터럴이며, 포맷을 지정하기 편리한 문자열 작성법입니다. 작성법은 일반 문자열과 거의 비슷하나, 따옴표 혹은 따옴표로 시작하기 직전에 <code>f</code>를 붙이는 것이 다릅니다. f-string 내부에는 중괄호(<code>{}</code>)와 함께 변수나 값을 씁니다. 예제를 함께 보십시다. 중괄호 내에는 값이 계산될 수 있으므로 <code>a + b</code>나 <code>round(a)</code>와 같이 식으로 작성할 수도 있습니다.</p>
<pre><code class="language-python">number = 10
print(&quot;숫자는 &quot; + str(number) + &quot;입니다.&quot;)
print(f&quot;숫자는 {number}입니다.&quot;) 
</code></pre>
<pre><code class="language-plaintext">숫자는 10입니다.
숫자는 10입니다.
</code></pre>
<p>기존에는 우리가 문자열 사이에 변수를 집어넣으려면 <code>+</code> 연산자와 <code>str</code> 내장 함수를 활용했어야 했습니다. 하지만 f-string을 이용하면 아주 쉽게 변수의 값을 끌어다 쓸 수 있다는 것을 확인하실 수 있습니다.</p>
<hr>
<p>f-string에는 한층 더 편리한 기능이 있는데요, <code>{}</code> 내부에 있는 실제 코드와 함께 출력하고 싶다면 <code>}</code>로 닫기 전에 <code>=</code>를 넣으면 됩니다. 여기서의 등호는 대입문의 등호와 전혀 연관이 없습니다! 단지 f-string의 부가적인 사용법이라고 생각해주세요. 역시 예제를 확인합시다. 아래 3개의 <code>print</code> 문은 똑같은 결과를 출력합니다.</p>
<pre><code class="language-python">num = 14.73
print(&quot;round 예제 &gt;&gt; round(num) = &quot; + str(round(num)))
print(f&quot;round 예제 &gt;&gt; round(num) = {round(num)}&quot;)
print(f&quot;round 예제 &gt;&gt; {round(num) = }&quot;)
</code></pre>
<pre><code class="language-plaintext">round 예제 &gt;&gt; round(num) = 15
round 예제 &gt;&gt; round(num) = 15
round 예제 &gt;&gt; round(num) = 15
</code></pre>
<p>이제부터 각종 에제에는 f-string을 적극적으로 사용할 예정이니 갑자기 이상한 문법이 나왔다고 해서 당황해주시지 말아 주세요~</p>
<hr>
<h2>편리한 메소드</h2>
<p>파이썬 자체적으로 제공하는 편리한 str 메소드가 많습니다. 메소드를 호출하는 방법은 크게 두 가지가 있습니다.</p>
<ul>
<li>따옴표 혹은 쌍따옴표 뒤에 바로 호출하기</li>
</ul>
<pre><code class="language-python">&quot;1324132121&quot;.count(&quot;1&quot;)
</code></pre>
<ul>
<li>변수에 값을 넣어서 호출하기</li>
</ul>
<pre><code class="language-python">tem = &quot;{}야, 잘 잤니?&quot;
result = tem.format(&quot;철수&quot;)
</code></pre>
<p>이제 주로 사용되는 메소드나 기능을 알아보도록 합시다.</p>
<hr>
<h3>포매팅</h3>
<ul>
<li>
<p>사용법 : <code>str.format(t1, t2, ...)</code></p>
</li>
<li>
<p>설명 : 해당 문자열의 포함된 필드를 차례로 치환합니다. 필드는 <code>{}</code>로 만들 수 있습니다. 일종의 템플릿을 만들어놓고 재사용하고자 할 때 유용합니다.</p>
</li>
<li>
<p>예제</p>
</li>
</ul>
<pre><code class="language-python">template = &quot;학생의 이름은 {}이고 점수는 {}입니다&quot;
print(template.format(&quot;태훈&quot;, 98))
print(template.format(&quot;팽수&quot;, 50))
</code></pre>
<pre><code class="language-plaintext">학생의 이름은 태훈이고 점수는 98입니다
학생의 이름은 팽수이고 점수는 50입니다
</code></pre>
<hr>
<p>위 예제의 <code>template</code> 변수에서 <code>{}</code>는 총 2개가 등장합니다. 그에 따라 format 메소드를 호출할 때 2개의 인수를 받는다는 걸 확인할 수 있습니다. (<code>{}</code>가 더 많이 등장한다면 인수도 더 많이 받을 것입니다.) <code>&quot;태훈&quot;</code>은 앞쪽의 <code>{}</code>에 대응되고 <code>98</code>은 뒤쪽의 <code>{}</code>에 대응됩니다.</p>
<p>일단 format 메소드에 대한 가장 기본적인 사용법에 대해 알려드렸으나, 실은 이 메소드의 사용법은 굉장히 방대하므로 공식 문서 혹은 다른 리소스도 찾아보시면 좋겠습니다.</p>
<ul>
<li>공식 문서 : <a href="https://docs.python.org/ko/3/library/string.html#formatstrings">https://docs.python.org/ko/3/library/string.html#formatstrings</a></li>
</ul>
<hr>
<h3>검사 및 체크</h3>
<table>
<thead>
<tr>
<th>사용법</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a in text</code></td>
<td><code>in</code> 연산자는 리스트와 마찬가지로 내부에 문자열이 포함되어 있는지 여부에 대해 검사합니다.</td>
</tr>
<tr>
<td><code>text.startswith(a)</code></td>
<td><code>text</code>의 시작 부분이 <code>a</code>로 시작하는지에 대한 여부를 검사합니다.</td>
</tr>
<tr>
<td><code>text.endswith(a)</code></td>
<td><code>text</code>의 끝 부분이 <code>a</code>로 끝나는지에 대한 여부를 검사합니다.</td>
</tr>
<tr>
<td><code>text.isdigit()</code></td>
<td><code>text</code>가 숫자로 이루어진 수인지를 판단합니다.</td>
</tr>
</tbody>
</table>
<ul>
<li>예제</li>
</ul>
<pre><code class="language-python">text = &quot;Do you wanna build a snowman?&quot;
print(f&quot;{text=}&quot;)
print(f&quot;{'build' in text=}&quot;)
print(f&quot;{'knock' in text=}&quot;)
print(f&quot;{text.startswith('Do')=}&quot;)
print(f&quot;{text.startswith('you')=}&quot;)
print(f&quot;{text.endswith('?')=}&quot;)
print(f&quot;{text.endswith('!')=}&quot;)
print(f&quot;{'42'.isdigit()=}&quot;)
print(f&quot;{text.isdigit()=}&quot;)
</code></pre>
<pre><code class="language-plaintext">text='Do you wanna build a snowman?'
'build' in text=True
'knock' in text=False
text.startswith('Do')=True
text.startswith('you')=False
text.endswith('?')=True
text.endswith('!')=False
'42'.isdigit()=True
text.isdigit()=False
</code></pre>
<hr>
<h3>접근 및 탐색</h3>
<p>다음 메소드들은 문자열 내 포함된 문자열에 대해 접근하거나 탐색합니다. 어떤 문자열이 포함되어 있는지 여부만 검사한다면 <code>in</code> 연산자를 사용하는 게 더 편리합니다.</p>
<table>
<thead>
<tr>
<th>사용법</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text[i]</code></td>
<td>문자열에서 인덱스 <code>i</code>에 있는 문자 하나에 접근합니다. 리스트와 마찬가지로 첫 번째 글자는 <code>text[0]</code> 입니다.</td>
</tr>
<tr>
<td><code>text.count(a)</code></td>
<td>문자열에서 <code>a</code>가 등장하는 횟수를 반환합니다.</td>
</tr>
<tr>
<td><code>text.find(a)</code></td>
<td>문자열에서 <code>a</code>가 등장하는 곳의 인덱스를 반환합니다. <code>a</code>가 여러 번 등장한다면 가장 첫 번째의 인덱스를 반환합니다. <code>a</code>가 없으면 <code>-1</code>을 반환합니다.</td>
</tr>
<tr>
<td><code>text.index(a)</code></td>
<td><code>find</code>와 유사하지만 찾을 수 없는 경우에는 에러를 일으킵니다.</td>
</tr>
</tbody>
</table>
<ul>
<li>예시</li>
</ul>
<pre><code class="language-python">text = &quot;Do you wanna build a snowman?&quot;
print(f&quot;{text=}&quot;)
print(f&quot;{text[3]=}&quot;)
print(f&quot;{text.count('a')=}&quot;)
print(f&quot;{text.count('nothing')=}&quot;)
print(f&quot;{text.find('build')=}&quot;)
print(f&quot;{text.find('nothing')=}&quot;)
print(f&quot;{text.index('wanna')=}&quot;)
print(f&quot;{text.index('nothing')=}&quot;)
</code></pre>
<pre><code class="language-plaintext">text='Do you wanna build a snowman?'
text[3]='y'
text.count('a')=4
text.count('nothing')=0
text.find('build')=13
text.find('nothing')=-1
text.index('wanna')=7
Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 9, in &lt;module&gt;
    print(f&quot;{text.index('nothing')=}&quot;)
ValueError: substring not found
</code></pre>
<hr>
<h3>조작</h3>
<p>다음 메소드들은 텍스트를 수정하거나 조작하는 데 좋습니다. 다만 모든 메소드는 수정된 텍스트가 새로 생성되어 반환되는 식으로 작동합니다. 단순히 메소드 호출만 하여서는 변경사항이 적용되지 않으므로 대입문을 별도로 써주어야 합니다.</p>
<table>
<thead>
<tr>
<th>사용법</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text.partition(a)</code></td>
<td>문자열에서 <code>a</code>를 찾습니다. 처음 발견되는 <code>a</code>를 기준으로 왼쪽, <code>a</code> 그 자체, <code>a</code>를 기준으로 오른쪽, 이렇게 세 부분으로 나누어 튜플로 반환합니다. (튜플이란 일단 고정된 리스트라고 생각해주세요. 자세한 내용은 튜플(추가 예정)에서 알아봅시다.)</td>
</tr>
<tr>
<td><code>text.split(a)</code>  또는 <code>text.split(a, b)</code></td>
<td>문자열에서 <code>a</code>를 구분자로 정하여, 문자열에 있는 단어들의 리스트를 반환합니다. <code>b</code>가 주어지면 최대 <code>b</code> 번의 분할이 수행됩니다.</td>
</tr>
<tr>
<td><code>text.replace(a, b)</code> 또는 <code>text.replace(a, b, c)</code></td>
<td>문자열 내 모든 <code>a</code>를 <code>b</code>로 치환합니다. <code>c</code>가 주어질 경우 최대 <code>c</code> 번의 치환이 수행됩니다.</td>
</tr>
<tr>
<td><code>text.strip()</code> 또는 <code>text.strip(a)</code></td>
<td>문자열 앞 뒤의 공백을 제거합니다. <code>a</code>가 주어질 경우 <code>a</code>에 포함되는 모든 문자에 대해서 <code>text</code> 앞 뒤의 문자들을 제거합니다.</td>
</tr>
<tr>
<td><code>text.join(l)</code></td>
<td><code>l</code>은 리스트입니다. <code>text</code>를 구분자로 이용하여 <code>l</code>의 모든 요소를 합쳐서 하나의 문자열을 반환합니다. <code>&quot;&quot;.join(l)</code>은 구분자 없이 <code>l</code>의 모든 요소를 합칩니다.</td>
</tr>
</tbody>
</table>
<ul>
<li>예제</li>
</ul>
<pre><code class="language-python">text = &quot;Do you wanna build a snowman?&quot;
print(f&quot;{text.partition('wanna')=}&quot;)
print(f&quot;{text.partition('nothing')=}&quot;)
print(f&quot;{text.split(' ')=}&quot;)
print(f&quot;{text.split('nothing')=}&quot;)
print(f&quot;{text.replace('build', 'throw')=}&quot;)
print(f&quot;{text.replace('nothing', 'done')=}&quot;)
print(f&quot;{'  하이    '.strip()=}&quot;)
print(f&quot;{text.strip('Do?anmw')=}&quot;)
print(f&quot;text는 수정되지 않았습니다. &gt;&gt; {text}&quot;)

l = ['1','하이','파워','국어']
print(f&quot;{l=}&quot;)
print(f&quot;{''.join(l)=}&quot;)
print(f&quot;{', '.join(l)=}&quot;)
</code></pre>
<pre><code class="language-plaintext">text.partition('wanna')=('Do you ', 'wanna', ' build a snowman?')
text.partition('nothing')=('Do you wanna build a snowman?', '', '')
text.split(' ')=['Do', 'you', 'wanna', 'build', 'a', 'snowman?']
text.split('nothing')=['Do you wanna build a snowman?']
text.replace('build', 'throw')='Do you wanna throw a snowman?'
text.replace('nothing', 'done')='Do you wanna build a snowman?'
'  하이    '.strip()='하이'
text.strip('Do?anmw')=' you wanna build a s'
text는 수정되지 않았습니다. &gt;&gt; Do you wanna build a snowman?
l=['1', '하이', '파워', '국어']
''.join(l)='1하이파워국어'
', '.join(l)='1, 하이, 파워, 국어'
</code></pre>
<p>인덱스 기반으로 <code>text</code>의 부분 문자열을 가져오는 슬라이싱은 차후 시간에 설명합니다. (추가 예정)</p>
<hr>
<p>위에서 설명했던 메소드들은 자주 쓰는, 혹은 초보자들이 쓰기에 알맞은 메소드를 추린 것입니다. 더 자세하게 알고 싶다면 아래 링크를 참조해주세요.</p>
<ul>
<li><a href="https://withcoding.com/74">다소 간략한 버젼 (일반 블로그 포스팅)</a></li>
<li><a href="https://docs.python.org/ko/3/library/stdtypes.html#text-sequence-type-str">str 메소드 공식 문서</a></li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date><![CDATA[2019-12-25 14:43:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-25 05:43:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-27 10:57:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-27 01:57:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%ac%b8%ec%9e%90%ec%97%b4-%ed%85%8d%ec%8a%a4%ed%8a%b8-%eb%8b%a4%eb%a3%a8%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_64d43338af1d6dfeab77235eeecdd317]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e29f0d5ecdc528ec387b0a4170438497]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_059c81d5470d2db213c4389ac0836b97]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1148</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 실습 &#8211; 원카드 게임 만들기 (2) (작성중) &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1517</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-24 08:11:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-23 23:11:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 반드시 card_str 함수를 이용하는 내용을 포함시키세요. 가능하다면 str의 join 기능을 활용하세요.함수 내부에서 print를 쓰지 않는 이유는, 앞으로 우리가 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587683469.435039;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1587693236.823963;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://elvanov.com/?p=2689</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2689</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>ldkfj</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>kdfjdf</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ksdlfjksd</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2689</wp:post_id>
		<wp:post_date><![CDATA[2022-04-03 22:32:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-04-03 22:32:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-04-03 13:32:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[으아악]]></title>
		<link>https://elvanov.com/?p=2691</link>
		<pubDate>Fri, 22 Apr 2022 00:24:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2691</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2691</wp:post_id>
		<wp:post_date><![CDATA[2022-04-22 09:24:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-04-22 00:24:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-04-22 09:34:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-04-22 00:34:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9c%bc%ec%95%84%ec%95%85]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[워드프레스 제목(헤더) 태그에 앵커 링크 php로 삽입하기]]></title>
		<link>https://elvanov.com/431</link>
		<pubDate>Thu, 26 Dec 2019 11:51:35 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 사전 준비\n\n- `function.php`를 편집할 수 있는 툴\n- 링크 `svg`파일을 다운받아서 테마의 `img/` 경로에 넣어두자. ([https://materialdesignicons.com/icon/link-variant](https://materialdesignicons.com/icon/link-variant)) (로딩 시간이 한참 걸린다.)\n\n\u002d\u002d-\n\n## 개요\n\n블로그 등 인터넷에 글을 쓰고자 할 때에는 제목을 `h2`, `h3`, `h4` 등의 제목 태그로 내용의 전환을 알리곤 한다. 헤더 태그로 감싸진 내용은 그 이상의 의미는 없어서, 해당 글 내부적으로 목차를 만들거나 다른 곳에서 해당 글의 특정 부분으로 링크를 걸려고 할 때에는 추가적인 작업이 필요하다. 가장 손쉽게 구현할 수 있는 방법은 헤더마다 앵커 링크를 만드는 것이다.\n\n본 작업은 플러그인을 전혀 고려하지 않았다. 필자는 현재 Jetpack의 Markdown으로 글을 작성하고 있고, 샵 문자 (`#`)를 이용해서 헤더를 나누곤 하는데, 자동으로 헤더의 링크를 만들어주는 php 코드가 있으면 좋겠다 싶었다. 그리고 자바스크립트로도 구현할 수 있지만 여러가지 SEO상의 난점 때문에 서버에서 먼저 처리를 하고 싶었다.\n\n\u002d\u002d-\n\n### 난항\n\n플러그인을 생각하지 않은 이유는 구현이 쉬울 것 같은 예감에서였다. 하지만 그 예감은 틀렸다.. ㅎㅎ 구현 중간에 난항을 겪은 일들은 다음과 같았다.\n\n- 본래 php 개발이 본 분야가 아니라서 디버깅이나 기능 테스트가 까다롭고 문법 자체도 익숙치 않아서 또 찾아보고.. 하하\n- 문자 처리가 까다로웠다. 한글같은 문자 하나에 대해 `strlen`을 하면 `1`이 아니라서 정규화를 계속 해줘야 하는 문제가 있었다(...만 사실 필요 없는 고민이었다. 문자열의 바이트 길이만 제대로 계산된다면 유니코드 여부는 중요치 않다.)\n\n\u002d\u002d-\n\n### 한계\n\n이 헤더 링크 생성기(?)의 특징과 한계는 다음과 같다.\n\n- 헤더 정보를 별도로 저장하지 않기 때문에 헤더의 순서가 바뀌면 헤더의 id도 바뀐다. 즉 글 수정시 링크가 변경될 수 있는 가능성이 있다.\n- 매번 페이지 로딩 때마다 헤더를 탐색하기 때문에 서버에 부하가 올 수도 있다. (정확한 측정은 해보지 않았을 뿐더러 할 줄도 모른다..ㅎㅎ)\n- 이미 `id` 속성이 존재하는 헤더 태그에 대한 적절한 처리를.. 하지 **않았다.** 적절한 처리를 하려면 정규식도 살짝 바꿔야 하고, 전체적으로 조금 수정해야 할 듯 하다.\n\n\n\u002d\u002d-\n\n## 전체 코드\n\n전체 코드를 먼저 보는 게 나는 좋더라. `function.php` 파일에 해당 코드를 추가한다.\n```php\n// 워드프레스 시스템에 필터 추가\nadd_filter('the_content', 'add_header_anchor');\n\n// 필터로서 실제로 동작하는 함수\nfunction add_header_anchor($content)\n{\n  // 메인 루프 내의 독립적인 글일 때에만 적용하기.\n  if (is_single() \u0026\u0026 in_the_loop() \u0026\u0026 is_main_query()) {\n\n    // 중복 탐색을 피하기 위해 매 탐색마다 offset을 적용함.\n    $offset = 0;\n\n    // 검색 결과가 저장되는 변수\n    $item = array();\n\n    // 같은 제목이라도 다른 id를 매기기 위한 인덱스 변수\n    $i = 0;\n\n    // 목차 제작을 위해 데이터를 저장하는 변수\n    $content_array = array();\n\n    // 탐색에 실패하면 false이므로 루프가 종료됨.\n    while (preg_match('/\u003c(h[2-6])(.*?([ ]id=\u0022.+?\u0022))?(.*?)?\u003e(.+?)\u003c\\/h[2-6]\u003e/', $content, $item, PREG_OFFSET_CAPTURE, $offset)) {\n\n      // 필요한 정보를 정리하기.\n      $tag = $item[1][0];\n      $atts = $item[2][0];\n      $id = $item[3][0];\n      $atts2 = $item[4][0];\n      $con_raw = $item[5][0];\n      if ($id != '') {\n        $link_id = urlencode($id);\n      } else {\n        $link_id = urlencode($con_raw);\n      }\n      $link_id = substr($link_id, 0, 30);\n      $link_id .= '\u002d\u002d' . $i;\n\n      // 치환 결과를 제작함.\n      $result = '\u003c' . $tag . $atts . $atts2 . '\u003e\u003ca class=\u0022anchor\u0022 href=\u0022#'\n        . $link_id . '\u0022 id=\u0022' . $link_id . '\u0022\u003e\u003c/a\u003e' . $con_raw . '\u003c/' . $tag . '\u003e';\n\n      // replace 실시\n      $content = substr_replace($content, $result, $item[0][1], strlen($item[0][0]));\n\n      // 다음 검색을 위해 offset 계산\n      $offset = strlen($result) + $item[0][1];\n\n      // 목차 제작을 위한 데이터 생성\n      $c = array();\n      $c['title'] = $con_raw;\n      $c['tag'] = $tag;\n      $c['link'] = $link_id;\n      $content_array[$i] = $c;\n\n      // 인덱스 증감\n      $i++;\n    }\n\n    // 목차 제작\n    $list = '\u003cdiv class=\u0022content-list\u0022\u003e\u003cul\u003e';\n    foreach ($content_array as $key =\u003e $value) {\n      $list .= '\u003cli class=\u0022content-list-o ' . $value['tag'] . '\u0022\u003e\u003ca href=\u0022#' . $value['link'] . '\u0022\u003e' . $value['title'] . '\u003c/a\u003e\u003c/li\u003e';\n    }\n    $list .= '\u003c/ul\u003e\u003c/div\u003e';\n  }\n\n  // 목차와 함께 변경 완료된 content를 반환.\n  return $content . $list;\n}\n```\n\n\u002d\u002d-\n\n- 다음은 각자의 입맛대로 수정할 수 있는 `style.css`\n\n```css\n/* 헤더 앵커 링크 */\n\n.entry-content h2 a.anchor,\n.entry-content h3 a.anchor,\n.entry-content h4 a.anchor,\n.entry-content h5 a.anchor,\n.entry-content h6 a.anchor {\n  position: absolute;\n  opacity: 0.5;\n  left: -34px;\n  padding: 5px;\n  top: -2px;\n  width: 34px;\n}\n\n.entry-content h2 a.anchor::before,\n.entry-content h3 a.anchor::before,\n.entry-content h4 a.anchor::before,\n.entry-content h5 a.anchor::before,\n.entry-content h6 a.anchor::before {\n  content: url(\u0022img/link-variant.svg\u0022);\n  visibility: hidden;\n}\n\n.entry-content h2 a.anchor:hover,\n.entry-content h3 a.anchor:hover,\n.entry-content h4 a.anchor:hover,\n.entry-content h5 a.anchor:hover,\n.entry-content h6 a.anchor:hover {\n  opacity: 1;\n}\n\n.entry-content h2:hover a.anchor::before,\n.entry-content h3:hover a.anchor::before,\n.entry-content h4:hover a.anchor::before,\n.entry-content h5:hover a.anchor::before,\n.entry-content h6:hover a.anchor::before {\n  visibility: visible;\n}\n\n/* 목차 (사이드바) */\n\n.content-list a {\n  color: #444655;\n  font-size: 95%;\n  text-decoration: underline solid #ccc;\n}\n\n.content-list li {font-style: normal;text-decoration: none;}\n.content-list li.h3 {\n  margin-left: 15px;\n list-style: circle;\n}\n\n.content-list li.h4 {\n  margin-left: 30px;\n  list-style: \u0022 - \u0022;\n  font-size: 95%;\n}\n\n.content-list li.h2 {\n  margin-left: 0px;\n  list-style: square ;\n  font-weight: 700;\n}\n\n.content-list {\n  display: block;\n    background-color: #fff;\n    padding: 30px 10px 30px 60px;\n    margin: 50px 30px 10px;\n    width: 300px;\n    max-height: 400px;\n    font-size: 93%;\n    line-height: 1.6;\n    overflow-y: auto;\n    position: absolute;\n    left: 100%;\n    top: 0;\n    opacity: 0.5;\n}\n\n.content-list:hover {\n  opacity: 1;\n}\n\n.entry-content {\n  position: relative;\n}\n\n@media all and (max-width:1200px) {\n  .content-list {\n    display:none;\n  }\n}\n```\n\n\u002d\u002d-\n\n## 아이디어\n\n워드프레스에는 필터라는 개념이 있다. 필터를 이용해 우리는 결과를 우리 입맛에 바꿀 수 있다. 워드프레스에서 제공되는 출력 관련 함수들(예: `the_content` 함수는 그 글의 본문을 출력한다.)은 대부분 이러한 필터를 쓸 수 있도록 해놓았다. 필터에 대한 개괄적인 설명은 [워드프레스 공식 문서(영어)](https://developer.wordpress.org/plugins/hooks/filters/)를 참조하라. 필터 종류는 [여기(영어)](https://codex.wordpress.org/Plugin_API/Filter_Reference)에서 볼 수 있다.\n\n그렇다면 생각이 된다. 본문이 출력되는 시점에 헤더를 검색해서 적절히 앵커 링크를 삽입하는 필터를 추가하자!\n\n자, 그렇다면 어떤 식으로 본문 원본 데이터를 조작하여 \u003ca\u003e 태그를 추가할 수 있을까? 우선 헤더 태그를 검색하기 위해 **정규식** 을 이용해야 할 것 같다. 음. 정규식을 어떻게 이용할 수 있을까? 대략적으로 여러 방법이 고민되었다.\n\n- 완전히 같은 태그에 대해 다른 `id`를 매겨야 하는 상황이었다. 그러므로 `preg_replace_all`을 이용하는 방법, `preg_match_all` 이후 `str_replace`를 이용하는 방법 두 가지 모두 불가능했다.\n- `preg_match_all`에서 `PREG_OFFSET_CAPTURE` 플래그를 이용해 오프셋 값을 전부 가지고 온 뒤 `substr_replace`를 이용하는 방법 또한 까다로웠다. 왜냐하면 문자열을 수정할 때마다 전체 문자열의 길이가 달라져서 결국 `substr_replace`의 시작점을 매번 보정해줘야 했기 때문이다.\n\n그래서 `preg_match`와 `PREG_OFFSET_CAPTURE` 플래그를 계속 루프를 돌리고, 그 속에서 `substr_replace`를 이용하는 방법이 채택되었다. `preg_match` 함수는 문자열을 검색하는 데 실패하면 `false`를 반환하기 때문에 `while` 문에 조건에 넣기 알맞았다.\n\n\u002d\u002d-\n\n## 코드 뜯어보기\n\n\n### 정규식\n\n아래는 핵심 정규식이다.\n\n`/\u003c(h[2-6])(.*?([ ]id=\u0022.+?\u0022))?(.*?)?\u003e(.+?)\u003c\\/h[2-6]\u003e/`\n\n어떻게 돌아가는지에 대해서는 다음 ([regexr](https://regexr.com/4ravn)) 링크를 참조하라. 정규식에 관한 개요는 [자바스크립트 정규표현식 만들기](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D)를 참조하라. \n\n\u002d\u002d-\n\n### `preg_match`\n\n`preg_match` 함수에 `PREG_OFFSET_CAPTURE` 플래그를 주었을 때의 결과값은 다음과 같다. 여기서 `offset`이란 인덱스와 비슷한 개념이다. 해당 문자열이 시작하는 위치를 뜻한다.\n\n```php\narray(\n  0 =\u003e array (\n    0 =\u003e \u0022전체 문자열\u0022,\n    1 =\u003e offset\n  ),\n  1 =\u003e array (\n    0 =\u003e \u0022첫 번째 그룹\u0022,\n    1 =\u003e offset\n  ),\n  2 =\u003e array (\n    0 =\u003e \u0022두번째 그룹\u0022,\n    1 =\u003e offset\n  ),\n  //...\n)\n```\n\n앞서 언급했듯이 `preg_match` 함수는 검색에 실패하면 `false`를 반환하므로 손쉽게 `while` 조건 처리가 가능하다.\n\n```php\nwhile (preg_match('/\u003c(h[2-6])(.*?([ ]id=\u0022.+?\u0022))?(.*?)?\u003e(.+?)\u003c\\/h[2-6]\u003e/',\n    $content, $item, PREG_OFFSET_CAPTURE, $offset)) {\n    // ...\n}\n```\n\n\u002d\u002d-\n\n### 치환 결과 제작\n\n```php\n      // 필요한 정보를 정리하기.\n      $tag = $item[1][0];\n      $atts = $item[2][0];\n      $id = $item[3][0];\n      $atts2 = $item[4][0];\n      $con_raw = $item[5][0];\n      if ($id != '') {\n        $link_id = urlencode($id);\n      } else {\n        $link_id = urlencode($con_raw); // 1\n      }\n      $link_id = substr($link_id, 0, 30); // 2\n      $link_id .= '\u002d\u002d' . $i; // 3\n\n      // 치환 결과를 제작함. 4\n      $result = '\u003c' . $tag . $atts . $atts2 . '\u003e\u003ca class=\u0022anchor\u0022 href=\u0022#'\n        . $link_id . '\u0022 id=\u0022' . $link_id . '\u0022\u003e\u003c/a\u003e' . $con_raw . '\u003c/' . $tag . '\u003e';\n```\n\n필요한 정보를 읽기 쉽도록 변수에 저장했다. 반드시 필요한 과정은 아니다. \n\n1. `id` 값에 한글이나 태그를 사용할 수 있는 값으로 변환하기 위해 `urlencode` 함수를 이용했다. `id`를 직접적으로 읽을 수 없는 등 이 함수가 능사는 아니지만 깊은 생각을 하지 않고 채택했다. \n1. `id`를 너무 길게는 만들고 싶지 않아서 `substr`을 이용해 `30`글자로 잘랐다.\n1. `id` 값에 `i` 변수를 포함시켜서 `id`가 페이지 내 유일한 값이 될 수 있도록 조정했다.\n1. 치환할 결과도 문자열을 주욱 이어붙여서 `$result` 변수에 저장했다.\n\n\n\u002d\u002d-\n\n### 목차 만들기\n\n내친김에 목차도 만들었다.\n\n```php\n\n    // 목차 제작을 위한 데이터 생성\n    while(...) {\n      $c = array();\n      $c['title'] = $con_raw;\n      $c['tag'] = $tag;\n      $c['link'] = $link_id;\n      $content_array[$i] = $c;\n    }\n\n    // 목차 제작\n    $list = '\u003cdiv class=\u0022content-list\u0022\u003e\u003cul\u003e';\n    foreach ($content_array as $key =\u003e $value) {\n      $list .= '\u003cli class=\u0022content-list-o ' . $value['tag'] \n        . '\u0022\u003e\u003ca href=\u0022#' . $value['link'] . '\u0022\u003e' . $value['title'] \n        . '\u003c/a\u003e\u003c/li\u003e';\n    }\n    $list .= '\u003c/ul\u003e\u003c/div\u003e';\n```\n\n스타일은 전체 코드 참조\n\n\u002d\u002d-\n\n### 스타일\n\n스타일은 Gitlab의 것을 조금 본땄다. 헤더에 마우스를 올리면 바로 왼쪽에 불투명하게 링크 버튼이 나타나고, 링크 버튼에 마우스를 올리면 버튼이 더 선명해진다. 이 버튼을 우클릭하여 링크를 복사할 수 있다. 코드는 전체 코드 참조.\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>사전 준비</h2>
<ul>
<li><code>function.php</code>를 편집할 수 있는 툴</li>
<li>링크 <code>svg</code>파일을 다운받아서 테마의 <code>img/</code> 경로에 넣어두자. (<a href="https://materialdesignicons.com/icon/link-variant">https://materialdesignicons.com/icon/link-variant</a>) (로딩 시간이 한참 걸린다.)</li>
</ul>
<hr>
<h2>개요</h2>
<p>블로그 등 인터넷에 글을 쓰고자 할 때에는 제목을 <code>h2</code>, <code>h3</code>, <code>h4</code> 등의 제목 태그로 내용의 전환을 알리곤 한다. 헤더 태그로 감싸진 내용은 그 이상의 의미는 없어서, 해당 글 내부적으로 목차를 만들거나 다른 곳에서 해당 글의 특정 부분으로 링크를 걸려고 할 때에는 추가적인 작업이 필요하다. 가장 손쉽게 구현할 수 있는 방법은 헤더마다 앵커 링크를 만드는 것이다.</p>
<p>본 작업은 플러그인을 전혀 고려하지 않았다. 필자는 현재 Jetpack의 Markdown으로 글을 작성하고 있고, 샵 문자 (<code>#</code>)를 이용해서 헤더를 나누곤 하는데, 자동으로 헤더의 링크를 만들어주는 php 코드가 있으면 좋겠다 싶었다. 그리고 자바스크립트로도 구현할 수 있지만 여러가지 SEO상의 난점 때문에 서버에서 먼저 처리를 하고 싶었다.</p>
<hr>
<h3>난항</h3>
<p>플러그인을 생각하지 않은 이유는 구현이 쉬울 것 같은 예감에서였다. 하지만 그 예감은 틀렸다.. ㅎㅎ 구현 중간에 난항을 겪은 일들은 다음과 같았다.</p>
<ul>
<li>본래 php 개발이 본 분야가 아니라서 디버깅이나 기능 테스트가 까다롭고 문법 자체도 익숙치 않아서 또 찾아보고.. 하하</li>
<li>문자 처리가 까다로웠다. 한글같은 문자 하나에 대해 <code>strlen</code>을 하면 <code>1</code>이 아니라서 정규화를 계속 해줘야 하는 문제가 있었다(...만 사실 필요 없는 고민이었다. 문자열의 바이트 길이만 제대로 계산된다면 유니코드 여부는 중요치 않다.)</li>
</ul>
<hr>
<h3>한계</h3>
<p>이 헤더 링크 생성기(?)의 특징과 한계는 다음과 같다.</p>
<ul>
<li>헤더 정보를 별도로 저장하지 않기 때문에 헤더의 순서가 바뀌면 헤더의 id도 바뀐다. 즉 글 수정시 링크가 변경될 수 있는 가능성이 있다.</li>
<li>매번 페이지 로딩 때마다 헤더를 탐색하기 때문에 서버에 부하가 올 수도 있다. (정확한 측정은 해보지 않았을 뿐더러 할 줄도 모른다..ㅎㅎ)</li>
<li>이미 <code>id</code> 속성이 존재하는 헤더 태그에 대한 적절한 처리를.. 하지 <strong>않았다.</strong> 적절한 처리를 하려면 정규식도 살짝 바꿔야 하고, 전체적으로 조금 수정해야 할 듯 하다.</li>
</ul>
<hr>
<h2>전체 코드</h2>
<p>전체 코드를 먼저 보는 게 나는 좋더라. <code>function.php</code> 파일에 해당 코드를 추가한다.</p>
<pre><code class="language-php">// 워드프레스 시스템에 필터 추가
add_filter('the_content', 'add_header_anchor');

// 필터로서 실제로 동작하는 함수
function add_header_anchor($content)
{
  // 메인 루프 내의 독립적인 글일 때에만 적용하기.
  if (is_single() &amp;&amp; in_the_loop() &amp;&amp; is_main_query()) {

    // 중복 탐색을 피하기 위해 매 탐색마다 offset을 적용함.
    $offset = 0;

    // 검색 결과가 저장되는 변수
    $item = array();

    // 같은 제목이라도 다른 id를 매기기 위한 인덱스 변수
    $i = 0;

    // 목차 제작을 위해 데이터를 저장하는 변수
    $content_array = array();

    // 탐색에 실패하면 false이므로 루프가 종료됨.
    while (preg_match('/&lt;(h[2-6])(.*?([ ]id=&quot;.+?&quot;))?(.*?)?&gt;(.+?)&lt;\/h[2-6]&gt;/', $content, $item, PREG_OFFSET_CAPTURE, $offset)) {

      // 필요한 정보를 정리하기.
      $tag = $item[1][0];
      $atts = $item[2][0];
      $id = $item[3][0];
      $atts2 = $item[4][0];
      $con_raw = $item[5][0];
      if ($id != '') {
        $link_id = urlencode($id);
      } else {
        $link_id = urlencode($con_raw);
      }
      $link_id = substr($link_id, 0, 30);
      $link_id .= '--' . $i;

      // 치환 결과를 제작함.
      $result = '&lt;' . $tag . $atts . $atts2 . '&gt;&lt;a class=&quot;anchor&quot; href=&quot;#'
        . $link_id . '&quot; id=&quot;' . $link_id . '&quot;&gt;&lt;/a&gt;' . $con_raw . '&lt;/' . $tag . '&gt;';

      // replace 실시
      $content = substr_replace($content, $result, $item[0][1], strlen($item[0][0]));

      // 다음 검색을 위해 offset 계산
      $offset = strlen($result) + $item[0][1];

      // 목차 제작을 위한 데이터 생성
      $c = array();
      $c['title'] = $con_raw;
      $c['tag'] = $tag;
      $c['link'] = $link_id;
      $content_array[$i] = $c;

      // 인덱스 증감
      $i++;
    }

    // 목차 제작
    $list = '&lt;div class=&quot;content-list&quot;&gt;&lt;ul&gt;';
    foreach ($content_array as $key =&gt; $value) {
      $list .= '&lt;li class=&quot;content-list-o ' . $value['tag'] . '&quot;&gt;&lt;a href=&quot;#' . $value['link'] . '&quot;&gt;' . $value['title'] . '&lt;/a&gt;&lt;/li&gt;';
    }
    $list .= '&lt;/ul&gt;&lt;/div&gt;';
  }

  // 목차와 함께 변경 완료된 content를 반환.
  return $content . $list;
}
</code></pre>
<hr>
<ul>
<li>다음은 각자의 입맛대로 수정할 수 있는 <code>style.css</code></li>
</ul>
<pre><code class="language-css">/* 헤더 앵커 링크 */

.entry-content h2 a.anchor,
.entry-content h3 a.anchor,
.entry-content h4 a.anchor,
.entry-content h5 a.anchor,
.entry-content h6 a.anchor {
  position: absolute;
  opacity: 0.5;
  left: -34px;
  padding: 5px;
  top: -2px;
  width: 34px;
}

.entry-content h2 a.anchor::before,
.entry-content h3 a.anchor::before,
.entry-content h4 a.anchor::before,
.entry-content h5 a.anchor::before,
.entry-content h6 a.anchor::before {
  content: url(&quot;img/link-variant.svg&quot;);
  visibility: hidden;
}

.entry-content h2 a.anchor:hover,
.entry-content h3 a.anchor:hover,
.entry-content h4 a.anchor:hover,
.entry-content h5 a.anchor:hover,
.entry-content h6 a.anchor:hover {
  opacity: 1;
}

.entry-content h2:hover a.anchor::before,
.entry-content h3:hover a.anchor::before,
.entry-content h4:hover a.anchor::before,
.entry-content h5:hover a.anchor::before,
.entry-content h6:hover a.anchor::before {
  visibility: visible;
}

/* 목차 (사이드바) */

.content-list a {
  color: #444655;
  font-size: 95%;
  text-decoration: underline solid #ccc;
}

.content-list li {font-style: normal;text-decoration: none;}
.content-list li.h3 {
  margin-left: 15px;
 list-style: circle;
}

.content-list li.h4 {
  margin-left: 30px;
  list-style: &quot; - &quot;;
  font-size: 95%;
}

.content-list li.h2 {
  margin-left: 0px;
  list-style: square ;
  font-weight: 700;
}

.content-list {
  display: block;
    background-color: #fff;
    padding: 30px 10px 30px 60px;
    margin: 50px 30px 10px;
    width: 300px;
    max-height: 400px;
    font-size: 93%;
    line-height: 1.6;
    overflow-y: auto;
    position: absolute;
    left: 100%;
    top: 0;
    opacity: 0.5;
}

.content-list:hover {
  opacity: 1;
}

.entry-content {
  position: relative;
}

@media all and (max-width:1200px) {
  .content-list {
    display:none;
  }
}
</code></pre>
<hr>
<h2>아이디어</h2>
<p>워드프레스에는 필터라는 개념이 있다. 필터를 이용해 우리는 결과를 우리 입맛에 바꿀 수 있다. 워드프레스에서 제공되는 출력 관련 함수들(예: <code>the_content</code> 함수는 그 글의 본문을 출력한다.)은 대부분 이러한 필터를 쓸 수 있도록 해놓았다. 필터에 대한 개괄적인 설명은 <a href="https://developer.wordpress.org/plugins/hooks/filters/">워드프레스 공식 문서(영어)</a>를 참조하라. 필터 종류는 <a href="https://codex.wordpress.org/Plugin_API/Filter_Reference">여기(영어)</a>에서 볼 수 있다.</p>
<p>그렇다면 생각이 된다. 본문이 출력되는 시점에 헤더를 검색해서 적절히 앵커 링크를 삽입하는 필터를 추가하자!</p>
<p>자, 그렇다면 어떤 식으로 본문 원본 데이터를 조작하여 &lt;a&gt; 태그를 추가할 수 있을까? 우선 헤더 태그를 검색하기 위해 <strong>정규식</strong> 을 이용해야 할 것 같다. 음. 정규식을 어떻게 이용할 수 있을까? 대략적으로 여러 방법이 고민되었다.</p>
<ul>
<li>완전히 같은 태그에 대해 다른 <code>id</code>를 매겨야 하는 상황이었다. 그러므로 <code>preg_replace_all</code>을 이용하는 방법, <code>preg_match_all</code> 이후 <code>str_replace</code>를 이용하는 방법 두 가지 모두 불가능했다.</li>
<li><code>preg_match_all</code>에서 <code>PREG_OFFSET_CAPTURE</code> 플래그를 이용해 오프셋 값을 전부 가지고 온 뒤 <code>substr_replace</code>를 이용하는 방법 또한 까다로웠다. 왜냐하면 문자열을 수정할 때마다 전체 문자열의 길이가 달라져서 결국 <code>substr_replace</code>의 시작점을 매번 보정해줘야 했기 때문이다.</li>
</ul>
<p>그래서 <code>preg_match</code>와 <code>PREG_OFFSET_CAPTURE</code> 플래그를 계속 루프를 돌리고, 그 속에서 <code>substr_replace</code>를 이용하는 방법이 채택되었다. <code>preg_match</code> 함수는 문자열을 검색하는 데 실패하면 <code>false</code>를 반환하기 때문에 <code>while</code> 문에 조건에 넣기 알맞았다.</p>
<hr>
<h2>코드 뜯어보기</h2>
<h3>정규식</h3>
<p>아래는 핵심 정규식이다.</p>
<p><code>/&lt;(h[2-6])(.*?([ ]id=&quot;.+?&quot;))?(.*?)?&gt;(.+?)&lt;\/h[2-6]&gt;/</code></p>
<p>어떻게 돌아가는지에 대해서는 다음 (<a href="https://regexr.com/4ravn">regexr</a>) 링크를 참조하라. 정규식에 관한 개요는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D">자바스크립트 정규표현식 만들기</a>를 참조하라.</p>
<hr>
<h3><code>preg_match</code></h3>
<p><code>preg_match</code> 함수에 <code>PREG_OFFSET_CAPTURE</code> 플래그를 주었을 때의 결과값은 다음과 같다. 여기서 <code>offset</code>이란 인덱스와 비슷한 개념이다. 해당 문자열이 시작하는 위치를 뜻한다.</p>
<pre><code class="language-php">array(
  0 =&gt; array (
    0 =&gt; &quot;전체 문자열&quot;,
    1 =&gt; offset
  ),
  1 =&gt; array (
    0 =&gt; &quot;첫 번째 그룹&quot;,
    1 =&gt; offset
  ),
  2 =&gt; array (
    0 =&gt; &quot;두번째 그룹&quot;,
    1 =&gt; offset
  ),
  //...
)
</code></pre>
<p>앞서 언급했듯이 <code>preg_match</code> 함수는 검색에 실패하면 <code>false</code>를 반환하므로 손쉽게 <code>while</code> 조건 처리가 가능하다.</p>
<pre><code class="language-php">while (preg_match('/&lt;(h[2-6])(.*?([ ]id=&quot;.+?&quot;))?(.*?)?&gt;(.+?)&lt;\/h[2-6]&gt;/',
    $content, $item, PREG_OFFSET_CAPTURE, $offset)) {
    // ...
}
</code></pre>
<hr>
<h3>치환 결과 제작</h3>
<pre><code class="language-php">      // 필요한 정보를 정리하기.
      $tag = $item[1][0];
      $atts = $item[2][0];
      $id = $item[3][0];
      $atts2 = $item[4][0];
      $con_raw = $item[5][0];
      if ($id != '') {
        $link_id = urlencode($id);
      } else {
        $link_id = urlencode($con_raw); // 1
      }
      $link_id = substr($link_id, 0, 30); // 2
      $link_id .= '--' . $i; // 3

      // 치환 결과를 제작함. 4
      $result = '&lt;' . $tag . $atts . $atts2 . '&gt;&lt;a class=&quot;anchor&quot; href=&quot;#'
        . $link_id . '&quot; id=&quot;' . $link_id . '&quot;&gt;&lt;/a&gt;' . $con_raw . '&lt;/' . $tag . '&gt;';
</code></pre>
<p>필요한 정보를 읽기 쉽도록 변수에 저장했다. 반드시 필요한 과정은 아니다.</p>
<ol>
<li><code>id</code> 값에 한글이나 태그를 사용할 수 있는 값으로 변환하기 위해 <code>urlencode</code> 함수를 이용했다. <code>id</code>를 직접적으로 읽을 수 없는 등 이 함수가 능사는 아니지만 깊은 생각을 하지 않고 채택했다.</li>
<li><code>id</code>를 너무 길게는 만들고 싶지 않아서 <code>substr</code>을 이용해 <code>30</code>글자로 잘랐다.</li>
<li><code>id</code> 값에 <code>i</code> 변수를 포함시켜서 <code>id</code>가 페이지 내 유일한 값이 될 수 있도록 조정했다.</li>
<li>치환할 결과도 문자열을 주욱 이어붙여서 <code>$result</code> 변수에 저장했다.</li>
</ol>
<hr>
<h3>목차 만들기</h3>
<p>내친김에 목차도 만들었다.</p>
<pre><code class="language-php">
    // 목차 제작을 위한 데이터 생성
    while(...) {
      $c = array();
      $c['title'] = $con_raw;
      $c['tag'] = $tag;
      $c['link'] = $link_id;
      $content_array[$i] = $c;
    }

    // 목차 제작
    $list = '&lt;div class=&quot;content-list&quot;&gt;&lt;ul&gt;';
    foreach ($content_array as $key =&gt; $value) {
      $list .= '&lt;li class=&quot;content-list-o ' . $value['tag'] 
        . '&quot;&gt;&lt;a href=&quot;#' . $value['link'] . '&quot;&gt;' . $value['title'] 
        . '&lt;/a&gt;&lt;/li&gt;';
    }
    $list .= '&lt;/ul&gt;&lt;/div&gt;';
</code></pre>
<p>스타일은 전체 코드 참조</p>
<hr>
<h3>스타일</h3>
<p>스타일은 Gitlab의 것을 조금 본땄다. 헤더에 마우스를 올리면 바로 왼쪽에 불투명하게 링크 버튼이 나타나고, 링크 버튼에 마우스를 올리면 버튼이 더 선명해진다. 이 버튼을 우클릭하여 링크를 복사할 수 있다. 코드는 전체 코드 참조.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2019-12-26 20:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-26 11:51:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-27 08:12:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-26 23:12:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%84%eb%a0%88%ec%8a%a4-%ec%a0%9c%eb%aa%a9%ed%97%a4%eb%8d%94-%ed%83%9c%ea%b7%b8%ec%97%90-%ec%95%b5%ec%bb%a4-%eb%a7%81%ed%81%ac-php%eb%a1%9c-%ec%82%bd%ec%9e%85%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 모듈 사용 ~ 유용한 기능 끌어다 쓰기]]></title>
		<link>https://elvanov.com/457</link>
		<pubDate>Fri, 27 Dec 2019 02:31:41 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=457</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n## 개요\n\n읍읍무위키에 따르면 모듈이란 뜻은 `한 시스템을 여러 개의 기능적 구성요소(모듈)들을 조합함으로써 완성하도록 한 설계`라고 합니다. 즉 모듈을 가져와서 사용한다는 뜻은 어떤 특정한 기능을 불러와서 사용하겠다는 뜻으로 이해하면 될 것 같습니다.\n\n그렇다면 사용하기 편리한 기능을 [내장 함수](371)처럼 처음부터 바로 사용할 수 있도록 하지 않고 굳이 모듈로 구분해 놓았을까요?\n\n우리가 게임을 실행할때 로딩하듯이 코드또한 로딩되어야 비로소 실행할 수 있습니다. 로딩된다 함은 그러한 코드가 메모리에 적절하게 적재되어 있음을 뜻합니다. 내장 함수같은 경우 워낙에 빈번하게 사용되기 때문에 처음부터 로딩되도록 고안되었지만 모듈의 기능은 상대적으로 더 특수성을 띠고 덜 사용되기 마련입니다. 무엇보다 이러한 모듈은 아주 방대합니다. 이런 모듈의 기능들을 처음부터 다 불러온다면 로딩하는 데만 모든 자원이 소모될 것입니다.\n\n\u002d\u002d-\n\n## 간단하게 모듈 불러오기\n\n파이썬에서는 모듈을 불러오는 과정이 복잡하고 어렵지 않습니다. 단 한 줄만 쓰면 됩니다.\n\n```python\nimport 모듈이름\n```\n\n그나마 자주 쓰이는 math 모듈을 불러와서 사용해봅시다.\n\n```python\nimport math\nprint(math.pi)\n```\n```plaintext\n3.141592653589793\n```\n\n\u002d\u002d-\n\n## 모듈 이름 정하기\n\n`as` 키워드를 통해 모듈의 이름을 우리가 직접 정할 수 있습니다.\n\n\n```python\nimport math as m\nprint(m.pi)\nprint(math.pi) # 에러. math는 정의되지 않았습니다.\n```\n```plaintext\n3.141592653589793\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test.py\u0022, line 3, in \u003cmodule\u003e\n    print(math.pi) # 에러. math는 정의되지 않았습니다.\nNameError: name 'math' is not defined\n```\n\u002d\u002d-\n\n## 모듈의 필요한 부분만 가져오기\n\n`from 모듈명 import 세부사항`을 통해서 모듈 내 포함되어 있는 기능을 가져올 수 있습니다. 여러 개를 가져오려면 쉼표를 사용하면 됩니다.\n\n```python\nfrom math import pi, sin\nprint(pi)\nprint(sin(1))\n```\n```plaintext\n3.141592653589793\n0.8414709848078965\n```\n\n`from`과 `as`를 동시에 사용할 수도 있습니다.\n\n```python\nfrom math import pi as p, sin as s\nprint(p)\nprint(s(1))\n```\n```plaintext\n3.141592653589793\n0.8414709848078965\n```\n\n\n\u002d\u002d-\n\n## 표준과 외부\n\n파이썬 재단에서는 파이썬 실행 환경과 함께 [파이썬 표준 라이브러리](https://docs.python.org/ko/3/library/index.html)를 배포합니다. 이는 파이썬 설치에 포함되어 있습니다. (라이브러리란, 유용한 기능을 미리 만들어놓은 것을 두루 뜻하는 말입니다. 지금은 파이썬 모듈의 모음집이라고 이해해도 무리 없습니다.) 위 예제에서 우리는 그나마 자주 쓰이는 `math` 모듈을 불러와서 사용해보았습니다. 이는 별다른 설치가 필요하지 않았습니다.\n\n하지만 `pandas`, `numpy`와 같이 표준에 포함되어 있지 않은 모듈은 파이썬 패키지 매니저를 통해 별도로 설치해야 합니다. 흔히 우리가 프로그램을 설치하는 것처럼 인터넷에서 인스톨러를 받아서 설치하는 것이 아니라, 콘솔 창에서 간편하게 명령을 통해 설치합니다. 파이썬 패키지 매니저가 알아서 설치해주니 참으로 간편하게 느껴지실 겁니다. 간단한 예시로는 다음 명령을 콘솔 창에서 실행시키기만 하면 `pandas` 모듈이 설치됩니다.\n\n`pip install pandas`\n\n만약 작동하지 않는다면, 다음을 시도해보세요.\n\n`pip3 install pandas`\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n다음은 `random` 모듈에 대한 설명이다. 이를 바탕으로 과제를 해결하라.\n\n   \u003e - `random` 모듈이란, 무작위 숫자를 불러오거나 확률과 관련된 작업을 할 때 유용하게 쓰인다.  \n   \u003e - `import random`을 통해 모듈을 불러올 수 있다.  \n   \u003e - `random.randint(small, big)` : `small` 이상 `big` 이하의 정수를 무작위로 뽑아 리턴한다.  \n   \u003e - `random.uniform(small, big)` : `small` 이상 `big` 이하의 실수를 무작위로 뽑아 리턴한다.  \n   \u003e - `random.choice(seq)` : `seq`에서 무작위로 항목 하나를 뽑아 리턴한다. (`seq`는 리스트)  \n   \u003e - `random.sample(seq, num)` : `seq`에서 무작위로 항목 `num` 개를 뽑아 리턴한다. (항목은 중복되지 않는다.) (`seq`는 리스트)\n\n1. `random` 모듈의 `uniform` 함수만 임포트하라. (`import`, `from` 사용)\n1. 다음 코드가 어떤 의도인지 설명하라.\n   \n   1. `randint`\n\n      ```python\n      attack = randint(10, 20)\n      ```\n\n   1. `choice`\n\n      ```python\n      game = ['rock', 'paper', 'scissors']\n      sel = random.choice(game)\n      ```\n1. 다음 코드의 결과를 예측하라.\n \n   ```python\n   deck = []\n   for shape in '♦♣♥♠':\n       for num in \u002223456789AJQK\u0022:\n           deck.append(shape + num)\n   select = random.sample(deck, 7)\n   print(select)\n   ```\n\n1. 어떤 게임에서, 플레이어의 공격력을 랜덤으로 결정하고자 한다. 이 게임에서는 주사위를 10번 굴려 그 총 합을 공격력으로 설정한다. 그런 식으로 설정해본 공격력 20개를 시험삼아 출력해보시오.\n\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. `from random import uniform`\n1. 코드 의도 설명\n   1. 10이상 20 이하의 수를 랜덤으로 받으려고 함\n   1. `'rock'`, `'paper'`, `'scissors'` 중 하나를 랜덤으로 선택하고자 함\n1. 트럼프 카드 덱을 만들어 랜덤으로 7개의 카드를 뽑아와서 출력한다.\n1. 코드입니다.\n   ```python\n   import random\n   for i in range(20):\n       s = 0\n       for j in range(10):\n           s += random.randint(1, 6)\n       print(s)\n   ```\n   ```plaintext\n   27\n   36\n   27\n   22\n   31\n   31\n   39\n   36\n   30\n   41\n   27\n   24\n   32\n   40\n   38\n   35\n   44\n   27\n   44\n   36\n   ```\n\n\n\n\n\n\n\n\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><hr>
<h2>개요</h2>
<p>읍읍무위키에 따르면 모듈이란 뜻은 <code>한 시스템을 여러 개의 기능적 구성요소(모듈)들을 조합함으로써 완성하도록 한 설계</code>라고 합니다. 즉 모듈을 가져와서 사용한다는 뜻은 어떤 특정한 기능을 불러와서 사용하겠다는 뜻으로 이해하면 될 것 같습니다.</p>
<p>그렇다면 사용하기 편리한 기능을 <a href="371">내장 함수</a>처럼 처음부터 바로 사용할 수 있도록 하지 않고 굳이 모듈로 구분해 놓았을까요?</p>
<p>우리가 게임을 실행할때 로딩하듯이 코드또한 로딩되어야 비로소 실행할 수 있습니다. 로딩된다 함은 그러한 코드가 메모리에 적절하게 적재되어 있음을 뜻합니다. 내장 함수같은 경우 워낙에 빈번하게 사용되기 때문에 처음부터 로딩되도록 고안되었지만 모듈의 기능은 상대적으로 더 특수성을 띠고 덜 사용되기 마련입니다. 무엇보다 이러한 모듈은 아주 방대합니다. 이런 모듈의 기능들을 처음부터 다 불러온다면 로딩하는 데만 모든 자원이 소모될 것입니다.</p>
<hr>
<h2>간단하게 모듈 불러오기</h2>
<p>파이썬에서는 모듈을 불러오는 과정이 복잡하고 어렵지 않습니다. 단 한 줄만 쓰면 됩니다.</p>
<pre><code class="language-python">import 모듈이름
</code></pre>
<p>그나마 자주 쓰이는 math 모듈을 불러와서 사용해봅시다.</p>
<pre><code class="language-python">import math
print(math.pi)
</code></pre>
<pre><code class="language-plaintext">3.141592653589793
</code></pre>
<hr>
<h2>모듈 이름 정하기</h2>
<p><code>as</code> 키워드를 통해 모듈의 이름을 우리가 직접 정할 수 있습니다.</p>
<pre><code class="language-python">import math as m
print(m.pi)
print(math.pi) # 에러. math는 정의되지 않았습니다.
</code></pre>
<pre><code class="language-plaintext">3.141592653589793
Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test.py&quot;, line 3, in &lt;module&gt;
    print(math.pi) # 에러. math는 정의되지 않았습니다.
NameError: name 'math' is not defined
</code></pre>
<hr>
<h2>모듈의 필요한 부분만 가져오기</h2>
<p><code>from 모듈명 import 세부사항</code>을 통해서 모듈 내 포함되어 있는 기능을 가져올 수 있습니다. 여러 개를 가져오려면 쉼표를 사용하면 됩니다.</p>
<pre><code class="language-python">from math import pi, sin
print(pi)
print(sin(1))
</code></pre>
<pre><code class="language-plaintext">3.141592653589793
0.8414709848078965
</code></pre>
<p><code>from</code>과 <code>as</code>를 동시에 사용할 수도 있습니다.</p>
<pre><code class="language-python">from math import pi as p, sin as s
print(p)
print(s(1))
</code></pre>
<pre><code class="language-plaintext">3.141592653589793
0.8414709848078965
</code></pre>
<hr>
<h2>표준과 외부</h2>
<p>파이썬 재단에서는 파이썬 실행 환경과 함께 <a href="https://docs.python.org/ko/3/library/index.html">파이썬 표준 라이브러리</a>를 배포합니다. 이는 파이썬 설치에 포함되어 있습니다. (라이브러리란, 유용한 기능을 미리 만들어놓은 것을 두루 뜻하는 말입니다. 지금은 파이썬 모듈의 모음집이라고 이해해도 무리 없습니다.) 위 예제에서 우리는 그나마 자주 쓰이는 <code>math</code> 모듈을 불러와서 사용해보았습니다. 이는 별다른 설치가 필요하지 않았습니다.</p>
<p>하지만 <code>pandas</code>, <code>numpy</code>와 같이 표준에 포함되어 있지 않은 모듈은 파이썬 패키지 매니저를 통해 별도로 설치해야 합니다. 흔히 우리가 프로그램을 설치하는 것처럼 인터넷에서 인스톨러를 받아서 설치하는 것이 아니라, 콘솔 창에서 간편하게 명령을 통해 설치합니다. 파이썬 패키지 매니저가 알아서 설치해주니 참으로 간편하게 느껴지실 겁니다. 간단한 예시로는 다음 명령을 콘솔 창에서 실행시키기만 하면 <code>pandas</code> 모듈이 설치됩니다.</p>
<p><code>pip install pandas</code></p>
<p>만약 작동하지 않는다면, 다음을 시도해보세요.</p>
<p><code>pip3 install pandas</code></p>
<hr>
<h2>프로그래밍 문제</h2>
<p>다음은 <code>random</code> 모듈에 대한 설명이다. 이를 바탕으로 과제를 해결하라.</p>
<blockquote>
<ul>
<li><code>random</code> 모듈이란, 무작위 숫자를 불러오거나 확률과 관련된 작업을 할 때 유용하게 쓰인다.</li>
<li><code>import random</code>을 통해 모듈을 불러올 수 있다.</li>
<li><code>random.randint(small, big)</code> : <code>small</code> 이상 <code>big</code> 이하의 정수를 무작위로 뽑아 리턴한다.</li>
<li><code>random.uniform(small, big)</code> : <code>small</code> 이상 <code>big</code> 이하의 실수를 무작위로 뽑아 리턴한다.</li>
<li><code>random.choice(seq)</code> : <code>seq</code>에서 무작위로 항목 하나를 뽑아 리턴한다. (<code>seq</code>는 리스트)</li>
<li><code>random.sample(seq, num)</code> : <code>seq</code>에서 무작위로 항목 <code>num</code> 개를 뽑아 리턴한다. (항목은 중복되지 않는다.) (<code>seq</code>는 리스트)</li>
</ul>
</blockquote>
<ol>
<li>
<p><code>random</code> 모듈의 <code>uniform</code> 함수만 임포트하라. (<code>import</code>, <code>from</code> 사용)</p>
</li>
<li>
<p>다음 코드가 어떤 의도인지 설명하라.</p>
<ol>
<li>
<p><code>randint</code></p>
<pre><code class="language-python">attack = randint(10, 20)
</code></pre>
</li>
<li>
<p><code>choice</code></p>
<pre><code class="language-python">game = ['rock', 'paper', 'scissors']
sel = random.choice(game)
</code></pre>
</li>
</ol>
</li>
<li>
<p>다음 코드의 결과를 예측하라.</p>
<pre><code class="language-python">deck = []
for shape in '♦♣♥♠':
    for num in &quot;23456789AJQK&quot;:
        deck.append(shape + num)
select = random.sample(deck, 7)
print(select)
</code></pre>
</li>
<li>
<p>어떤 게임에서, 플레이어의 공격력을 랜덤으로 결정하고자 한다. 이 게임에서는 주사위를 10번 굴려 그 총 합을 공격력으로 설정한다. 그런 식으로 설정해본 공격력 20개를 시험삼아 출력해보시오.</p>
</li>
</ol>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li><code>from random import uniform</code></li>
<li>코드 의도 설명
<ol>
<li>10이상 20 이하의 수를 랜덤으로 받으려고 함</li>
<li><code>'rock'</code>, <code>'paper'</code>, <code>'scissors'</code> 중 하나를 랜덤으로 선택하고자 함</li>
</ol>
</li>
<li>트럼프 카드 덱을 만들어 랜덤으로 7개의 카드를 뽑아와서 출력한다.</li>
<li>코드입니다.<pre><code class="language-python">import random
for i in range(20):
    s = 0
    for j in range(10):
        s += random.randint(1, 6)
    print(s)
</code></pre>
<pre><code class="language-plaintext">27
36
27
22
31
31
39
36
30
41
27
24
32
40
38
35
44
27
44
36
</code></pre>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date><![CDATA[2019-12-27 11:31:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-27 02:31:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-30 14:00:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-30 05:00:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%aa%a8%eb%93%88-%ec%82%ac%ec%9a%a9-%ec%9c%a0%ec%9a%a9%ed%95%9c-%ea%b8%b0%eb%8a%a5-%eb%81%8c%ec%96%b4%eb%8b%a4-%ec%93%b0%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - for, range ~ 리스트의 항목을 다루기]]></title>
		<link>https://elvanov.com/545</link>
		<pubDate>Thu, 02 Jan 2020 09:43:26 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=545</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>학습 목표</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이번 시간에 배울 내용은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>for</code></li><li><code>range</code></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>for</code>,&nbsp;<code>range</code>의 등장</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://elvanov.com/273">리스트</a>를 배울 때 사용했던 예제를 갖고 와 보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = 0
scoreAll = 0
students = &#91;]
while i &lt; 10:
    students.append(int(input()))
    i += 1

i = 0
while i &lt; 10:
    scoreAll += students&#91;i]
    i += 1

print("점수출력:", students)
print("평균:", scoreAll / 10)
print("최대:", max(students))
print("최소:", min(students))</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>여기서&nbsp;<code>i</code>&nbsp;변수를 주목해주세요.&nbsp;<code>i</code>&nbsp;변수는 오직&nbsp;<code>while</code>의 반복을 제어하기 위해 사용됩니다. 하지만&nbsp;<code>for</code>와&nbsp;<code>range</code>를 쓰게 된다면 코드가 더 간단해집니다. 다음 예제는 위 예제와 동일하게 작동합니다. 한번 실행시켜 보세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>scoreAll = 0
students = &#91;]
for i in range(10): ##a_1##
    students.append(int(input())) 

for st in students: ##a_2##
    scoreAll += st ##a_3##

print("점수출력:", students)
print("평균:", scoreAll / 10)
print("최대:", max(students))
print("최소:", min(students))</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>pl1
5
2
6
3
7
5
8
6
9
점수출력: &#91;1, 5, 2, 6, 3, 7, 5, 8, 6, 9]
평균: 5.2
최대: 9
최소: 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>원활히 잘 작동됩니다. 이전 예제와는 달리&nbsp;<code>i</code>가 한 번 밖에 등장하지 않았고,&nbsp;<code>for</code>와&nbsp;<code>range</code>라는 것이 새롭게 추가되었습니다. 하나하나 어떤 의미인지 대충 훑어본 다음&nbsp;<code>for</code>와&nbsp;<code>range</code>에 대한 자세한 설명을 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>a_1</em>(1.) for, range의 등장</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(10):</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>for</code>는 파이썬의 문법입니다.&nbsp;<code>if</code>와&nbsp;<code>while</code>의 지위를 함께 누리고 있는 예약어이지요.&nbsp;<code>for</code>의 기능은 리스트의 모든 항목을 한 번씩 순회하는 반복문입니다.&nbsp;<strong><code>for</code></strong>&nbsp;직후에는 리스트의 항목 하나하나를 대변할 새로운&nbsp;<strong>변수 이름</strong>이 등장하고, 그 다음에는&nbsp;<strong><code>in</code></strong>, 그 다음에는&nbsp;<strong>리스트</strong>가 등장합니다. 그리고는 새로운&nbsp;<strong>블록</strong>이 시작됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>여기서&nbsp;<code>range(10)</code>은&nbsp;<code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code>와 아주 비슷한 뜻입니다. 우선은 그렇게 이해하고 넘어갑시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_2</em>(2.) 반복문</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for st in students:</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 <code>for</code> 문과 마찬가지입니다. <code>students</code> 안에 있는 모든 항목을 순회하면서 각 항목을 <code>st</code>에 대입시킵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_3</em>(3.) 누적</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    scoreAll += st</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>st</code>는 모든 항목에 대응되므로&nbsp;<code>scoreAll</code>은 결국 모든 학생의 점수를 합한 결과가 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>for</code>의 사용법</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>리스트 순회하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>for</code>의 기본 골자는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for 변수명 in 리스트:
    내용</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>변수명은 지금까지 쓰지 않은 새로운 변수명</strong>을 작성합니다. 우리는 변수를 이용하려면 먼저 정의를 해야 한다고 배웠는데요, 여기 <code>for</code>문에 들어가는 이 변수는 사전에 정의되지 않아도 됩니다. 리스트의 각 항목에 대응시킬 때 내부적으로 대입문을 사용하기 때문입니다. 그래서 <span style="text-decoration: underline;">자동으로 초기화 및 정의가 이루어집니다</span>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><code>in</code>은 우리가 이전에 배운 멤버십 검사 연산자와는 전혀 연관이 없음</strong>을 알려드립니다. <code>for</code>가 아닌 곳에서 <code>in</code>은 <code>True</code>나 <code>False</code>를 내뱉는 연산자이지만 여기서는 단순히 변수명과 리스트를 구분짓는 용도이고, <span style="text-decoration: underline;"><code>for</code>과 완전히 세트</span>로 움직입니다. 그래서 <code>for-in</code> 문이라고도 이야기를 종종 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>리스트에는 리스트 변수가 와도 되고,&nbsp;<code>[1, 2, 3]</code>와 같이 우리가 새로운 리스트를 생성해서 줄 수도 있으며,&nbsp;<code>range(10)</code>같은 방법으로 넣어줄 수도 있습니다.&nbsp;<code>range</code>에 대한 자세한 사용법은 이후에 설명합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 콜론(<code>:</code>)과 들여쓰기로 새로운 블록이 시작되었다는 것을 알 수 있습니다. 이<strong> 블록 내부에서는 우리가 <code>for</code> 직후에 넣어주었던 변수명을 사용할 수 있습니다.</strong> <code>for</code>가 리스트의 모든 항목을 순회한다고 했습니다. 순회할 때마다 각 항목은 변수명으로 접근할 수 있습니다. 또한 이 블록은 리스트의 항목 개수만큼 반복한다는 것을 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for st in students:
    scoreAll += st</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드에서 <code>st</code>는 <code>students</code>의 각 항목으로 차례로 대변되고, <code>scoreAll += st</code> 명령은 <code>students</code> 리스트의 항목 개수만큼 반복됩니다. 좀 더 일반적인 상황에서 그 흐름을 이야기해보면 아래 순서도와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TB  \na1[\u0022for st in students: 를 만난다.\u0022]  \na1 \u002d\u002d\u003e a2{\u0022students에\u003cbr/\u003e항목이 하나라도\u003cbr/\u003e존재하는가?\u0022}  \na2 \u002d\u002d\u003e|yes| a3[\u0022리스트의 첫번째 항목을\u003cbr/\u003est에 대입시킨다.\u0022]  \na2 \u002d\u002d\u003e|no| a4[\u0022for 블록을 실행시키지 않고\u003cbr/\u003e다음으로 넘어간다.\u0022]  \na3 \u002d\u002d\u003e a5[\u0022블록을 실행시킨다.\u0022]  \na5 \u002d\u002d\u003e a6{\u0022리스트에\u003cbr/\u003e다음 항목이\u003cbr/\u003e존재하는가?\u0022}  \na6 \u002d\u002d\u003e |yes|a7[\u0022다음 항목을\u003cbr/\u003e변수명에 대입시킨다.\u0022]\na7 \u002d\u002d\u003e a5  \na6 \u002d\u002d\u003e |no|a8[\u0022for 문을 끝내고 다음으로 넘어간다.\u0022]\n```\n*`for`의 작동 순서*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TB  
a1[&quot;for st in students: 를 만난다.&quot;]  
a1 --&gt; a2{&quot;students에&lt;br/&gt;항목이 하나라도&lt;br/&gt;존재하는가?&quot;}  
a2 --&gt;|yes| a3[&quot;리스트의 첫번째 항목을&lt;br/&gt;st에 대입시킨다.&quot;]  
a2 --&gt;|no| a4[&quot;for 블록을 실행시키지 않고&lt;br/&gt;다음으로 넘어간다.&quot;]  
a3 --&gt; a5[&quot;블록을 실행시킨다.&quot;]  
a5 --&gt; a6{&quot;리스트에&lt;br/&gt;다음 항목이&lt;br/&gt;존재하는가?&quot;}  
a6 --&gt; |yes|a7[&quot;다음 항목을&lt;br/&gt;변수명에 대입시킨다.&quot;]
a7 --&gt; a5  
a6 --&gt; |no|a8[&quot;for 문을 끝내고 다음으로 넘어간다.&quot;]
</code></pre>
<p><em><code>for</code>의 작동 순서</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p><code>while</code>에 비해서 정말 편리해졌지 않나요? <strong>루프를 제어하기 위한 변수를 일일히 초기화할 필요도, 증감을 시켜줄 필요도 없어지게 됩니다.</strong> 또한 <strong>리스트의 유효 범위에 해 신경쓰지 않게 된 것</strong>도 큰 장점입니다.  리스트를 직접 접근하게 되었을 때 (예: <code>students[10]</code>) 그 범위가 벗어나면 에러를 일으키는데, <code>for-in</code> 에서는 자동으로 범위를 인식하여 처음부터 끝까지 읽어올 수 있으니 걱정할 필요가 없지요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>지정된 횟수만큼 반복하기</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(10):
    students.append(int(input())) </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>for</code>의 주된 목적은 리스트를 순회하기 위함이지만, 위 예제에서 보시듯 <strong><code>range</code>만을 이용해서 단순한 횟수만큼 블록을 실행시키는 용법</strong>으로도 쓸 수 있습니다. 문법적으로 반드시 변수명이 주어져야 하기 때문에 <code>i</code>라고 써넣기는 했지만 <span style="text-decoration: underline;">블록 내에서는 <code>i</code>가 사용되지 않았습니다.</span></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>range</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>range</code>는 3가지 방식으로 사용할 수 있습니다.&nbsp;<code>range</code>는 소괄호 안에 넣을 변수의 개수에 따라서 작동이 살짝살짝 달라집니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>range(stop)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>변수를 하나만 넣는다면&nbsp;<code>0</code>&nbsp;이상&nbsp;<code>stop</code>&nbsp;미만의 리스트를 생성합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(10):
    print(i)    </code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>0
1
2
3
4
5
6
7
8
9</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>range(start, stop)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>range</code>에 두 개의 변수를 넣는다면&nbsp;<code>start</code>&nbsp;이상&nbsp;<code>stop</code>&nbsp;미만의 정수가 나열되어 있는 리스트를 만듭니다.&nbsp;<code>start</code>는&nbsp;<code>stop</code>보다 작아야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(10, 20):
    print(i)    </code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>10
11
12
13
14
15
16
17
18
19</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>range(start, stop, step)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>range</code>에 세 개의 변수를 넣는다면&nbsp;<code>start</code>&nbsp;이상&nbsp;<code>stop</code>&nbsp;미만의 정수들을&nbsp;<code>step</code>&nbsp;만큼 건너뛰는 리스트를 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(10, 20, 2):
    print(i)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>10
12
14
16
18</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>start</code>보다 <code>stop</code>을 낮게 하고 <code>step</code>을 음수로 둔다면 어떻게 될까요? 바로 숫자가 낮아지는 리스트를 만들 수 있습니다! 즉 <code>start</code> <strong>이하</strong> <code>stop</code> <strong>초과</strong> 의 숫자가 나열된 리스트가 만들어진다는 뜻입니다</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(20, 10, -2):
    print(i)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>20
18
16
14
12</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>여전히 <code>stop</code> 그 자체는 리스트에 포함되지 않는다는 점을 유념해주세요. 위 예제에서는 <code>stop</code>에 <code>10</code>을 두었지만 <code>10</code>이 포함되지 않았습니다. <strong><code>step</code>이 양수라 점점 커지는 리스트라면 <code>stop</code>은 <span style="text-decoration: underline;">미만</span>의 의미를 갖고, <code>step</code>이 음수라서 리스트가 점점 작아지는 흐름이라면 <code>stop</code>은 <span style="text-decoration: underline;">초과</span>를 의미</strong>하게 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>정리</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><strong>리스트의 항목을 순회하려면 <code>for 변수 in 리스트:</code> 구문을 이용합니다.</strong></li><li><strong><code>for</code>는 리스트의 길이만큼 반복하며, 변수를 리스트의 각 항목에 대응시킵니다.</strong></li><li><code>range(a)</code>는 <code>0</code> 이상 <code>a</code> 미만의 정수가 담겨있는 리스트를 만듭니다.</li><li><code>range(a, b)</code>는 <code>a</code> 이상 <code>b</code> 미만의 정수가 담겨있는 리스트를 만듭니다.</li><li><code>range(a, b, c)</code>는 <code>a</code> 이상 <code>b</code> 미만이되 <code>c</code>만큼 건너뛰는 정수의 리스트를 만듭니다.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>break</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>for</code>문 안에서도&nbsp;<code>break</code>를 사용할 수 있습니다. 동작은&nbsp;<code>while</code>&nbsp;때와 동일하게 작동합니다.&nbsp;<code>break</code>를 만나는 순간 해당&nbsp;<code>for</code>&nbsp;블록을 즉시 빠져나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for num in range(101, 200):
    if (num ** 0.5) % 1 == 0: # num의 제곱근이 정수라면
        print(num)
        break</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>121</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>continue</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>for</code>에서는 <code>while</code>과 마찬가지로 <code>continue</code>를 사용할 수 있습니다. <code>continue</code>의 역할은, <code>continue</code>를 만나자마자 즉시 다음 루프로 이동한다는 것입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(100):
    if i % 3 == 0:
        print(i, "는 3의 배수입니다.")
        continue
    print(i, "는 3의 배수가 아니랍니다!!")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(중략)
89 는 3의 배수가 아니랍니다!!
90 는 3의 배수입니다.
91 는 3의 배수가 아니랍니다!!
92 는 3의 배수가 아니랍니다!!
93 는 3의 배수입니다.
94 는 3의 배수가 아니랍니다!!
95 는 3의 배수가 아니랍니다!!
96 는 3의 배수입니다.
97 는 3의 배수가 아니랍니다!!
98 는 3의 배수가 아니랍니다!!
99 는 3의 배수입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드에서는 <code>i</code>가 3의 배수인 경우 메시지를 출력하고 그대로 <code>continue</code>를 하고 있습니다. 그래서 아래 쪽 <code>print</code>는 <code>if</code>나 <code>else</code>에 둘러싸여져 있지 않아도 실행되지 않고 다음 루프로 넘어간다는 것을 확인하실 수 있습니다. 만약 <code>continue</code>가 없다면 <code>i</code>가 3의 배수라도 3의 배수가 아니라는 메시지가 중복되어 출력되겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>for</code>의 사용법은 무엇인가?</li><li><code>range</code>의 사용법은 무엇인가?</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>for</code>과 <code>range</code>를 이용하여 1부터 100까지 3의 배수를 출력하는 프로그램을 작성하세요.</li><li>두 수를 입력받고 두 수 사이의 모든 5의 배수를 출력하는 프로그램을 작성하세요. 단, <code>for</code>과 <code>range</code>를 이용하여 문제를 해결해보세요. (주의: 두 수 중 어느 것이 크고 작은지 체크해야 합니다.)</li><li>다음은 학생들의 점수입니다. 평균과의 편차가 가장 큰 점수 (평균으로부터 가장 멀리 떨어진 점수)를 구하여 출력하세요.<br><code>slist = [48, 55, 51, 47, 37, 48, 47, 45, 49, 47, 54, 51, 44, 50, 47, 46, 50, 55, 50, 45]</code></li><li>다음과 같이 모든 시간과 분을 출력하는 파이썬 프로그램을 작성하세요. (힌트 : <code>for</code>문 2개를 중첩해봅시다.)<code>0 0 0 1 0 2 0 ... 0 59 1 0 1 1 1 2 .. 23 59 </code>복사하기</li><li>완전수 문제 : 숫자 N에 대하여 자기 자신을 제외한 약수를 모두 더한 값이 N이 된다면, 이 N은 완전수라고 합니다. 예를 들어 6의 약수는 1, 2, 3, 6인데, 여기서 자기 자신을 제외한 1, 2, 3을 모두 더하면 6이 되므로 6은 완전수입니다. 2이상 1000이하의 수 중 완전수를 모두 찾아 출력하세요. (range 사용)</li><li>로프 문제 : <code>n</code> 개의 로프가 있고, 각 로프에는 견딜수 있는 중량 <code>w</code>가 각각 있습니다. 만약 <code>n</code> 개의 로프를 사용하여 물건을 메단다면, 각 로프에 <code>물건의 무게 / n</code> 만큼 무게가 분산됩니다. 로프를 한 개 혹은 여러 개를 사용하여 견딜 수 있는 최대한의 무게를 계산하고자 합니다. 첫 번째 입력으로 로프의 개수 <code>n</code> 을 입력받고, 각 로프의 <code>w</code> 를 입력받은 뒤, 매달 수 있는 최대 무게를 출력하세요.<ul><li><strong>요점</strong>: <code>n</code> 개의 로프 중 가장 약한 로프가 버틸 수 있는 중량이 <code>min_w</code> 일 때, 버틸 수 있는 최대 무게는 <code>n * min_w</code> 입니다. 왜냐하면 그 이상의 무게가 된다면 가장 약한 로프가 버틸 수 있는 중량을 초과하여 줄이 끊어질 것이기 때문이죠.</li><li>예시 입력: <code>4 &lt;Enter> 11 &lt;Enter> 7 &lt;Enter> 4 &lt;Enter> 15 &lt;Enter></code></li><li>예시 입력의 뜻:  4개의 로프를 사용할 것이고 각 로프의 견딜수 있는 중량이 <code>11</code>, <code>7</code>, <code>4</code>, <code>15</code>이다.</li><li>정답 : <strong>22</strong></li><li>근거 - 사용할 로프 개수에 따른 최대 무게<ul><li>1개: 사용 로프 - <code>15</code>, 최대 무게 - <code>15 * 1 → <strong>15</strong></code></li><li>2개: 사용 로프 - <code>11, 15</code>, 최대 무게 - <code>11 * 2 → <strong>22</strong></code></li><li>3개: 사용 로프 - <code>11, 7, 15</code>, 최대 무게 - <code>7 * 3 → <strong>21</strong></code></li><li>4개: 사용 로프 - <code>11, 7, 4, 15</code>, 최대 무게 - <code>4 * 4 → <strong>16</strong></code></li></ul></li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(3, 100, 3):
    print(i)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>2. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>start = int(input('수1을 입력하세요 >> '))
finish = int(input('수2을 입력하세요 >> '))
if start > finish:
    start, finish = finish, start

for i in range(start + 1, finish):
    if i % 5 == 0:
        print(i)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>3. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>slist = &#91;48, 55, 51, 47, 37, 48, 47, 45, 49, 47, 54, 51, 44, 50, 47, 46, 50, 55, 50, 45]

avg = sum(slist) / len(slist)
bestnum = 0
bestdiff = 0

for num in slist:
    diff = avg - num
    if diff &lt; 0:
        diff *= -1
    
    if bestdiff &lt; diff:
        bestdiff = diff
        bestnum = num

print(bestnum)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>4. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for hour in range(24):
    for minute in range(60):
        print(hour, minute)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>5. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>perfect = &#91;]
for num in range(2, 1001):
    div_sum = 0
    for sub in range(1, num):
        if num % sub == 0:
            div_sum += sub
    if div_sum == num:
        perfect.append(num)
print(perfect)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>6. 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>count = int(input())
weights = &#91;]
for i in range(count):
    weights.append(int(input()))

weights.sort()
weights.reverse()
nowCount = 0
maxWeight = 0
for i in weights:
    nowCount += 1
    if maxWeight &lt; i * nowCount :
        maxWeight = i * nowCount

print(maxWeight)</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 18:43:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 09:43:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-17 22:15:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-17 13:15:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-for-range-%eb%a6%ac%ec%8a%a4%ed%8a%b8%ec%9d%98-%ed%95%ad%eb%aa%a9%ec%9d%84-%eb%8b%a4%eb%a3%a8%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1218</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 반복문 ~ 비슷한 작업을 반복하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/257</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-30 20:08:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-30 11:08:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] for, range – 리스트의 항목을 다루기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588245252.573248;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588244937.096392;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1154</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 슬라이싱 &#8211; 리스트 간편하게 접근하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1705</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-24 15:35:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-24 06:35:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 그런데 뭔가 스멀스멀 떠오르지 않나요? 저런 상황은 우리가 이전에 한 번 접했습니다. 곧바로 range가 떠오릅니다. 우리가 range를 만들 때 범위를 어떻게 지정했는지 기억하시나요? [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587710145.757491;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1587719931.163669;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2301</wp:comment_id>
			<wp:comment_author><![CDATA[정]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jiuun@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[175.117.53.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-22 16:06:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-22 07:06:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안 풀리는 부분이 생겨서 질문 댓글을 남기려다가 다시 개념부분을 보고 풀어냈습니다 핳 -.-
그치만 쓰려던 댓글에 글쓴님 덕분에 파이썬공부를 잘 하고 있단 내용을 포함하려했기에 이 참에 댓글을 남깁니다
감사합니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1592809575.486004;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1592887651.736416;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2320</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.113.98.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-23 13:48:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-23 04:48:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[공부에 도움이 되어서 다행입니다~~!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2301</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1592887704.547436;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 정체성, 동질성 ~ 객체의 성질]]></title>
		<link>https://elvanov.com/599</link>
		<pubDate>Sat, 11 Jan 2020 02:11:01 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=599</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>가변 객체(Mutable Object)와 불변 객체(Immutable Object)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>객체는 가변 객체와 불변 객체로 구분할 수 있습니다. 말 한마디로 요약하면 <strong>가변 객체는 내용을 수정할 수 있고 불변 객체는 내용을 수정할 수 없습니다.</strong> 말 한 마디로 당연히 이해가 되지 않을 겁니다. 일단 어떤 것이 가변 객체이고 불변 객체인지는 이미 확정되어져 있으므로 그것부터 살펴본 뒤 가변 객체와 불변 객체가 어떻게 동작하는지 알아보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>종류</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>객체는 실제로 데이터로서 메모리에 존재하는 녀석이고, 이 객체를 만들기 위해 클래스를 이용하곤 합니다. 사실 <strong>가변 객체와 불변 객체를 나누는 불변성이라는 특징은 객체 하나하나에 대응되는 것이 아니라<span style="text-decoration: underline;"> 클래스 그 자체에 대응</span></strong>됩니다. 그러니까 클래스를 불변성으로 구분할 수 있다는 것이 사실 정확한 표현이라는 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>사용자 정의 클래스, <code>list</code>, <code>dict</code>, 등등이 가변 객체이고 숫자형, <code>tuple</code>, <code>str</code> 등이 불변 객체입니다. 보기 좋게 표로 나누면 다음과 같습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|가변형|불변형|\n|\u002d\u002d\u002d\u002d|\u002d\u002d\u002d\u002d|\n|사용자 정의 클래스, `list`, `dict` 등|숫자형, `tuple`, `namedtuple`, `str` 등|"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>가변형</th>
<th>불변형</th>
</tr>
</thead>
<tbody>
<tr>
<td>사용자 정의 클래스, <code>list</code>, <code>dict</code> 등</td>
<td>숫자형, <code>tuple</code>, <code>namedtuple</code>, <code>str</code> 등</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>차이점</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>불변 객체와 가변 객체를 나누는 불변성이 대상을 무엇으로 하는지 분명히 합시다. 변수를 배울 때 우리는 <strong>이름과 데이터로 나눌 수 있다</strong>고 했습니다. 우리가 새로운 변수를 정의하고 그 이름을 부를 때 즉각적으로 메모리의 특정 위치에서 파이썬 인터프리터가 값을 뽑아옵니다.  불변 객체는 내용을 수정할 수 없다는 말은 <strong>그 메모리에 위치하는 불변 객체의 값을 수정할 수 없다</strong>는 뜻입니다. 즉 <strong>불변형 객체의 모든 데이터는 객체가 최초로 생성될 때 결정된다</strong>라고도 말할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = (3, 4)
a&#91;1] = 2
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 2, in &lt;module>
    a&#91;1] = 2
TypeError: 'tuple' object does not support item assignment</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>튜플은 불변형 객체이므로 내용을 수정할 수 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>반면 리스트는 가변 객체이므로 항목을 수정할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;3, 4]
a&#91;1] = 2
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;3, 2]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>불변 객체든 가변 객체든 가리키는 대상을 다른 대상으로 변경하는 것 대해서는 아무런 제한이 없습니다.</strong> 그러니까 어떤 변수를 재정의하는 문제와는 전혀 다른 이야기라는 것입니다. <strong>변수는 언제든지 재정의할 수 있습니다.</strong> <strong>불변성은 변수에 있는 것이 아니라 클래스에 있습니다.</strong> 아래 예제는 정상적으로 작동됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = (3, 4)
a = (5, 6)
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(5, 6)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>아래 예제는 언뜻 튜플 내부를 수정하는 것처럼 보이지만, 그렇지 않습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = (3, 4)
a += (5, 7)
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(3, 4, 5, 7)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>튜플의<strong> <code>+=</code> 연산에서는 새로운 튜플이 만들어져 변수에 새로 대입</strong>됩니다. 기존에 <code>a</code>가 가리키던 <code>(3, 4)</code> 라는 튜플은 이제 아무도 가리켜주지 않으므로 누구도 접근할 수 없어 곧 메모리에서 삭제될 것입니다. 기존에 가리키던 <code>(3, 4)</code>나 새로 가리키는 <code>(3, 4, 5, 7)</code>이나 어느 것 하나 수정은 이루어지지 않았으므로 아무런 문제가 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>만약 튜플 안에 리스트가 있다면 어떻게 될까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = (3, 4, &#91;5, 6])
a&#91;2].append(3)
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(3, 4, &#91;5, 6, 3])</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><span style="text-decoration: underline;">리스트의 내용은 수정할 수 있습니다. </span>튜플이 불변형이라 그 내용이 수정되지 않아야 하는데, 수정이 된다면 논리적으로 틀린 것일까요? 다행히도 그렇지는 않습니다. <strong>튜플이 내용으로서 가지고 있는 것은 리스트에 대한 참조, 즉 이름입니다.</strong> 즉 가리키고 있는 대상이 어느 메모리에 위치한 특정 리스트임이 가장 중요한 포인트입니다. 그 리스트가 처음에 <code>5, 6</code>이라는 항목을 가지고 있었지만 <code>append</code> 하여 내용이 바뀐다 하더라도 그 리스트가 다른 리스트로 바뀌는 것이 아니니, 튜플 입장에서는 내용이 변경되는 게 아니지요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>정체성</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>가변 객체는 정체성이라는 개념이 추가됩니다.  정체성이란 무엇일까요? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>철수라는 동명이인이 있는데, 나이도 14살로 똑같다고 가정해봅시다. 이 두 사람이 <code>같다</code> 라고 말할 수 있을까요? 아니지요. 심지어 이름도 같고 생김새도 같고 말버릇도 같고 모든 게 다 같은 사람이라도 따로 존재하고 있다면 그 두 사람은 다르다 라고 말하는 것이 마땅합니다. 아무리 겉모습이 같더라도, (뭐, 생각하는 것도 같다 하더라도) 둘은 독립적으로 존재하기 때문에 같다고 할 수 없습니다. 이를 <strong>정체성이라고 하며 모든 가변 객체는 정체성이 부여됩니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = {"name": '철수', "age": 14}
b = {"name": '철수', "age": 14}
print(a == b)
print(a is b)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>True
False</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우리는 이제껏 두 변수가 같은지 아닌지 비교할 때 <code>==</code>를 줄곧 사용해 왔습니다. <strong><code>==</code> 연산자는</strong> <strong>값이 같은지를 비교</strong>합니다. 딕셔너리나 리스트 등에 <code>==</code> 연산을 한다면, 내부에 있는 모든 요소를 하나하나 비교하며 다른게 있는지 없는지 검사합니다. <strong>이것과 관련된 성질을 동질성이라고 하겠습니다</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고, <code>is</code>가 새로 등장했습니다. <strong><code>is</code>는 정체성을 비교하는 역할입니다. </strong> <strong><code>is</code>는 <code>id</code> 함수의 결과를 비교합니다.</strong>(쉽게 얘기하자면) <code>id</code> 함수의 예제는 아래에서 확인할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>거의 쓰이지는 않지만 <code>id</code> 함수를 이용하여 그 대상이 어떤 정체성인지 확인할 수 있습니다. <code>id</code> 함수를 실행하게 되면 알 수 없는 정수 값이 튀어나옵니다. 그 객체의 고유 번호인 셈이지요. <strong>이 값이 같다면 정말 같은 메모리에 위치하는, 이름만 여러 개인 객체인 셈이고, 그렇지 않다면 메모리에 독립적으로 존재하는 두 개의 객체라는 뜻입니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = {"name": '철수', "age": 14}
b = {"name": '철수', "age": 14}
print(id(a), id(b), a is b)
a = b
print(id(a), id(b), a is b)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>2672326162752 2672326162816 False
2672326162816 2672326162816 True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>파이썬 내장 가변 객체를 만들 때 쓰이는 기호는 새로운 객체를 만듭니다.</strong> 즉 <code>[...]</code>를 쓸 때마다 새로운 리스트가 만들어지는 것이고, <code>{...}</code>를 쓸 때마다 새로운 <code>set</code> 혹은 <code>dict</code>가 만들어지는 셈이죠. <code>list(...)</code>와 같이 클래스 이름을 통해 생성하는 것도 당연히 새로운 객체를 만드는 과정이구요. <code>a</code>와  <code>b</code>가 처음에 정의될 때, 각자 리터럴로 생성했으니 각자 다른 객체를 가리키게 되며, <code>id</code>값도 다르게 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>반면 가변 객체를 대입하는 것은 새로운 객체를 만들지 않고 여러 개의 이름을 붙여주는 것에 불과합니다. </strong>위 예제와 같이 <code>a = b</code>를 하게 되면 <code>a</code>는 b가 가리키던 객체를 같이 가리키게 되며, 즉 <code>a</code>와 <code>b</code>가 같은 객체를 가리킨다는 것이고, 만약 <code>a</code>를 수정하게 되면 바로 <code>b</code>영향이 갑니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>None</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>None</code>은 가변 객체이기는 하지만 불변성을 논할 필요는 없습니다. <code>None</code>이라는 객체는 <code>NoneType</code>의 유일한 객체입니다. 파이썬 프로그램이 실행된 이후 <code>NoneType</code>으로 만들어지는 객체는 <code>None</code>이 유일무이합니다. 이를 좀 더 전문 용어로 <a href="https://medium.com/@chs99051868/python-design-pattern-singleton-963f4a796d7f">싱글톤</a>이라고 이야기하지만, 중요한 건 아닙니다. 쉽게 설명하면 <strong>코드 상에서 보이는 <code>None</code>은 전부 같은 객체(<code>id</code> 값이 같은 객체)</strong>라는 것입니다.  </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(id(None))

a = None
print(id(a))

def hi(p = None):
    print(id(p))
hi()</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>140718916847744
140718916847744
140718916847744</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그러므로 <code>None</code>과 비교할 일이 있을 때에는 정체성 검사인 <code>is</code>를 이용합니다. 값 비교인 <code>==</code>를 써도 제대로 동작하기는 하지만, <code>None</code>에는 <code>is</code>를 사용하는 것이 논리적으로도 맞고 파이썬 고인물들의 국룰입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>함수 인수의 기본값을 가변 객체로 두지 않아야 하는 이유</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>대개 클래스를 설계할 때 <a href="https://elvanov.com/304">함수의 기본값</a>으로 비어있거나 없는 값을 설정하곤 합니다. 지금 클래스를 설계할 것은 아니고, 단순히 예시로 보기 위해서 함수 하나를 상상하여 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><code>add_5_in_list</code> 함수는 리스트 하나를 인수 하나를 받습니다. 만약<strong> 인수가 아무것도 주어지지 않는다면 빈 리스트에 <code>5</code> 하나를 추가하여 리턴</strong>합니다. 리스트가 주어진다면 그 리스트에 <code>5</code>를 추가하고 그 리스트를 리턴합니다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p><code>add_5_in_list</code> 함수를 정의한 후 이어서 테스트 코드를 작성해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def add_5_in_list(ls = &#91;]):
    ls.append(5)
    return ls

print(add_5_in_list())

ls = &#91;3]
add_5_in_list(ls)
print(ls)

print(add_5_in_list())
print(add_5_in_list())</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;5]
&#91;3, 5]
&#91;5, 5]
&#91;5, 5, 5]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>잘 동작하는 것 같다가도, <code>add_5_in_list</code>가 인수 없이 여러번 호출이 되니 <strong>[5, 5, 5]와 같이 5가 여러 개로 늘어나는 것을 확인할 수 있습니다.</strong> 이게 무슨 일일까요. <code>add_5_in_list</code>가 호출될 때마다 우리는 단지 <code>[5]</code>만을 받아야 하는 말이지요!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>비밀은 함수를 정의할 때 파이썬 인터프리터가 하는 동작에 있습니다. 인수 부분에서 기본 값을 설정하는 <code>ls = []</code> 부분은 사실 <strong>함수가 호출할 때마다 동작하는 것이 아니라, 함수를 정의하는 순간 해당 함수의 기본값을 모아두는 <code>__defaults__</code>라는 특별 속성에 저장</strong>됩니다. 한번 직접 이 <code>__defaults__</code>라는 아이를 직접 출력해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def add_5_in_list(ls = &#91;]):
    ls.append(5)
    return ls

print(add_5_in_list.__defaults__)
add_5_in_list()
add_5_in_list()
add_5_in_list()
print(add_5_in_list.__defaults__)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(&#91;],)
(&#91;5, 5, 5],)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드에서는 <code>add_5_in_list</code> 함수를 정의한 직후 이 리스트 내부에 있는 <code>__defaults__</code> 속성을 <code>print</code> 해보니 하나의 <strong>빈 리스트</strong>가 담겨있는 튜플 하나를 보실 수 있습니다.  아무런 인수 없이 함수를 호출하기만 하는데도 <code>__defaults__</code>는 계속해서 변형됩니다! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아까 <strong>가변 객체는 대입될 때 새로운 객체가 생기는 것이 아니라 별도의 별명으로 취급</strong>된다고 하였죠? 그러므로 매 호출 때마다 <code>ls</code> 인수의 기본값은 모두 같은 객체를 가리키게 되어 같은 리스트에 연이어 세 번 <code>append</code>를 실행하게 되었던 것입니다. 이는 결단코 우리의 의도가 아닙니다. 위와 같은 상황을 그림으로 표현하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1843,"width":373,"height":430,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/pythons.jpg" alt="" class="wp-image-1843" width="373" height="430"/><figcaption><em>함수 인자의 기본값 자체가 계속 변형되는 상황</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이를 수정하기 위해서는, 아래와 같이 다소 보수적인 방법을 취해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def add_5_in_list(ls = None):
    if ls is None:
        ls = &#91;]
    ls.append(5)
    return ls

print(add_5_in_list())

ls = &#91;3]
add_5_in_list(ls)
print(ls)

print(add_5_in_list())
print(add_5_in_list())</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;5]
&#91;3, 5]
&#91;5]
&#91;5]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>바로 기본 값으로 <code>None</code>을 두고, 함수의 내용에서 이 인자가 <code>None</code>인지 아닌지 정체성을 검사하는 과정을 넣는 것입니다. 첨언하자면 이 예제가 가장 흔하게 <code>None</code>과의 정체성을 직접적으로 비교하는 형태입니다. <code>None</code>을 함수 인자의 기본값으로 두는 구현은 유명한 파이썬 라이브러리에서도 쉽게 찾아볼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>불변형 객체에 대한 정체성 검사?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>다음 코드의 결과는 사실 <code>True</code>가 나올지 <code>False</code>가 나올지 모릅니다.</strong> 확률적이라는 말인가요? 그게 아닙니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 123
print(a is 123)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>c:/Users/tooth/Desktop/test2.py:2: SyntaxWarning: "is" with a literal. Did you mean "=="?
  print(a is 123)
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>일단 <code>True</code>가 나오긴 하는 군요. 생전 보지 못한 <code>SyntaxWarning</code> 까지 보게 됩니다. <span style="text-decoration: underline;"><code>is</code>가 리터럴이랑 같이 쓰이고 있다. <code>==</code>를 하려고 했던 것이냐?</span>고 파이썬 인터프리터가 물어보니까 일단 <code>is</code>를 안쓰고 <code>==</code>를 써야 할 것만 같습니다. 근데 왜 <code>is</code>를 쓰면 안 될까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>is</code>의 역할을 다시 생각해봅시다. <code>is</code>의 역할은 객체의 정체성을 검사하는 것이며 내부적으로는 <code>id</code> 값을 비교합니다. 숫자에 정체성을 검사한다는 말은 4라는 숫자에도 정직한 4, 못생긴 4, 러시아에 사는 4, 어찌되었든 <strong>다른 4가 존재하기 때문에 그를 구별하겠다는 뜻</strong>입니다. 이는 말이 안 됩니다! 4가 다 같은 4지, 달리 존재할 수 있는 4가 존재할 수 있나요? 그렇기 때문에 모든 불변형 객체에 대해서 <code>is</code> 연산을 먹이는 것은 어불성설인 셈이죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어쨌거나 <code>is</code>를 쓰면 연산은 하게 됩니다.  본래 동작대로 <code>id</code> 값을 비교하긴 하겠지요. 그러나 파이썬 구현체가 어떻게 구현되어 있느냐에 따라 효율을 위해 같은 4라도 <code>id</code>를 다르게 두었을 수도 있습니다. (어쨌거나 대개 같게 두긴 하겠지만) 즉 위 예제에서 <strong><code>id(a)</code>와 <code>id(123)</code> 의 값이 같다는 보장이 없습니다.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러므로 <strong>불변형 객체에 대해 같은지를 비교할 때에는 <code>is</code>가 아니라 <code>==</code>를 사용</strong>하여야 합니다. 아래 예제가 올바른 예제입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 123
print(a == 123)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>True</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>정체성이란 무엇인가?</li><li>정체성을 비교하려면 어떻게 해야 하는가?</li><li>가변 객체와 불변 객체의 차이는 무엇인가?</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>추가 예정</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>추가 예정</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>599</wp:post_id>
		<wp:post_date><![CDATA[2020-01-11 11:11:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-11 02:11:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 20:59:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 11:59:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%a0%95%ec%b2%b4%ec%84%b1-%eb%8f%99%ec%a7%88%ec%84%b1-none-%ea%b0%9d%ec%b2%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1380</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 코드 스타일 &#8211; 코드의 일관성 유지하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1034</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-13 20:32:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-13 11:32:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 편이 좋습니다. 주석과 어노테이션을 적극적으로 사용하고, 필요하다면 함수의 인수를 None으로 두거나 NotImplemented이라는 값을 활용하는 법도 알고 있다면 유용하게 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589369574.612846;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589369625.011224;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 명령문, 표현식 ~ 문법을 이루는 것들]]></title>
		<link>https://elvanov.com/622</link>
		<pubDate>Wed, 08 Jan 2020 09:37:25 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=622</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>우리는 지금껏 많은 문법적인 요소를 배웠습니다. 많은 것들은 서로 얽히고 섥히는데요, 예를 들면 대입문의 왼쪽에는 변수 하나만 올 수 밖에 없었지만 오른쪽에는 연산자부터 시작하여 함수 호출이나 온갖 것이 올 수 있었고, 또 그런 것들을 섞어서도 사용할 수 있었습니다. 어떤 것은 섞을 수 있고, 어떤 것은 그렇지 못합니다. 그렇다면, 그것들을 나누는 기준은 무엇일까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이번 강좌에서는 우리가 지금껏 배웠던 문법을 좀 더 정확히 이해하는 강좌이며, 문법적인 쓰임새를 알아보기보다는 문법의 설계에 초점이 두어집니다. 이 강좌에서는 <strong>어떤 새롭고 신선한 시도는 하지 않지만</strong>, <strong>실제 파이썬 문서를 볼 때 나오는 갖가지 용어를 좀 더 정확하게 이해할 수 있게 될 것입니다</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>표현식(expression)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>표현식이란 평가(evaluate)될 수 있는 문법 단위</strong>를 뜻합니다. 표현식은 중첩해서 여러 번 사용할 수 있습니다. 또한 표현식이 평가되는&nbsp;<a href="https://docs.python.org/ko/3/reference/expressions.html#evaluation-order">순서</a>&nbsp;또한 엄밀하게 정해져 있는데요, 일일히 다 외울 필요는 없고 필요할 때마다 보면 됩니다. 아래 내용은 우리가 지금까지 써왔던 익숙한 물건들을 한번 더 점검하는 느낌으로 보시면 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>이름</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>이름으로부터 값을 불러옵니다.</strong> 이름이란 곧 변수를 뜻합니다. 파이썬 인터프리터가 <code>a = b</code>라는 대입문을 보게 되면 제일 먼저 <a href="/1886">변수 범위</a> 내에서 <code>b</code>라는 변수가 실존하는지 찾습니다. 만약 있다면, 거기에 해당하는 값을 가져옵니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>문맥과 상관없이 이름이 등장한다면 오류가 발생합니다. 아래 예제에서는 <code>a</code>와 <code>b</code>가 공백으로 구분되어 사용되었는데, 이는 어떤 문법도 해당하지 않으므로 파이썬 인터프리터는 <em>뭐 어쩌라고? </em>라는 짜증나는 말투로 에러를 발생시킵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 10
b = 20
print(a b)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>  File "c:/Users/tooth/Desktop/test2.py", line 3
    print(a b)
            ^
SyntaxError: invalid syntax</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>리터럴 </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>리터럴(숫자, 문자, 리스트 등)로부터 값을 불러옵니다. 리터럴이란, 소스 코드에 작성된 고정된 값을 의미합니다.</strong> 우선 문자 리터럴부터 살펴볼까요? 파이썬 인터프리터가 <code>a = "안녕하세요"</code>라는 대입문을 맞닥뜨렸을 때에는 쌍따옴표로 둘러싸여진 문자들의 나열을 인식하게 됩니다. <code>"안녕하세요"</code>라는 문자열이 의미하는 바는 절대 변하지 않습니다. <code>"안녕하세요" = "하이"</code> 처럼 실질적인 의미를 바꾸려는 시도는 <code>SyntaxError: cannot assign to literal</code> 라는 에러 메시지로 프로그램을 실행도 못하게 합니다. 문자 리터럴은 잘 알다시피 쌍따옴표 뿐만 아니라 <code>'문자열'</code>과 여러 줄에 걸친 문자열에 쓰이는 <code>'''긴문자열'''</code>, <code>"""긴문자열"""</code>도 해당합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>a = 13</code>에서 <code>13</code>과 같은 숫자도 마찬가지로 동작합니다. <code>13</code>은 어찌보면 쌍따옴표 없이 숫자 문자가 두 개 이어진 형태인데, 이를 실제 계산할 수 있는 십진수 13이라는 수로 취급하게 됩니다. 우리에게는 십진수가 너무 익숙하여 자연스럽게 쓰지만, 사실 수라는 개념은 실체하지는 않지요. 손가락으로 ?? 해도 13을 의미할 수 있는 것처럼, 파이썬에서도 2진법, 8진법, 16진법 등 다양한 표기를 지원합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 0xd
b = 0o15
c = 0b1101
d = 13
print(a, b, c, d)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>13 13 13 13</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="/273">리스트</a> 리터럴은 <code>[]</code>로 둘러싸여져 있고, <code>,</code>로 구분되어 나열된 여러 개의 표현식으로 이루어집니다. 흔히 알다시피 <code>[1, 3, 5]</code> 이런 모양입니다. <a href="/1357">튜플</a>은 <code>(1, 2, 3)</code> 이렇게 표현하지요. <a href="/1357">딕셔너리와 세트</a>도 다 방법이 있다는 건 이미 배웠습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>속성 참조</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>속성이란 <strong>어떤 객체 안에 포함되어있는, 이름을 가진 객체</strong>들입니다. <code>a.b</code>를 하게 되면 우선 <code>a</code>라는 이름을 찾을테고, 그 다음 <code>a</code>라는 변수 내부에 <code>b</code>라는 속성이 있는지 검사하게 됩니다. 메소드같은 경우가 헷갈릴 수 있는데요, <strong>메소드를 호출할 수 있는(Callable) 속성</strong>이라고 취급할 수가 있어서, 전부 통용될 수 있습니다. 아래 예제의 두 번째 줄에서는 <code>append</code>라는 메소드를 불러오고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;2, 3]
ls.append(1)
print(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;2, 3, 1]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>항목 참조</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>항목 참조란 <span style="text-decoration: underline;">앞선 것 바로 뒤</span>에 <code>[...]</code>를 쓰는 것</strong>입니다. <code>...</code>에는 또 다른 표현식이 들어가도 상관없습니다. 리스트 리터럴과는 다른 점이, 리스트 리터럴은 아무것도 없는 데서 대괄호가 시작했다면, 이 항목 참조는 <strong>앞선 것이 반드시 존재</strong>해야 합니다. 이는 리스트의 항목에 접근할 때 사용하는 그 대괄호가 맞습니다. 한가지 TMI를 방출하자면, 항목 참조가 작동하는 방식은, <strong>앞선 것에 <code>__getitem__</code> 메소드가 구현되어 있다면, 그 메소드를 호출</strong>시킵니다. 아래 예제는 우리가 흔히 쓰는 리스트와 직접 만든 클래스를 보여줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;1, 2, 3]
print(ls&#91;1])

class Test:
    def __getitem__(self, i):
        print("아이템 겟또다제-!", i)

a = Test()
a&#91;6]</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>2
아이템 겟또다제-! 6</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>연산 (각종 연산자)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>연산자는 훨씬 간단합니다. 마음가는 대로 쓰세요. 연산자는 대응되는 <a href="https://elvanov.com/1265">특별 메소드</a>가 존재하므로 확장하기도 쉽답니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(3 + 4 - 2)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>5</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>호출 (call)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><span style="text-decoration: underline;">앞선 표현식 바로 뒤</span>에 괄호<code>()</code>를 쓰면 호출(call)하게 됩니다. </strong>괄호 내부에는 인자로 넘길수 있도록 여러 개의 값이 들어갈 수 있습니다. 우선 <strong>앞선 것</strong>이 변수가 될수도 있고, 어떤 계산 결과가 될 수도 있고, 정확히 뭐가 올지는 모릅니다. 하지만 무엇이 되었든 일단 호출할 수 있는건지 아닌지 체크를 해본 다음, 호출할 수 있다면 호출해버리고 그렇지 않다면 에러를 냅니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 예제에서는 함수(<code>g</code>)를 리턴하는 함수(<code>b</code>)를 리턴하는 함수(<code>r</code>)의 호출 과정을 보여줄 수 있습니다. 예제가 다소 작위적이긴 하지만, 괄호를 연속으로 써서 연속으로 호출할 수 있다는 것을 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def r():
    def b():
        def g():
            print("rgb!")
        return g
    return b
r()()()</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>rgb!</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>만약 호출할 수 있는(callable) 객체가 아니라면 에러를 발생합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = 3
a()</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 2, in &lt;module>
    a()
TypeError: 'int' object is not callable</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>에러 메시지를 살펴보면, <code>int</code> 형의 객체는 호출할 수 없다고 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>파이썬에서는 <a href="/1705">슬라이싱</a>이나&nbsp;<code>await</code>&nbsp;표현식 (추가 예정) 등도 표현식에 포함된다고 정의하고 있지만, 앞서 살펴본 이야기에서 크게 벗어나는 논리는 아니므로, 이러한 사례는 그때그때 접하면서 가볍게 다시 익히면 됩니다. 조건문이 아닌 <a href="/1770">조건 표현식</a>이라는 것도 있으니 상황에 맞게 사용하면 되겠습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>명령문 (statement)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>statement</code>를 우리 말로 번역하면 <code>명령문</code>입니다. 우리가&nbsp;<a href="https://elvanov.com/120">컴퓨터의 구성요소</a>를 배울 때 "<em>명령</em>"이라는 단어를 배웠다는 걸 기억하시나요? 크게 신경쓰지 마세요, 사실 여기서는 "<em>명령</em>"보단 "<strong><em>문</em></strong>"이 더 중요합니다. 문법를 설명할 때&nbsp;<code>대입문</code>, <code>if 문</code>,&nbsp;<code>for 문</code>&nbsp;처럼&nbsp;<code>~~문</code>이라고 했었는데요, 바로 그것들을 전부 포함하는 개념입니다. 파이썬에서는 <strong>한 줄에 하나만 쓸 수 있는 것을 단순문(simple statement)이라고 하며 블록 단위로 쓸 수 있는 것을 복합문(compound statement)라고 합니다.</strong> 다른 언어에서도 기본적인 골자는 비슷합니다. 우선 단순문부터 알아보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>단순문 (simple statement)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><a href="https://docs.python.org/ko/3/reference/simple_stmts.html">단순문</a>이란 <span style="text-decoration: underline;">한 줄에 하나</span>가 들어갈 수 있는</strong> 문법 단위를 뜻합니다. 다음과 같습니다. 단순문은 여러 개의 표현식을 포함할 수도 있고, 표현식이 하나도 쓰여지지 않을 수도 있습니다.<strong> 단순문 내부에는 단순문이나 복합문을 포함할 수 없습니다.</strong> <strong>한 줄에 여러 개를 쓸 수도 없습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>오직 표현식으로만 이루어진 단순문이 있습니다. 이 단순문은 리터럴이나 이름으로 시작하여 각종 계산, 함수 호출, 접근 등을 할 수 있습니다. 표현식은 금방 전에 다루었으니 그것을 살펴보시면 되겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어떤 블록에 아무런 내용도 없음을 나타내는 <code>pass</code>, <a href="/257">반복문</a>에서 곧장 반복문을 빠져나오라는 지시를 나타내는 <code>break</code>, 반복문에서 다음 루프로 즉시 이동하라는 <code>continue</code> 등은 어떠한 표현식도 사용하지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="/270">함수</a>의 반환을 의미하는 <code>return</code>은 뒤따라오는 표현식이 없다면 <code>None</code>을 반환하며 함수를 즉시 끝내고, 표현식이 등장한다면 해당 표현식을 평가한 최종 값이 반환됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>가장 흔하게 사용되는 단순문인 <a href="/143">대입문 또는 복합 대입문</a>은 왼쪽에는 변수명 하나가, 오른쪽에는 표현식이 들어갑니다. 그 외에도 <a href="/457">모듈을 임포트</a>하는 <code>import</code>, <a href="/1326">예외</a>를 발생시키는 <code>raise</code>, 제너레이터를 만들 때 쓰이는 <code>yield</code> 등의 단순문이 존재하며, 이는 필요할 때 사용하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2> 복합문 (compound statement)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>복합문은 단순문보다 더 큰 개념입니다. <strong><code>:</code>와 들여쓰기를 통해 새로운 블록을 시작하며, 블록 내부에는 또 다시 복합문이나 단순문이 들어갈 수 있습니다.</strong> 복합문은 뒤따라오는 블록을 포함하고 있기 때문에 대개 여러 줄에 걸쳐서 작성됩니다. 불록에 대한 자세한 내용은 우리가 블록을 처음 접했던 <a href="https://elvanov.com/217">조건문</a> 글에서 확인할 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리가 <code>if</code>, <code>elif</code>, <code>else</code>를 이용해 만드는 <strong><a href="/217">조건문</a></strong>, <code>while</code>, <code>for-in</code>, <code>else</code> 등으로 만드는 <strong><a href="/257">반복문</a></strong>, <code>try-except-else-finally</code> 로 만드는 <a href="/1326">예외 처리</a>문(try문)을 포함해 <code>def</code>로 제너레이터(추가 예정)나 <a href="/270"><strong>함수</strong></a>를 정의하는 것, <code>class</code>로 <a href="/182"><strong>클래스</strong></a>를 정의하는 것 모두 복합문입니다. 자세한 내용은 각 강좌를 참조하시면 되겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>622</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 18:37:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 09:37:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 19:15:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 10:15:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%aa%85%eb%a0%b9%eb%ac%b8-%ed%91%9c%ed%98%84%ec%8b%9d-%ed%8f%89%ea%b0%80-%eb%ac%b8%eb%b2%95%ec%9d%84-%ec%9d%b4%eb%a3%a8%eb%8a%94-%ea%b2%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Wordpress] 한글파일(hwp) 등 지원하지 않는 확장자 업로드 가능하게 하기 (custom extentions)]]></title>
		<link>https://elvanov.com/718</link>
		<pubDate>Fri, 10 Jan 2020 07:58:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=718</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 동기\n\n워드프레스에는 기본 확장자로 지정된 파일 외에는 업로드를 막아놓았다. 예를 들어 한국에서 오질나게 쓰이는 아래아 한글 파일(`.hwp`)을 업로드하려고 하면 에러가 뜬다. 이를 가능하게 하기 위한 과정이다. 간단하다.\n\n## 전체 코드\n\n역시 선 전체 코드가 제 맛이다. 아래 내용을 `functions.php` 파일에 추가하고 관리자 창을 새로 고침한 후 업로드 하려고 하면 잘 작동되는 것을 볼 수 있다.\n\n```php\n// 추가시킬 확장자와 mime type 작성\n$array_filetypes = array(\n  'hwp' =\u003e 'application/hangul',\n  'svg' =\u003e 'image/svg+xml'\n);\n\n// 업로드 종류 추가하기\nfunction  custom_upload_mimes($mimes)\n{\n  global $array_filetypes;\n  $mimes = array_merge($mimes, $array_filetypes);\n  return $mimes;\n}\n\n// mime type 설정\nfunction fix_mime_type($data = null, $file = null, $filename = null, $mimes = null)\n{\n  $ext = isset($data['ext']) ? $data['ext'] : '';\n\n  // 만약 확장자(ext)가 값으로 넘어오지 않았을 경우\n  // $filename에서 확장자를 직접 가져온다.\n  if (strlen($ext) \u003c 1) {\n    $exploded = explode('.', $filename);\n    $ext      = strtolower(end($exploded));\n  }\n\n  // $data의 정보를 적절하게 수정하여 리턴한다.\n  global $array_filetypes;\n  foreach ($array_filetypes as $arr_ext =\u003e $arr_type) {\n    if ($ext === $arr_ext) {\n      $data['type'] = $arr_type;\n      $data['ext'] = $arr_ext;\n      break;\n    }\n  }\n  return $data;\n}\n\n// 액션, 필터에 작성한 함수를 추가\nadd_action('upload_mimes', 'custom_upload_mimes', 99);\nadd_filter('wp_check_filetype_and_ext', 'fix_mime_type', 75, 4);\n\n```\n\n\u002d\u002d-\n\n## 설명\n\n기존에 쓰던, `mime_types` 필터를 활용하는 방법은 더이상 작동이 되지 않았다. 언제부터, 왜 안되는지 모르겠다. 그래서 더 구글링을 하니 `upload_mimes` 액선 후크와 `wp_check_filetype_and_ext` 필터를 활용하는 방법이 있었다. 그래서 그대로 갖고 와서 코드 중복을 줄이고 파일 확장자를 추가하거나 삭제하기 용이하도록 전역 변수 (`$array_filetypes`)를 두었다. (구글링했었던 자료는 아주 예전에 찾은 거라 링크를 다시 찾을 수 없어서 알려드리지 못한다.) \n\n전역 변수를 사용하면 안되는 금기는 잘 알고 있지만 유지보수 따위는 생각하지 않고 작성했다. (사실 `php`에서 전역 변수를 사용하지 않고 공유 데이터를 관리할 만한 방법을 모른다.) 또한 `upload_mimes` 액선 후크와 `wp_check_filetype_and_ext` 필터가 구체적으로 언제 어떻게 작동하는 지도 모른다. 그냥 쓰자. 하하.\n\n현재 2020년 1월 10일, `5.3.2` 버전에서는 문제 없이 잘 작동하나, 이 또한 언제 막힐지 모르는 노릇이긴 하다.\n\n\u002d\u002d-\n\n## 참고\n- [mime 타입을 알 수 있는 곳 (Mozila MDN Web Docs)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types)"} -->
<div class="wp-block-jetpack-markdown"><h2>동기</h2>
<p>워드프레스에는 기본 확장자로 지정된 파일 외에는 업로드를 막아놓았다. 예를 들어 한국에서 오질나게 쓰이는 아래아 한글 파일(<code>.hwp</code>)을 업로드하려고 하면 에러가 뜬다. 이를 가능하게 하기 위한 과정이다. 간단하다.</p>
<h2>전체 코드</h2>
<p>역시 선 전체 코드가 제 맛이다. 아래 내용을 <code>functions.php</code> 파일에 추가하고 관리자 창을 새로 고침한 후 업로드 하려고 하면 잘 작동되는 것을 볼 수 있다.</p>
<pre><code class="language-php">// 추가시킬 확장자와 mime type 작성
$array_filetypes = array(
  'hwp' =&gt; 'application/hangul',
  'svg' =&gt; 'image/svg+xml'
);

// 업로드 종류 추가하기
function  custom_upload_mimes($mimes)
{
  global $array_filetypes;
  $mimes = array_merge($mimes, $array_filetypes);
  return $mimes;
}

// mime type 설정
function fix_mime_type($data = null, $file = null, $filename = null, $mimes = null)
{
  $ext = isset($data['ext']) ? $data['ext'] : '';

  // 만약 확장자(ext)가 값으로 넘어오지 않았을 경우
  // $filename에서 확장자를 직접 가져온다.
  if (strlen($ext) &lt; 1) {
    $exploded = explode('.', $filename);
    $ext      = strtolower(end($exploded));
  }

  // $data의 정보를 적절하게 수정하여 리턴한다.
  global $array_filetypes;
  foreach ($array_filetypes as $arr_ext =&gt; $arr_type) {
    if ($ext === $arr_ext) {
      $data['type'] = $arr_type;
      $data['ext'] = $arr_ext;
      break;
    }
  }
  return $data;
}

// 액션, 필터에 작성한 함수를 추가
add_action('upload_mimes', 'custom_upload_mimes', 99);
add_filter('wp_check_filetype_and_ext', 'fix_mime_type', 75, 4);

</code></pre>
<hr>
<h2>설명</h2>
<p>기존에 쓰던, <code>mime_types</code> 필터를 활용하는 방법은 더이상 작동이 되지 않았다. 언제부터, 왜 안되는지 모르겠다. 그래서 더 구글링을 하니 <code>upload_mimes</code> 액선 후크와 <code>wp_check_filetype_and_ext</code> 필터를 활용하는 방법이 있었다. 그래서 그대로 갖고 와서 코드 중복을 줄이고 파일 확장자를 추가하거나 삭제하기 용이하도록 전역 변수 (<code>$array_filetypes</code>)를 두었다. (구글링했었던 자료는 아주 예전에 찾은 거라 링크를 다시 찾을 수 없어서 알려드리지 못한다.)</p>
<p>전역 변수를 사용하면 안되는 금기는 잘 알고 있지만 유지보수 따위는 생각하지 않고 작성했다. (사실 <code>php</code>에서 전역 변수를 사용하지 않고 공유 데이터를 관리할 만한 방법을 모른다.) 또한 <code>upload_mimes</code> 액선 후크와 <code>wp_check_filetype_and_ext</code> 필터가 구체적으로 언제 어떻게 작동하는 지도 모른다. 그냥 쓰자. 하하.</p>
<p>현재 2020년 1월 10일, <code>5.3.2</code> 버전에서는 문제 없이 잘 작동하나, 이 또한 언제 막힐지 모르는 노릇이긴 하다.</p>
<hr>
<h2>참고</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types">mime 타입을 알 수 있는 곳 (Mozila MDN Web Docs)</a></li>
</ul>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>718</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 16:58:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 07:58:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-10 17:01:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-10 08:01:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-%ed%95%9c%ea%b8%80%ed%8c%8c%ec%9d%bchwp-%eb%93%b1-%ec%a7%80%ec%9b%90%ed%95%98%ec%a7%80-%ec%95%8a%eb%8a%94-%ed%99%95%ec%9e%a5%ec%9e%90-%ec%97%85%eb%a1%9c%eb%93%9c-%ea%b0%80%eb%8a%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 상속 ~ 클래스 확장하기]]></title>
		<link>https://elvanov.com/981</link>
		<pubDate>Sun, 12 Jan 2020 05:40:59 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=981</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"우선 상속에 알아보기 전에 새로운 클래스 객체와 클래스 메서드를 알아봅시다.\n\n\n\n## 클래스 속성\n\n지난 시간에 했던 예제를 불러와 보겠습니다.\n\n```python\nclass Monster:\n\n    def __init__(self, attack, health):\n        self.attack = attack\n        self.health = health\n    \n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nmon1 = Monster(10, 100)\nprint(mon1.attack, mon1.health)\n\nmon2 = Monster(30, 100)\nprint(mon2.attack, mon2.health)\n\n```\n```plaintext\n10 100\n30 100\n```\n\n앞서 클래스를 배울 때 사용했던 코드와 거의 유사합니다. 이해하시는 데는 무리가 없으시지요? `__init__`과 `doAttack` 두 개의 메소드가 존재하고, `attack`과 `health` 두 개의 속성이 있습니다. 이 속성들은 객체마다 분리되어 있습니다. 그림으로 표현하면 다음과 같습니다.\n\n![Monster 클래스 그림](https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.svg)\n*Monster 클래스의 모습*\n\n\u002d\u002d-\n\n이제, 매번 `attack`과 `health`를 지정해주기 귀찮으니 함수에 [기본 값(default)](https://elvanov.com/304#%EA%B8%B0%EB%B3%B8%EA%B0%92%28\u002d\u002d0)을 설정해보도록 합시다. 다음과 같이 함수의 인수에 `=`을 붙여주면 해당 인수는 선택사항이 됩니다. 정상적으로 인수로 값이 들어온다면 그 값으로 되고, 값이 들어오지 않는다면 기본값으로 작동합니다. 아래 예제는 `__init__`과 `mon1`, `mon2` 변수를 만드는 과정만 살짝 수정했습니다.\n\n```python\nclass Monster:\n\n    def __init__(self, attack = 10, health = 100):\n        self.attack = attack\n        self.health = health\n    \n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nmon1 = Monster()\nprint(mon1.attack, mon1.health)\n\nmon2 = Monster(30)\nprint(mon2.attack, mon2.health)\n```\n```plaintext\n10 100\n30 100\n```\n\n우리의 의도대로 잘 작동합니다.\n\n\u002d\u002d-\n\n그런데 `Monster` 클래스를 생성했던 시점과 달리, 기본 값 그 자체를 바꾸고 싶습니다. 왜냐하면 공격력이 `30`인 몬스터를 수십 마리 다시 만들고 싶은데, 그럴려면 일일히 `Monster(30)`이라고 코딩해야 하기 때문이죠. 머리를 굴려봅시다. 기본 값을 어떤 변수로 두어서, 이 변수를 필요할 때마다 수정한다면 어떨까요? 한 번 시도해 봅시다.\n\n```python\ndefaultAttack = 10 # 새로 추가하였습니다.\ndefaultHealth = 100 # 새로 추가하였습니다.\n\nclass Monster:\n\n    def __init__(self, attack = None, health = None):\n        if attack is None : \n            attack = defaultAttack\n        if health is None : \n            health = defaultHealth\n        self.attack = attack\n        self.health = health\n\n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n    \nmon1 = Monster()\nprint(mon1.attack, mon1.health)\n\ndefaultAttack = 30\n\nmon2 = Monster()\nprint(mon2.attack, mon2.health)\n```\n```plaintext\n10 100\n30 100\n```\n\n`Monster` 생성자에서 `attack`과 `health`의 기본 값은 `None`이 되었습니다. 일단은 기본값이 존재하기 때문에 함수를 호출할 때 `attack`과 `health`의 내용을 채워넣지 않아도 되지만, 그렇게 되면 이 인수들은 `None`이라는 의미 없는 값을 가지게 됩니다. 이 때, `if`를 이용하여 외부 변수를 대입하여 줍니다.\n\n\u002d\u002d-\n\n하지만 다시 문제가 발생했습니다. `defaultAttack`과 `defaultHealth`는 너무 흔한 이름이라 다른 클래스가 이 변수에 접근할 가능성이 있습니다. 우리는 이 변수들을 `Monster`에서만 사용하고 싶습니다. 그렇다고 만약에, `defaultMonsterAttack` 라고 변수 이름을 수정하고자 하니 너무 길어지는 문제가 있네요. 이 때 **클래스 속성(Class Attribute)** 이 등장합니다. 사용법은 간단합니다. 변수를 클래스 내부에 정의하면 됩니다! 그리고 해당 속성을 사용하려면 **`클래스명.속성`** 으로 하면 됩니다. 아래 예제를 보십시다.\n\n```python\nclass Monster:\n\n    defaultAttack = 10\n    defaultHealth = 100\n\n    def __init__(self, attack = None, health = None):\n        if attack is None : \n            attack = Monster.defaultAttack\n        if health is None : \n            health = Monster.defaultHealth\n        self.attack = attack\n        self.health = health\n\n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n    \nmon1 = Monster()\nprint(mon1.attack, mon1.health)\n\nMonster.defaultAttack = 30\n\nmon2 = Monster()\nprint(mon2.attack, mon2.health)\n```\n```plaintext\n10 100\n30 100\n```\n\n그림은 다음과 같습니다.\n\n![Monster 클래스 그림 (클래스 속성 추가)](https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.svg)\n*Monster 클래스의 모습 (클래스 속성 추가)*\n\n\u002d\u002d-\n\n클래스 속성이란, 인스턴스 하나하나에 대응되는 속성이 아니라, 클래스 그 자체에 대응이 되는 속성입니다. 즉 객체가 아무리 많다 하더라도 접근되는 속성은 단 하나입니다. 클래스 속성은 다음과 같은 상황에서 유용하게 사용될 수 있으며, 그러한 상황이라는 의도를 내포하고 있습니다.\n\n- 인스턴스 간 정보를 공유하고자 할 때 (예: `Monster` 객체의 개수)\n- 클래스 자체의 정보를 제공하고자 할 때 (예: `Monster` 클래스의 설명)\n\n클래스 속성은 인스턴스로도 접근이 가능합니다. 즉 `Monster.defaultAttack` 이 아닌 `mon1.defaultAttack` 으로도 접근할 수가 있습니다. 단, 이렇게 인스턴스를 통해서 접근을 한다면 \u0022클래스 속성\u0022이 아니라 *\u0022그 객체의 속성\u0022으로 접근하겠다는 오해를 불러 일으킬 수 있습니다.* 컴퓨터가 오해하는 게 아니라, 이 코드를 보는 다른 사용자가 그렇습니다. 그러므로 `Monster.defaultAttack` 이렇게 클래스 속성을 사용하겠다고 명시해줍시다.\n\n\n\n\u002d\u002d-\n\n## 클래스 메소드\n\n클래스 속성과 비슷하게, 클래스 자체에 대한 동작을 넣고자 할 때 사용됩니다. 객체나 인스턴스가 필요없는 동작이라고 생각하시면 되겠습니다. 일반적으로 유틸리티성 메소드를 정의할 때 많이 사용됩니다.\n\n```python\nclass Monster:\n\n    defaultAttack = 10\n    defaultHealth = 100\n\n    @classmethod ##a_1##\n    def setDefault(cls, attack, health):\n        cls.defaultAttack = attack\n        cls.defaultHealth = health\n\n    def __init__(self, attack = None, health = None):\n        if attack is None : attack = Monster.defaultAttack\n        if health is None : health = Monster.defaultHealth\n        self.attack = attack\n        self.health = health\n\n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n    \nmon1 = Monster()\nprint(mon1.attack, mon1.health)\n\nMonster.setDefault(30, 50)\n\nmon2 = Monster()\nprint(mon2.attack, mon2.health)\n```\n```plaintext\n10 100\n30 50\n```\n\n\u002d\u002d-\n\n### *a_1*(1.) 클래스 메소드 정의하기\n\n클래스 메소드를 정의하는데, 새로운 문법이 등장했습니다. 바로 `@classmethod` 인데요, 이는 데코레이터(decorator)라고 하여, 바로 아래에 등장하는 함수를 데코해주는 역할입니다. 여기서는 바로 아래의 `setDefault` 함수를 클래스 메소드로 사용하겠다는 뜻으로 풀이될 수 있습니다.\n\n클래스 메소드의 큰 특징은, **첫 번째 인수로 객체가 넘어오는 게 아니라, 클래스가 넘어오게 됩니다.** 즉 위에서의 `cls` 인수는 `Monster` 그 자체가 되어 `cls.defaultAttack`과 같이 클래스 속성에 접근할 수 있게 되는 것입니다. 이 메소드를 호출할 때에는 속성과 마찬가지로 `.`을 이용하여 **`클래스명.메소드명(인수...)`** 라고 작성합니다.\n\n어차피 객체 하나하나에 구애되지 않는 메소드이니까 `self`를 굳이 쓰지 않아도 될 것 같습니다. 그런데 왜 클래스 정보를 받아오는 것일까요? 클래스의 상속에서 더 알아보도록 합시다.\n\n\u002d\u002d-\n\n\u003e ### 정적 메소드 (static method)\n\u003e \n\u003e 클래스에 연결되어서 각 객체와는 독립적으로 작동하는 메소드를, 다른 프로그래밍 언어에서는 통상적으로 정적 메소드(static method)라고 불립니다. 자바와 C++에서는 `static`이라는 키워드를 곧장 이용하여 구현하곤 합니다.\n\n\u002d\u002d-\n\n## 상속의 핵심\n\n### 기능을 확장하고자 한다\n\n초심으로 돌아가서 원래의 예제를 봅시다. `Monster` 클래스를 한번 만들어보았습니다. 이제 `Monster`와 비슷하게 작동하는 `Human`, `Dog` 클래스를 새롭게 만들어서 기능을 조금씩 수정해보고자 합니다. 변경할 내용은 다음과 같습니다.\n\n- 사람에게는 이 사람의 출신 나라 정보가 포함될 수 있습니다. 속성을 추가해 줍시다.\n- 사람은 똑똑해서 조금 약하게 한번 더 때립니다. `doAttack` 메소드를 수정해줍시다.\n- 개는 짖을 줄 압니다. `bark` 메소드를 추가해줍니다.\n\n그리하여 수정한 결과는 다음과 같습니다.\n\n```python\nclass Monster:\n\n    def __init__(self, attack, health):\n        self.attack = attack\n        self.health = health\n    \n    def doAttack(self):\n        print(\u0022몬스터가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nclass Human:\n\n    def __init__(self, attack, health, country):\n        self.attack = attack\n        self.health = health\n        self.country = country\n    \n    def doAttack(self):\n        print(\u0022사람이 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022사람은 똑똑해서 한번 더 \u0022 + str(self.attack * 0.5) +\u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nclass Dog:\n\n    def __init__(self, attack, health):\n        self.attack = attack\n        self.health = health\n    \n    def doAttack(self):\n        print(\u0022개가 아군에게 \u0022 + str(self.attack) + \u0022만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\n    def bark(self):\n        print(\u0022왈왈!!\u0022)\n\n\ndog = Dog(20, 30)\nhuman = Human(10, 100, \u0022한국\u0022)\nmonster = Monster(5, 100)\n\ndog.doAttack()\ndog.bark()\nhuman.doAttack()\nmonster.doAttack()\n```\n```plaintext\n개가 아군에게 20만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n왈왈!!\n사람이 아군에게 10만큼 공격했다!\n사람은 똑똑해서 한번 더 5.0만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n몬스터가 아군에게 5만큼 공격했다!\n```\n\n우리의 의도대로 잘 작동합니다. 하지만 이제 시작입니다. 할 일은 점점 늘어납니다. 만약 `Monster`, `Human`, `Dog` 모두에게 방어력을 가지고 있는 속성 `defence`와 방어한다는 동작인 `doDefense` 메소드를 넣고 싶다면요? 뿐만 아니라 `Duck`, `Dragon` 클래스를 추가하고 싶다면요? 복사 붙여넣기 신공이 절실하다면 이제 다른 방법을 찾아볼 때 입니다. 지금은 바로 상속(inheritance)이란 것을 이용해보도록 합시다!\n\n\u002d\u002d-\n\n### 기본적인 사용 방법\n\n**상속(inheritance)** 이란 부모-자식 개념을 클래스 개념에 추가하는 것입니다. 그래서 부모의 기능을 자식에게 상속하여 코드 중복을 없애고 유지보수를 더 원활하게 할 수 있게 됩니다. 기본적인 사용 방법은 클래스 정의 시 이름 바로 뒤에 소괄호(`()`) 내에 부모 클래스를 넣어주면 됩니다. 예시는 다음과 같습니다.\n\n```python\nclass 부모클래스:\n    내용\n\nclass 자식클래스(부모클래스):\n    내용\n```\n\n주요 특징은 다음과 같습니다.\n\n- 자식 클래스는 일단 부모 클래스의 속성과 메소드를 상속받습니다. \n- 자식 클래스는 부모 클래스에 영향을 주지 않고 자기만의 속성과 메소드를 정의할 수 잇습니다.\n- 자식 클래스는 부모 클래스의 속성 및 메소드를 덮어써서 구현할 수 있습니다. (오버라이딩)\n- 자식 클래스는 부모 클래스의 속성 및 메소드에 접근 및 호출할 수 있습니다.\n- 자동으로 자식 클래스의 메소드가 호출됩니다. (다형성)\n\n이 두 클래스의 관계를 이야기할 때 다양한 용어가 쓰이는데요, 다음과 같습니다.\n\n- 부모 클래스(parent class)와 자식 클래스(child class)\n- 상위 클래스(super class)와 하위 클래스(sub class)\n- 기본 클래스(base class)와 파생 클래스(derived class)\n\n\u002d\u002d-\n\n### 구현 예\n\n그래서 위 `Monster`, `Human`, `Dog` 클래스의 상위 클래스인 `Unit` 클래스를 만들어서 공통적인 부분을 묶어봅시다.\n\n```python\nclass Unit:\n    typeString = \u0022유닛\u0022\n    def __init__(self, attack, health):\n        self.attack = attack\n        self.health = health\n    \n    def doAttack(self):\n        print(f\u0022{self.typeString}이(가) 아군에게 {self.attack} 만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n        \n\nclass Monster(Unit):\n    typeString = \u0022몬스터\u0022\n\n\nclass Human(Unit):\n    typeString = \u0022사람\u0022\n\n    def __init__(self, attack, health, country):\n        super().__init__(attack, health)\n        self.country = country\n    \n    def doAttack(self):\n        print(f\u0022{self.typeString}이 아군에게 {self.attack}만큼 공격했다!\u0022)\n        print(f\u0022{self.typeString}은 똑똑해서 한번 더 {self.attack * 0.5}만큼 공격했다!\u0022)\n        print(\u0022\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\u0022)\n\nclass Dog(Unit):\n    typeString = \u0022개\u0022\n    def bark(self):\n        print(\u0022왈왈!!\u0022)\n\n\ndog = Dog(20, 30)\nhuman = Human(10, 100, \u0022한국\u0022)\nmonster = Monster(5, 100)\n\ndog.doAttack()\ndog.bark()\nhuman.doAttack()\nmonster.doAttack()\n```\n```plaintext\n개이(가) 아군에게 20만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n왈왈!!\n사람이 아군에게 10만큼 공격했다!\n사람은 똑똑해서 한번 더 5.0만큼 공격했다!\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n몬스터이(가) 아군에게 5만큼 공격했다!\n```\n\n원래의 의도와 부합하여 아주 잘 작동한다는 것을 보실 수 있습니다.\n\n\u002d\u002d-\n\n## 상속의 특징\n\n### 속성과 메소드의 상속\n\n예제를 보면서 설명하도록 하겠습니다.\n\n```python\nclass Base:\n    name = '베이스'           # 클래스 속성\n\n    @classmethod              # 클래스 메소드\n    def tellMeName(cls):\n        print('이름은', cls.name, '입니다.')\n\n    def __init__(self, age) : # 생성자(메소드)\n        self.age = age        # 속성\n\nclass Sub(Base):\n    pass\n\nSub.tellMeName()              # 클래스 메소드 호출\ninstance = Sub(13)            # Sub 객체 생성\nprint(instance.age)           # 객체 속성 접근\n```\n```plaintext\n이름은 베이스 입니다.\n13\n```\n\n`Base` 클래스를 상속받는 `Sub` 클래스는 `Base`의 속성과 메소드를 빠짐없이 상속받습니다. `Sub` 클래스의 정의는 단 하나도 없는데도, 클래스 메소드를 이용할 수 있고, 생성자로서 하나의 인수를 넣어야 하며, 객체 내의 속성도 잘 살아있음을 확인할 수 있습니다.\n\n\u002d\u002d-\n\n\n\n\n### 속성 및 메소드 확장\n\n```python\nclass Base:\n    def __init__(self, age) :\n        self.age = age        \n\nclass Sub(Base):\n    def afterYears(self, year): # 메소드를 추가하였습니다.\n        print(f\u0022{year}년 뒤 나이는 {year+self.age}살 입니다...\u0022)\n        self.future = 'Sad..' # 속성을 추가하였습니다.\n\ninstance = Sub(13)\ninstance.afterYears(10) # 추가된 메소드를 호출\nprint(instance.future) # 추가된 속성을 출력\n```\n```plaintext\n10년 뒤 나이는 23살 입니다...\nSad..\n```\n\n상속받는 클래스는 물론 자기 자신만의 속성과 메소드를 구현할 수 있습니다.\n\n\u002d\u002d-\n\n### 오버라이딩 (overriding)\n\n오버라이딩이란, 상위 클래스로부터 상속받은 메소드나 속성을 재정의한다는 뜻입니다. 쉽게 말해 덮어 쓴다는 뜻입니다. 그렇다면 왜 재정의를 하는 걸까요? 하위 클래스에서 기능을 수정 및 확장하기 위해서 입니다. 생성자를 예로 들어보겠습니다.\n\n```python\nclass Base:\n    def __init__(self, age) :\n        self.age = age\n    \nclass Sub(Base):\n    def __init__(self, age, country):\n        self.age = age\n        self.country = country\n\nins1 = Sub(13, '한국')\nprint(ins1.country)\nins2 = Sub(13)\n```\n```plaintext\n한국\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 12, in \u003cmodule\u003e\n    ins2 = Sub(13)\nTypeError: __init__() missing 1 required positional argument: 'country'\n```\n\n`Sub` 클래스의 생성자(`__init__`)를 우리가 새롭게 정의했습니다. 그렇게 되면 완전히 새로운 생성자로 대체됩니다. 그래서 `Sub(13, '한국')`과 같이 쓰는 건 옳지만 기존 `Base` 클래스의 생성자를 고려하여 인수를 하나만 쓰게 된다면 에러가 나게 됩니다.\n\n오버라이딩은 이름만 똑같이 쓴다면 자동으로 오버라이딩이 됩니다. 아쉽게도 파이썬의 자체 기능은 오버라이드의 여부를 확인할 수 없습니다. 그러니까, 어떤 메소드나 속성을 정의할 때 이게 완전히 새롭게 정의되는 건지, 이미 상위 클래스에서 정의되었던 것을 오버라이드하는지 구분할 수 없다는 이야기이지요. 대부분의 상황에서는 오버라이드 해도 별 문제는 없지만 간혹 오버라이드 하면 안 되는 것들도 있을 수 있기 때문에 살짝 조심하셔야겠습니다.\n\n그런데, 데코레이터(추가 예정)를 이용한 방법([링크](https://stackoverflow.com/questions/1167617/in-python-how-do-i-indicate-im-overriding-a-method))도 있으니 혹시 관심이 있으시다면 참조해주세요.\n\n\n\u003e #### 오버로딩? (overloading) (심화)\n\u003e \n\u003e 파이썬에는 상관 없는 이야기이므로 다른 언어를 접하지 않으셨다면 이 부분은 가볍게 패스하세요.\n\u003e \n\u003e c++나 자바처럼 컴파일 타임에 많은 것이 결정되는 언어에서는 호출할 인수의 타입이나 개수에 따라서 호출될 함수가 미리 정해집니다. 그렇게 된다면 오직 하나의 함수 시그니처만 이용하게 되는 것일까요? 아닙니다. 바로 오버로딩(overloading)을 통해 이름은 같되 리턴형, 인수의 개수, 인수의 타입이 다른 메소드를 여러 번 정의함으로써 여러 함수 시그니처를 이용할 수 있게 됩니다.\n\u003e \n\u003e - [c++의 오버로딩 예제](https://www.tutorialspoint.com/cplusplus/cpp_overloading.htm)\n\u003e\n\u003e 파이썬에서는 오버로딩이라는 개념이 없습니다. 파이썬에서는 애초에 리턴형을 지정해줄 필요가 없을 뿐더러 인수의 타입에도 제한이 없고, [인수의 기본 값이나 가변 인수를 활용](304)하여 다양한 인수 조합을 만들어낼 수 있습니다. \n\n\u002d\u002d-\n\n### 부모 클래스의 속성 및 메소드 접근\n\n오버라이딩을 했을 때의 특징은 기존의 함수 내용은 모두 사라진다는 점입니다. 이는 의도한 행동일 수도 있고, 문제가 될 수도 있습니다. 왜냐하면 기존 상위 클래스의 메소드에다가 살짝의 부가 기능을 써넣고 싶은데, 오버라이드하게 되면 중복되는 부분을 전부 복사하여 붙여넣어야 하기 때문이죠. 이를 방지하기 위해 우리는 부모 클래스의 속성이나 메소드에 접근하여 호출할 수 있습니다.\n\n아래 예제에서 `print(\u0022뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.\u0022)` 이 부분이 아주 길다고 상상해보세요. `Sub`에서 `__init__`을 오버라이딩 한다면 이 아주 긴 부분을 복사 붙여넣어야 할 판입니다. 하지만 이를 아주 쉽게 해결할 수 있습니다.\n\n\n```python\nclass Base:\n    def __init__(self, age) :\n        print(\u0022Base의 생성자가 시작됩니다.\u0022)\n        self.age = age\n        print(\u0022뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.\u0022)\n        print(\u0022Base의 생성자가 끝났습니다.\u0022)\n    \nclass Sub(Base):\n    def __init__(self, age, country):\n        print(\u0022Sub의 생성자가 시작됩니다.\u0022)\n        super().__init__(age) # 상위 클래스 접근\n        self.country = country\n        print(\u0022Sub의 생성자가 끝났습니다.\u0022)\n\nins1 = Sub(13, '한국')\n```\n```plaintext\nSub의 생성자가 시작됩니다.\nBase의 생성자가 시작됩니다.\n뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.\nBase의 생성자가 끝났습니다.\nSub의 생성자가 끝났습니다.\n```\n\n위 예제에서는 `Sub`의 생성자에서 상위 클래스를 **`super()`** 를 통해 접근하여, `__init__` 메소드 즉 생성자를 명시적으로 호출해서 `Base`의 생성자를 불러냈습니다. 출력된 메세지를 보시면 `Sub`의 생성자가 시작되고 끝나는 사이에 `Base`의 생성자도 호출되었다는 사실을 알 수 있습니다.\n\n\n\n\n\u002d\u002d-\n\n### 다형성\n\n다형성이란, **겉으로 봤을 때 같은 코드라도 적절하게 다른 메소드가 호출된다**는 뜻입니다. 파이썬에서는 `self`라는 인스턴스를 메소드의 첫 번째 인수로 강제함으로써 다소 직관적으로 다형성을 이해해볼 수 있습니다. 다음 코드에서는 `##1##` 부분의 `self.printA()`가 다형성이 적용되는 구간입니다. 다음 코드를 살펴봐주세요.\n\n```python\nclass Base:\n    def printA(self):\n        print('Base A')\n    \n    def printAandB(self):\n        self.printA() ##b_1##\n        print('Base B')\n\nclass Sub(Base):\n    def printA(self):\n        print('Sub A')\n    \nins = Sub()\nins.printAandB()\n```\n```plaintext\nSub A\nBase B\n```\n\n\u002d\u002d-\n\n#### *b_1*(1.) 적절하게 `printA` 메소드가 선택된다.\n\n코드의 하단에서 `Sub` 클래스의 인스턴스로 `ins`를 두었습니다. `ins`의 타입은 `Sub`가 되는 것이지요. `Sub`에는 `printAandB` 메소드를 구현하지 않았으므로 상속받은 `Base`의 것을 사용하게 됩니다. 이윽고 `self.printA()`에 다다랐을 때에 파이썬 인터프리터는 어떤 클래스에 정의되어있는 `printA` 메소드를 실행할지 결정해야 합니다. \n\n파이썬 인터프리터는 **본래의 클래스(`Sub`)** 에 그 메소드가 정의되어 있을 경우 그 메소드를 실행합니다. 본래의 클래스가 없다면 차례로 상위 클래스로 가면서 발견되는 메소드를 실행합니다. 여기서의 `printA` 메소드 호출은 결국 `Sub`의 것으로 실행됩니다. `printA` 메소드의 호출 과정을 순서도로 표현하면 다음과 같습니다.\n\n```mermaid-execute\ngraph TD  \na1[\u0022self.printA()\u003cbr\u003e를 만난다\u0022] \u002d\u002d\u003e a2{\u0022self가 지니고\u003cbr\u003e있는 printA\u003cbr\u003e메소드가\u003cbr\u003e몇 개인가?\u0022}\na2 \u002d\u002d\u003e |아무 것도 없다|a3[\u0022AttributeError\u003cbr\u003e에러 발생\u0022]\na2 \u002d\u002d\u003e |한 개 이상|a4[\u0022self 객체의\u003cbr\u003e클래스에서부터\u003cbr\u003e검색해본다.\u0022]\na4 \u002d\u002d\u003e a6{\u0022해당 클래스에\u003cbr\u003eprintA 메소드가\u003cbr\u003e있는가?\u0022}\na6 \u002d\u002d\u003e |yes|a7[\u0022그 메소드를 실행시킨다.\u0022]\na6 \u002d\u002d\u003e |no|a8[\u0022그 다음 상위 클래스를 검색해본다.\u0022]\na8 \u002d\u002d\u003e a6\n```\n*printA 메소드 호출 시 탐색 과정*\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 클래스 속성을 정의하는 방법은 무엇인가?\n- 클래스 메소드를 정의하는 방법은 무엇인가?\n- 일반 메소드와 달리 클래스 메소드의 가장 큰 특징은 무엇인가?\n- 상속에서 주요 특징 다섯 가지는 무엇인가?\n\n\u002d\u002d-\n\n## 뒷 이야기\n\n### 메소드의 기본 값은 메소드 정의시 결정됩니다.\n\n이 말인 즉슨, 메소드 기본 값을 설정할 때 즉각 변수로 사용한다 하더라도, 변수 시점의 값으로 고정된다는 뜻입니다. 아래와 같은 코드는 `defaultAttack` 값을 수정한다 하더라도 메소드의 기본 값이 변경되지 않습니다.\n\n```python\ndefaultAttack = 10\ndefaultHealth = 100\n\nclass Monster:\n\n    def __init__(self, attack = defaultAttack, health = defaultHealth):\n        self.attack = attack\n        self.health = health\n    \nmon1 = Monster()\nprint(mon1.attack, mon1.health)\n\ndefaultAttack = 30 # defaultAttack 값을 변경했습니다.\n\nmon2 = Monster()\nprint(mon2.attack, mon2.health) # 하지만 결과는 똑같습니다.\n```\n```plaintext\n10 100\n10 100\n```\n\n\u002d\u002d-\n\n### 구현 강제\n\n부모 클래스는 자식 클래스로 하여금 특정 메소드의 구현을 강제할 수 있습니다. 바로 `NotImplementedError` [예외](1030)를 이용하면 됩니다. 이 예외에 대한 내용은 [문서](https://docs.python.org/3/library/exceptions.html#NotImplementedError)를 참조해주세요. \n\n```python\nclass Base:\n    def bark(self):\n        raise NotImplementedError(\u0022bark 메소드가 구현되어야 합니다.\u0022)\n\nclass Sub(Base):\n    pass\n\na = Sub()\na.bark()\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 9, in \u003cmodule\u003e\n    a.bark()\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 3, in bark\n    raise NotImplementedError(\u0022bark 메소드가 구현되어야 합니다.\u0022)\nNotImplementedError: bark 메소드가 구현되어야 합니다.\n```\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><p>우선 상속에 알아보기 전에 새로운 클래스 객체와 클래스 메서드를 알아봅시다.</p>
<h2>클래스 속성</h2>
<p>지난 시간에 했던 예제를 불러와 보겠습니다.</p>
<pre><code class="language-python">class Monster:

    def __init__(self, attack, health):
        self.attack = attack
        self.health = health
    
    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

mon1 = Monster(10, 100)
print(mon1.attack, mon1.health)

mon2 = Monster(30, 100)
print(mon2.attack, mon2.health)

</code></pre>
<pre><code class="language-plaintext">10 100
30 100
</code></pre>
<p>앞서 클래스를 배울 때 사용했던 코드와 거의 유사합니다. 이해하시는 데는 무리가 없으시지요? <code>__init__</code>과 <code>doAttack</code> 두 개의 메소드가 존재하고, <code>attack</code>과 <code>health</code> 두 개의 속성이 있습니다. 이 속성들은 객체마다 분리되어 있습니다. 그림으로 표현하면 다음과 같습니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.svg" alt="Monster 클래스 그림">
<em>Monster 클래스의 모습</em></p>
<hr>
<p>이제, 매번 <code>attack</code>과 <code>health</code>를 지정해주기 귀찮으니 함수에 <a href="https://elvanov.com/304#%EA%B8%B0%EB%B3%B8%EA%B0%92%28--0">기본 값(default)</a>을 설정해보도록 합시다. 다음과 같이 함수의 인수에 <code>=</code>을 붙여주면 해당 인수는 선택사항이 됩니다. 정상적으로 인수로 값이 들어온다면 그 값으로 되고, 값이 들어오지 않는다면 기본값으로 작동합니다. 아래 예제는 <code>__init__</code>과 <code>mon1</code>, <code>mon2</code> 변수를 만드는 과정만 살짝 수정했습니다.</p>
<pre><code class="language-python">class Monster:

    def __init__(self, attack = 10, health = 100):
        self.attack = attack
        self.health = health
    
    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

mon1 = Monster()
print(mon1.attack, mon1.health)

mon2 = Monster(30)
print(mon2.attack, mon2.health)
</code></pre>
<pre><code class="language-plaintext">10 100
30 100
</code></pre>
<p>우리의 의도대로 잘 작동합니다.</p>
<hr>
<p>그런데 <code>Monster</code> 클래스를 생성했던 시점과 달리, 기본 값 그 자체를 바꾸고 싶습니다. 왜냐하면 공격력이 <code>30</code>인 몬스터를 수십 마리 다시 만들고 싶은데, 그럴려면 일일히 <code>Monster(30)</code>이라고 코딩해야 하기 때문이죠. 머리를 굴려봅시다. 기본 값을 어떤 변수로 두어서, 이 변수를 필요할 때마다 수정한다면 어떨까요? 한 번 시도해 봅시다.</p>
<pre><code class="language-python">defaultAttack = 10 # 새로 추가하였습니다.
defaultHealth = 100 # 새로 추가하였습니다.

class Monster:

    def __init__(self, attack = None, health = None):
        if attack is None : 
            attack = defaultAttack
        if health is None : 
            health = defaultHealth
        self.attack = attack
        self.health = health

    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)
    
mon1 = Monster()
print(mon1.attack, mon1.health)

defaultAttack = 30

mon2 = Monster()
print(mon2.attack, mon2.health)
</code></pre>
<pre><code class="language-plaintext">10 100
30 100
</code></pre>
<p><code>Monster</code> 생성자에서 <code>attack</code>과 <code>health</code>의 기본 값은 <code>None</code>이 되었습니다. 일단은 기본값이 존재하기 때문에 함수를 호출할 때 <code>attack</code>과 <code>health</code>의 내용을 채워넣지 않아도 되지만, 그렇게 되면 이 인수들은 <code>None</code>이라는 의미 없는 값을 가지게 됩니다. 이 때, <code>if</code>를 이용하여 외부 변수를 대입하여 줍니다.</p>
<hr>
<p>하지만 다시 문제가 발생했습니다. <code>defaultAttack</code>과 <code>defaultHealth</code>는 너무 흔한 이름이라 다른 클래스가 이 변수에 접근할 가능성이 있습니다. 우리는 이 변수들을 <code>Monster</code>에서만 사용하고 싶습니다. 그렇다고 만약에, <code>defaultMonsterAttack</code> 라고 변수 이름을 수정하고자 하니 너무 길어지는 문제가 있네요. 이 때 <strong>클래스 속성(Class Attribute)</strong> 이 등장합니다. 사용법은 간단합니다. 변수를 클래스 내부에 정의하면 됩니다! 그리고 해당 속성을 사용하려면 <strong><code>클래스명.속성</code></strong> 으로 하면 됩니다. 아래 예제를 보십시다.</p>
<pre><code class="language-python">class Monster:

    defaultAttack = 10
    defaultHealth = 100

    def __init__(self, attack = None, health = None):
        if attack is None : 
            attack = Monster.defaultAttack
        if health is None : 
            health = Monster.defaultHealth
        self.attack = attack
        self.health = health

    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)
    
mon1 = Monster()
print(mon1.attack, mon1.health)

Monster.defaultAttack = 30

mon2 = Monster()
print(mon2.attack, mon2.health)
</code></pre>
<pre><code class="language-plaintext">10 100
30 100
</code></pre>
<p>그림은 다음과 같습니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/p2.svg" alt="Monster 클래스 그림 (클래스 속성 추가)">
<em>Monster 클래스의 모습 (클래스 속성 추가)</em></p>
<hr>
<p>클래스 속성이란, 인스턴스 하나하나에 대응되는 속성이 아니라, 클래스 그 자체에 대응이 되는 속성입니다. 즉 객체가 아무리 많다 하더라도 접근되는 속성은 단 하나입니다. 클래스 속성은 다음과 같은 상황에서 유용하게 사용될 수 있으며, 그러한 상황이라는 의도를 내포하고 있습니다.</p>
<ul>
<li>인스턴스 간 정보를 공유하고자 할 때 (예: <code>Monster</code> 객체의 개수)</li>
<li>클래스 자체의 정보를 제공하고자 할 때 (예: <code>Monster</code> 클래스의 설명)</li>
</ul>
<p>클래스 속성은 인스턴스로도 접근이 가능합니다. 즉 <code>Monster.defaultAttack</code> 이 아닌 <code>mon1.defaultAttack</code> 으로도 접근할 수가 있습니다. 단, 이렇게 인스턴스를 통해서 접근을 한다면 &quot;클래스 속성&quot;이 아니라 <em>&quot;그 객체의 속성&quot;으로 접근하겠다는 오해를 불러 일으킬 수 있습니다.</em> 컴퓨터가 오해하는 게 아니라, 이 코드를 보는 다른 사용자가 그렇습니다. 그러므로 <code>Monster.defaultAttack</code> 이렇게 클래스 속성을 사용하겠다고 명시해줍시다.</p>
<hr>
<h2>클래스 메소드</h2>
<p>클래스 속성과 비슷하게, 클래스 자체에 대한 동작을 넣고자 할 때 사용됩니다. 객체나 인스턴스가 필요없는 동작이라고 생각하시면 되겠습니다. 일반적으로 유틸리티성 메소드를 정의할 때 많이 사용됩니다.</p>
<pre><code class="language-python">class Monster:

    defaultAttack = 10
    defaultHealth = 100

    @classmethod ##a_1##
    def setDefault(cls, attack, health):
        cls.defaultAttack = attack
        cls.defaultHealth = health

    def __init__(self, attack = None, health = None):
        if attack is None : attack = Monster.defaultAttack
        if health is None : health = Monster.defaultHealth
        self.attack = attack
        self.health = health

    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)
    
mon1 = Monster()
print(mon1.attack, mon1.health)

Monster.setDefault(30, 50)

mon2 = Monster()
print(mon2.attack, mon2.health)
</code></pre>
<pre><code class="language-plaintext">10 100
30 50
</code></pre>
<hr>
<h3><em>a_1</em>(1.) 클래스 메소드 정의하기</h3>
<p>클래스 메소드를 정의하는데, 새로운 문법이 등장했습니다. 바로 <code>@classmethod</code> 인데요, 이는 데코레이터(decorator)라고 하여, 바로 아래에 등장하는 함수를 데코해주는 역할입니다. 여기서는 바로 아래의 <code>setDefault</code> 함수를 클래스 메소드로 사용하겠다는 뜻으로 풀이될 수 있습니다.</p>
<p>클래스 메소드의 큰 특징은, <strong>첫 번째 인수로 객체가 넘어오는 게 아니라, 클래스가 넘어오게 됩니다.</strong> 즉 위에서의 <code>cls</code> 인수는 <code>Monster</code> 그 자체가 되어 <code>cls.defaultAttack</code>과 같이 클래스 속성에 접근할 수 있게 되는 것입니다. 이 메소드를 호출할 때에는 속성과 마찬가지로 <code>.</code>을 이용하여 <strong><code>클래스명.메소드명(인수...)</code></strong> 라고 작성합니다.</p>
<p>어차피 객체 하나하나에 구애되지 않는 메소드이니까 <code>self</code>를 굳이 쓰지 않아도 될 것 같습니다. 그런데 왜 클래스 정보를 받아오는 것일까요? 클래스의 상속에서 더 알아보도록 합시다.</p>
<hr>
<blockquote>
<h3>정적 메소드 (static method)</h3>
<p>클래스에 연결되어서 각 객체와는 독립적으로 작동하는 메소드를, 다른 프로그래밍 언어에서는 통상적으로 정적 메소드(static method)라고 불립니다. 자바와 C++에서는 <code>static</code>이라는 키워드를 곧장 이용하여 구현하곤 합니다.</p>
</blockquote>
<hr>
<h2>상속의 핵심</h2>
<h3>기능을 확장하고자 한다</h3>
<p>초심으로 돌아가서 원래의 예제를 봅시다. <code>Monster</code> 클래스를 한번 만들어보았습니다. 이제 <code>Monster</code>와 비슷하게 작동하는 <code>Human</code>, <code>Dog</code> 클래스를 새롭게 만들어서 기능을 조금씩 수정해보고자 합니다. 변경할 내용은 다음과 같습니다.</p>
<ul>
<li>사람에게는 이 사람의 출신 나라 정보가 포함될 수 있습니다. 속성을 추가해 줍시다.</li>
<li>사람은 똑똑해서 조금 약하게 한번 더 때립니다. <code>doAttack</code> 메소드를 수정해줍시다.</li>
<li>개는 짖을 줄 압니다. <code>bark</code> 메소드를 추가해줍니다.</li>
</ul>
<p>그리하여 수정한 결과는 다음과 같습니다.</p>
<pre><code class="language-python">class Monster:

    def __init__(self, attack, health):
        self.attack = attack
        self.health = health
    
    def doAttack(self):
        print(&quot;몬스터가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

class Human:

    def __init__(self, attack, health, country):
        self.attack = attack
        self.health = health
        self.country = country
    
    def doAttack(self):
        print(&quot;사람이 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;사람은 똑똑해서 한번 더 &quot; + str(self.attack * 0.5) +&quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

class Dog:

    def __init__(self, attack, health):
        self.attack = attack
        self.health = health
    
    def doAttack(self):
        print(&quot;개가 아군에게 &quot; + str(self.attack) + &quot;만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

    def bark(self):
        print(&quot;왈왈!!&quot;)


dog = Dog(20, 30)
human = Human(10, 100, &quot;한국&quot;)
monster = Monster(5, 100)

dog.doAttack()
dog.bark()
human.doAttack()
monster.doAttack()
</code></pre>
<pre><code class="language-plaintext">개가 아군에게 20만큼 공격했다!
-----------------
왈왈!!
사람이 아군에게 10만큼 공격했다!
사람은 똑똑해서 한번 더 5.0만큼 공격했다!
-----------------
몬스터가 아군에게 5만큼 공격했다!
</code></pre>
<p>우리의 의도대로 잘 작동합니다. 하지만 이제 시작입니다. 할 일은 점점 늘어납니다. 만약 <code>Monster</code>, <code>Human</code>, <code>Dog</code> 모두에게 방어력을 가지고 있는 속성 <code>defence</code>와 방어한다는 동작인 <code>doDefense</code> 메소드를 넣고 싶다면요? 뿐만 아니라 <code>Duck</code>, <code>Dragon</code> 클래스를 추가하고 싶다면요? 복사 붙여넣기 신공이 절실하다면 이제 다른 방법을 찾아볼 때 입니다. 지금은 바로 상속(inheritance)이란 것을 이용해보도록 합시다!</p>
<hr>
<h3>기본적인 사용 방법</h3>
<p><strong>상속(inheritance)</strong> 이란 부모-자식 개념을 클래스 개념에 추가하는 것입니다. 그래서 부모의 기능을 자식에게 상속하여 코드 중복을 없애고 유지보수를 더 원활하게 할 수 있게 됩니다. 기본적인 사용 방법은 클래스 정의 시 이름 바로 뒤에 소괄호(<code>()</code>) 내에 부모 클래스를 넣어주면 됩니다. 예시는 다음과 같습니다.</p>
<pre><code class="language-python">class 부모클래스:
    내용

class 자식클래스(부모클래스):
    내용
</code></pre>
<p>주요 특징은 다음과 같습니다.</p>
<ul>
<li>자식 클래스는 일단 부모 클래스의 속성과 메소드를 상속받습니다.</li>
<li>자식 클래스는 부모 클래스에 영향을 주지 않고 자기만의 속성과 메소드를 정의할 수 잇습니다.</li>
<li>자식 클래스는 부모 클래스의 속성 및 메소드를 덮어써서 구현할 수 있습니다. (오버라이딩)</li>
<li>자식 클래스는 부모 클래스의 속성 및 메소드에 접근 및 호출할 수 있습니다.</li>
<li>자동으로 자식 클래스의 메소드가 호출됩니다. (다형성)</li>
</ul>
<p>이 두 클래스의 관계를 이야기할 때 다양한 용어가 쓰이는데요, 다음과 같습니다.</p>
<ul>
<li>부모 클래스(parent class)와 자식 클래스(child class)</li>
<li>상위 클래스(super class)와 하위 클래스(sub class)</li>
<li>기본 클래스(base class)와 파생 클래스(derived class)</li>
</ul>
<hr>
<h3>구현 예</h3>
<p>그래서 위 <code>Monster</code>, <code>Human</code>, <code>Dog</code> 클래스의 상위 클래스인 <code>Unit</code> 클래스를 만들어서 공통적인 부분을 묶어봅시다.</p>
<pre><code class="language-python">class Unit:
    typeString = &quot;유닛&quot;
    def __init__(self, attack, health):
        self.attack = attack
        self.health = health
    
    def doAttack(self):
        print(f&quot;{self.typeString}이(가) 아군에게 {self.attack} 만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)
        

class Monster(Unit):
    typeString = &quot;몬스터&quot;


class Human(Unit):
    typeString = &quot;사람&quot;

    def __init__(self, attack, health, country):
        super().__init__(attack, health)
        self.country = country
    
    def doAttack(self):
        print(f&quot;{self.typeString}이 아군에게 {self.attack}만큼 공격했다!&quot;)
        print(f&quot;{self.typeString}은 똑똑해서 한번 더 {self.attack * 0.5}만큼 공격했다!&quot;)
        print(&quot;-----------------&quot;)

class Dog(Unit):
    typeString = &quot;개&quot;
    def bark(self):
        print(&quot;왈왈!!&quot;)


dog = Dog(20, 30)
human = Human(10, 100, &quot;한국&quot;)
monster = Monster(5, 100)

dog.doAttack()
dog.bark()
human.doAttack()
monster.doAttack()
</code></pre>
<pre><code class="language-plaintext">개이(가) 아군에게 20만큼 공격했다!
-----------------
왈왈!!
사람이 아군에게 10만큼 공격했다!
사람은 똑똑해서 한번 더 5.0만큼 공격했다!
-----------------
몬스터이(가) 아군에게 5만큼 공격했다!
</code></pre>
<p>원래의 의도와 부합하여 아주 잘 작동한다는 것을 보실 수 있습니다.</p>
<hr>
<h2>상속의 특징</h2>
<h3>속성과 메소드의 상속</h3>
<p>예제를 보면서 설명하도록 하겠습니다.</p>
<pre><code class="language-python">class Base:
    name = '베이스'           # 클래스 속성

    @classmethod              # 클래스 메소드
    def tellMeName(cls):
        print('이름은', cls.name, '입니다.')

    def __init__(self, age) : # 생성자(메소드)
        self.age = age        # 속성

class Sub(Base):
    pass

Sub.tellMeName()              # 클래스 메소드 호출
instance = Sub(13)            # Sub 객체 생성
print(instance.age)           # 객체 속성 접근
</code></pre>
<pre><code class="language-plaintext">이름은 베이스 입니다.
13
</code></pre>
<p><code>Base</code> 클래스를 상속받는 <code>Sub</code> 클래스는 <code>Base</code>의 속성과 메소드를 빠짐없이 상속받습니다. <code>Sub</code> 클래스의 정의는 단 하나도 없는데도, 클래스 메소드를 이용할 수 있고, 생성자로서 하나의 인수를 넣어야 하며, 객체 내의 속성도 잘 살아있음을 확인할 수 있습니다.</p>
<hr>
<h3>속성 및 메소드 확장</h3>
<pre><code class="language-python">class Base:
    def __init__(self, age) :
        self.age = age        

class Sub(Base):
    def afterYears(self, year): # 메소드를 추가하였습니다.
        print(f&quot;{year}년 뒤 나이는 {year+self.age}살 입니다...&quot;)
        self.future = 'Sad..' # 속성을 추가하였습니다.

instance = Sub(13)
instance.afterYears(10) # 추가된 메소드를 호출
print(instance.future) # 추가된 속성을 출력
</code></pre>
<pre><code class="language-plaintext">10년 뒤 나이는 23살 입니다...
Sad..
</code></pre>
<p>상속받는 클래스는 물론 자기 자신만의 속성과 메소드를 구현할 수 있습니다.</p>
<hr>
<h3>오버라이딩 (overriding)</h3>
<p>오버라이딩이란, 상위 클래스로부터 상속받은 메소드나 속성을 재정의한다는 뜻입니다. 쉽게 말해 덮어 쓴다는 뜻입니다. 그렇다면 왜 재정의를 하는 걸까요? 하위 클래스에서 기능을 수정 및 확장하기 위해서 입니다. 생성자를 예로 들어보겠습니다.</p>
<pre><code class="language-python">class Base:
    def __init__(self, age) :
        self.age = age
    
class Sub(Base):
    def __init__(self, age, country):
        self.age = age
        self.country = country

ins1 = Sub(13, '한국')
print(ins1.country)
ins2 = Sub(13)
</code></pre>
<pre><code class="language-plaintext">한국
Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 12, in &lt;module&gt;
    ins2 = Sub(13)
TypeError: __init__() missing 1 required positional argument: 'country'
</code></pre>
<p><code>Sub</code> 클래스의 생성자(<code>__init__</code>)를 우리가 새롭게 정의했습니다. 그렇게 되면 완전히 새로운 생성자로 대체됩니다. 그래서 <code>Sub(13, '한국')</code>과 같이 쓰는 건 옳지만 기존 <code>Base</code> 클래스의 생성자를 고려하여 인수를 하나만 쓰게 된다면 에러가 나게 됩니다.</p>
<p>오버라이딩은 이름만 똑같이 쓴다면 자동으로 오버라이딩이 됩니다. 아쉽게도 파이썬의 자체 기능은 오버라이드의 여부를 확인할 수 없습니다. 그러니까, 어떤 메소드나 속성을 정의할 때 이게 완전히 새롭게 정의되는 건지, 이미 상위 클래스에서 정의되었던 것을 오버라이드하는지 구분할 수 없다는 이야기이지요. 대부분의 상황에서는 오버라이드 해도 별 문제는 없지만 간혹 오버라이드 하면 안 되는 것들도 있을 수 있기 때문에 살짝 조심하셔야겠습니다.</p>
<p>그런데, 데코레이터(추가 예정)를 이용한 방법(<a href="https://stackoverflow.com/questions/1167617/in-python-how-do-i-indicate-im-overriding-a-method">링크</a>)도 있으니 혹시 관심이 있으시다면 참조해주세요.</p>
<blockquote>
<h4>오버로딩? (overloading) (심화)</h4>
<p>파이썬에는 상관 없는 이야기이므로 다른 언어를 접하지 않으셨다면 이 부분은 가볍게 패스하세요.</p>
<p>c++나 자바처럼 컴파일 타임에 많은 것이 결정되는 언어에서는 호출할 인수의 타입이나 개수에 따라서 호출될 함수가 미리 정해집니다. 그렇게 된다면 오직 하나의 함수 시그니처만 이용하게 되는 것일까요? 아닙니다. 바로 오버로딩(overloading)을 통해 이름은 같되 리턴형, 인수의 개수, 인수의 타입이 다른 메소드를 여러 번 정의함으로써 여러 함수 시그니처를 이용할 수 있게 됩니다.</p>
<ul>
<li><a href="https://www.tutorialspoint.com/cplusplus/cpp_overloading.htm">c++의 오버로딩 예제</a></li>
</ul>
<p>파이썬에서는 오버로딩이라는 개념이 없습니다. 파이썬에서는 애초에 리턴형을 지정해줄 필요가 없을 뿐더러 인수의 타입에도 제한이 없고, <a href="304">인수의 기본 값이나 가변 인수를 활용</a>하여 다양한 인수 조합을 만들어낼 수 있습니다.</p>
</blockquote>
<hr>
<h3>부모 클래스의 속성 및 메소드 접근</h3>
<p>오버라이딩을 했을 때의 특징은 기존의 함수 내용은 모두 사라진다는 점입니다. 이는 의도한 행동일 수도 있고, 문제가 될 수도 있습니다. 왜냐하면 기존 상위 클래스의 메소드에다가 살짝의 부가 기능을 써넣고 싶은데, 오버라이드하게 되면 중복되는 부분을 전부 복사하여 붙여넣어야 하기 때문이죠. 이를 방지하기 위해 우리는 부모 클래스의 속성이나 메소드에 접근하여 호출할 수 있습니다.</p>
<p>아래 예제에서 <code>print(&quot;뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.&quot;)</code> 이 부분이 아주 길다고 상상해보세요. <code>Sub</code>에서 <code>__init__</code>을 오버라이딩 한다면 이 아주 긴 부분을 복사 붙여넣어야 할 판입니다. 하지만 이를 아주 쉽게 해결할 수 있습니다.</p>
<pre><code class="language-python">class Base:
    def __init__(self, age) :
        print(&quot;Base의 생성자가 시작됩니다.&quot;)
        self.age = age
        print(&quot;뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.&quot;)
        print(&quot;Base의 생성자가 끝났습니다.&quot;)
    
class Sub(Base):
    def __init__(self, age, country):
        print(&quot;Sub의 생성자가 시작됩니다.&quot;)
        super().__init__(age) # 상위 클래스 접근
        self.country = country
        print(&quot;Sub의 생성자가 끝났습니다.&quot;)

ins1 = Sub(13, '한국')
</code></pre>
<pre><code class="language-plaintext">Sub의 생성자가 시작됩니다.
Base의 생성자가 시작됩니다.
뭔가 많은 행동을 하고 있습니다. 복붙하기엔 많아요.
Base의 생성자가 끝났습니다.
Sub의 생성자가 끝났습니다.
</code></pre>
<p>위 예제에서는 <code>Sub</code>의 생성자에서 상위 클래스를 <strong><code>super()</code></strong> 를 통해 접근하여, <code>__init__</code> 메소드 즉 생성자를 명시적으로 호출해서 <code>Base</code>의 생성자를 불러냈습니다. 출력된 메세지를 보시면 <code>Sub</code>의 생성자가 시작되고 끝나는 사이에 <code>Base</code>의 생성자도 호출되었다는 사실을 알 수 있습니다.</p>
<hr>
<h3>다형성</h3>
<p>다형성이란, <strong>겉으로 봤을 때 같은 코드라도 적절하게 다른 메소드가 호출된다</strong>는 뜻입니다. 파이썬에서는 <code>self</code>라는 인스턴스를 메소드의 첫 번째 인수로 강제함으로써 다소 직관적으로 다형성을 이해해볼 수 있습니다. 다음 코드에서는 <code>##1##</code> 부분의 <code>self.printA()</code>가 다형성이 적용되는 구간입니다. 다음 코드를 살펴봐주세요.</p>
<pre><code class="language-python">class Base:
    def printA(self):
        print('Base A')
    
    def printAandB(self):
        self.printA() ##b_1##
        print('Base B')

class Sub(Base):
    def printA(self):
        print('Sub A')
    
ins = Sub()
ins.printAandB()
</code></pre>
<pre><code class="language-plaintext">Sub A
Base B
</code></pre>
<hr>
<h4><em>b_1</em>(1.) 적절하게 <code>printA</code> 메소드가 선택된다.</h4>
<p>코드의 하단에서 <code>Sub</code> 클래스의 인스턴스로 <code>ins</code>를 두었습니다. <code>ins</code>의 타입은 <code>Sub</code>가 되는 것이지요. <code>Sub</code>에는 <code>printAandB</code> 메소드를 구현하지 않았으므로 상속받은 <code>Base</code>의 것을 사용하게 됩니다. 이윽고 <code>self.printA()</code>에 다다랐을 때에 파이썬 인터프리터는 어떤 클래스에 정의되어있는 <code>printA</code> 메소드를 실행할지 결정해야 합니다.</p>
<p>파이썬 인터프리터는 <strong>본래의 클래스(<code>Sub</code>)</strong> 에 그 메소드가 정의되어 있을 경우 그 메소드를 실행합니다. 본래의 클래스가 없다면 차례로 상위 클래스로 가면서 발견되는 메소드를 실행합니다. 여기서의 <code>printA</code> 메소드 호출은 결국 <code>Sub</code>의 것으로 실행됩니다. <code>printA</code> 메소드의 호출 과정을 순서도로 표현하면 다음과 같습니다.</p>
<pre><code class="language-mermaid-execute">graph TD  
a1[&quot;self.printA()&lt;br&gt;를 만난다&quot;] --&gt; a2{&quot;self가 지니고&lt;br&gt;있는 printA&lt;br&gt;메소드가&lt;br&gt;몇 개인가?&quot;}
a2 --&gt; |아무 것도 없다|a3[&quot;AttributeError&lt;br&gt;에러 발생&quot;]
a2 --&gt; |한 개 이상|a4[&quot;self 객체의&lt;br&gt;클래스에서부터&lt;br&gt;검색해본다.&quot;]
a4 --&gt; a6{&quot;해당 클래스에&lt;br&gt;printA 메소드가&lt;br&gt;있는가?&quot;}
a6 --&gt; |yes|a7[&quot;그 메소드를 실행시킨다.&quot;]
a6 --&gt; |no|a8[&quot;그 다음 상위 클래스를 검색해본다.&quot;]
a8 --&gt; a6
</code></pre>
<p><em>printA 메소드 호출 시 탐색 과정</em></p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>클래스 속성을 정의하는 방법은 무엇인가?</li>
<li>클래스 메소드를 정의하는 방법은 무엇인가?</li>
<li>일반 메소드와 달리 클래스 메소드의 가장 큰 특징은 무엇인가?</li>
<li>상속에서 주요 특징 다섯 가지는 무엇인가?</li>
</ul>
<hr>
<h2>뒷 이야기</h2>
<h3>메소드의 기본 값은 메소드 정의시 결정됩니다.</h3>
<p>이 말인 즉슨, 메소드 기본 값을 설정할 때 즉각 변수로 사용한다 하더라도, 변수 시점의 값으로 고정된다는 뜻입니다. 아래와 같은 코드는 <code>defaultAttack</code> 값을 수정한다 하더라도 메소드의 기본 값이 변경되지 않습니다.</p>
<pre><code class="language-python">defaultAttack = 10
defaultHealth = 100

class Monster:

    def __init__(self, attack = defaultAttack, health = defaultHealth):
        self.attack = attack
        self.health = health
    
mon1 = Monster()
print(mon1.attack, mon1.health)

defaultAttack = 30 # defaultAttack 값을 변경했습니다.

mon2 = Monster()
print(mon2.attack, mon2.health) # 하지만 결과는 똑같습니다.
</code></pre>
<pre><code class="language-plaintext">10 100
10 100
</code></pre>
<hr>
<h3>구현 강제</h3>
<p>부모 클래스는 자식 클래스로 하여금 특정 메소드의 구현을 강제할 수 있습니다. 바로 <code>NotImplementedError</code> <a href="1030">예외</a>를 이용하면 됩니다. 이 예외에 대한 내용은 <a href="https://docs.python.org/3/library/exceptions.html#NotImplementedError">문서</a>를 참조해주세요.</p>
<pre><code class="language-python">class Base:
    def bark(self):
        raise NotImplementedError(&quot;bark 메소드가 구현되어야 합니다.&quot;)

class Sub(Base):
    pass

a = Sub()
a.bark()
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 9, in &lt;module&gt;
    a.bark()
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 3, in bark
    raise NotImplementedError(&quot;bark 메소드가 구현되어야 합니다.&quot;)
NotImplementedError: bark 메소드가 구현되어야 합니다.
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date><![CDATA[2020-01-12 14:40:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-12 05:40:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 16:57:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 07:57:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%83%81%ec%86%8d-%ed%81%b4%eb%9e%98%ec%8a%a4-%ed%99%95%ec%9e%a5%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_caee9a136d4e048f28a4eb5f5a9fc4ed]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c8b372fd38d15bd2fd66b04644e2912c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 예외와 에러 ~ 예상치 못한 상황에 대응하기]]></title>
		<link>https://elvanov.com/1030</link>
		<pubDate>Mon, 13 Jan 2020 06:01:57 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1030</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1030</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 15:01:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 06:01:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 15:02:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 06:02:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%98%88%ec%99%b8%ec%99%80-%ec%97%90%eb%9f%ac-%ec%98%88%ec%83%81%ec%b9%98-%eb%aa%bb%ed%95%9c-%ec%83%81%ed%99%a9%ec%97%90-%eb%8c%80%ec%9d%91%ed%95%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 코드 스타일 - 코드의 일관성 유지하기]]></title>
		<link>https://elvanov.com/1034</link>
		<pubDate>Mon, 13 Jan 2020 06:03:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1034</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>이번 강좌는 좀 쉬어가는 강좌입니다. <strong>프로그램의 규모가 커지거나, 프로그램을 여러 기간에 걸쳐 오랫동안 개발하거나, 다른 사람들이 만든 프로그램을 많이 참조하려고 하거나, 내가 만든 코드를 다른 사람들에게 공유하고자 할 때 <span style="text-decoration: underline;">코드 스타일</span>에 관한 내용을 알아두는 게 좋습니다.</strong> 이번 시간에는 새로운 기능이나 개념을 배운다기 보다, 코드를 대하는 일종의 태도를 이야기합니다. 파이썬으로 할 수 있는 것들을 더 배우고 싶다면 이번 강좌는 패스하고 다른 것부터 보셔도 좋습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>코드 스타일의 필요성</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>파이썬의 가장 큰 특징은 들여쓰기를 마음대로 못한다는 것입니다. 들여쓰기 한 칸당 블록을 의미하게 되고, 들여쓰기가 제대로 되지 않으면 <code>SyntaxError</code>라며 아예 프로그램 실행조차 거부해버립니다. 이처럼 파이썬은 다른 언어들보다 상대적으로 규칙이 꽉 짜여져 있기 때문에 의도하지 않았더라도 코드 스타일이 강제적으로 일관된다는 장점이 있습니다. (자유로움을 추구하는 사람은 단점으로 볼 지도 몰라요)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 그 중에도 사람에 따라서 다르게 개발할 수 있는 선택지가 수두룩빽빽합니다. 변수 이름을 짓는다고 상상해보세요. <code>person_name</code>과 <code>personName</code> 중 어느 것을 쓸 것인지 개발자는 결정해야 합니다. 사실 "결정"이라는 거창한 말을 쓸 필요도 없을지 모릅니다. 대문자를 쓰고 안쓰고, <code>_</code>를 쓰고 안쓰고가 그렇게 중요한 문제일까요? <code>a=1</code>과 <code>a = 1</code>의 차이를 보세요. 기능적으로는 완전히 동일하고 잘 작동합니다. 이 띄어쓰기를 하고 안하고의 여부가 그렇게 중요할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>사실 중요하다는 것은 그 코드를 짜는 사람이나 그 그룹 마음입니다. 모든 코드 스타일은 권고사항일 뿐이지 반드시 지켜야 할 필요는 없습니다. 하지만 <strong>통일된 스타일이 주는 안정감</strong>이나 일관성에서 오는 편안함이 있다는 것은 인정해야 할 것입니다. 변수의 개수가 몇십 개를 넘어가면 변수 이름을 새로 지을때 상당히 고민하게 됩니다. 기존에 있던 변수 명과 헷갈리기 일쑤이지요. 다양한 기능이 몇십 개의 함수와 클래스로 분화되기 시작하면 그 코드를 보는 한두달 뒤의 "내"가 코드가 어떻게 돌아가는지 이해하기 위해 다시 머리를 싸매야 할지도 모릅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/f1f.jpg" alt="개발자 유머. 코드 까먹음"/><figcaption><em>이 코드를 작성했을 때에는 오직 신과 나만이 그 의도를 알았다. 이제는 신만 아신다.</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>코드 스타일</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>파이썬에서는<a href="https://www.python.org/dev/peps/pep-0008/"> PEP 8(영어)</a>로서, 스타일 가이드라는 공식 문서를 만들고 있습니다.  어떤 분이 <a href="https://kongdols-room.tistory.com/18">번역글(티스토리, EG공간)</a>을 써 올린걸 참고로 같이 보면 될 듯합니다. 살펴보시면 아시겠듯이, 내용이 굉장히 방대합니다! 일단 <strong>변수/함수의 이름 권고사항</strong>에 관한 내용을 가지고 와 보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>함수 및 변수명</strong></p><p><em><strong>Function and Variable Names</strong></em></p><p>가독성 향상을 위해 함수명은 소문자로 하며 단어 구분은 <code>_</code>로 합니다. 변수명도 함수명 규칙을 그대로 따릅니다.</p><p><em>Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names.</em></p><p>mixedCase(첫 번째 글자는 소문자로 하고 그 다음 단어마다 대문자를 쓰는 방식)은 이미 해당 스타일이 고수되고 있는 상황에서만, 하위 호환성을 위해 허용하도록 합니다. (예: threading.py) </p><p><em>mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제, 대입문에서 띄어쓰기를 할지 말지 결정해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>표현식과 명령문에서의 띄어쓰기 - 기타 권고사항</strong></p><p><strong><em>Whitespace in Expressions and Statements - Other Recommendations</em></strong></p><p>다음 이항 연산자를 사용할 때에는 항상 양쪽에 띄어쓰기를 한 칸 하세요 - 대입 연산자(<code>=</code>), 복합 대입 연산자(<code>+=</code>, <code>-=</code> 등), 비교 연산자(<code>==</code>, <code>&lt;</code>, <code>></code>, <code>!=</code>, <code>&lt;></code>, <code>&lt;=</code>, <code>>=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), 논리 연산자(<code>and</code>, <code>or</code>, <code>not</code>)</p><p><em>Always surround these binary operators with a single space on either side: assignment (=), augmented assignment (+=, -= etc.), comparisons (==, &lt;, >, !=, &lt;>, &lt;=, >=, in, not in, is, is not), Booleans (and, or, not).</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>코드 의도 보여주기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>코드 스타일을 넘어서서, 어떤 선택이 기능상에 큰 차이를 불러오지 않더라도, 코딩하는 사람의 의도를 명확히 보여줄 수 있는 코드라면 그렇게 하는 편이 좋습니다. 주석과 <a href="/1631">어노테이션</a>을 적극적으로 사용하고, 필요하다면 <a href="https://elvanov.com/599#%ED%95%A8%EC%88%98+%EC%9D%B8%E--5">함수의 인수를 <code>None</code></a>으로 두거나 <a href="/1620"><code>NotImplemented</code>이라는 값을 활용하는 법</a>도 알고 있다면 유용하게 쓸 수 있을 것입니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1034</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 15:03:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 06:03:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 20:32:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 11:32:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%9e%91%ec%84%b1%ed%95%98%eb%8a%94-%ec%82%ac%eb%9e%8c%ec%9d%98-%ec%9d%98%eb%8f%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 파이썬 설치 ~ Hello World 출력하기]]></title>
		<link>https://elvanov.com/1040</link>
		<pubDate>Mon, 13 Jan 2020 07:59:46 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1040</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"본인의 컴퓨터에서 파이썬 프로그램을 만드려면 앞서 [개발과 관련된 프로그램](128)을 살펴보았듯이 크게 두 가지가 필요합니다. 바로 파이썬 인터프리터와 텍스트 데이터이지요. 우선 본인의 운영체제가 몇 비트인지 (윈도우) 확인한 다음 거기에 맞는 프로그램을 설치해보도록 합시다. 텍스트 에디터는 Microsoft 사에서 만든 Visual Studio Code를 사용하도록 하겠습니다.\n\n\u002d\u002d-\n\n## 본인 컴퓨터의 비트 확인하기 (윈도우 10)\n\n1. **시작버튼** - **설정**에 들어갑니다.\n\n![운영체제 비트 확인법1. 시작버튼 \u003e 설정](https://elvanov.com/elvanov/wp-content/uploads/2020/01/1324.jpg)\n*이미지1-1. 시작버튼 \u003e 설정*\n\n2. **시스템**에 들어갑니다.\n\n![운영체제 비트 확인법2. 시스템 클릭](https://elvanov.com/elvanov/wp-content/uploads/2020/01/1325.jpg)\n*이미지1-2. 시스템*\n\n3. **정보**에서 **시스템 종류**를 확인합니다.\n\n![운영체제 비트 확인법1. 정보 \u003e 시스템 종류](https://elvanov.com/elvanov/wp-content/uploads/2020/01/1326.jpg)\n*이미지1-3. 정보 \u003e 시스템 종류*\n\n\u002d\u002d-\n\n## 파이썬 설치 (윈도우)\n\n우선 파이썬 인터프리터와 내장 모듈을 포함한 패키지를 설치하도록 합니다.\n\n1. [파이썬 윈도우 설치파일을 다운로드](https://www.python.org/downloads/windows/) 합니다. Stable 중 최신 버전을 다운로드 받습니다. 컴퓨터가 64비트 운영체제라면 `x86-64`를 다운받고, 32비트 운영체제라면 `x86`을 다운받습니다.\n\n   ![이미지2-1. 파이썬 사이트 접속 후 설치파일 다운로드](https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.jpg)\n   *이미지2-1. 파이썬 사이트 접속 후 설치파일 다운로드*\n\n1. PATH란 윈도우의 기본 콘솔에서 `python`을 바로 실행시킬 수 있는 가상 공간을 뜻합니다. PATH를 체크하면 기본 콘솔에서도 `python`을 자유롭게 사용할 수 있는 등 편리하므로 체크를 해줍니다.\n\n   ![PATH 체크후 진행](elvanov/wp-content/uploads/2020/01/p2.jpg)\n   *이미지 2-2. Add Python 3.8 to PATH 체크 후 진행*\n\n1. 바로 설치가 진행됩니다.\n\n   ![설치 진행](elvanov/wp-content/uploads/2020/01/p3.jpg)\n   *이미지 2-3. 설치 진행*\n\n1. 완료되었습니다. 참 간단하죠?\n\n   ![설치 완료](elvanov/wp-content/uploads/2020/01/p4.jpg)\n   *이미지 2-4. 설치 완료*\n\n\n\u002d\u002d-\n\n## Visual Studio Code 설치와 첫 프로그램 작성 (윈도우)\n\n파이썬을 설치했으니 이제 실행시킬수는 있지만, 코드를 작성할 텍스트 에디터도 필요합니다. 에디터를 설치한 후 첫 프로그램을 작성해 봅시다.\n\n1. [Visual Studio Code 홈페이지에 접속](https://code.visualstudio.com/)하여 설치 파일을 다운로드 받습니다.\n\n   ![vscode 홈페이지 접속 및 다운로드](elvanov/wp-content/uploads/2020/01/v1.jpg)\n   *이미지 3-1. Microsoft Visual Studio Code 홈페이지 접속 및 다운로드*\n\n1. User 버전은 관리자 버전이랑 살짝 다른데 괜찮겠느냐는 메세지입니다. 무시하고 `확인`을 눌러 다음으로 넘어갑니다. 이 창이 뜨지 않을 수도 있습니다.\n\n   ![vscode 설치 경고 메시지](elvanov/wp-content/uploads/2020/01/v2.jpg)\n   *이미지 3-2. 설치 경고 메시지*\n\n1. 사용권 계약입니다. `계약에 동의함(A)` 체크 후 `다음`을 누릅니다.\n\n   ![vscode 설치, 사용권 계약 창](elvanov/wp-content/uploads/2020/01/v3.jpg)\n   *이미지 3-3. 사용권 계약*\n\n1. 설치 위치를 선택합니다. 기본 값 그대로 두고 `다음`을 누릅니다.\n\n   ![vscode 설치, 설치 위치 선택](elvanov/wp-content/uploads/2020/01/v4.jpg)\n   *이미지 3-4. 설치 위치 선택*\n\n1. 시작 메뉴 폴더 선택입니다. 기본 값 그대로 두고 `다음`을 누릅니다.\n\n   ![vscode 설치, 시작 메뉴 폴더 선택](elvanov/wp-content/uploads/2020/01/v5.jpg)\n   *이미지 3-5. 시작 메뉴 폴더 선택*\n\n1. 추가 작업 선택입니다. `Code(으)로 열기를 메뉴에 추가`하면 편리하게 파일을 편집할 수 있습니다. 이미지와 같이 선택 후 `다음`을 누릅니다.\n\n   ![vscode 설치, 추가 작업 선택](elvanov/wp-content/uploads/2020/01/v6.jpg)\n   *이미지 3-6. 추가 작업 선택*\n\n1. 설치 준비가 되었다 합니다. 어서 `설치`를 눌러 설치해봅시다.\n\n   ![vscode 설치 준비 창](elvanov/wp-content/uploads/2020/01/v7.jpg)\n   *이미지 3-7. 설치 준비*\n\n1. 설치 중입니다. 기다립니다.\n\n   ![vscode 설치 중 창](elvanov/wp-content/uploads/2020/01/v8.jpg)\n   *이미지 3-8. 설치 중*\n\n1. 설치가 완료되었습니다. Visual Studio Code를 실행시켜 봅시다.\n\n   ![vscode 설치 완료 창](elvanov/wp-content/uploads/2020/01/v9.jpg)\n   *이미지 3-9. 설치 완료*\n\n1. `Ctrl + n`을 눌러 새 파일을 만듭니다. 새로운 창이 바로 뜨면서 글을 작성할 수 있게 되었습니다. 아직 작성하지 말고 `Ctrl + s`를 눌러 `test.py`라고 저장해봅시다. `.py`를 꼭 뒤에 붙이셔야 파이썬 파일로 인식되어 파이썬으로 실행되게끔 편리하게 구성할 수 있습니다.\n\n   ![새 파일 만들고 저장](elvanov/wp-content/uploads/2020/01/v10.jpg)\n   *이미지 3-10. 파이썬 파일을 새로 만들고 저장한다.*\n\n\n1. 우측 하단에 파이썬 익스텐션을 설치하라는 메시지가 뜹니다. `Install`을 눌러 설치해주도록 합니다. \n\n   ![파이썬 extension 설치](elvanov/wp-content/uploads/2020/01/v10.5.jpg)\n   *이미지 3-11. 파이썬 익스텐션 설치하기*\n\n1. 글을 쓸 수 있는 칸에 `print(\u0022Hello, world!\u0022)`라고 써넣어 봅니다. 그 후 우측 상단에 있는 재생 버튼을 누릅니다. 이는 `Run Python File in Terminal` 명령입니다. 즉 파이썬 파일을 터미널에서 실행시키라는 뜻입니다.\n\n   ![코드 작성 후 실행](elvanov/wp-content/uploads/2020/01/v11.jpg)\n   *이미지 3-12. 코드 작성 후 실행*\n\n1. 터미널(콘솔)에 `Hello, world!`라는 말이 나온 것을 확인할 수 있습니다. 아주 간단한 첫 번째 프로그램이 완성되었습니다.\n\n   ![파이썬 코드 실행 후 결과 확인](elvanov/wp-content/uploads/2020/01/v12.jpg)\n   *이미지 3-13. 결과 확인*\n\n\u002d\u002d-\n\n프로그램을 완성시켰다고 하니 좀 머쓱하실 수도 있겠습니다. 그냥 딸랑 단어 두 개 나오는 프로그램이 무슨 프로그램입니까.. 하실 수 있는데 이 [`Hello, world!`](https://namu.wiki/w/Hello%2C%20world!)를 출력하는 프로그램은 프로그래밍 언어의 온 역사를 통틀어 첫 발걸음을 내딛을 때 암묵적으로 써야 하는 예제입니다. 하하.. 아무튼 축하드립니다!\n\n\n\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><p>본인의 컴퓨터에서 파이썬 프로그램을 만드려면 앞서 <a href="128">개발과 관련된 프로그램</a>을 살펴보았듯이 크게 두 가지가 필요합니다. 바로 파이썬 인터프리터와 텍스트 데이터이지요. 우선 본인의 운영체제가 몇 비트인지 (윈도우) 확인한 다음 거기에 맞는 프로그램을 설치해보도록 합시다. 텍스트 에디터는 Microsoft 사에서 만든 Visual Studio Code를 사용하도록 하겠습니다.</p>
<hr>
<h2>본인 컴퓨터의 비트 확인하기 (윈도우 10)</h2>
<ol>
<li><strong>시작버튼</strong> - <strong>설정</strong>에 들어갑니다.</li>
</ol>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/1324.jpg" alt="운영체제 비트 확인법1. 시작버튼 &gt; 설정">
<em>이미지1-1. 시작버튼 &gt; 설정</em></p>
<ol start="2">
<li><strong>시스템</strong>에 들어갑니다.</li>
</ol>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/1325.jpg" alt="운영체제 비트 확인법2. 시스템 클릭">
<em>이미지1-2. 시스템</em></p>
<ol start="3">
<li><strong>정보</strong>에서 <strong>시스템 종류</strong>를 확인합니다.</li>
</ol>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/1326.jpg" alt="운영체제 비트 확인법1. 정보 &gt; 시스템 종류">
<em>이미지1-3. 정보 &gt; 시스템 종류</em></p>
<hr>
<h2>파이썬 설치 (윈도우)</h2>
<p>우선 파이썬 인터프리터와 내장 모듈을 포함한 패키지를 설치하도록 합니다.</p>
<ol>
<li>
<p><a href="https://www.python.org/downloads/windows/">파이썬 윈도우 설치파일을 다운로드</a> 합니다. Stable 중 최신 버전을 다운로드 받습니다. 컴퓨터가 64비트 운영체제라면 <code>x86-64</code>를 다운받고, 32비트 운영체제라면 <code>x86</code>을 다운받습니다.</p>
<p><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/p1.jpg" alt="이미지2-1. 파이썬 사이트 접속 후 설치파일 다운로드">
<em>이미지2-1. 파이썬 사이트 접속 후 설치파일 다운로드</em></p>
</li>
<li>
<p>PATH란 윈도우의 기본 콘솔에서 <code>python</code>을 바로 실행시킬 수 있는 가상 공간을 뜻합니다. PATH를 체크하면 기본 콘솔에서도 <code>python</code>을 자유롭게 사용할 수 있는 등 편리하므로 체크를 해줍니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/p2.jpg" alt="PATH 체크후 진행">
<em>이미지 2-2. Add Python 3.8 to PATH 체크 후 진행</em></p>
</li>
<li>
<p>바로 설치가 진행됩니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/p3.jpg" alt="설치 진행">
<em>이미지 2-3. 설치 진행</em></p>
</li>
<li>
<p>완료되었습니다. 참 간단하죠?</p>
<p><img src="elvanov/wp-content/uploads/2020/01/p4.jpg" alt="설치 완료">
<em>이미지 2-4. 설치 완료</em></p>
</li>
</ol>
<hr>
<h2>Visual Studio Code 설치와 첫 프로그램 작성 (윈도우)</h2>
<p>파이썬을 설치했으니 이제 실행시킬수는 있지만, 코드를 작성할 텍스트 에디터도 필요합니다. 에디터를 설치한 후 첫 프로그램을 작성해 봅시다.</p>
<ol>
<li>
<p><a href="https://code.visualstudio.com/">Visual Studio Code 홈페이지에 접속</a>하여 설치 파일을 다운로드 받습니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v1.jpg" alt="vscode 홈페이지 접속 및 다운로드">
<em>이미지 3-1. Microsoft Visual Studio Code 홈페이지 접속 및 다운로드</em></p>
</li>
<li>
<p>User 버전은 관리자 버전이랑 살짝 다른데 괜찮겠느냐는 메세지입니다. 무시하고 <code>확인</code>을 눌러 다음으로 넘어갑니다. 이 창이 뜨지 않을 수도 있습니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v2.jpg" alt="vscode 설치 경고 메시지">
<em>이미지 3-2. 설치 경고 메시지</em></p>
</li>
<li>
<p>사용권 계약입니다. <code>계약에 동의함(A)</code> 체크 후 <code>다음</code>을 누릅니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v3.jpg" alt="vscode 설치, 사용권 계약 창">
<em>이미지 3-3. 사용권 계약</em></p>
</li>
<li>
<p>설치 위치를 선택합니다. 기본 값 그대로 두고 <code>다음</code>을 누릅니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v4.jpg" alt="vscode 설치, 설치 위치 선택">
<em>이미지 3-4. 설치 위치 선택</em></p>
</li>
<li>
<p>시작 메뉴 폴더 선택입니다. 기본 값 그대로 두고 <code>다음</code>을 누릅니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v5.jpg" alt="vscode 설치, 시작 메뉴 폴더 선택">
<em>이미지 3-5. 시작 메뉴 폴더 선택</em></p>
</li>
<li>
<p>추가 작업 선택입니다. <code>Code(으)로 열기를 메뉴에 추가</code>하면 편리하게 파일을 편집할 수 있습니다. 이미지와 같이 선택 후 <code>다음</code>을 누릅니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v6.jpg" alt="vscode 설치, 추가 작업 선택">
<em>이미지 3-6. 추가 작업 선택</em></p>
</li>
<li>
<p>설치 준비가 되었다 합니다. 어서 <code>설치</code>를 눌러 설치해봅시다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v7.jpg" alt="vscode 설치 준비 창">
<em>이미지 3-7. 설치 준비</em></p>
</li>
<li>
<p>설치 중입니다. 기다립니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v8.jpg" alt="vscode 설치 중 창">
<em>이미지 3-8. 설치 중</em></p>
</li>
<li>
<p>설치가 완료되었습니다. Visual Studio Code를 실행시켜 봅시다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v9.jpg" alt="vscode 설치 완료 창">
<em>이미지 3-9. 설치 완료</em></p>
</li>
<li>
<p><code>Ctrl + n</code>을 눌러 새 파일을 만듭니다. 새로운 창이 바로 뜨면서 글을 작성할 수 있게 되었습니다. 아직 작성하지 말고 <code>Ctrl + s</code>를 눌러 <code>test.py</code>라고 저장해봅시다. <code>.py</code>를 꼭 뒤에 붙이셔야 파이썬 파일로 인식되어 파이썬으로 실행되게끔 편리하게 구성할 수 있습니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v10.jpg" alt="새 파일 만들고 저장">
<em>이미지 3-10. 파이썬 파일을 새로 만들고 저장한다.</em></p>
</li>
<li>
<p>우측 하단에 파이썬 익스텐션을 설치하라는 메시지가 뜹니다. <code>Install</code>을 눌러 설치해주도록 합니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v10.5.jpg" alt="파이썬 extension 설치">
<em>이미지 3-11. 파이썬 익스텐션 설치하기</em></p>
</li>
<li>
<p>글을 쓸 수 있는 칸에 <code>print(&quot;Hello, world!&quot;)</code>라고 써넣어 봅니다. 그 후 우측 상단에 있는 재생 버튼을 누릅니다. 이는 <code>Run Python File in Terminal</code> 명령입니다. 즉 파이썬 파일을 터미널에서 실행시키라는 뜻입니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v11.jpg" alt="코드 작성 후 실행">
<em>이미지 3-12. 코드 작성 후 실행</em></p>
</li>
<li>
<p>터미널(콘솔)에 <code>Hello, world!</code>라는 말이 나온 것을 확인할 수 있습니다. 아주 간단한 첫 번째 프로그램이 완성되었습니다.</p>
<p><img src="elvanov/wp-content/uploads/2020/01/v12.jpg" alt="파이썬 코드 실행 후 결과 확인">
<em>이미지 3-13. 결과 확인</em></p>
</li>
</ol>
<hr>
<p>프로그램을 완성시켰다고 하니 좀 머쓱하실 수도 있겠습니다. 그냥 딸랑 단어 두 개 나오는 프로그램이 무슨 프로그램입니까.. 하실 수 있는데 이 <a href="https://namu.wiki/w/Hello%2C%20world!"><code>Hello, world!</code></a>를 출력하는 프로그램은 프로그래밍 언어의 온 역사를 통틀어 첫 발걸음을 내딛을 때 암묵적으로 써야 하는 예제입니다. 하하.. 아무튼 축하드립니다!</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1040</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 16:59:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 07:59:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-13 22:52:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-13 13:52:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ec%84%a4%ec%b9%98-hello-world-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1196</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 파이썬의 선택 ~ 왜 파이썬인가? &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/131</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-28 17:41:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-28 08:41:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 파이썬 설치 – Hello World 출력하기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588063300.148249;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588064067.486507;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - Visual Studio Code의 편리한 기능]]></title>
		<link>https://elvanov.com/1084</link>
		<pubDate>Mon, 13 Jan 2020 11:06:45 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1084</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>우리는 앞으로 Visual Studio Code를 사용하시게 될 것입니다. 물론 다른 툴들도 각자 장단점이 있지만, 이 프로그램은 처음 시작하기에 무리없이 쉽고, 윈도우 뿐만 아니라 MacOS, Linux까지 지원하고 있어 더 다양한 상황에서 유용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>기본 단축키</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래는 다른 곳에서도 아주 잘 쓰이는 일반적인 단축키입니다. 컴퓨터로 열심히 일을 하는 현대인들에게는 친숙할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>단축키</th><th>기능</th></tr></thead><tbody><tr><td><code>Ctrl+A</code></td><td>전체 선택</td></tr><tr><td>선택 후&nbsp;<code>Ctrl+C</code></td><td>복사</td></tr><tr><td>선택 후&nbsp;<code>Ctrl+X</code></td><td>잘라내기</td></tr><tr><td><code>Ctrl+V</code></td><td>붙여넣기</td></tr><tr><td><code>Ctrl+S</code></td><td>저장</td></tr><tr><td><code>Ctrl+Shift+S</code></td><td>다른 이름으로 저장</td></tr><tr><td><code>Ctrl+Z</code></td><td>실행 취소 (undo)</td></tr><tr><td><code>Ctrl+Y</code></td><td>다시 실행 (redo)</td></tr><tr><td><code>Ctrl+N</code></td><td>새 파일</td></tr><tr><td><code>Ctrl+W</code></td><td>현재 창 닫기</td></tr><tr><td><code>Ctrl+F</code></td><td>검색</td></tr><tr><td><code>Ctrl+H</code></td><td>치환</td></tr><tr><td><code>Ctrl+Left</code>&nbsp;또는&nbsp;<code>Ctrl+Right</code></td><td>단어 단위로 커서 이동</td></tr><tr><td><code>Ctrl+Shift+Left</code>&nbsp;또는&nbsp;<code>Ctrl+Shift+Right</code></td><td>단어 단위로 커서를 이동하며 선택</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>파일 및 창</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>빠르게 열기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+P</code></li><li>기능 : 최근에 불러온 파일 등 파일이나 폴더를 빠르게 불러옵니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1799,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlp.gif" alt="" class="wp-image-1799"/><figcaption><em>빠르게 열기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>탭 전환하기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+Tab</code></li><li>기능 : 현재 열려 있는 탭(파일)을 전환합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1800,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrltab.gif" alt="" class="wp-image-1800"/><figcaption><em>탭 전환하기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>터미널(콘솔) 화면 아래쪽에서 오른쪽으로 옮기기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>사용 방법 : 터미널 제목 탭을 우클릭한 후&nbsp;<code>Move Panel Right</code>&nbsp;선택합니다.</li><li>기능 : 터미널(콘솔)이 있는 패널이 화면 오른쪽으로 이동합니다. 위아래가 비좁아서 불편할 때 사용하면 편리합니다. 아래 이미지를 참조해주세요.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ho.jpg" alt="터미널(콘솔) 화면 아래쪽에서 오른쪽으로 옮기기"/><figcaption><em>터미널(콘솔) 화면 아래쪽에서 오른쪽으로 옮기기</em></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>탐색 및 접근</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>줄 바로가기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+G</code></li><li>기능 : 숫자를 쓰면 해당 행(줄)으로 이동합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1801,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlg.gif" alt="" class="wp-image-1801"/><figcaption><em>줄 바로가기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>정의로 바로가기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>사용 방법 : 해당 이름을&nbsp;<code>Ctrl+Click</code>&nbsp;합니다.</li><li>기능 : 해당 이름의 정의 부분으로 즉시 이동합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_click_goto_definition.gif" alt="정의로 바로가기"/><figcaption><em>정의로 바로가기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>차례로 복수 선택하기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+D</code></li><li>기능 : 선택된 부분을 차례로 복수 선택합니다. 같은 단어를 한꺼번에 수정하고자 할 때 유용합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_d.gif" alt="차레로 복수 선택하기"/><figcaption><em>차례로 복수 선택하기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>커서 위/아래로 확장하기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+Alt+Up</code>&nbsp;또는&nbsp;<code>Ctrl+Alt+Down</code></li><li>기능 : 커서를 여러 개 확장하여 한꺼번에 수정할 수 있도록 합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_alt_up_and_down_multicursor.gif" alt="커서 위/아래로 확장하기"/><figcaption><em>커서 위/아래로 확장하기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>터미널과 편집 창 간 전환하기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+`</code></li><li>기능 : 마우스를 사용하지 않고 터미널(콘솔)과 편집 창 간 포커스를 전환합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1802,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/visual0-1.gif" alt="" class="wp-image-1802"/><figcaption><em>터미널과 편집 창 간 전환하기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>모든 파일에 걸쳐 검색</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+Shift+F</code></li><li>기능 : 현재 파일이 아니라 프로젝트 내에 있는 모든 파일에서 검색을 수행합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1803,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlshiftf.gif" alt="" class="wp-image-1803"/><figcaption><em>모든 파일에 걸쳐 검색</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>편집 및 수정</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>감싸기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>사용 방법 : 텍스트 선택 후&nbsp;<code>"'[{(</code>&nbsp;입력</li><li>기능 : 선택한 텍스트를 해당 문자로 감쌉니다.</li><li>예 :&nbsp;<code>안녕하세요</code>&nbsp;→&nbsp;<code>"안녕하세요"</code></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1804,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/bracket.gif" alt="" class="wp-image-1804"/><figcaption><em>감싸기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>문서 정렬하기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Alt+Shift+F</code></li><li>기능 : 코드를 문법에 맞게 예쁘게 정렬(포맷팅)시킵니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/shift_alt_f.gif" alt="문서 정렬하기"/><figcaption><em>문서 정렬하기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>선택된 부분을 주석 처리하기 및 풀기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+/</code></li><li>기능 : 선택된 부분을 문법에 맞게 전부 주석처리 합니다. 이미 주석 처리되어 있을 경우 주석을 해제합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1805,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlslash.gif" alt="" class="wp-image-1805"/><figcaption><em>선택된 부분을 주석 처리하기 및 풀기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>줄 하나 옮기기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Alt+Up</code>&nbsp;또는&nbsp;<code>Alt+Down</code></li><li>기능 : 한 줄을 통째로 위/아래로 옮깁니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/alt_up_and_down.gif" alt="줄 하나 옮기기"/><figcaption><em>줄 하나 옮기기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>줄 하나 잘라내기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>사용 방법 : 아무 것도 선택하지 않고 커서를 둔 채로&nbsp;<code>Ctrl+X</code>를 누릅니다.</li><li>기능 : 한 줄을 통째로 잘라냅니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1806,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrlx.gif" alt="" class="wp-image-1806"/><figcaption><em>줄 하나 잘라내기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>기능 보조</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>명령 팔레트 (Command Palette) 열기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>단축키 :&nbsp;<code>Ctrl+Shift+P</code></li><li>기능 : 현재 상황에 맞는 명령을 빠르게 검색 및 사용할 수 있습니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_shift_p.gif" alt="명령 팔레트"/><figcaption><em>명령 팔레트</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>자동 완성 목록 보기</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>사용 방법 : 적절한 곳에 커서를 두고&nbsp;<code>Ctrl+Space</code>를 누릅니다.</li><li>기능 : 자동 완성(Intellisense)할 수 있는 목록을 보여줍니다.</li></ul>
<!-- /wp:list -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/01/ctrl_space.gif" alt=""/><figcaption><em>자동 완성 목록 보기</em></figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>레퍼런스 및 출처</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks">공식 문서 – 팁과 트릭 (영문)</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1084</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 20:06:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 11:06:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 18:37:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 09:37:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-visual-studio-code%ec%9d%98-%ed%8e%b8%eb%a6%ac%ed%95%9c-%ea%b8%b0%eb%8a%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - REPL과 콘솔 창 ~ 파이썬 동작시키기]]></title>
		<link>https://elvanov.com/1122</link>
		<pubDate>Mon, 13 Jan 2020 14:52:57 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1122</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## REPL\n\nREPL이란, Read Eval Print Loop의 준말으로서, 간단히 이야기하여 실시간으로 프로그래밍할 수 있는 환경을 뜻합니다. 파이썬과 같이 인터프리터 기반의 언어에서 사용될 수 있습니다. 파이썬 소스 코드 파일을 따로 생성하고 저장할 필요 없이 간단한 기능을 테스트하기에 좋습니다.\n\n![IDLE 실행하기 (윈도우)](/elvanov/wp-content/uploads/2020/01/ac1.jpg)\n*IDLE 실행하기 (윈도우)*\n\n우선 [파이썬을 설치](1040)한 후 `idle`을 검색하여 실행시켜보세요. 윈도우는 시작 메뉴에서 바로 검색할 수 있습니다. 그럼 아래와 같은 창이 뜹니다.\n\n![IDLE 실행 창](/elvanov/wp-content/uploads/2020/01/ac2.jpg)\n*IDLE 실행 창*\n\n입력할 때 꺽새 세 개(`\u003e\u003e\u003e`)를 꼭 기억해주세요. 이 꺽새가 있다면 REPL 모드인 것이고, 없다면 일반 콘솔 코드인 것입니다. 아래에서 한번 더 설명합니다.\n\n여기에서는 파이썬 코드를 바로 써넣어갈 수 있습니다. 앞으로 코드를 다양하게 작성하시게 될 테지만, 이 REPL은 이전에 써넣은 것들을 기억할 수 있어서 실제 파이썬 소스 코드 파일(`.py`)에 코드를 써넣은 것과 같은 효과를 발휘합니다. 그렇지만 창을 닫게 되면 모든 작업 내역이 사라집니다. 그러므로 간단한 작업만 하실 수 있다는 것을 꼭 유념해주세요.\n\n\u002d\u002d-\n\n## 콘솔 창\n\n우리가 앞서 [콘솔](/128#%EB%AA%85%EB%A0%B9+%EC%A4%84+%\u002d\u002d2)에 대해 이야기를 할 때 기억하시나요? 어차피 우리가 만든 코드는 GUI를 구현하지 않아서 콘솔에서 모두 실행시켜야 한다고 했습니다. 실제로 우리가 실행 버튼을 누르게 되면 Visual Studio Code는 다음과 같은 과정을 수행합니다.\n\n1. 작성하고 있던 파이썬 소스 코드 파일(`.py`)을 저장합니다.\n1. 임의의 콘솔 창에 해당 파일을 실행시키도록 명령을 입력합니다. (실행되고 있던 콘솔이 없다면 임의의 콘솔을 새롭게 실행시킵니다.)\n1. 우리가 작성한 코드가 결과로 나타납니다.\n\n앞선 시간에서는 우리가 직접 `cmd` 프로그램을 통해서 콘솔 창을 잠시나마 구경했었는데요, 우리가 사용하는 Visual Studio Code 에는 자체적으로 콘솔 창을 운용합니다. 바로 ``Ctrl+` `` [단축키](1084)를 통해 콘솔 창으로 옮겨갈 수 있습니다. 한번 더 해당 단축키를 누르면 원래 편집 창으로 돌아갑니다. 아래 이미지에서 새롭게 나타나는 패널의 제목이 `Terminal`이죠? 터미널은 콘솔과 같은 말입니다!\n\n![콘솔 창 전환하기](/elvanov/wp-content/uploads/2020/01/visual0.gif)\n*콘솔 창 전환하기*\n\n여기 콘솔 창에서도 REPL을 사용할 수 있는데요, 바로 `python`이라고 입력 후 `Enter`를 누르면 됩니다. 아래 이미지처럼 꺽새 세 개(`\u003e\u003e\u003e`)가 나타납니다. 우리가 아까 전에 idle을 통해 코드를 입력할 수 있던 것과 완전히 동일합니다.\n\n![콘솔 창에서 REPL 실행시키기](/elvanov/wp-content/uploads/2020/01/visual1.gif)\n*콘솔 창에서 REPL 실행시키기*\n\n이 REPL을 종료하려면 아래 이미지와 같이 exit()을 입력하면 됩니다.\n\n![콘솔 창에서 REPL 종료하기](/elvanov/wp-content/uploads/2020/01/visual2.gif)\n*콘솔 창에서 REPL 종료하기*\n\n이 흐름을 순서도로 표현하면 다음과 같습니다.\n\n```mermaid-execute\ngraph LR\na1[\u0022Visual\u003cbr\u003eStudio\u003cbr\u003eCode\u0022]\u002d\u002d\u003e|파일 실행|a2[\u0022자체운용\u003cbr\u003e콘솔 창\u003cbr\u003e(Terminal)\u0022]\na2\u002d\u002d\u003e|\u0022python 작성 후 Enter\u0022|a3[\u0022REPL\u0022]\na3\u002d\u002d\u003e|\u0022exit() 작성 후 Enter\u0022|a2\na1-.-\u003e|\u0022유효한 명령이 아니라서 에러\u0022|a3\n```\n*Visual Studio Code, 콘솔 창, REPL 순서도*\n\n\u002d\u002d-\n\n## REPL 실행 상태를 확실히 구분합시다.\n\n만약 REPL이 실행된 상태에서 파이썬 파일을 실행하려고 하면 오류가 납니다. 왜냐하면 앞서 설명한 것처럼 이미 실행중인 콘솔 창에 해당 파일을 실행시키도록 명령을 입력하는데, REPL 상태에서는 파이썬 코드만이 유효한 코드이며, 파일을 실행시키는 명령은 유효하지 않기 때문입니다. 그러므로 아래와 같이 `exit()`이라고 작성하여 REPL을 종료한 후에 파이썬 파일을 실행해야 합니다. 꺽새 세 개(`\u003e\u003e\u003e`)가 보인다면 REPL 상태이므로 종료를 해주도록 합시다.\n\n![REPL이 실행중인 상태에서는 파이썬 파일을 실행할 수 없습니다.](/elvanov/wp-content/uploads/2020/01/visual3.gif)\n*REPL이 실행중인 상태에서는 파이썬 파일을 실행할 수 없습니다.*\n\n\n\u002d\u002d-\n\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>REPL</h2>
<p>REPL이란, Read Eval Print Loop의 준말으로서, 간단히 이야기하여 실시간으로 프로그래밍할 수 있는 환경을 뜻합니다. 파이썬과 같이 인터프리터 기반의 언어에서 사용될 수 있습니다. 파이썬 소스 코드 파일을 따로 생성하고 저장할 필요 없이 간단한 기능을 테스트하기에 좋습니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/ac1.jpg" alt="IDLE 실행하기 (윈도우)">
<em>IDLE 실행하기 (윈도우)</em></p>
<p>우선 <a href="1040">파이썬을 설치</a>한 후 <code>idle</code>을 검색하여 실행시켜보세요. 윈도우는 시작 메뉴에서 바로 검색할 수 있습니다. 그럼 아래와 같은 창이 뜹니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/ac2.jpg" alt="IDLE 실행 창">
<em>IDLE 실행 창</em></p>
<p>입력할 때 꺽새 세 개(<code>&gt;&gt;&gt;</code>)를 꼭 기억해주세요. 이 꺽새가 있다면 REPL 모드인 것이고, 없다면 일반 콘솔 코드인 것입니다. 아래에서 한번 더 설명합니다.</p>
<p>여기에서는 파이썬 코드를 바로 써넣어갈 수 있습니다. 앞으로 코드를 다양하게 작성하시게 될 테지만, 이 REPL은 이전에 써넣은 것들을 기억할 수 있어서 실제 파이썬 소스 코드 파일(<code>.py</code>)에 코드를 써넣은 것과 같은 효과를 발휘합니다. 그렇지만 창을 닫게 되면 모든 작업 내역이 사라집니다. 그러므로 간단한 작업만 하실 수 있다는 것을 꼭 유념해주세요.</p>
<hr>
<h2>콘솔 창</h2>
<p>우리가 앞서 <a href="/128#%EB%AA%85%EB%A0%B9+%EC%A4%84+%25--2">콘솔</a>에 대해 이야기를 할 때 기억하시나요? 어차피 우리가 만든 코드는 GUI를 구현하지 않아서 콘솔에서 모두 실행시켜야 한다고 했습니다. 실제로 우리가 실행 버튼을 누르게 되면 Visual Studio Code는 다음과 같은 과정을 수행합니다.</p>
<ol>
<li>작성하고 있던 파이썬 소스 코드 파일(<code>.py</code>)을 저장합니다.</li>
<li>임의의 콘솔 창에 해당 파일을 실행시키도록 명령을 입력합니다. (실행되고 있던 콘솔이 없다면 임의의 콘솔을 새롭게 실행시킵니다.)</li>
<li>우리가 작성한 코드가 결과로 나타납니다.</li>
</ol>
<p>앞선 시간에서는 우리가 직접 <code>cmd</code> 프로그램을 통해서 콘솔 창을 잠시나마 구경했었는데요, 우리가 사용하는 Visual Studio Code 에는 자체적으로 콘솔 창을 운용합니다. 바로 <code>Ctrl+`</code> <a href="1084">단축키</a>를 통해 콘솔 창으로 옮겨갈 수 있습니다. 한번 더 해당 단축키를 누르면 원래 편집 창으로 돌아갑니다. 아래 이미지에서 새롭게 나타나는 패널의 제목이 <code>Terminal</code>이죠? 터미널은 콘솔과 같은 말입니다!</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/visual0.gif" alt="콘솔 창 전환하기">
<em>콘솔 창 전환하기</em></p>
<p>여기 콘솔 창에서도 REPL을 사용할 수 있는데요, 바로 <code>python</code>이라고 입력 후 <code>Enter</code>를 누르면 됩니다. 아래 이미지처럼 꺽새 세 개(<code>&gt;&gt;&gt;</code>)가 나타납니다. 우리가 아까 전에 idle을 통해 코드를 입력할 수 있던 것과 완전히 동일합니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/visual1.gif" alt="콘솔 창에서 REPL 실행시키기">
<em>콘솔 창에서 REPL 실행시키기</em></p>
<p>이 REPL을 종료하려면 아래 이미지와 같이 exit()을 입력하면 됩니다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/visual2.gif" alt="콘솔 창에서 REPL 종료하기">
<em>콘솔 창에서 REPL 종료하기</em></p>
<p>이 흐름을 순서도로 표현하면 다음과 같습니다.</p>
<pre><code class="language-mermaid-execute">graph LR
a1[&quot;Visual&lt;br&gt;Studio&lt;br&gt;Code&quot;]--&gt;|파일 실행|a2[&quot;자체운용&lt;br&gt;콘솔 창&lt;br&gt;(Terminal)&quot;]
a2--&gt;|&quot;python 작성 후 Enter&quot;|a3[&quot;REPL&quot;]
a3--&gt;|&quot;exit() 작성 후 Enter&quot;|a2
a1-.-&gt;|&quot;유효한 명령이 아니라서 에러&quot;|a3
</code></pre>
<p><em>Visual Studio Code, 콘솔 창, REPL 순서도</em></p>
<hr>
<h2>REPL 실행 상태를 확실히 구분합시다.</h2>
<p>만약 REPL이 실행된 상태에서 파이썬 파일을 실행하려고 하면 오류가 납니다. 왜냐하면 앞서 설명한 것처럼 이미 실행중인 콘솔 창에 해당 파일을 실행시키도록 명령을 입력하는데, REPL 상태에서는 파이썬 코드만이 유효한 코드이며, 파일을 실행시키는 명령은 유효하지 않기 때문입니다. 그러므로 아래와 같이 <code>exit()</code>이라고 작성하여 REPL을 종료한 후에 파이썬 파일을 실행해야 합니다. 꺽새 세 개(<code>&gt;&gt;&gt;</code>)가 보인다면 REPL 상태이므로 종료를 해주도록 합시다.</p>
<p><img src="/elvanov/wp-content/uploads/2020/01/visual3.gif" alt="REPL이 실행중인 상태에서는 파이썬 파일을 실행할 수 없습니다.">
<em>REPL이 실행중인 상태에서는 파이썬 파일을 실행할 수 없습니다.</em></p>
<hr>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1122</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 23:52:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 14:52:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 23:16:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 14:16:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-repl%ea%b3%bc-%ec%bd%98%ec%86%94-%ec%b0%bd-%ed%8c%8c%ec%9d%b4%ec%8d%ac-%eb%8f%99%ec%9e%91%ec%8b%9c%ed%82%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5966</wp:comment_id>
			<wp:comment_author><![CDATA[Jay]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[riaksjdki@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.187.131.25]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-15 18:32:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-15 09:32:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1613534769.81633;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1613381523.109393;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 정규 표현식 ~ 문자열을 검색하고 치환하기]]></title>
		<link>https://elvanov.com/1160</link>
		<pubDate>Tue, 14 Jan 2020 14:58:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1160</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"\u002d\u002d-\n\n## 정규 표현식이 필요한 이유\n\n드론 덕후인 김철수 씨는 [항공안전기술원의 드론업체 현황](https://www.kiast.or.kr/kr/sub06_04_01.do) 의 데이터를 소장하고 싶습니다. 그러나 한꺼번에 복사-붙여넣기를 시도하려고 해도 다음과 같은 텍스트로 밖에 붙여 넣어지지 않았습니다. 이를 유의미한 데이터로 갖고 싶습니다. 일일히 하나하나 복사-붙여넣기를 해야 할까요? 그렇지만 다행히도 김철수 씨는 파이썬을 사용할 줄 압니다. 어떻게든 되지 않을까요?\n\n```plaintext\n번호/업체명/모델명/용도/연락처/홈페이지\n1/그리폰 다이나믹스/XD-1700SP, HD-2400SP/물품수송, 촬영, 국토조사, 감시정찰/053-983-1793/http://www.gryphondynamics.co.kr\n2/㈜네스앤텍/SWID series, STINGRAY/촬영, 감시정찰, 경비/042-932-8086/http://www.nesnt.com\n3/네온테크/ND-810, ND-820, ND-FW2H/물품수송, 감시정찰, 촬영, 국토조사/070-5090-2092/http://www.neontech.co.kr\n4/두시텍/KnDrone 480S, KnDroneX/촬영, 수색/구조, 경비, 기타/042-280-1400/http://www.dusi.co.kr\n5/베셀/SCANNER-MC1/물품수송, 안전진단, 경비, 수색/구조, 하천감시/031-8092-0865/http://www.vessel21.com\n6/샘코/듀오드론, 폭스레이/국토조사, 촬영, 경비, 수색/구조, 기타/055-850-7787/http://www.samcokorea.com\n...\n```\n\n단순한 텍스트의 나열에서 어떻게 유의미한 텍스트를 뽑아낼 것인가가 관건입니다. 어떻게 하면 좋을까요? 바로 정규 표현식을 이용해보는 것입니다!\n\n\u002d\u002d-\n\n## 정규 표현식\n\n**정규 표현식**이란 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어(위키백과)이며, 줄여서 정규식이라고도 합니다. 영어로는 Regular Expression 이며, 줄여서 regex라고도 합니다. 특정한 규칙이 있는 문자열을 다루기 쉽게 해주는 편리한 도구라고 생각하시면 됩니다!\n\n이 정규식에도 특별한 문법이 있습니다. 물론 외워야 잘 쓸 수 있겠지요? 정규식은 문자열을 다루게 되는 상황이면 거의 예외없이 사용해야 합니다. 또한 모든 프로그래밍 언어에 걸쳐서 지원하기 때문에 범용성 또한 두말 할 나위 없지요. \n\n정규식은 프로그래밍 세계에서 아주 유명한 녀석입니다. 그만큼 설명하는 문서도 아주 많습니다. 아무래도 제가 작성하는 글들 보다는 좀 더 검증된 글들이 많으니 레퍼런스를 아래 쪽에 남겨두겠습니다. \n\n\u002d\u002d-\n\n## 패턴\n\n정규식에서의 패턴은 문법이라고 생각하시면 됩니다. 우선 패턴은 설명하기 까다로우므로 일괄적으로 설명한 후에 예시를 위주로 살펴보겠습니다. 패턴은 다음과 같은 특수한 용도의 문자와, 일반적으로 찾을 문자로 구분됩니다.\n\n- 특수 용도 문자 : `.  []  *  +  ?  {}  ^  $  ()  |`\n- 일반 문자 : abcd 등등\n\n\u002d\u002d-\n\n### 문자 하나를 대변하기\n\n#### 모든 문자\n\n- **사용하는 방법 : `.`**\n- 설명 : 모든 종류의 문자 **하나**를 대변합니다. (단, 줄바꿈 문자는 옵션을 수정해야야 합니다.)\n\n#### 아무 거나 하나의 글자\n\n- **사용하는 방법 : `[사용할 문자들]`**\n- 설명 : \n   - 대괄호(`[]`) 안에 있는 문자 중 아무 거나 **하나**의 글자를 대변합니다. \n   - 하이픈(`-`)을 통해 범위를 지정할 수 있습니다. 예를 들어 `[a-z]`라면 모든 영문 소문자를 대변합니다. `[a-zA-Z0-9]` 처럼 여러 범위도 지정 가능합니다.\n   - 대괄호가 시작할 때 `^`를 넣어주면 결과가 반전이 됩니다. 예를 들어 `[^abc]`라면 하나의 글자는 들어가지만 a, b, c가 아닌 것들에 대해 대응됩니다.\n   - 대소문자 구분 됩니다.\n- 예시\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`b[aei]d`|`bad`, `bed`, `bid`|`bod`, `bd`, `bAd` 등|\n|`hi[1-9]`|`hi1`, `hi2`, ... , `hi9`|`hi0`, `hi` 등|\n|`b[a-z]d`|`bad`, `bbd`, ... , `bzd`|`bd`, `bAd`, `bAad` 등|\n|`b[A-Za-z]d`|`bad`, `bbd`, ... , `bzd`, `bAd`, `bBd`, ... `bZd`|`bd`,  `bAad` 등|\n|`b[^aei]d`|`bbd`, `bEd`, `bzd` 등|`bad`, `bed`, `bid`, `bd` 등|\n\n\u002d\u002d-\n\n### 문자가 얼마나 반복되는지 지정하기\n\n여기서 나오는 문법들은 **바로 앞의 문자나 그룹**에 대해 작용합니다. 예시를 보면서 살펴봅시다.\n\n#### 0번 이상 반복한다\n\n- **사용하는 방법 : `대상문자*`**\n- 예시\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`bc*d`|`bd`, `bcd`, `bcccd` 등|`bcad`등|\n|`oh[5-9]*s`|`oh59786969666s`, `ohs` 등|`oh89`, `oh762s` 등|\n\n#### 1번 이상 반복한다\n\n- **사용하는 방법 : `대상문자+`**\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`bc+d`|`bcd`, `bcccd` 등|`bd`, `bcad`등|\n|`oh[5-9]+s`|`oh59786969666s` 등|`oh89`, `oh762s`, `ohs` 등|\n\n#### 0번 또는 1번 반복한다 \n\n- **사용하는 방법 : `대상문자?`**\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`bc?d`|`bcd`, `bd` 등|`bccd` 등|\n|`oh[5-9]?s`|`oh5s`, `oh8s`, `ohs` 등|`oh89s`, `oh2s`, 등|\n\n#### n번에서 m번 만큼 반복한다\n\n- **사용하는 방법 : `대상문자{m,n}`**\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`bc{2,4}d`|`bccd`, `bcccd`, `bccccd`|`bcd`, `bcccccd` 등|\n|`oh[5-9]{2,4}s`|`oh586s`, `oh87s` 등|`oh89987s`, `oh27s`, 등|\n\n\u002d\u002d-\n\n### 특수한 위치\n\n#### 시작 지점\n\n- **사용법: `^패턴`**\n- `^`는 시작 지점을 뜻합니다. 즉 검사할 문자열의 가장 시작부터 탐색합니다. 예를 들어 `^.{3}`는 시작 지점에서 아무 3개의 문자에 대응됩니다.\n\n#### 끝 지점\n\n- **사용법 : `패턴$`**\n- 설명 : `$`는 끝 지점을 뜻합니다. 즉 검사할 문자열의 가장 끝에서부터 탐색합니다. 예를 들어 `.{3}$`는 끝에서 아무 3개의 문자에 대응됩니다.\n\n### 그룹\n\n- **사용법 : `(묶을패턴)`**\n- 설명 : 반복 지정(`*`, `+`, `?`, `{}`)을 그룹 기준으로 하게 해줄 수도 있고, 캡처를 통해 치환 시 유용하게 쓸 수 있습니다.\n- 예시\n\n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`a(bc)+d`|`abcd`, `abcbcd` 등|`bcd`, `bcccccd` 등|\n|`oh[5-9]{2,4}s`|`oh586s`, `oh87s` 등|`oh89987s`, `oh27s`, 등|\n\n\n### 또는\n\n- **사용법 : `패턴|패턴`**\n- 설명 : A 또는 B를 만족시키는 패턴을 만듭니다. 그룹(`(패턴)`)내에서도 사용될 수 있습니다.\n \n|패턴|만족|불만족|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`aoc|abd`|`aoc`, `abd` |`aocd` 등|\n|`o(st|m)o`|`osto`, `omo` |`oso` 등|\n\n\u002d\u002d-\n\n## 이메일 찾아보기\n\n\u002d\u002d-\n\n## 파이썬에서 정규식 이용해보기\n\n```mermaid-execute\ngraph TD\nstr[\u0022정규 표현식이\u003cbr\u003e적힌 문자열\u003cbr\u003e(str)\u0022] \u002d\u002d\u003e|\u0022re.compile('패턴')\u0022|pattern[\u0022패턴\u003cbr\u003epattern\u0022]\npattern\u002d\u002d\u003e|\u0022match('대상문자열')\u0022|matchbefore[\u0022문자열\u003cbr\u003e처음부터\u003cbr\u003e검사 \u003cbr\u003e\u0022]\nmatchbefore \u002d\u002d\u003e ismatch{\u0022일치하는\u003cbr\u003e패턴이\u003cbr\u003e있는가?\u0022}\npattern\u002d\u002d\u003e|\u0022search('대상문자열')\u0022|searchbefore[\u0022문자열\u003cbr\u003e전체를\u003cbr\u003e검사\u0022]\nsearchbefore \u002d\u002d\u003e ismatch\nismatch \u002d\u002d\u003e |\u0022있다\u0022|match\nismatch \u002d\u002d\u003e |\u0022없다\u0022|none[\u0022None\u0022]\npattern\u002d\u002d\u003e|\u0022findall('대상문자열')\u0022|findall[\u0022발견된 모든 문자열\u003cbr\u003e리스트 반환\u0022]\npattern\u002d\u002d\u003e|\u0022finditer('대상문자열')\u0022|finditer[\u0022iterable 반환\u0022]\npattern\u002d\u002d\u003e|\u0022sub(to, from)\u0022|sub[\u0022from에서 to로\u003cbr\u003e치환한 문자열\u003cbr\u003e반환\u0022]\nfinditer\u002d\u002d\u003eiter[\u0022for 등으로\u003cbr\u003e차례로 match에\u003cbr\u003e접근 가능\u0022]\niter\u002d\u002d\u003ematch\nmatch[\u0022검색 결과\u003cbr\u003e(match)\u0022] \u002d\u002d\u003e |\u0022span()\u0022|span[\u0022결과의 위치값\u003cbr\u003e(시작, 끝)  튜플\u0022]\nmatch\u002d\u002d\u003e|\u0022group()\u0022|group[\u0022결과 문자열\u0022]\nmatch\u002d\u002d\u003e|\u0022start()\u0022|start[\u0022결과의 시작 위치\u003cbr\u003e(인덱스)\u0022]\nmatch\u002d\u002d\u003e|\u0022end()\u0022|en[\u0022결과의 끝 위치\u003cbr\u003e(인덱스)\u0022]\nclass match,pattern em\n```\n*파이썬에서 정규식을 사용하는 방법*\n\n\u002d\u002d-\n\n## 레퍼런스\n\n- [Mozila 자바스크립트 안내서의 정규 표현식](https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D)\n- [Regex One - 정규 표현식 자습 사이트 (영문)](https://regexone.com/)\n\n## 연습 문제\n\n1. 정규 표현식을 줄여서 무엇이라고 하는가?\n1. 정규 표현식을 영어로 하면 무엇인가?\n1. 패턴에 쓰이는 다음 특수문자가 무엇인지 설명하라 -\u003e `. [] * + ? {} ^ $ () |`\n1. 다음 패턴이 무엇을 의미하는지 설명하라\n   1. `photo[0-9][0-9]?`\n   1. `01[0-9]-[0-9]{3,4}-[0-9]{4}`\n\n"} -->
<div class="wp-block-jetpack-markdown"><hr>
<h2>정규 표현식이 필요한 이유</h2>
<p>드론 덕후인 김철수 씨는 <a href="https://www.kiast.or.kr/kr/sub06_04_01.do">항공안전기술원의 드론업체 현황</a> 의 데이터를 소장하고 싶습니다. 그러나 한꺼번에 복사-붙여넣기를 시도하려고 해도 다음과 같은 텍스트로 밖에 붙여 넣어지지 않았습니다. 이를 유의미한 데이터로 갖고 싶습니다. 일일히 하나하나 복사-붙여넣기를 해야 할까요? 그렇지만 다행히도 김철수 씨는 파이썬을 사용할 줄 압니다. 어떻게든 되지 않을까요?</p>
<pre><code class="language-plaintext">번호/업체명/모델명/용도/연락처/홈페이지
1/그리폰 다이나믹스/XD-1700SP, HD-2400SP/물품수송, 촬영, 국토조사, 감시정찰/053-983-1793/http://www.gryphondynamics.co.kr
2/㈜네스앤텍/SWID series, STINGRAY/촬영, 감시정찰, 경비/042-932-8086/http://www.nesnt.com
3/네온테크/ND-810, ND-820, ND-FW2H/물품수송, 감시정찰, 촬영, 국토조사/070-5090-2092/http://www.neontech.co.kr
4/두시텍/KnDrone 480S, KnDroneX/촬영, 수색/구조, 경비, 기타/042-280-1400/http://www.dusi.co.kr
5/베셀/SCANNER-MC1/물품수송, 안전진단, 경비, 수색/구조, 하천감시/031-8092-0865/http://www.vessel21.com
6/샘코/듀오드론, 폭스레이/국토조사, 촬영, 경비, 수색/구조, 기타/055-850-7787/http://www.samcokorea.com
...
</code></pre>
<p>단순한 텍스트의 나열에서 어떻게 유의미한 텍스트를 뽑아낼 것인가가 관건입니다. 어떻게 하면 좋을까요? 바로 정규 표현식을 이용해보는 것입니다!</p>
<hr>
<h2>정규 표현식</h2>
<p><strong>정규 표현식</strong>이란 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어(위키백과)이며, 줄여서 정규식이라고도 합니다. 영어로는 Regular Expression 이며, 줄여서 regex라고도 합니다. 특정한 규칙이 있는 문자열을 다루기 쉽게 해주는 편리한 도구라고 생각하시면 됩니다!</p>
<p>이 정규식에도 특별한 문법이 있습니다. 물론 외워야 잘 쓸 수 있겠지요? 정규식은 문자열을 다루게 되는 상황이면 거의 예외없이 사용해야 합니다. 또한 모든 프로그래밍 언어에 걸쳐서 지원하기 때문에 범용성 또한 두말 할 나위 없지요.</p>
<p>정규식은 프로그래밍 세계에서 아주 유명한 녀석입니다. 그만큼 설명하는 문서도 아주 많습니다. 아무래도 제가 작성하는 글들 보다는 좀 더 검증된 글들이 많으니 레퍼런스를 아래 쪽에 남겨두겠습니다.</p>
<hr>
<h2>패턴</h2>
<p>정규식에서의 패턴은 문법이라고 생각하시면 됩니다. 우선 패턴은 설명하기 까다로우므로 일괄적으로 설명한 후에 예시를 위주로 살펴보겠습니다. 패턴은 다음과 같은 특수한 용도의 문자와, 일반적으로 찾을 문자로 구분됩니다.</p>
<ul>
<li>특수 용도 문자 : <code>. [] * + ? {} ^ $ () |</code></li>
<li>일반 문자 : abcd 등등</li>
</ul>
<hr>
<h3>문자 하나를 대변하기</h3>
<h4>모든 문자</h4>
<ul>
<li><strong>사용하는 방법 : <code>.</code></strong></li>
<li>설명 : 모든 종류의 문자 <strong>하나</strong>를 대변합니다. (단, 줄바꿈 문자는 옵션을 수정해야야 합니다.)</li>
</ul>
<h4>아무 거나 하나의 글자</h4>
<ul>
<li><strong>사용하는 방법 : <code>[사용할 문자들]</code></strong></li>
<li>설명 :
<ul>
<li>대괄호(<code>[]</code>) 안에 있는 문자 중 아무 거나 <strong>하나</strong>의 글자를 대변합니다.</li>
<li>하이픈(<code>-</code>)을 통해 범위를 지정할 수 있습니다. 예를 들어 <code>[a-z]</code>라면 모든 영문 소문자를 대변합니다. <code>[a-zA-Z0-9]</code> 처럼 여러 범위도 지정 가능합니다.</li>
<li>대괄호가 시작할 때 <code>^</code>를 넣어주면 결과가 반전이 됩니다. 예를 들어 <code>[^abc]</code>라면 하나의 글자는 들어가지만 a, b, c가 아닌 것들에 대해 대응됩니다.</li>
<li>대소문자 구분 됩니다.</li>
</ul>
</li>
<li>예시</li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>b[aei]d</code></td>
<td><code>bad</code>, <code>bed</code>, <code>bid</code></td>
<td><code>bod</code>, <code>bd</code>, <code>bAd</code> 등</td>
</tr>
<tr>
<td><code>hi[1-9]</code></td>
<td><code>hi1</code>, <code>hi2</code>, ... , <code>hi9</code></td>
<td><code>hi0</code>, <code>hi</code> 등</td>
</tr>
<tr>
<td><code>b[a-z]d</code></td>
<td><code>bad</code>, <code>bbd</code>, ... , <code>bzd</code></td>
<td><code>bd</code>, <code>bAd</code>, <code>bAad</code> 등</td>
</tr>
<tr>
<td><code>b[A-Za-z]d</code></td>
<td><code>bad</code>, <code>bbd</code>, ... , <code>bzd</code>, <code>bAd</code>, <code>bBd</code>, ... <code>bZd</code></td>
<td><code>bd</code>,  <code>bAad</code> 등</td>
</tr>
<tr>
<td><code>b[^aei]d</code></td>
<td><code>bbd</code>, <code>bEd</code>, <code>bzd</code> 등</td>
<td><code>bad</code>, <code>bed</code>, <code>bid</code>, <code>bd</code> 등</td>
</tr>
</tbody>
</table>
<hr>
<h3>문자가 얼마나 반복되는지 지정하기</h3>
<p>여기서 나오는 문법들은 <strong>바로 앞의 문자나 그룹</strong>에 대해 작용합니다. 예시를 보면서 살펴봅시다.</p>
<h4>0번 이상 반복한다</h4>
<ul>
<li><strong>사용하는 방법 : <code>대상문자*</code></strong></li>
<li>예시</li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bc*d</code></td>
<td><code>bd</code>, <code>bcd</code>, <code>bcccd</code> 등</td>
<td><code>bcad</code>등</td>
</tr>
<tr>
<td><code>oh[5-9]*s</code></td>
<td><code>oh59786969666s</code>, <code>ohs</code> 등</td>
<td><code>oh89</code>, <code>oh762s</code> 등</td>
</tr>
</tbody>
</table>
<h4>1번 이상 반복한다</h4>
<ul>
<li><strong>사용하는 방법 : <code>대상문자+</code></strong></li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bc+d</code></td>
<td><code>bcd</code>, <code>bcccd</code> 등</td>
<td><code>bd</code>, <code>bcad</code>등</td>
</tr>
<tr>
<td><code>oh[5-9]+s</code></td>
<td><code>oh59786969666s</code> 등</td>
<td><code>oh89</code>, <code>oh762s</code>, <code>ohs</code> 등</td>
</tr>
</tbody>
</table>
<h4>0번 또는 1번 반복한다</h4>
<ul>
<li><strong>사용하는 방법 : <code>대상문자?</code></strong></li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bc?d</code></td>
<td><code>bcd</code>, <code>bd</code> 등</td>
<td><code>bccd</code> 등</td>
</tr>
<tr>
<td><code>oh[5-9]?s</code></td>
<td><code>oh5s</code>, <code>oh8s</code>, <code>ohs</code> 등</td>
<td><code>oh89s</code>, <code>oh2s</code>, 등</td>
</tr>
</tbody>
</table>
<h4>n번에서 m번 만큼 반복한다</h4>
<ul>
<li><strong>사용하는 방법 : <code>대상문자{m,n}</code></strong></li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bc{2,4}d</code></td>
<td><code>bccd</code>, <code>bcccd</code>, <code>bccccd</code></td>
<td><code>bcd</code>, <code>bcccccd</code> 등</td>
</tr>
<tr>
<td><code>oh[5-9]{2,4}s</code></td>
<td><code>oh586s</code>, <code>oh87s</code> 등</td>
<td><code>oh89987s</code>, <code>oh27s</code>, 등</td>
</tr>
</tbody>
</table>
<hr>
<h3>특수한 위치</h3>
<h4>시작 지점</h4>
<ul>
<li><strong>사용법: <code>^패턴</code></strong></li>
<li><code>^</code>는 시작 지점을 뜻합니다. 즉 검사할 문자열의 가장 시작부터 탐색합니다. 예를 들어 <code>^.{3}</code>는 시작 지점에서 아무 3개의 문자에 대응됩니다.</li>
</ul>
<h4>끝 지점</h4>
<ul>
<li><strong>사용법 : <code>패턴$</code></strong></li>
<li>설명 : <code>$</code>는 끝 지점을 뜻합니다. 즉 검사할 문자열의 가장 끝에서부터 탐색합니다. 예를 들어 <code>.{3}$</code>는 끝에서 아무 3개의 문자에 대응됩니다.</li>
</ul>
<h3>그룹</h3>
<ul>
<li><strong>사용법 : <code>(묶을패턴)</code></strong></li>
<li>설명 : 반복 지정(<code>*</code>, <code>+</code>, <code>?</code>, <code>{}</code>)을 그룹 기준으로 하게 해줄 수도 있고, 캡처를 통해 치환 시 유용하게 쓸 수 있습니다.</li>
<li>예시</li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a(bc)+d</code></td>
<td><code>abcd</code>, <code>abcbcd</code> 등</td>
<td><code>bcd</code>, <code>bcccccd</code> 등</td>
</tr>
<tr>
<td><code>oh[5-9]{2,4}s</code></td>
<td><code>oh586s</code>, <code>oh87s</code> 등</td>
<td><code>oh89987s</code>, <code>oh27s</code>, 등</td>
</tr>
</tbody>
</table>
<h3>또는</h3>
<ul>
<li><strong>사용법 : <code>패턴|패턴</code></strong></li>
<li>설명 : A 또는 B를 만족시키는 패턴을 만듭니다. 그룹(<code>(패턴)</code>)내에서도 사용될 수 있습니다.</li>
</ul>
<table>
<thead>
<tr>
<th>패턴</th>
<th>만족</th>
<th>불만족</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>aoc|abd</code></td>
<td><code>aoc</code>, <code>abd</code></td>
<td><code>aocd</code> 등</td>
</tr>
<tr>
<td><code>o(st|m)o</code></td>
<td><code>osto</code>, <code>omo</code></td>
<td><code>oso</code> 등</td>
</tr>
</tbody>
</table>
<hr>
<h2>이메일 찾아보기</h2>
<hr>
<h2>파이썬에서 정규식 이용해보기</h2>
<pre><code class="language-mermaid-execute">graph TD
str[&quot;정규 표현식이&lt;br&gt;적힌 문자열&lt;br&gt;(str)&quot;] --&gt;|&quot;re.compile('패턴')&quot;|pattern[&quot;패턴&lt;br&gt;pattern&quot;]
pattern--&gt;|&quot;match('대상문자열')&quot;|matchbefore[&quot;문자열&lt;br&gt;처음부터&lt;br&gt;검사 &lt;br&gt;&quot;]
matchbefore --&gt; ismatch{&quot;일치하는&lt;br&gt;패턴이&lt;br&gt;있는가?&quot;}
pattern--&gt;|&quot;search('대상문자열')&quot;|searchbefore[&quot;문자열&lt;br&gt;전체를&lt;br&gt;검사&quot;]
searchbefore --&gt; ismatch
ismatch --&gt; |&quot;있다&quot;|match
ismatch --&gt; |&quot;없다&quot;|none[&quot;None&quot;]
pattern--&gt;|&quot;findall('대상문자열')&quot;|findall[&quot;발견된 모든 문자열&lt;br&gt;리스트 반환&quot;]
pattern--&gt;|&quot;finditer('대상문자열')&quot;|finditer[&quot;iterable 반환&quot;]
pattern--&gt;|&quot;sub(to, from)&quot;|sub[&quot;from에서 to로&lt;br&gt;치환한 문자열&lt;br&gt;반환&quot;]
finditer--&gt;iter[&quot;for 등으로&lt;br&gt;차례로 match에&lt;br&gt;접근 가능&quot;]
iter--&gt;match
match[&quot;검색 결과&lt;br&gt;(match)&quot;] --&gt; |&quot;span()&quot;|span[&quot;결과의 위치값&lt;br&gt;(시작, 끝)  튜플&quot;]
match--&gt;|&quot;group()&quot;|group[&quot;결과 문자열&quot;]
match--&gt;|&quot;start()&quot;|start[&quot;결과의 시작 위치&lt;br&gt;(인덱스)&quot;]
match--&gt;|&quot;end()&quot;|en[&quot;결과의 끝 위치&lt;br&gt;(인덱스)&quot;]
class match,pattern em
</code></pre>
<p><em>파이썬에서 정규식을 사용하는 방법</em></p>
<hr>
<h2>레퍼런스</h2>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D">Mozila 자바스크립트 안내서의 정규 표현식</a></li>
<li><a href="https://regexone.com/">Regex One - 정규 표현식 자습 사이트 (영문)</a></li>
</ul>
<h2>연습 문제</h2>
<ol>
<li>정규 표현식을 줄여서 무엇이라고 하는가?</li>
<li>정규 표현식을 영어로 하면 무엇인가?</li>
<li>패턴에 쓰이는 다음 특수문자가 무엇인지 설명하라 -&gt; <code>. [] * + ? {} ^ $ () |</code></li>
<li>다음 패턴이 무엇을 의미하는지 설명하라
<ol>
<li><code>photo[0-9][0-9]?</code></li>
<li><code>01[0-9]-[0-9]{3,4}-[0-9]{4}</code></li>
</ol>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 23:58:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 14:58:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-17 16:20:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-17 07:20:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%a0%95%ea%b7%9c-%ed%91%9c%ed%98%84%ec%8b%9d-%eb%ac%b8%ec%9e%90%ec%97%b4%ec%9d%84-%ea%b2%80%ec%83%89%ed%95%98%ea%b3%a0-%ec%b9%98%ed%99%98%ed%95%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 특별 메소드와 연산자 ~ 파이썬의 내부 동작 이해하기]]></title>
		<link>https://elvanov.com/1265</link>
		<pubDate>Fri, 17 Jan 2020 14:24:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1265</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 몬스터를 예쁘게 출력하기\n\n우리는 클래스를 통해 객체가 어떤 속성과 메소드를 가지고 있을지 정의내릴 수 있습니다. 하지만 지금까지의 방법으론 우리가 만든 클래스는 썩 그렇게 편하지는 않습니다. 어떤 객체에게 변화를 주거나 값에 접근하기 위해서는 속성과 메소드를 반드시 거쳐야 하기 때문입니다. \n\n이를테면, 간단히 이름을 속성으로만 가지고 있는 Monster 클래스를 상상해보세요. 다음과 같이 구현하실 수 있을 것입니다.\n\n```python\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n```\n\n어느 순간, `Monster`가 어떤 객체인지 알아보고 싶어서 `print`를 이용해보자구요.\n\n```python\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n\nmon1 = Monster('골렘')\nprint(mon1)\n```\n```plaintext\n\u003c__main__.Monster object at 0x000001B0DDCFA760\u003e\n```\n\n아이고, 이상한 말들이 등장했습니다. `__main__` 실행 환경의 `Monster` 객체이며, 이 객체가 메모리의 `0x000001B0DDCFA760`라는 주소에서 거주하고 있다는 것을 알 수 있군요. 하지만 이 정보들은 그렇게 유용하지 않습니다. 뭐 `Monster` 객체라는 것은 알 수 있으니 좋지만, `__main__`이나 메모리 정보를 굳이 알아야 할까요. 다른 케이스를 한번 생각해봅시다. 우리가 리스트를 만들어서 출력하고자 할 때 안의 내용물이 전부 출력되지, `list` 객체이며 메모리가 어딘가에 있다는 정보는 출력하지 않습니다. 어쩔 수 없는 걸까요? 일단 `printInformation`라는 메소드를 만들어 이용해봅시다.\n\n```python\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n    \n    def printInformation(self):\n        print(f\u0022Monster(name='{self.name}')\u0022)\n\nmon1 = Monster('골렘')\nmon1.printInformation()\n```\n```plaintext\nMonster(name='골렘')\n```\n\n유용한 정보만 딱 골라내어 출력하는 메소드를 구현해보았습니다. 하지만 이러한 방법은 한 가지 문제점을 안고 있습니다. 유용한 정보를 출력해보는 로직은 흔하게 사용되지만 구현하는 방법은 클래스마다 제각각일 수 있습니다. 예를 들어 지금은 `printInformation`이라는 이름을 지었지만, 어떤 클래스에는 `print`라고 간단하게 이름을 지을 수도 있고, 어떤 곳에는 `show`라고 완전히 다른 단어로 메소드를 구현할 수 있습니다. 그래서, 클래스 설계자는 이러한 부분에 대해 확실한 설명을 적어두어야 할 의무가 생기며, 마찬가지로 클래스를 이용하는 사람들에게도 그러한 설명을 찾아봐야 하는 수고가 듭니다. 한두 개의 클래스만 다룬다면 상관이 없겠지만, 클래스가 점점 많아진다면 쉴 새 없이 밀려드는 메소드와 속성에 진절머리가 나게 될 것입니다!\n\n잠깐, 이전 시간에 [`list`에 관해 배웠을 때](273#%3Ccode%3Eprint%3C%2Fcode%3E%E\u002d\u002d22)를 떠올리세요. 여기서 다음 개념이 기억나시나요?\n\n\u003e 중요한 점은, 우리가 **리스트를 예쁘게 보여주는 법**이 어떤 식으로 구현되어 있는지도 모르고, 심지어 어떻게 쓰는지도 알 필요가 없다는 점입니다. 이 비기를 이용하는 주체는 손가락으로 열심히 영단어를 타이핑치는 우리가 아니라 바로 `print`입니다. `print`가 알아서 A부터 Z까지 다 해주므로 우리는 `print`를 쓰는 방법만 제대로 익히면 됩니다.\n\n요약하면, 리스트는 예쁘게 보여주는 법을 구현해놓고 있고, 기본 내장 함수인 `print`는 그것을 갖다 쓴다고 했습니다. 정답은 나온 것 같네요. 우리가 만든 `Monster` 클래스도, `print`가 쓸 수 있게 **예쁘게 보여주는 법**을 구현하면 됩니다!\n\n```python\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n    \n    def __repr__(self):\n        return f\u0022Monster(name='{self.name}')\u0022\n\nmon1 = Monster('골렘')\nprint(mon1)\n```\n```plaintext\nMonster(name='골렘')\n```\n\n`__repr__`이라는 새로운 특별 메소드를 정의했습니다. 언더바 두 개가 앞뒤로 있는 메소드는 예전 시간에 언급했듯이 **특별 메소드** 입니다. 이 메소드 또한 생성자처럼 파이썬에서 특별하게 취급한다는 이야기입니다. repr는 representation의 약자입니다. 이 메소드는 이 객체를 설명하는 공식적인(official) 문자열을 반환해야 하는 임무를 가지고 있습니다. \n\n`__repr__` 메소드를 구현했다는 뜻은, 이 객체를 예쁘게 보여주는 방법을 어느정도 구현했다는 뜻입니다. `print`는 `mon1`의 타입을 검사하여 `Monster`인지 알아내고, `__repr__` 등의 특별 메소드를 구현해 놓았는지 체크합니다. 만약 발견했다면, `print`는 머리를 탁 치며 그 메소드를 이용하여 `print`를 실행합니다. \n\n```mermaid-execute\ngraph TD\nmon1[\u0022print(mon1)\u0022]\u002d\u002d\u003echeck[\u0022mon1의 타입을 체크한다\u003cbr\u003e ... Monster이다!\u0022]\ncheck\u002d\u002d\u003eb1{\u0022Monster에\u003cbr\u003e__str__ 메소드가\u003cbr\u003e구현되어 있는가?\u0022}\nb1\u002d\u002d\u003e|yes|str[\u0022__str__ 메소드를 호출하여 그 반환값을 출력한다.\u0022]\nb1\u002d\u002d\u003e|no|hasprint{\u0022Monster에\u003cbr\u003e__repr__ 메소드가\u003cbr\u003e구현되어 있는가?\u0022}\nhasprint\u002d\u002d\u003e|no|en[\u0022가장 기본적인 형태로 출력한다.\u003cbr\u003e(__main__.Monster object 후략)\u0022]\nhasprint\u002d\u002d\u003e|Yes|print[\u0022__repr__ 메소드를\u003cbr\u003e호출하여 그 반환값을\u003cbr\u003e출력한다\u0022]\n\nclass hasprint,print em\n```\n*`print`의 여행*\n\n\n이로써 아까 언급했던, 출력 메소드를 임의로 정의하여 사용하던 때의 단점이 완전히 커버됩니다. `__repr__`를 구현함으로써 우리는 파이썬의 `int`, `list`, `set`와 같은 내장형과 `print`의 끈끈한 유대관계를 흉내낼 수 있습니다. 우리는 클래스 사용자들이 더 쉽게 출력하도록 하는 방법을 일절 고민할 필요없이 `__repr__` 메소드만 구현하면 됩니다. 사용하는 사람 입장에서도 별 다른 고민없이 `print`를 이용하면 됩니다.  \n\n\u002d\u002d-\n\n## 흉내내기\n\n### 리스트 흉내내기\n\n이제, 몬스터가 서식하는 땅을 클래스로서 만들어보려고 합니다. 이 클래스는 `Field`라는 이름을 지니고 있고, `_monsters` 속성을 가지고 있습니다. 이 속성이 진짜 리스트이며, 여기에는 현재 서식중인 몬스터들이 저장됩니다. \n\n```python\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n    \n    def __repr__(self):\n        return f\u0022Monster(name='{self.name}')\u0022\n\nclass Field:\n    def __init__(self):\n        self._monsters = []\n\n    def append(self, monster):\n        self._monsters.append(monster)\n\n    def __getitem__(self, position):\n        return self._monsters[position]\n\nfield = Field()\n\nfor name in ['오크', '들개', '오우거', '골렘', '피카츄', '박쥐']:\n    field.append(Monster(name))\n\n# []로 항목 접근\nprint(field[3])\n\n# 슬라이싱\nprint(field[2:5])\n\n# for로 항목 접근\nfor monster in field:\n    print(f\u0022필드에서 {monster.name}이(가) 발견되었다!\u0022)\n```\n```plaintext\nMonster(name='골렘')\n[Monster(name='오우거'), Monster(name='골렘'), Monster(name='피카츄')]\n필드에서 오크이(가) 발견되었다!\n필드에서 들개이(가) 발견되었다!\n필드에서 오우거이(가) 발견되었다!\n필드에서 골렘이(가) 발견되었다!\n필드에서 피카츄이(가) 발견되었다!\n필드에서 박쥐이(가) 발견되었다!\n```\n\n`Field` 클래스에서는 3개의 메소드를 정의했습니다. 생성자인 `__init__`, 몬스터를 추가시켜주기 위해 만든 `append`, 그리고 파이썬에서 리스트처럼 동작할 수 있게 해주는 `__getitem__` 입니다.\n\n`__getitem__` 메소드를 추가시켜준 것 만으로도 `[]`를 통해 항목을 가져오거나 슬라이싱을 할 수 있게 되었습니다. 뿐만 아니라 `for`에서도 아주 쉽게 사용할 수 있게 되었습니다! 정말 근사하지 않나요?\n\n만약 `Field` 클래스에 `__len__` 메소드를 추가한다면 이 클래스는 표준 파이썬 시퀀스처럼 작동하기 때문에 랜덤으로 아이템을 뽑아오는 `random.choice`, 역순 기능인 `reserved` 등의 함수도 이용할 수 있게 됩니다.\n\n\n```python\nimport random\n\nclass Monster:\n    def __init__(self, name):\n        self.name = name\n    \n    def __repr__(self):\n        return f\u0022Monster(name='{self.name}')\u0022\n\nclass Field:\n    def __init__(self):\n        self._monsters = []\n\n    def append(self, monster):\n        self._monsters.append(monster)\n\n    def __getitem__(self, position):\n        return self._monsters[position]\n\n    def __len__(self):\n        return len(self._monsters)\n\nfield = Field()\n\nfor name in ['오크', '들개', '오우거', '골렘', '피카츄', '박쥐']:\n    field.append(Monster(name))\n\nprint(f\u0022랜덤 뽑기! \u003e\u003e {random.choice(field)}\u0022)\n\nprint(list(reversed(field)))\n```\n```plaintext\n랜덤 뽑기! \u003e\u003e Monster(name='박쥐')\n[Monster(name='박쥐'), Monster(name='피카츄'), Monster(name='골렘'), Monster(name='오우거'), Monster(name='들개'), Monster(name='오크')]\n```\n\n\u002d\u002d-\n\n### 수치형 흉내내기\n\n완전히 새로운 예제로 넘어갑시다. 어떤 슬라임이 있습니다. 이 슬라임은 다른 슬라임과 합쳐질 때마다 사이즈가 10% 증가합니다. 그러니까, 크기가 60이고 40인 두 슬라임이 합쳐지면 100이 되고, 거기에 10% 증가하여 110이 됩니다. 이러한 특성을 충족시키기 위해 다음과 같은 클래스를 만들어보았습니다.\n\n```python\nclass Slime:\n    def __init__(self, size):\n        self.size = float(size)\n    \n    def __repr__(self):\n        return f\u0022Slime(size={self.size})\u0022\n\n    def combineWith(self, other):\n        size = self.size + other.size\n        size += size / 10\n        return Slime(size)\n    \nblue = Slime(60)\nred = Slime(40)\npink = blue.combineWith(red)\n\nprint(pink)\n```\n```plaintext\nSlime(size=110.0)\n```\n\n`Slime` 클래스에는 `size` 속성 하나가 있습니다. 그리고 `combineWith` 메소드를 두어 두 슬라임을 합치는 기능을 넣었습니다. 사이즈 `60`과 `40`이 합쳐 `110`이 나옴을 확인해주세요. 우리의 의도대로 잘 작동하고 있습니다.\n\n\u002d\u002d-\n\n여기서 두 가지만 바꿔봅시다. `combineWith` 메소드의 이름을 `__add__`로 수정하고, `combineWith` 메소드 호출 부분을 그냥 `+` 연산자로 해봅시다.\n\n```python\nclass Slime:\n    def __init__(self, size):\n        self.size = float(size)\n    \n    def __repr__(self):\n        return f\u0022Slime(size={self.size})\u0022\n\n    def __add__(self, other):\n        size = self.size + other.size\n        size += size / 10\n        return Slime(size)\n    \n\nblue = Slime(60)\nred = Slime(40)\npink = blue + red\n\nprint(pink)\n```\n```plaintext\nSlime(size=110.0)\n```\n\n헉! `+`는 기본형에만 동작하는 것이 아닌가요? `int`나 `float`은 값이 더해지고, `str`은 문자열이 이어지는 연산자였습니다만, 이제 `Slime` 객체에도 동작하게 되었습니다! 이렇듯 `+`와 같은 **연산자의 본래 기능을 확장하거나 재정의하는 개념**을 일컬어 **연산자 오버로딩(operator overloading)** 이라고 합니다.\n\n\u002d\u002d-\n\n### 다른 것들 흉내내기\n\n우리가 만든 클래스를 파이썬의 로직에 녹일 수 있는 특별 메소드는 종류가 굉장히 많습니다. 공식 문서에서 필요한 것을 뽑아 쓸 수 있도록 합니다.\n\n\u002d\u002d-\n\n## 연산자 오버로딩(operator overloading)\n\n파이썬에서의 연산자 오버로딩은 각 연산자에 대응되는 특별 메소드를 구현함으로써 실현할 수 있습니다. 앞서 살펴보았듯 `+` 연산자에는 `__add__` 메소드를 구현해주면 됩니다. `*`, `-`, `/` 등의 연산자도 물론 오버로딩할 수 있습니다. 우선 기초적인 연산자 오버로딩의 특징에 대해 알아봅시다. \n\n- 내장 자료형끼리 작동하는 연산자에 대해서는 우리가 새롭게 기능을 정의해줄 수 없습니다. 즉 `3 + 8`이나 `'abc' + 'def'`에 대해서 미리 정의된 기능을 우리가 수정할 수 없다는 뜻입니다.\n- `\u003c=\u003e` 같은 새로운 연산자를 생성할 수 없으며, 기존에 사용되는 연산자만 오버로딩할 수 있습니다. 오버로딩할 수 있는 연산자는 다음과 같습니다.\n   - 우리가 흔히 사용하는 `+`, `-`, `*`, `/`, `**`, `//`, `%`\n   - `@`, `\u0026`, `|`, `\u003e\u003e`, `\u003c\u003c`, `^`, `~` 등 자주는 사용되지 않는 연산자\n   - 복합 대입 연산자\n   - `==`, `=!`, `\u003c`, `\u003e`, `\u003c=`, `\u003e=` 등의 비교 연산자\n- 다음 연산자는 오버로딩이 불가능한 연산자입니다 : `is`, `and`, `or`, `not`, `=`\n\n각 연산자에 대한 특별 메소드의 이름은 [공식 문서](https://docs.python.org/ko/3/reference/datamodel.html?object.__getattr__#emulating-numeric-types)를 참조해주세요. \n\n그리고 다음은 이번 시간에 더 자세히 알아볼 내용입니다.\n\n- 중위 연산자는 왼쪽 요소에 대해서 관련 특별 메소드를 검사하며, 만약 실패하면 오른쪽 요소에 대해서 **역순 특별 메소드**를 검사합니다.\n- 구현되지 않을 부분에 대해서는 `NotImplemented` 값을 리턴하여 [의도](1034)를 명백히 합니다.\n- 연산자 오버로딩은 적재적소에 쓰여야 합니다.\n\n\u002d\u002d-\n\n## 중위 연산자가 작동하는 방식\n\n중위 연산자란, 연산자의 양쪽에 값이 오는 형태를 뜻합니다. `+`, `-` 등 거의 모든 형태의 연산자가 이러한 형태를 취하고 있지요. `+`가 실제로 파이썬에서는 다음과 같은 순서로 작동합니다.\n\n```mermaid-execute\ngraph TD\nl1(\u0022a + b\u0022) \u002d\u002d\u003e add1{\u0022a에 \u003cbr\u003e __add__가\u003cbr\u003e 있는가?\u0022}\nadd1\u002d\u002d\u003e|\u0022있다\u0022| add1do[\u0022a.__add__(b)\u003cbr\u003e를 실행하여\u003cbr\u003e결과 값을\u003cbr\u003e 구한다.\u0022]\nadd1do\u002d\u002d\u003eimpl1[\u0022결과 값이\u003cbr\u003eNotImplemented\u003cbr\u003e인가?\u0022]\nimpl1\u002d\u002d\u003e|\u0022그렇다\u0022| add2\nimpl1\u002d\u002d\u003e|\u0022아니다\u0022| result[\u0022결과 값을\u003cbr\u003e최종적으로\u003cbr\u003e반환한다.\u0022]\nadd1\u002d\u002d\u003e|\u0022없다\u0022| add2{\u0022b에 \u003cbr\u003e __radd__가\u003cbr\u003e 있는가?\u0022}\nadd2\u002d\u002d\u003e|\u0022있다\u0022| add2do[\u0022b.__radd__(a)\u003cbr\u003e를 실행하여\u003cbr\u003e결과 값을\u003cbr\u003e 구한다.\u0022]\nadd2do\u002d\u002d\u003eimpl2[\u0022결과 값이\u003cbr\u003eNotImplemented\u003cbr\u003e인가?\u0022]\nimpl2\u002d\u002d\u003e|\u0022그렇다\u0022| error\nimpl2\u002d\u002d\u003e|\u0022아니다\u0022| result[\u0022결과 값을\u003cbr\u003e최종적으로\u003cbr\u003e반환한다.\u0022]\nadd2\u002d\u002d\u003e|\u0022없다\u0022|error[\u0022TypeError\u003cbr\u003e를 발생시킨다.\u0022]\n```\n*`a + b` 가 작동하는 방식*\n\n여기서 [`NotImplemented`](https://docs.python.org/ko/3/library/constants.html#NotImplemented)는 아직 구현되지 않았다는 뜻을 담은 특별한 값이자 이름이며, 잠시 뒤에 다시 설명합니다.\n\n역순 특별 메소드는 오버로딩하고자 하는 메소드의 이름 제일 앞에 `r`이 들어가 있습니다. 여기서 `r`은 뜻을 딱히 엄격하게 두지는 않았지만 reserved, reflected, right 등의 뜻으로 해석할 수 있습니다. 즉 연산자의 오른쪽 값이 이용해봄직한 메소드라는 뜻이지요.\n\n그렇다면 왜 이렇게 두 가지 버전을 만들어놓았을까요? 우리가 만든 클래스와 내장형 값을 자연스럽게 조화시키기 위함입니다. 아래 예제를 보면서 이야기를 이어가도록 하겠습니다.\n\n\u002d\u002d-\n\n### 역순 메소드가 존재하는 이유\n\n다음 예제를 참고해주세요. `Cup` 클래스는 현재 가지고 있는 물의 양을 나타내는 `water` 속성을 가지고 있습니다. 그리고 이 클래스로 만든 객체와 숫자를 `+`로 더하면 그만큼 `water`를 증가시켜 보고자 합니다.\n\n```python\nclass Cup:\n    def __init__(self, water):\n        self.water = water\n    \n    def __repr__(self):\n        return f\u0022Cup(water='{self.water}')\u0022\n\n    def __add__(self, other):\n        return Cup(self.water + other)\n\nbasic = Cup(30)\nadvanced = basic + 40\nprint(advanced)\n```\n```plaintext\nCup(water='70')\n```\n\n잘 작동합니다. 하지만 `basic`과 `40`의 순서를 바꾸면 어떻게 될까요?\n\n```python\nclass Cup:\n    def __init__(self, water):\n        self.water = water\n    \n    def __repr__(self):\n        return f\u0022Cup(water='{self.water}')\u0022\n\n    def __add__(self, other):\n        return Cup(self.water + other)\n\nbasic = Cup(30)\nadvanced = 40 + basic\nprint(advanced)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 12, in \u003cmodule\u003e\n    advanced = 40 + basic\nTypeError: unsupported operand type(s) for +: 'int' and 'Cup'\n```\n\n하하.. 에러가 발생했습니다. 우리가 `Cup`에게 `__add__` 메소드를 구현했지만 파이썬 인터프리터는 `int`에게서 `Cup`과 상호작용할 수 있는 `__add__` 메소드가 존재하는지를 먼저 검사합니다. 하지만 없습니다. 이럴 때의 해결 방법은 `Cup` 클래스에서 `__radd__` 메소드를 구현하는 것입니다!\n\n```python\nclass Cup:\n    def __init__(self, water):\n        self.water = water\n    \n    def __repr__(self):\n        return f\u0022Cup(water='{self.water}')\u0022\n\n    def __add__(self, other):\n        return Cup(self.water + other)\n\n    def __radd__(self, other):\n        return self + other\n\nbasic = Cup(30)\nadvanced = 40 + basic\nprint(advanced)\n```\n```plaintext\nCup(water='70')\n```\n\n훌륭하게 작동하게 되었습니다! `__radd__` 에서는 단순히 `self + other` 이라고 적은 것에 주목해주세요. 이렇게 하면 자연스레 `Cup`의 `__add__`를 사용하게 됩니다.\n\n비교 연산자는 이러한 중위 연산자가 작동하는 방식과 살짝 다릅니다. 궁금하시다면, 이는 [공식 문서](https://docs.python.org/ko/3/reference/datamodel.html?object.__getattr__#object.__lt__)에 설명을 넘기도록 하겠습니다.\n\n\u002d\u002d-\n\n## 구현되지 않는 부분 명백히 하기\n\n앞서 `__add__`가 어떻게 작동하는지에 대한 순서도를 볼 때 `NotImplemented` 라는 값이 등장했습니다. 이것은 `None`, `True`, `False`와 같이 키워드이고, 구현되지 않았음을 알리는 용도입니다. \n\n위 `Cup` 예제를 그대로 갖고 와보겠습니다. 달라진 점은 `basic`에 `40`을 더하는 게 아니라 뜬금없는 `'abc'`를 더하고 있습니다. 이는 의도된 행동이 아니므로 에러가 일어나야 하겠지요. \n\n\n```python\nclass Cup:\n    def __init__(self, water):\n        self.water = water\n    \n    def __repr__(self):\n        return f\u0022Cup(water='{self.water}')\u0022\n\n    def __add__(self, other):\n        return Cup(self.water + other)\n\n    def __radd__(self, other):\n        return self + other\n\nbasic = Cup(30)\nadvanced = basic + 'abc'\nprint(advanced)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 15, in \u003cmodule\u003e\n    advanced = basic + 'abc'\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 9, in __add__\n    return Cup(self.water + other)\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n```\n\n이 에러 메세지를 접하고 `Cup`에 무언가를 더하려면 `int`와 호환되는 어떤 `Cup`을 이용하는 사람 입장에서는 다소 곤혹스러울 수 있겠습니다. \n\n```python\nclass Cup:\n    def __init__(self, water):\n        self.water = water\n    \n    def __repr__(self):\n        return f\u0022Cup(water='{self.water}')\u0022\n\n    def __add__(self, other):\n        try:\n            return Cup(self.water + other)\n        except TypeError:\n            return NotImplemented\n\n    def __radd__(self, other):\n        return self + other\n\nbasic = Cup(30)\nadvanced = basic + 'abc'\nprint(advanced)\n```\n```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 18, in \u003cmodule\u003e\n    advanced = basic + 'abc'\nTypeError: unsupported operand type(s) for +: 'Cup' and 'str'\n```\n\n\u002d\u002d-\n\n## 연산자 오버로딩은 적재적소에 쓰여야 합니다.\n\n연산자 오버로딩은 여러모로 양날의 검입니다. 한 눈에 보기 쉬워서 편리해질 수도 있지만, 남용하게 된다면 있느니만 못하는 기능이 되어버릴 수도 있지요. 아래는 전문가를 위한 파이썬의 글을 인용한 것입니다.\n\n\u003e 연산자 오버로딩을 혐오하는 사람도 많다. 이 언어 기능은 남용되거나, 프로그래머를 혼란스럽게 만들거나, 버그를 만들거나, 예상치 못한 성능상의 병목이 될 수도 있다(지금까지 그래왔다). 그렇지만 잘 사용하면 코드의 가독성이 향상되고 만족스러운 API를 구현할 수 있다. 파이썬은 다음과 같은 제한을 두어 융통성, 사용성, 안전성을 적절히 유지한다.\n\u003e\n\u003e (중략)\n\u003e\n\u003e 개발자 중 20~30퍼센트는 연산자 오버로딩을 악마의 자식이라고 생각하는 것 같다. 예를 들어 자신이 + 연산자를 오버로딩해서 사용하려는 용도와 다르게, 다른 개발자가 리스트 삽입 연산을 구현하도록 이미 + 연산자를 오버로딩했다면 정말 짜증난다. 오버로딩할 수 있는 연산자는 6개 정도 밖에 안 되지만, 이 연산자를 사람들이 수백만 가지 방식으로 사용하고 싶어 하기 때문에 이러한 문제가 발생한다. 따라서 여러분의 직관에 따라 연산자를 선택할 수 없는 경우가 종종 있다.\n\n우리는 `Slime` 객체에 대해 연산자 오버로딩을 구현했습니다. 하지만 이는 썩 좋지 못한 생각일 수 있습니다. `Slime`은 수치형도 아니고 어떠한 상태를 나타낸다는 용도의 클래스도 아니기 때문에 `+`가 직관적으로 어떠한 역할을 하는지 알기 어렵습니다. 차라리 처음에 시도했던 것처럼 `combineWith` 메소드로 기능을 구현하는 것이 의도를 명백히 보여주기 때문에 훨씬 나을 수 있습니다. \n\n연산자 오버로딩에서 흔히 사용되는 예시 중 하나는 [수학적인 개념의 벡터(vector)](https://riptutorial.com/ko/python/example/29545/%EC%97%B0%EC%82%B0%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9)입니다. 벡터는 수치형으로 이야기할 수 있고, 차원 만큼의 속성을 가지고 있어야 하기 때문에 클래스로 표현하기 용이하며, 무엇보다 `+`, `*` 등의 의미가 명확합니다. \n\n\u002d\u002d-\n\n## 특별 메소드를 직접 호출하지 마세요\n\n특별 메소드는 파이썬 인터프리터가 적절하게 이용하기 위한 메소드입니다. 우리는 우리가 만든 클래스가 파이썬 내부에서 잘 사용되기를 바라기 때문에 그러한 특별 메소드를 정의합니다. 만약 파이썬 인터프리터가 아닌 단순한 사용자가 사용하기를 기대하는 기능을 만든다면, 일반 메소드를 정의하면 됩니다. 특별 메소드의 기능을 사용하고 싶다면 특별 메소드를 직접 호출하는 것이 아니라, 그 로직을 이용하는 파이썬 문법을 사용하면 됩니다. `__getitem__` 메소드를 직접 호출하기보다, `[]`를 통해 항목에 접근하세요. 아래 표는 똑같은 말입니다.\n\n|~~ 한다면|~~ 하세요|\n|\u002d\u002d-|\u002d\u002d-|\n|파이썬의 로직에 우리가 만든 클래스를 녹이고 싶다면|특별 메소드를 정의하세요|\n|사용자 코드에서 사용될 기능을 만든다면|일반 메소드를 정의하세요|\n|특별 메소드의 기능을 직접 사용하고 싶다면|특별 메소드를 직접 호출하지 말고 파이썬의 로직을 이용하세요|\n\n단, 사용자 코드에서 특별 메소드를 호출하는 경우가 한 가지 있는데, 바로 `__init__` 메소드 안에서 상위 클래스의 `__init__`을 호출할 때입니다.\n\n\u002d\u002d-\n\n## 연습 문제\n\n- 연산자 오버로딩의 뜻은 무엇인가?\n- 우리가 만든 클래스를 예쁘게 보여주려면 어떤 특별 메소드를 구현해야 하는가?\n- 우리가 만든 클래스가 리스트처럼 기능하기 위하여 어떤 특별 메소드를 구현해야 하는가?\n- 파이썬 인터프리터가 `a + b` 를 맞닥뜨렸을 때 어떻게 동작하는지 설명하라.\n- 내장 함수인 `abs`의 기능을 커스터마이징할 수 있는 특별 메소드의 이름을 검색하여 찾아보라.\n\n## 프로그래밍 문제\n\n1. `SpecialStr` 클래스를 만드세요. 이 클래스의 목적은 `+` 연산시 수치형 및 문자형의 포괄적인 호환성 구현입니다. 클래스는 문자열 속성 하나를 가지고 있으며, 생성자의 인수 하나를 받아서 문자열 속성을 초기화시킵니다. 다음 코드를 실행시켰을 때 잘 출력되어야 합니다.\n\n```python\nsp = SpecialStr(‘abc’)\nsp += ‘def’\nsp = 56 + sp\nsp += 3.14\nprint(sp)\n```\n```plaintext\n56abcdef3.14\n```\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>몬스터를 예쁘게 출력하기</h2>
<p>우리는 클래스를 통해 객체가 어떤 속성과 메소드를 가지고 있을지 정의내릴 수 있습니다. 하지만 지금까지의 방법으론 우리가 만든 클래스는 썩 그렇게 편하지는 않습니다. 어떤 객체에게 변화를 주거나 값에 접근하기 위해서는 속성과 메소드를 반드시 거쳐야 하기 때문입니다.</p>
<p>이를테면, 간단히 이름을 속성으로만 가지고 있는 Monster 클래스를 상상해보세요. 다음과 같이 구현하실 수 있을 것입니다.</p>
<pre><code class="language-python">class Monster:
    def __init__(self, name):
        self.name = name
</code></pre>
<p>어느 순간, <code>Monster</code>가 어떤 객체인지 알아보고 싶어서 <code>print</code>를 이용해보자구요.</p>
<pre><code class="language-python">class Monster:
    def __init__(self, name):
        self.name = name

mon1 = Monster('골렘')
print(mon1)
</code></pre>
<pre><code class="language-plaintext">&lt;__main__.Monster object at 0x000001B0DDCFA760&gt;
</code></pre>
<p>아이고, 이상한 말들이 등장했습니다. <code>__main__</code> 실행 환경의 <code>Monster</code> 객체이며, 이 객체가 메모리의 <code>0x000001B0DDCFA760</code>라는 주소에서 거주하고 있다는 것을 알 수 있군요. 하지만 이 정보들은 그렇게 유용하지 않습니다. 뭐 <code>Monster</code> 객체라는 것은 알 수 있으니 좋지만, <code>__main__</code>이나 메모리 정보를 굳이 알아야 할까요. 다른 케이스를 한번 생각해봅시다. 우리가 리스트를 만들어서 출력하고자 할 때 안의 내용물이 전부 출력되지, <code>list</code> 객체이며 메모리가 어딘가에 있다는 정보는 출력하지 않습니다. 어쩔 수 없는 걸까요? 일단 <code>printInformation</code>라는 메소드를 만들어 이용해봅시다.</p>
<pre><code class="language-python">class Monster:
    def __init__(self, name):
        self.name = name
    
    def printInformation(self):
        print(f&quot;Monster(name='{self.name}')&quot;)

mon1 = Monster('골렘')
mon1.printInformation()
</code></pre>
<pre><code class="language-plaintext">Monster(name='골렘')
</code></pre>
<p>유용한 정보만 딱 골라내어 출력하는 메소드를 구현해보았습니다. 하지만 이러한 방법은 한 가지 문제점을 안고 있습니다. 유용한 정보를 출력해보는 로직은 흔하게 사용되지만 구현하는 방법은 클래스마다 제각각일 수 있습니다. 예를 들어 지금은 <code>printInformation</code>이라는 이름을 지었지만, 어떤 클래스에는 <code>print</code>라고 간단하게 이름을 지을 수도 있고, 어떤 곳에는 <code>show</code>라고 완전히 다른 단어로 메소드를 구현할 수 있습니다. 그래서, 클래스 설계자는 이러한 부분에 대해 확실한 설명을 적어두어야 할 의무가 생기며, 마찬가지로 클래스를 이용하는 사람들에게도 그러한 설명을 찾아봐야 하는 수고가 듭니다. 한두 개의 클래스만 다룬다면 상관이 없겠지만, 클래스가 점점 많아진다면 쉴 새 없이 밀려드는 메소드와 속성에 진절머리가 나게 될 것입니다!</p>
<p>잠깐, 이전 시간에 <a href="273#%3Ccode%3Eprint%3C%2Fcode%3E%25E--22"><code>list</code>에 관해 배웠을 때</a>를 떠올리세요. 여기서 다음 개념이 기억나시나요?</p>
<blockquote>
<p>중요한 점은, 우리가 <strong>리스트를 예쁘게 보여주는 법</strong>이 어떤 식으로 구현되어 있는지도 모르고, 심지어 어떻게 쓰는지도 알 필요가 없다는 점입니다. 이 비기를 이용하는 주체는 손가락으로 열심히 영단어를 타이핑치는 우리가 아니라 바로 <code>print</code>입니다. <code>print</code>가 알아서 A부터 Z까지 다 해주므로 우리는 <code>print</code>를 쓰는 방법만 제대로 익히면 됩니다.</p>
</blockquote>
<p>요약하면, 리스트는 예쁘게 보여주는 법을 구현해놓고 있고, 기본 내장 함수인 <code>print</code>는 그것을 갖다 쓴다고 했습니다. 정답은 나온 것 같네요. 우리가 만든 <code>Monster</code> 클래스도, <code>print</code>가 쓸 수 있게 <strong>예쁘게 보여주는 법</strong>을 구현하면 됩니다!</p>
<pre><code class="language-python">class Monster:
    def __init__(self, name):
        self.name = name
    
    def __repr__(self):
        return f&quot;Monster(name='{self.name}')&quot;

mon1 = Monster('골렘')
print(mon1)
</code></pre>
<pre><code class="language-plaintext">Monster(name='골렘')
</code></pre>
<p><code>__repr__</code>이라는 새로운 특별 메소드를 정의했습니다. 언더바 두 개가 앞뒤로 있는 메소드는 예전 시간에 언급했듯이 <strong>특별 메소드</strong> 입니다. 이 메소드 또한 생성자처럼 파이썬에서 특별하게 취급한다는 이야기입니다. repr는 representation의 약자입니다. 이 메소드는 이 객체를 설명하는 공식적인(official) 문자열을 반환해야 하는 임무를 가지고 있습니다.</p>
<p><code>__repr__</code> 메소드를 구현했다는 뜻은, 이 객체를 예쁘게 보여주는 방법을 어느정도 구현했다는 뜻입니다. <code>print</code>는 <code>mon1</code>의 타입을 검사하여 <code>Monster</code>인지 알아내고, <code>__repr__</code> 등의 특별 메소드를 구현해 놓았는지 체크합니다. 만약 발견했다면, <code>print</code>는 머리를 탁 치며 그 메소드를 이용하여 <code>print</code>를 실행합니다.</p>
<pre><code class="language-mermaid-execute">graph TD
mon1[&quot;print(mon1)&quot;]--&gt;check[&quot;mon1의 타입을 체크한다&lt;br&gt; ... Monster이다!&quot;]
check--&gt;b1{&quot;Monster에&lt;br&gt;__str__ 메소드가&lt;br&gt;구현되어 있는가?&quot;}
b1--&gt;|yes|str[&quot;__str__ 메소드를 호출하여 그 반환값을 출력한다.&quot;]
b1--&gt;|no|hasprint{&quot;Monster에&lt;br&gt;__repr__ 메소드가&lt;br&gt;구현되어 있는가?&quot;}
hasprint--&gt;|no|en[&quot;가장 기본적인 형태로 출력한다.&lt;br&gt;(__main__.Monster object 후략)&quot;]
hasprint--&gt;|Yes|print[&quot;__repr__ 메소드를&lt;br&gt;호출하여 그 반환값을&lt;br&gt;출력한다&quot;]

class hasprint,print em
</code></pre>
<p><em><code>print</code>의 여행</em></p>
<p>이로써 아까 언급했던, 출력 메소드를 임의로 정의하여 사용하던 때의 단점이 완전히 커버됩니다. <code>__repr__</code>를 구현함으로써 우리는 파이썬의 <code>int</code>, <code>list</code>, <code>set</code>와 같은 내장형과 <code>print</code>의 끈끈한 유대관계를 흉내낼 수 있습니다. 우리는 클래스 사용자들이 더 쉽게 출력하도록 하는 방법을 일절 고민할 필요없이 <code>__repr__</code> 메소드만 구현하면 됩니다. 사용하는 사람 입장에서도 별 다른 고민없이 <code>print</code>를 이용하면 됩니다.</p>
<hr>
<h2>흉내내기</h2>
<h3>리스트 흉내내기</h3>
<p>이제, 몬스터가 서식하는 땅을 클래스로서 만들어보려고 합니다. 이 클래스는 <code>Field</code>라는 이름을 지니고 있고, <code>_monsters</code> 속성을 가지고 있습니다. 이 속성이 진짜 리스트이며, 여기에는 현재 서식중인 몬스터들이 저장됩니다.</p>
<pre><code class="language-python">class Monster:
    def __init__(self, name):
        self.name = name
    
    def __repr__(self):
        return f&quot;Monster(name='{self.name}')&quot;

class Field:
    def __init__(self):
        self._monsters = []

    def append(self, monster):
        self._monsters.append(monster)

    def __getitem__(self, position):
        return self._monsters[position]

field = Field()

for name in ['오크', '들개', '오우거', '골렘', '피카츄', '박쥐']:
    field.append(Monster(name))

# []로 항목 접근
print(field[3])

# 슬라이싱
print(field[2:5])

# for로 항목 접근
for monster in field:
    print(f&quot;필드에서 {monster.name}이(가) 발견되었다!&quot;)
</code></pre>
<pre><code class="language-plaintext">Monster(name='골렘')
[Monster(name='오우거'), Monster(name='골렘'), Monster(name='피카츄')]
필드에서 오크이(가) 발견되었다!
필드에서 들개이(가) 발견되었다!
필드에서 오우거이(가) 발견되었다!
필드에서 골렘이(가) 발견되었다!
필드에서 피카츄이(가) 발견되었다!
필드에서 박쥐이(가) 발견되었다!
</code></pre>
<p><code>Field</code> 클래스에서는 3개의 메소드를 정의했습니다. 생성자인 <code>__init__</code>, 몬스터를 추가시켜주기 위해 만든 <code>append</code>, 그리고 파이썬에서 리스트처럼 동작할 수 있게 해주는 <code>__getitem__</code> 입니다.</p>
<p><code>__getitem__</code> 메소드를 추가시켜준 것 만으로도 <code>[]</code>를 통해 항목을 가져오거나 슬라이싱을 할 수 있게 되었습니다. 뿐만 아니라 <code>for</code>에서도 아주 쉽게 사용할 수 있게 되었습니다! 정말 근사하지 않나요?</p>
<p>만약 <code>Field</code> 클래스에 <code>__len__</code> 메소드를 추가한다면 이 클래스는 표준 파이썬 시퀀스처럼 작동하기 때문에 랜덤으로 아이템을 뽑아오는 <code>random.choice</code>, 역순 기능인 <code>reserved</code> 등의 함수도 이용할 수 있게 됩니다.</p>
<pre><code class="language-python">import random

class Monster:
    def __init__(self, name):
        self.name = name
    
    def __repr__(self):
        return f&quot;Monster(name='{self.name}')&quot;

class Field:
    def __init__(self):
        self._monsters = []

    def append(self, monster):
        self._monsters.append(monster)

    def __getitem__(self, position):
        return self._monsters[position]

    def __len__(self):
        return len(self._monsters)

field = Field()

for name in ['오크', '들개', '오우거', '골렘', '피카츄', '박쥐']:
    field.append(Monster(name))

print(f&quot;랜덤 뽑기! &gt;&gt; {random.choice(field)}&quot;)

print(list(reversed(field)))
</code></pre>
<pre><code class="language-plaintext">랜덤 뽑기! &gt;&gt; Monster(name='박쥐')
[Monster(name='박쥐'), Monster(name='피카츄'), Monster(name='골렘'), Monster(name='오우거'), Monster(name='들개'), Monster(name='오크')]
</code></pre>
<hr>
<h3>수치형 흉내내기</h3>
<p>완전히 새로운 예제로 넘어갑시다. 어떤 슬라임이 있습니다. 이 슬라임은 다른 슬라임과 합쳐질 때마다 사이즈가 10% 증가합니다. 그러니까, 크기가 60이고 40인 두 슬라임이 합쳐지면 100이 되고, 거기에 10% 증가하여 110이 됩니다. 이러한 특성을 충족시키기 위해 다음과 같은 클래스를 만들어보았습니다.</p>
<pre><code class="language-python">class Slime:
    def __init__(self, size):
        self.size = float(size)
    
    def __repr__(self):
        return f&quot;Slime(size={self.size})&quot;

    def combineWith(self, other):
        size = self.size + other.size
        size += size / 10
        return Slime(size)
    
blue = Slime(60)
red = Slime(40)
pink = blue.combineWith(red)

print(pink)
</code></pre>
<pre><code class="language-plaintext">Slime(size=110.0)
</code></pre>
<p><code>Slime</code> 클래스에는 <code>size</code> 속성 하나가 있습니다. 그리고 <code>combineWith</code> 메소드를 두어 두 슬라임을 합치는 기능을 넣었습니다. 사이즈 <code>60</code>과 <code>40</code>이 합쳐 <code>110</code>이 나옴을 확인해주세요. 우리의 의도대로 잘 작동하고 있습니다.</p>
<hr>
<p>여기서 두 가지만 바꿔봅시다. <code>combineWith</code> 메소드의 이름을 <code>__add__</code>로 수정하고, <code>combineWith</code> 메소드 호출 부분을 그냥 <code>+</code> 연산자로 해봅시다.</p>
<pre><code class="language-python">class Slime:
    def __init__(self, size):
        self.size = float(size)
    
    def __repr__(self):
        return f&quot;Slime(size={self.size})&quot;

    def __add__(self, other):
        size = self.size + other.size
        size += size / 10
        return Slime(size)
    

blue = Slime(60)
red = Slime(40)
pink = blue + red

print(pink)
</code></pre>
<pre><code class="language-plaintext">Slime(size=110.0)
</code></pre>
<p>헉! <code>+</code>는 기본형에만 동작하는 것이 아닌가요? <code>int</code>나 <code>float</code>은 값이 더해지고, <code>str</code>은 문자열이 이어지는 연산자였습니다만, 이제 <code>Slime</code> 객체에도 동작하게 되었습니다! 이렇듯 <code>+</code>와 같은 <strong>연산자의 본래 기능을 확장하거나 재정의하는 개념</strong>을 일컬어 <strong>연산자 오버로딩(operator overloading)</strong> 이라고 합니다.</p>
<hr>
<h3>다른 것들 흉내내기</h3>
<p>우리가 만든 클래스를 파이썬의 로직에 녹일 수 있는 특별 메소드는 종류가 굉장히 많습니다. 공식 문서에서 필요한 것을 뽑아 쓸 수 있도록 합니다.</p>
<hr>
<h2>연산자 오버로딩(operator overloading)</h2>
<p>파이썬에서의 연산자 오버로딩은 각 연산자에 대응되는 특별 메소드를 구현함으로써 실현할 수 있습니다. 앞서 살펴보았듯 <code>+</code> 연산자에는 <code>__add__</code> 메소드를 구현해주면 됩니다. <code>*</code>, <code>-</code>, <code>/</code> 등의 연산자도 물론 오버로딩할 수 있습니다. 우선 기초적인 연산자 오버로딩의 특징에 대해 알아봅시다.</p>
<ul>
<li>내장 자료형끼리 작동하는 연산자에 대해서는 우리가 새롭게 기능을 정의해줄 수 없습니다. 즉 <code>3 + 8</code>이나 <code>'abc' + 'def'</code>에 대해서 미리 정의된 기능을 우리가 수정할 수 없다는 뜻입니다.</li>
<li><code>&lt;=&gt;</code> 같은 새로운 연산자를 생성할 수 없으며, 기존에 사용되는 연산자만 오버로딩할 수 있습니다. 오버로딩할 수 있는 연산자는 다음과 같습니다.
<ul>
<li>우리가 흔히 사용하는 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>//</code>, <code>%</code></li>
<li><code>@</code>, <code>&amp;</code>, <code>|</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>^</code>, <code>~</code> 등 자주는 사용되지 않는 연산자</li>
<li>복합 대입 연산자</li>
<li><code>==</code>, <code>=!</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 등의 비교 연산자</li>
</ul>
</li>
<li>다음 연산자는 오버로딩이 불가능한 연산자입니다 : <code>is</code>, <code>and</code>, <code>or</code>, <code>not</code>, <code>=</code></li>
</ul>
<p>각 연산자에 대한 특별 메소드의 이름은 <a href="https://docs.python.org/ko/3/reference/datamodel.html?object.__getattr__#emulating-numeric-types">공식 문서</a>를 참조해주세요.</p>
<p>그리고 다음은 이번 시간에 더 자세히 알아볼 내용입니다.</p>
<ul>
<li>중위 연산자는 왼쪽 요소에 대해서 관련 특별 메소드를 검사하며, 만약 실패하면 오른쪽 요소에 대해서 <strong>역순 특별 메소드</strong>를 검사합니다.</li>
<li>구현되지 않을 부분에 대해서는 <code>NotImplemented</code> 값을 리턴하여 <a href="1034">의도</a>를 명백히 합니다.</li>
<li>연산자 오버로딩은 적재적소에 쓰여야 합니다.</li>
</ul>
<hr>
<h2>중위 연산자가 작동하는 방식</h2>
<p>중위 연산자란, 연산자의 양쪽에 값이 오는 형태를 뜻합니다. <code>+</code>, <code>-</code> 등 거의 모든 형태의 연산자가 이러한 형태를 취하고 있지요. <code>+</code>가 실제로 파이썬에서는 다음과 같은 순서로 작동합니다.</p>
<pre><code class="language-mermaid-execute">graph TD
l1(&quot;a + b&quot;) --&gt; add1{&quot;a에 &lt;br&gt; __add__가&lt;br&gt; 있는가?&quot;}
add1--&gt;|&quot;있다&quot;| add1do[&quot;a.__add__(b)&lt;br&gt;를 실행하여&lt;br&gt;결과 값을&lt;br&gt; 구한다.&quot;]
add1do--&gt;impl1[&quot;결과 값이&lt;br&gt;NotImplemented&lt;br&gt;인가?&quot;]
impl1--&gt;|&quot;그렇다&quot;| add2
impl1--&gt;|&quot;아니다&quot;| result[&quot;결과 값을&lt;br&gt;최종적으로&lt;br&gt;반환한다.&quot;]
add1--&gt;|&quot;없다&quot;| add2{&quot;b에 &lt;br&gt; __radd__가&lt;br&gt; 있는가?&quot;}
add2--&gt;|&quot;있다&quot;| add2do[&quot;b.__radd__(a)&lt;br&gt;를 실행하여&lt;br&gt;결과 값을&lt;br&gt; 구한다.&quot;]
add2do--&gt;impl2[&quot;결과 값이&lt;br&gt;NotImplemented&lt;br&gt;인가?&quot;]
impl2--&gt;|&quot;그렇다&quot;| error
impl2--&gt;|&quot;아니다&quot;| result[&quot;결과 값을&lt;br&gt;최종적으로&lt;br&gt;반환한다.&quot;]
add2--&gt;|&quot;없다&quot;|error[&quot;TypeError&lt;br&gt;를 발생시킨다.&quot;]
</code></pre>
<p><em><code>a + b</code> 가 작동하는 방식</em></p>
<p>여기서 <a href="https://docs.python.org/ko/3/library/constants.html#NotImplemented"><code>NotImplemented</code></a>는 아직 구현되지 않았다는 뜻을 담은 특별한 값이자 이름이며, 잠시 뒤에 다시 설명합니다.</p>
<p>역순 특별 메소드는 오버로딩하고자 하는 메소드의 이름 제일 앞에 <code>r</code>이 들어가 있습니다. 여기서 <code>r</code>은 뜻을 딱히 엄격하게 두지는 않았지만 reserved, reflected, right 등의 뜻으로 해석할 수 있습니다. 즉 연산자의 오른쪽 값이 이용해봄직한 메소드라는 뜻이지요.</p>
<p>그렇다면 왜 이렇게 두 가지 버전을 만들어놓았을까요? 우리가 만든 클래스와 내장형 값을 자연스럽게 조화시키기 위함입니다. 아래 예제를 보면서 이야기를 이어가도록 하겠습니다.</p>
<hr>
<h3>역순 메소드가 존재하는 이유</h3>
<p>다음 예제를 참고해주세요. <code>Cup</code> 클래스는 현재 가지고 있는 물의 양을 나타내는 <code>water</code> 속성을 가지고 있습니다. 그리고 이 클래스로 만든 객체와 숫자를 <code>+</code>로 더하면 그만큼 <code>water</code>를 증가시켜 보고자 합니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, water):
        self.water = water
    
    def __repr__(self):
        return f&quot;Cup(water='{self.water}')&quot;

    def __add__(self, other):
        return Cup(self.water + other)

basic = Cup(30)
advanced = basic + 40
print(advanced)
</code></pre>
<pre><code class="language-plaintext">Cup(water='70')
</code></pre>
<p>잘 작동합니다. 하지만 <code>basic</code>과 <code>40</code>의 순서를 바꾸면 어떻게 될까요?</p>
<pre><code class="language-python">class Cup:
    def __init__(self, water):
        self.water = water
    
    def __repr__(self):
        return f&quot;Cup(water='{self.water}')&quot;

    def __add__(self, other):
        return Cup(self.water + other)

basic = Cup(30)
advanced = 40 + basic
print(advanced)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 12, in &lt;module&gt;
    advanced = 40 + basic
TypeError: unsupported operand type(s) for +: 'int' and 'Cup'
</code></pre>
<p>하하.. 에러가 발생했습니다. 우리가 <code>Cup</code>에게 <code>__add__</code> 메소드를 구현했지만 파이썬 인터프리터는 <code>int</code>에게서 <code>Cup</code>과 상호작용할 수 있는 <code>__add__</code> 메소드가 존재하는지를 먼저 검사합니다. 하지만 없습니다. 이럴 때의 해결 방법은 <code>Cup</code> 클래스에서 <code>__radd__</code> 메소드를 구현하는 것입니다!</p>
<pre><code class="language-python">class Cup:
    def __init__(self, water):
        self.water = water
    
    def __repr__(self):
        return f&quot;Cup(water='{self.water}')&quot;

    def __add__(self, other):
        return Cup(self.water + other)

    def __radd__(self, other):
        return self + other

basic = Cup(30)
advanced = 40 + basic
print(advanced)
</code></pre>
<pre><code class="language-plaintext">Cup(water='70')
</code></pre>
<p>훌륭하게 작동하게 되었습니다! <code>__radd__</code> 에서는 단순히 <code>self + other</code> 이라고 적은 것에 주목해주세요. 이렇게 하면 자연스레 <code>Cup</code>의 <code>__add__</code>를 사용하게 됩니다.</p>
<p>비교 연산자는 이러한 중위 연산자가 작동하는 방식과 살짝 다릅니다. 궁금하시다면, 이는 <a href="https://docs.python.org/ko/3/reference/datamodel.html?object.__getattr__#object.__lt__">공식 문서</a>에 설명을 넘기도록 하겠습니다.</p>
<hr>
<h2>구현되지 않는 부분 명백히 하기</h2>
<p>앞서 <code>__add__</code>가 어떻게 작동하는지에 대한 순서도를 볼 때 <code>NotImplemented</code> 라는 값이 등장했습니다. 이것은 <code>None</code>, <code>True</code>, <code>False</code>와 같이 키워드이고, 구현되지 않았음을 알리는 용도입니다.</p>
<p>위 <code>Cup</code> 예제를 그대로 갖고 와보겠습니다. 달라진 점은 <code>basic</code>에 <code>40</code>을 더하는 게 아니라 뜬금없는 <code>'abc'</code>를 더하고 있습니다. 이는 의도된 행동이 아니므로 에러가 일어나야 하겠지요.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, water):
        self.water = water
    
    def __repr__(self):
        return f&quot;Cup(water='{self.water}')&quot;

    def __add__(self, other):
        return Cup(self.water + other)

    def __radd__(self, other):
        return self + other

basic = Cup(30)
advanced = basic + 'abc'
print(advanced)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 15, in &lt;module&gt;
    advanced = basic + 'abc'
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 9, in __add__
    return Cup(self.water + other)
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>이 에러 메세지를 접하고 <code>Cup</code>에 무언가를 더하려면 <code>int</code>와 호환되는 어떤 <code>Cup</code>을 이용하는 사람 입장에서는 다소 곤혹스러울 수 있겠습니다.</p>
<pre><code class="language-python">class Cup:
    def __init__(self, water):
        self.water = water
    
    def __repr__(self):
        return f&quot;Cup(water='{self.water}')&quot;

    def __add__(self, other):
        try:
            return Cup(self.water + other)
        except TypeError:
            return NotImplemented

    def __radd__(self, other):
        return self + other

basic = Cup(30)
advanced = basic + 'abc'
print(advanced)
</code></pre>
<pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 18, in &lt;module&gt;
    advanced = basic + 'abc'
TypeError: unsupported operand type(s) for +: 'Cup' and 'str'
</code></pre>
<hr>
<h2>연산자 오버로딩은 적재적소에 쓰여야 합니다.</h2>
<p>연산자 오버로딩은 여러모로 양날의 검입니다. 한 눈에 보기 쉬워서 편리해질 수도 있지만, 남용하게 된다면 있느니만 못하는 기능이 되어버릴 수도 있지요. 아래는 전문가를 위한 파이썬의 글을 인용한 것입니다.</p>
<blockquote>
<p>연산자 오버로딩을 혐오하는 사람도 많다. 이 언어 기능은 남용되거나, 프로그래머를 혼란스럽게 만들거나, 버그를 만들거나, 예상치 못한 성능상의 병목이 될 수도 있다(지금까지 그래왔다). 그렇지만 잘 사용하면 코드의 가독성이 향상되고 만족스러운 API를 구현할 수 있다. 파이썬은 다음과 같은 제한을 두어 융통성, 사용성, 안전성을 적절히 유지한다.</p>
<p>(중략)</p>
<p>개발자 중 20~30퍼센트는 연산자 오버로딩을 악마의 자식이라고 생각하는 것 같다. 예를 들어 자신이 + 연산자를 오버로딩해서 사용하려는 용도와 다르게, 다른 개발자가 리스트 삽입 연산을 구현하도록 이미 + 연산자를 오버로딩했다면 정말 짜증난다. 오버로딩할 수 있는 연산자는 6개 정도 밖에 안 되지만, 이 연산자를 사람들이 수백만 가지 방식으로 사용하고 싶어 하기 때문에 이러한 문제가 발생한다. 따라서 여러분의 직관에 따라 연산자를 선택할 수 없는 경우가 종종 있다.</p>
</blockquote>
<p>우리는 <code>Slime</code> 객체에 대해 연산자 오버로딩을 구현했습니다. 하지만 이는 썩 좋지 못한 생각일 수 있습니다. <code>Slime</code>은 수치형도 아니고 어떠한 상태를 나타낸다는 용도의 클래스도 아니기 때문에 <code>+</code>가 직관적으로 어떠한 역할을 하는지 알기 어렵습니다. 차라리 처음에 시도했던 것처럼 <code>combineWith</code> 메소드로 기능을 구현하는 것이 의도를 명백히 보여주기 때문에 훨씬 나을 수 있습니다.</p>
<p>연산자 오버로딩에서 흔히 사용되는 예시 중 하나는 <a href="https://riptutorial.com/ko/python/example/29545/%EC%97%B0%EC%82%B0%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9">수학적인 개념의 벡터(vector)</a>입니다. 벡터는 수치형으로 이야기할 수 있고, 차원 만큼의 속성을 가지고 있어야 하기 때문에 클래스로 표현하기 용이하며, 무엇보다 <code>+</code>, <code>*</code> 등의 의미가 명확합니다.</p>
<hr>
<h2>특별 메소드를 직접 호출하지 마세요</h2>
<p>특별 메소드는 파이썬 인터프리터가 적절하게 이용하기 위한 메소드입니다. 우리는 우리가 만든 클래스가 파이썬 내부에서 잘 사용되기를 바라기 때문에 그러한 특별 메소드를 정의합니다. 만약 파이썬 인터프리터가 아닌 단순한 사용자가 사용하기를 기대하는 기능을 만든다면, 일반 메소드를 정의하면 됩니다. 특별 메소드의 기능을 사용하고 싶다면 특별 메소드를 직접 호출하는 것이 아니라, 그 로직을 이용하는 파이썬 문법을 사용하면 됩니다. <code>__getitem__</code> 메소드를 직접 호출하기보다, <code>[]</code>를 통해 항목에 접근하세요. 아래 표는 똑같은 말입니다.</p>
<table>
<thead>
<tr>
<th>~~ 한다면</th>
<th>~~ 하세요</th>
</tr>
</thead>
<tbody>
<tr>
<td>파이썬의 로직에 우리가 만든 클래스를 녹이고 싶다면</td>
<td>특별 메소드를 정의하세요</td>
</tr>
<tr>
<td>사용자 코드에서 사용될 기능을 만든다면</td>
<td>일반 메소드를 정의하세요</td>
</tr>
<tr>
<td>특별 메소드의 기능을 직접 사용하고 싶다면</td>
<td>특별 메소드를 직접 호출하지 말고 파이썬의 로직을 이용하세요</td>
</tr>
</tbody>
</table>
<p>단, 사용자 코드에서 특별 메소드를 호출하는 경우가 한 가지 있는데, 바로 <code>__init__</code> 메소드 안에서 상위 클래스의 <code>__init__</code>을 호출할 때입니다.</p>
<hr>
<h2>연습 문제</h2>
<ul>
<li>연산자 오버로딩의 뜻은 무엇인가?</li>
<li>우리가 만든 클래스를 예쁘게 보여주려면 어떤 특별 메소드를 구현해야 하는가?</li>
<li>우리가 만든 클래스가 리스트처럼 기능하기 위하여 어떤 특별 메소드를 구현해야 하는가?</li>
<li>파이썬 인터프리터가 <code>a + b</code> 를 맞닥뜨렸을 때 어떻게 동작하는지 설명하라.</li>
<li>내장 함수인 <code>abs</code>의 기능을 커스터마이징할 수 있는 특별 메소드의 이름을 검색하여 찾아보라.</li>
</ul>
<h2>프로그래밍 문제</h2>
<ol>
<li><code>SpecialStr</code> 클래스를 만드세요. 이 클래스의 목적은 <code>+</code> 연산시 수치형 및 문자형의 포괄적인 호환성 구현입니다. 클래스는 문자열 속성 하나를 가지고 있으며, 생성자의 인수 하나를 받아서 문자열 속성을 초기화시킵니다. 다음 코드를 실행시켰을 때 잘 출력되어야 합니다.</li>
</ol>
<pre><code class="language-python">sp = SpecialStr(‘abc’)
sp += ‘def’
sp = 56 + sp
sp += 3.14
print(sp)
</code></pre>
<pre><code class="language-plaintext">56abcdef3.14
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1265</wp:post_id>
		<wp:post_date><![CDATA[2020-01-17 23:24:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-17 14:24:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-27 15:51:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-27 06:51:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%8a%b9%eb%b3%84-%eb%a9%94%ec%86%8c%eb%93%9c%ec%99%80-%ec%97%b0%ec%82%b0%ec%9e%90-%ed%8c%8c%ec%9d%b4%ec%8d%ac%ec%9d%98-%eb%82%b4%eb%b6%80-%eb%8f%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1130</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; NotImplementedError와 NotImplemented &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1620</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-22 07:17:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-21 22:17:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 자세한 설명은 특별 메소드 글을 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587507465.43336;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1587507479.788109;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1375</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 명령문, 표현식 ~ 문법을 이루는 것들 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/622</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-13 18:53:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-13 09:53:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 특별 메소드와 연산자 – 파이썬의 내부 작동방식 이해하기 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589364930.800935;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589363612.521957;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 예외와 에러 - 예상치 못한 상황에 대응하기]]></title>
		<link>https://elvanov.com/1326</link>
		<pubDate>Sun, 19 Jan 2020 17:25:03 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1326</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>에러란?</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":1729,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/20181113050333.397421-e1587712393982.png" alt="" class="wp-image-1729"/><figcaption>롤하다 에러로 종료되면 짜증나쥬</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>뭔가 정상적으로 되지 않아서 종료되는 상황입니다. 서문은 빠르게 생략합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그램이 실행되기 전에 발생하는 에러</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>당장 에러를 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>hi?</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>  File "c:/Users/tooth/Desktop/test2.py", line 1
    hi?
      ^
SyntaxError: invalid syntax</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>파이썬 인터프리터가 파일을 대충 슥 훑어보고 아, 이건 영 아니다 싶은 건 바로 <code>SyntaxError</code>을 냅니다. 문법이 잘못되었다는 뜻이죠. 이건 아예 실행조차 되지 않는 상태입니다. 들여쓰기를 잘못해서 발생하는 <code>IndentationError</code>도 실행되지 않는 건 마찬가지입니다. 에러 메시지에서 몇 라인인지 알려주므로 그 쪽으로 가서 고쳐주도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그램 실행 중에 발생하는 에러</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사실 우리가 다루고자 하는 에러는 대부분 프로그램 실행 중에 발생합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;]
ls&#91;4]</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 2, in &lt;module>
    ls&#91;4]
IndexError: list index out of range</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>일단 문법적으로 보았을 때 하자가 없기 때문에 파일이 정상적으로 실행됩니다. 그리고 첫 번째 행인 <code>ls = []</code>는 제대로 작동합니다. 하지만 두 번째 행인 <code>ls[4]</code>에서는 에러가 발생합니다. 빈 배열이기 때문에 4번째 항목에 접근하는 것 자체가 어불성설입니다. 프로그램은 바로 종료됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>문법 에러와는 다르게, 프로그램 실행 중에 발생하는 에러는 <code>Traceback</code>이라는 것을 보여줍니다. 에러 메시지에서 <code><em>Traceback</em>&nbsp;(most recent call last)</code> 를 보여주는 이유는, <strong>오류를 발생시킨 함수 호출의 역추적한 내용을 보여주어 프로그래머가 한층 더 쉽게 에러를 수정할 수 있게 하기 위함</strong>입니다. <code>Traceback</code>의 단계는 함수 단위인데요, 여러 함수에 걸쳐져 있을 경우 어떻게 보이는지 테스트해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def a():
    ls = &#91;]
    ls&#91;4]

def b():
    a()

def c():
    b()

def d():
    c()

def e():
    d()

e()</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 17, in &lt;module>
    e()
  File "c:/Users/tooth/Desktop/test2.py", line 15, in e
    d()
  File "c:/Users/tooth/Desktop/test2.py", line 12, in d
    c()
  File "c:/Users/tooth/Desktop/test2.py", line 9, in c
    b()
  File "c:/Users/tooth/Desktop/test2.py", line 6, in b
    a()
  File "c:/Users/tooth/Desktop/test2.py", line 3, in a
    ls&#91;4]
IndexError: list index out of range</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>에러는 <code>a</code> 함수에서 발생했고, <code>a</code> 함수를 실행시킨 주체를 역추적해나가서 최종적으로 <code>e</code> 함수의 호출 부분까지 전부 보여줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>에러 핸들링</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>예상치 못한 상황에 발생하는 것이 에러입니다. 하지만 예상치 못한 상황에 도래한다고 해서 무조건 프로그램을 종료시켜야 할까요? 모든 세세한 사항을 전부 예측하여 에러가 발생할 구멍을 다 막는 완전고결한 프로그램을 만들어야 할까요? 파이썬의 철학은 그런 방향은 아닙니다. 오히려 <strong>일단 실행시켜보고, 에러가 나면 적당히 처리한다</strong> 가 주된 흐름입니다. "<span style="text-decoration: underline;">에러를 처리한다</span>"는 "<span style="text-decoration: underline;">에러를 핸들링한다</span>", "<span style="text-decoration: underline;">예외를 처리한다</span>" 라는 말과 똑같은 뜻입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아니, 이때까지의 프로그램은 에러가 발생하면 프로그램이 무조건 종료되는데, 처리할 틈이 어디 있다고 그러시나요? 파이썬에서는 프로그램이 종료되기 전에 에러를 처리할 유예를 둡니다. 아주 강력하게요. 그 문법은 바로 <code><strong>try ~ except ~ else ~ finally ~</strong> </code>입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본격적으로 넘어가기 전에, <span style="text-decoration: underline;"><strong>에러와 예외는 같은 뜻</strong></span>이라고 보시면 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>간단한 예제</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>간단한 예제를 살펴보며 예외를 어떻게 처리하는지 대강 살펴보도록 합시다. 다음 예제는 <code>Person</code>이라는 클래스를 정의하고 있습니다. <code>Person</code>에서는 <code>age</code>를 속성으로 가지고 있으며, <code>add_age</code> 메소드를 통해 <code>age</code>에 값을 더하고 있습니다. 하지만 <strong><code>add_age</code>를 호출할 때에 인수로 숫자형이 아니라 문자열이 들어가게 된다면 어떻게 될까요?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        self.age += age

p1 = Person('James', 15)
p1.add_age('ho')

print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 10, in &lt;module>
    p1.add_age('ho')
  File "c:/Users/tooth/Desktop/test2.py", line 7, in add_age
    self.age += age
TypeError: unsupported operand type(s) for +=: 'int' and 'str'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>예. 보시다시피 에러가 납니다. 에러가 나는 것은 당연합니다. 숫자에 어떻게 문자열을 더하나요. <code>프로그램의 끝입니다</code>는 출력도 되지 않았습니다. 에러가 나는 순간 프로그램이 종료되었기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 우리는 단순한 프로그램 종료가 아니라 에러를 적절하게 처리하고자 합니다. 이제 새로운 문법을 사용할 차례입니다.<strong> 바로 <code>try</code>와 <code>except</code> 입니다!</strong> 코드를 수정해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        try:
            self.age += age
        except:
            print("올바른 숫자를 넣어주세요!")

p1 = Person('James', 15)
p1.add_age('ho')

print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>올바른 숫자를 넣어주세요!
프로그램의 끝입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>와우! 프로그램이 끝나지 않았습니다. 프로그램의 끝입니다도 제대로 출력되었습니다. <span style="text-decoration: underline;"><code>try ~ except</code> 구문에서 에러가 잡힌다면 에러를 적절히 처리했다고 간주하고 프로그램을 계속 진행</span>시키는 파이썬 인터프리터의 모습을 보실 수 있습니다~~! </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>문법 설명</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 가장 간단한 형태는 다음과 같으며,</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>try:
    pass # 예외가 발생할 법한 코드
except: 
    pass # 예외가 발생했을 때 실행할 코드</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>완전한 전체 형태는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>try:
    pass # 예외가 발생할 법한 코드
except expression as identifier: 
    pass # 예외가 발생했을 때 실행할 코드
else: 
    pass # 예외 발생 없이 무사히 try가 실행되었을 때 실행할 코드
finally:
    pass # except 또는 else 절 실행 후 마지막으로 실행할 코드</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>except</code> 부분을 집중적으로 봅시다. 여기는 다음의 세 가지로 용법으로 사용할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code><span style="text-decoration: underline;">except:</span></code> - <strong>어떤 예외든 상관없이 모두 받아</strong> 적절히 처리하겠다는 뜻입니다.</li><li><code><span style="text-decoration: underline;">except SomeException:</span></code> - <strong>에러의 종류가 <code>SomeException</code> 인 경우</strong>에, 하지만 <strong>에러 정보는 받을 필요 없이</strong> 적절히 에러 처리만 하겠다는 뜻입니다. <span style="text-decoration: underline;">이 구문은 여러 번 사용할 수 있습니다.</span></li><li><code><span style="text-decoration: underline;">except SomeException as identifier:</span></code>의 뜻은, <strong>예외의 종류를 <code>SomeException</code>으로 지정</strong>하고, <strong>에러에 관한 정보를 <code>identifier</code>이라는 변수로 받겠다</strong>는 뜻입니다. <span style="text-decoration: underline;">이 구문도 여러 번 사용할 수 있습니다.</span></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>else</code> 와 <code>finally</code>도 각각 독립적으로 선택 사항입니다. 실제로 코드를 만들어보는 연습을 하려면 프로그래밍 문제를 이용하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>처음에 다루었던 예제로 에러 메시지를 한번 출력해보도록 합시다. <code>except</code>를 가장 복잡한 형태로 써보도록 합시다. 참고로 <code>Exception</code> 클래스는 종료 시그널을 제외한 모든 예외나 에러의 조상 클래스입니다. <strong>에러 정보를 변수로 받아 <code>print</code>에 그대로 출력하면 에러 메시지를 확인할 수 있습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        try:
            self.age += age
            print("현재 나이는", self.age, "입니다.")
        except Exception as e:
            print("올바른 숫자를 넣어주세요! >>", e)

p1 = Person('James', 15)
p1.add_age('ho')
p1.add_age(10)
print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>올바른 숫자를 넣어주세요! >> unsupported operand type(s) for +=: 'int' and 'str'
현재 나이는 25 입니다.
프로그램의 끝입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>에러 만들고 발생시키기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아니, 에러를 만든다니 그게 무슨 소리입니까? 말 그대로입니다.<strong> 뭔가 예상대로 동작하진 않지만 에러가 없이 동작할 때</strong>도 있을 겁니다. 예를 들어 나이를 더하려고 하는데 소수가 들어왔습니다. 소수랑 정수는 잘 더해지죠! 이를 그대로 잠자코 두고 보아야 할까요? </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        try:
            self.age += age
            print("현재 나이는", self.age, "입니다.")
        except Exception as e:
            print("올바른 숫자를 넣어주세요! >>", e)

p1 = Person('James', 15)
p1.add_age('ho')
p1.add_age(10)
p1.add_age(12.3)
print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>올바른 숫자를 넣어주세요! >> unsupported operand type(s) for +=: 'int' and 'str'
현재 나이는 25 입니다.
현재 나이는 37.3 입니다.
프로그램의 끝입니다</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>나이를 도저히 소수점으로 두고 싶지 않습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>여기서 두 가지 방법이 있습니다. 우선 첫 번째는, <strong>함수의 인수로 들어온 <code>age</code>를 <code>int</code>로 강제 형변환 하여 사용하는 것입니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        try:
            self.age += int(age)
            print("현재 나이는", self.age, "입니다.")
        except Exception as e:
            print("올바른 숫자를 넣어주세요! >>", e)

p1 = Person('James', 15)
p1.add_age('ho')
p1.add_age(10)
p1.add_age(12.3)
print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>올바른 숫자를 넣어주세요! >> invalid literal for int() with base 10: 'ho'
현재 나이는 25 입니다.
현재 나이는 37 입니다.
프로그램의 끝입니다.
PS C:\Users\tooth></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 하면 기능 상에 아무런 문제가 없습니다. 이 정도로 타입 변환만 해줘도 할 일은 다 했다고 보면 됩니다. 어차피 문자열은 타입 변환인 <code>int(age)</code>에서도 에러가 발생하니까, 뭔가 예상되지 않은 일이 벌어질 일은 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 <code>Person</code> 클래스를 이용하는 클라이언트가 아주 많아서 클래스를 아주 세밀하게 구성해야 한다면, 이야기가 조금 달라집니다. 에러 메시지를 한 번 살펴봅시다. <code>'ho'</code>는 10 진수 정수로 바꿀 수 없는 잘못된 리터럴이라 되어있습니다. 함수의 내부를 모르는 사람 입장에서는 그렇게 <strong>직관적인 에러 메시지가 아닙니다. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>그러므로 에러 메시지를 확실히 하기 위해 새로운 에러를 발생시켜 보자구요. 에러는 <strong><code>raise</code>로 만들어낼 수 있습니다.</strong> 또한 <code>age</code>가 어떤 타입인지 체크하기 위해 <strong><code>isinstance</code> 내장 함수와 <code>numbers</code> 모듈을 이용</strong>할 것입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from numbers import Integral

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def add_age(self, age):
        try:
            if not isinstance(age, Integral):
                raise TypeError("정수가 입력되지 않았어요!!")
    
            self.age += age
            print("현재 나이는", self.age, "입니다.")
        except Exception as e:
            print("올바른 숫자를 넣어주세요! >>", e)

p1 = Person('James', 15)
p1.add_age('ho')
p1.add_age(10)
p1.add_age(1.3)
print("프로그램의 끝입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>올바른 숫자를 넣어주세요! >> 정수가 입력되지 않았어요!!
현재 나이는 25 입니다.
올바른 숫자를 넣어주세요! >> 정수가 입력되지 않았어요!!
프로그램의 끝입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 예제는 오로지 연습용으로 만든 예제이므로 다소 실용적이지 않을 수 있습니다. 하지만 이렇게 어떤 타입인지 검사하는 것은 예외나 에러를 다루는 것과 밀접하게 연관되어 있습니다. 타입 검사와 관련된 모듈은 <a href="https://docs.python.org/ko/3/library/collections.abc.html">collections.abc</a>와 <a href="https://docs.python.org/ko/3/library/numbers.html">numbers</a> 등이 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>보시다시피 <strong><code>raise</code>의 기본적인 사용법은 <code>raise 에러타입("에러메시지")</code></strong> 입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아까 파이썬의 철학에 대해 조금 언급할 때 <strong>일단 실행시켜보고, 에러가 나면 적당히 처리한다</strong>라고 했었죠? 이것은 만들어져 있는 라이브러리나 클래스나 다양한 기능을 실행시키는 입장인 것입니다. <span style="text-decoration: underline;">본격적인 개발자가 아니라면 대부분 만들어져 있는 기능을 사용하는 데만 바쁘기 때문에 에러를 직접 발생시키거나 하는 일이 거의 없습니다.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>반면 다른 우둔한 백성들이 이용할 만한 모듈이나 클래스를 만드는 똑똑한 사람이 되면 입장차가 조금 생깁니다. 바로 <strong>내 선에서 해결할 수 없는 문제는 에러를 발생시켜서 책임을 전가시킨다.</strong> 입니다. 이 때는 <code>raise</code>를 적극적으로 활용해볼 여지가 있습니다. 단, 에러 메시지를 논리정연하게 정리해 주어야겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Traceback 직접 다뤄보기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(추가 예정)</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(추가 예정)</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(추가 예정)</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(추가 예정)</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1326</wp:post_id>
		<wp:post_date><![CDATA[2020-01-20 02:25:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-19 17:25:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-24 20:22:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-24 11:22:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%98%88%ec%99%b8%ec%99%80-%ec%97%90%eb%9f%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-01-19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 튜플, 세트, 딕셔너리 - 변수를 다양한 방법으로 묶기]]></title>
		<link>https://elvanov.com/1357</link>
		<pubDate>Thu, 23 Jan 2020 15:33:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1357</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"지금까지 변수를 묶는 변수는 `list` 외에는 배우지 않았습니다. 리스트처럼 변수를 묶는 변수를 아울러 컨테이너라고 합니다. 컨테이너는 작동 방식과 특성에 따라 여러 갈래로 나뉠 수 있으며, 오늘 배울 튜플, 세트, 딕셔너리는 파이썬에서 기본적으로 제공하는 리스트와는 또 다른 컨테이너입니다. 이들의 특성을 알아봅시다.\n\n## 튜플 (`tuple`)\n\n`list`에는 여러가지 변수들을 언제든지 원하는 때에 추가하고 삭제할 수 있습니다. 또한 인덱스와 `[]`를 통해서 리스트 내부의 값을 즉시 추출해낼 수 있으며, `for` 반복문에 써서 항목을 쉽게 순회할 수 있습니다. 리스트는 언제든지 추가와 삭제가 가능하여 편리하지만, 이러한 특성은 특정한 상황에는 되려 단점이 될 수 있습니다. 값이 한 번 정해지면 영원히 값이 바뀌지 않아야 하는 상황에서는 오히려 튜플을 쓰기 더 적합합니다. 값이 바뀌지 않는 특성을 불변성이라고 하며, 이것이 필요한 구체적인 예는 추가 예정입니다.\n\n튜플을 새롭게 만드려면 소괄호 `()`와 쉼표 `,`로 구분되는 항목들을 써 넣으면 됩니다. 예를 들어 `tup = (1, 2, '하이')`라고 작성할 수 있습니다. 빈 튜플은 `()`으로 작성할 수 있고, 단 하나의 항목만 있는 튜플은 `('호',)`와 같이 쉼표를 섞어줘야 하나의 튜플로 인식할 수 있습니다.\n\n예시를 보면서 진행하겠습니다.\n\n\u002d\u002d-\n\n```python\ntup = (1, 2, '하이')\nprint(tup) ##a_1##\nprint(type(tup)) ##a_2##\nprint(tup[2]) ##a_3##\nprint(len(tup)) ##a_4##\n\ntup += ('호',) ##a_5##\nprint(tup)\n\n# tup[2] = '헬로우' ##a_6##\n\nfor val in tup: ##a_7##\n    print(val)\n\npeople = [('철수', 24), ('민수', 23), ('윤희', 15)] ##a_8##\nfor name, age in people:\n    print(name, '의 나이는', age, '살 입니다.')\n```\n```plaintext\n(1, 2, '하이')\n\u003cclass 'tuple'\u003e\n하이\n3\n(1, 2, '하이', '호')\n1\n2\n하이\n호\n철수 의 나이는 24 살 입니다.\n민수 의 나이는 23 살 입니다.\n윤희 의 나이는 15 살 입니다.\n```\n\n### *a_1*(1.) 그대로 출력\n\n튜플은 `print`를 통해 그대로 출력할 수 있습니다.\n\n### *a_2*(2.) 타입\n\n튜플의 타입은 `tuple` 입니다.\n\n### *a_3*(3.) 항목 접근\n\n리스트와 마찬가지로 `[]`를 이용해 항목에 접근할 수 있습니다.\n\n### *a_4*(4.) 길이\n\n리스트와 마찬가지로 `len` 함수를 통해 길이를 구할 수 있습니다.\n\n### *a_5*(5.) 튜플 덧붙이기\n\n튜플은 리스트처럼 `append` 등 항목을 변형하는 메소드가 없습니다. 만약 튜플끼리 `+` 한다면 합쳐진 **새로운** 튜플이 생성됩니다. 튜플의 항목 하나하나가 문자열 `str`의 글자 하나하나 라고 상상하시면 더 와닿을 수도 있겠습니다.\n\n### *a_6*(6.) 수정은 불가\n\n튜플의 내부 값은 수정할 수 없습니다. 그래서 `[]`를 통해 접근한 뒤 항목을 수정하려고 하면 아래와 같은 에러가 발생합니다.\n\n```python\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Desktop/test2.py\u0022, line 10, in \u003cmodule\u003e\n    tup[2] = '헬로우'\nTypeError: 'tuple' object does not support item assignment\n```\n\n### *a_7*(7.) for\n\n튜플은 리스트와 마찬가지로 `for` 루프를 통해 각 항목에 접근할 수 있습니다.\n\n### *a_8*(8.) 리스트와 함께 쓰기\n\n`for`에서 변수를 새롭게 정의하는 칸에 쉼표로 항목을 구분해주어 튜플의 항목을 즉시 꺼내올 수 있습니다. \n\n\u002d\u002d-\n\n## 세트 (set)\n\n세트는 쉽게 말하여 집합입니다. 즉 항목 간 순서가 존재하지 않고, 항목의 중복을 허용하지 않습니다. 중복된 항목을 추가하려 하면 가볍게 무시됩니다. 순서가 없으므로 `[]`를 통한 접근이 불가능하며, `for` 를 이용해 모든 항목을 1회 순회할 수는 있지만 순서는 무작위입니다. 세트는 영어로 `set` 입니다. 세트는 중괄호 `{}`와 쉼표 `,`를 통해 항목을 구분하여 새로운 세트를 생성해낼 수 있습니다.\n\n```python\nss = {1, '하이', 3, 2}\n\nfor item in ss: ##b_1##\n    print(item)\n\nss.add('하이') ##b_2##\nprint(ss)\n\nss.add('호빵') ##b_3##\nprint(ss)\n```\n```plaintext\n2\n1\n하이\n3\n{2, 1, '하이', 3}\n{1, 2, '하이', 3, '호빵'}\n```\n\n### *b_1*(1.) for\n\n리스트나 튜플과 마찬가지로 `for`를 통해 항목을 순회할 수 있지만 그 순서는 보장되어 있지 않습니다.\n\n### *b_2*(2.) 중복된 항목 추가\n\n`add` 메소드를 통해 항목을 추가할 수 있지만, 만약 항목이 중복되어 있다면 아무 일도 일어나지 않습니다.\n\n### *b_3*(3.) 중복되지 않은 항목 추가\n\n중복되지 않는 새로운 항목을 추가하려고 하면 의도대로 잘 작동합니다. \n\n\u002d\u002d-\n\n## 딕셔너리 (dictionary)\n\n딕셔너리의 모든 항목은 키(key)와 값(value)이 한 쌍으로 존재합니다. 항목 내 접근과 수정은 키(key)를 통해 이루어지며 실제 값은 별도로 있습니다. 마치 우리가 변수의 이름과 값을 구분하는 것처럼 딕셔너리도 마찬가지입니다. 키는 중복을 허용하지 않습니다. 세트와 마찬가지로 항목간 순서는 무의미합니다.\n\n새로운 딕셔너리를 만드려면 중괄호 `{}`와 쉼표 `,`를 이용하고, 키와 값을 구분하기 위해 콜론 `:`을 둡니다.\n\n```python\nperson = {'name':'철수', 'age':24, 'height':173, 1234:5678}\n\nprint(person['name']) ##c_1##\n\nperson['age'] = 34 ##c_2##\nprint(person)\n\nperson['hometown'] = 'Busan' ##c_3##\nprint(person)\n\nfor key, value in person.items(): ##c_4##\n    print('키:', key, '값:', value)\n```\n```plaintext\n철수\n{'name': '철수', 'age': 34, 'height': 173, 1234: 5678}\n{'name': '철수', 'age': 34, 'height': 173, 1234: 5678, 'hometown': 'Busan'}\n키: name 값: 철수\n키: age 값: 34\n키: height 값: 173\n키: 1234 값: 5678\n키: hometown 값: Busan\n```\n\n### *c_1*(1.) 항목 접근\n\n`[]`에 키를 넣어줌으로써 항목에 접근할 수 있습니다.\n\n### *c_2*(2.) 항목 수정\n\n`[]`로 접근한 것을 대입하면 항목이 수정됩니다.\n\n### *c_3*(3.) 항목 추가\n\n존재하지 않는 키에 대한 대입 시도는 새로운 항목을 만들어냅니다.\n\n### *c_4*(4.) `for`\n\n딕셔너리는 그 자체로 `for`에 넣을 수 없습니다. 하지만 `items` 메소드를 호출하게 되면 키-값 쌍 튜플이 여러 개 담긴 리스트를 반환하여 `for`를 사용할 수 있게 됩니다. 위 코드에서 `person.items()`는 `[('name', '철수'), ('age', 34), ('height', 173), (1234, 5678), ('hometown', 'Busan')]`와 아주 유사한 결과를 내놓습니다.\n\n\u002d\u002d-\n\n## 프로그래밍 문제\n\n1. 외부에서 데이터를 읽어와야 하는 상황이며, `getData` 함수가 그 역할을 한다고 가정한다. 이 함수의 반환값은 딕셔너리이다. 우리는 데이터의 `10`이라는 키 값을 이용해 데이터를 얻고 싶지만 이 딕셔너리에 `10`이라는 키 값이 있는지 없는지 알 수 없다. 즉 `data[10]`의 결과가 제대로 나올 수도 있고 키를 찾을 수 없어 에러가 발생할 수도 있다. 이러한 상황에서 절대 에러가 나오지 않도록 프로그램을 설계하고자 한다. 키가 존재한다면 데이터를 그대로 가지고 오고, 키가 존재하지 않는다면 `0`으로 간주하도록 다음 코드를 적절히 수정하라.\n\n   ```python\n   import random\n   def getData():\n       dic = {}\n       for i in range(10):\n           dic[random.randint(1, 20)] = i\n       return dic\n   \n   data = getData()\n   # print(data[10]) # 에러가 일어날 수도 있고 일어나지 않을 수도 있다.\n   ```\n\n   - 힌트1. 파이썬 딕셔너리 메소드 중 `get` 을 검색해보라.\n\n   - 힌트2. 파이썬 딕셔너리 메소드 중 `keys` 를 검색해보고, 그와 함께 `in` 연산자를 고려해보라.\n\n\u002d\u002d-\n\n## 프로그래밍 문제 정답\n\n1. 코드입니다.\n\n   ```python\n   import random\n   def getData():\n       dic = {}\n       for i in range(10):\n           dic[random.randint(1, 20)] = i\n       return dic\n   \n   data = getData()\n   \n   print(data.get(10, 0)) # get을 이용\n   \n   if 10 in data.keys(): # keys를 이용\n       print(data[10])\n   else:\n       print(0)\n   ```\n\n"} -->
<div class="wp-block-jetpack-markdown"><p>지금까지 변수를 묶는 변수는 <code>list</code> 외에는 배우지 않았습니다. 리스트처럼 변수를 묶는 변수를 아울러 컨테이너라고 합니다. 컨테이너는 작동 방식과 특성에 따라 여러 갈래로 나뉠 수 있으며, 오늘 배울 튜플, 세트, 딕셔너리는 파이썬에서 기본적으로 제공하는 리스트와는 또 다른 컨테이너입니다. 이들의 특성을 알아봅시다.</p>
<h2>튜플 (<code>tuple</code>)</h2>
<p><code>list</code>에는 여러가지 변수들을 언제든지 원하는 때에 추가하고 삭제할 수 있습니다. 또한 인덱스와 <code>[]</code>를 통해서 리스트 내부의 값을 즉시 추출해낼 수 있으며, <code>for</code> 반복문에 써서 항목을 쉽게 순회할 수 있습니다. 리스트는 언제든지 추가와 삭제가 가능하여 편리하지만, 이러한 특성은 특정한 상황에는 되려 단점이 될 수 있습니다. 값이 한 번 정해지면 영원히 값이 바뀌지 않아야 하는 상황에서는 오히려 튜플을 쓰기 더 적합합니다. 값이 바뀌지 않는 특성을 불변성이라고 하며, 이것이 필요한 구체적인 예는 추가 예정입니다.</p>
<p>튜플을 새롭게 만드려면 소괄호 <code>()</code>와 쉼표 <code>,</code>로 구분되는 항목들을 써 넣으면 됩니다. 예를 들어 <code>tup = (1, 2, '하이')</code>라고 작성할 수 있습니다. 빈 튜플은 <code>()</code>으로 작성할 수 있고, 단 하나의 항목만 있는 튜플은 <code>('호',)</code>와 같이 쉼표를 섞어줘야 하나의 튜플로 인식할 수 있습니다.</p>
<p>예시를 보면서 진행하겠습니다.</p>
<hr>
<pre><code class="language-python">tup = (1, 2, '하이')
print(tup) ##a_1##
print(type(tup)) ##a_2##
print(tup[2]) ##a_3##
print(len(tup)) ##a_4##

tup += ('호',) ##a_5##
print(tup)

# tup[2] = '헬로우' ##a_6##

for val in tup: ##a_7##
    print(val)

people = [('철수', 24), ('민수', 23), ('윤희', 15)] ##a_8##
for name, age in people:
    print(name, '의 나이는', age, '살 입니다.')
</code></pre>
<pre><code class="language-plaintext">(1, 2, '하이')
&lt;class 'tuple'&gt;
하이
3
(1, 2, '하이', '호')
1
2
하이
호
철수 의 나이는 24 살 입니다.
민수 의 나이는 23 살 입니다.
윤희 의 나이는 15 살 입니다.
</code></pre>
<h3><em>a_1</em>(1.) 그대로 출력</h3>
<p>튜플은 <code>print</code>를 통해 그대로 출력할 수 있습니다.</p>
<h3><em>a_2</em>(2.) 타입</h3>
<p>튜플의 타입은 <code>tuple</code> 입니다.</p>
<h3><em>a_3</em>(3.) 항목 접근</h3>
<p>리스트와 마찬가지로 <code>[]</code>를 이용해 항목에 접근할 수 있습니다.</p>
<h3><em>a_4</em>(4.) 길이</h3>
<p>리스트와 마찬가지로 <code>len</code> 함수를 통해 길이를 구할 수 있습니다.</p>
<h3><em>a_5</em>(5.) 튜플 덧붙이기</h3>
<p>튜플은 리스트처럼 <code>append</code> 등 항목을 변형하는 메소드가 없습니다. 만약 튜플끼리 <code>+</code> 한다면 합쳐진 <strong>새로운</strong> 튜플이 생성됩니다. 튜플의 항목 하나하나가 문자열 <code>str</code>의 글자 하나하나 라고 상상하시면 더 와닿을 수도 있겠습니다.</p>
<h3><em>a_6</em>(6.) 수정은 불가</h3>
<p>튜플의 내부 값은 수정할 수 없습니다. 그래서 <code>[]</code>를 통해 접근한 뒤 항목을 수정하려고 하면 아래와 같은 에러가 발생합니다.</p>
<pre><code class="language-python">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Desktop/test2.py&quot;, line 10, in &lt;module&gt;
    tup[2] = '헬로우'
TypeError: 'tuple' object does not support item assignment
</code></pre>
<h3><em>a_7</em>(7.) for</h3>
<p>튜플은 리스트와 마찬가지로 <code>for</code> 루프를 통해 각 항목에 접근할 수 있습니다.</p>
<h3><em>a_8</em>(8.) 리스트와 함께 쓰기</h3>
<p><code>for</code>에서 변수를 새롭게 정의하는 칸에 쉼표로 항목을 구분해주어 튜플의 항목을 즉시 꺼내올 수 있습니다.</p>
<hr>
<h2>세트 (set)</h2>
<p>세트는 쉽게 말하여 집합입니다. 즉 항목 간 순서가 존재하지 않고, 항목의 중복을 허용하지 않습니다. 중복된 항목을 추가하려 하면 가볍게 무시됩니다. 순서가 없으므로 <code>[]</code>를 통한 접근이 불가능하며, <code>for</code> 를 이용해 모든 항목을 1회 순회할 수는 있지만 순서는 무작위입니다. 세트는 영어로 <code>set</code> 입니다. 세트는 중괄호 <code>{}</code>와 쉼표 <code>,</code>를 통해 항목을 구분하여 새로운 세트를 생성해낼 수 있습니다.</p>
<pre><code class="language-python">ss = {1, '하이', 3, 2}

for item in ss: ##b_1##
    print(item)

ss.add('하이') ##b_2##
print(ss)

ss.add('호빵') ##b_3##
print(ss)
</code></pre>
<pre><code class="language-plaintext">2
1
하이
3
{2, 1, '하이', 3}
{1, 2, '하이', 3, '호빵'}
</code></pre>
<h3><em>b_1</em>(1.) for</h3>
<p>리스트나 튜플과 마찬가지로 <code>for</code>를 통해 항목을 순회할 수 있지만 그 순서는 보장되어 있지 않습니다.</p>
<h3><em>b_2</em>(2.) 중복된 항목 추가</h3>
<p><code>add</code> 메소드를 통해 항목을 추가할 수 있지만, 만약 항목이 중복되어 있다면 아무 일도 일어나지 않습니다.</p>
<h3><em>b_3</em>(3.) 중복되지 않은 항목 추가</h3>
<p>중복되지 않는 새로운 항목을 추가하려고 하면 의도대로 잘 작동합니다.</p>
<hr>
<h2>딕셔너리 (dictionary)</h2>
<p>딕셔너리의 모든 항목은 키(key)와 값(value)이 한 쌍으로 존재합니다. 항목 내 접근과 수정은 키(key)를 통해 이루어지며 실제 값은 별도로 있습니다. 마치 우리가 변수의 이름과 값을 구분하는 것처럼 딕셔너리도 마찬가지입니다. 키는 중복을 허용하지 않습니다. 세트와 마찬가지로 항목간 순서는 무의미합니다.</p>
<p>새로운 딕셔너리를 만드려면 중괄호 <code>{}</code>와 쉼표 <code>,</code>를 이용하고, 키와 값을 구분하기 위해 콜론 <code>:</code>을 둡니다.</p>
<pre><code class="language-python">person = {'name':'철수', 'age':24, 'height':173, 1234:5678}

print(person['name']) ##c_1##

person['age'] = 34 ##c_2##
print(person)

person['hometown'] = 'Busan' ##c_3##
print(person)

for key, value in person.items(): ##c_4##
    print('키:', key, '값:', value)
</code></pre>
<pre><code class="language-plaintext">철수
{'name': '철수', 'age': 34, 'height': 173, 1234: 5678}
{'name': '철수', 'age': 34, 'height': 173, 1234: 5678, 'hometown': 'Busan'}
키: name 값: 철수
키: age 값: 34
키: height 값: 173
키: 1234 값: 5678
키: hometown 값: Busan
</code></pre>
<h3><em>c_1</em>(1.) 항목 접근</h3>
<p><code>[]</code>에 키를 넣어줌으로써 항목에 접근할 수 있습니다.</p>
<h3><em>c_2</em>(2.) 항목 수정</h3>
<p><code>[]</code>로 접근한 것을 대입하면 항목이 수정됩니다.</p>
<h3><em>c_3</em>(3.) 항목 추가</h3>
<p>존재하지 않는 키에 대한 대입 시도는 새로운 항목을 만들어냅니다.</p>
<h3><em>c_4</em>(4.) <code>for</code></h3>
<p>딕셔너리는 그 자체로 <code>for</code>에 넣을 수 없습니다. 하지만 <code>items</code> 메소드를 호출하게 되면 키-값 쌍 튜플이 여러 개 담긴 리스트를 반환하여 <code>for</code>를 사용할 수 있게 됩니다. 위 코드에서 <code>person.items()</code>는 <code>[('name', '철수'), ('age', 34), ('height', 173), (1234, 5678), ('hometown', 'Busan')]</code>와 아주 유사한 결과를 내놓습니다.</p>
<hr>
<h2>프로그래밍 문제</h2>
<ol>
<li>
<p>외부에서 데이터를 읽어와야 하는 상황이며, <code>getData</code> 함수가 그 역할을 한다고 가정한다. 이 함수의 반환값은 딕셔너리이다. 우리는 데이터의 <code>10</code>이라는 키 값을 이용해 데이터를 얻고 싶지만 이 딕셔너리에 <code>10</code>이라는 키 값이 있는지 없는지 알 수 없다. 즉 <code>data[10]</code>의 결과가 제대로 나올 수도 있고 키를 찾을 수 없어 에러가 발생할 수도 있다. 이러한 상황에서 절대 에러가 나오지 않도록 프로그램을 설계하고자 한다. 키가 존재한다면 데이터를 그대로 가지고 오고, 키가 존재하지 않는다면 <code>0</code>으로 간주하도록 다음 코드를 적절히 수정하라.</p>
<pre><code class="language-python">import random
def getData():
    dic = {}
    for i in range(10):
        dic[random.randint(1, 20)] = i
    return dic

data = getData()
# print(data[10]) # 에러가 일어날 수도 있고 일어나지 않을 수도 있다.
</code></pre>
<ul>
<li>
<p>힌트1. 파이썬 딕셔너리 메소드 중 <code>get</code> 을 검색해보라.</p>
</li>
<li>
<p>힌트2. 파이썬 딕셔너리 메소드 중 <code>keys</code> 를 검색해보고, 그와 함께 <code>in</code> 연산자를 고려해보라.</p>
</li>
</ul>
</li>
</ol>
<hr>
<h2>프로그래밍 문제 정답</h2>
<ol>
<li>
<p>코드입니다.</p>
<pre><code class="language-python">import random
def getData():
    dic = {}
    for i in range(10):
        dic[random.randint(1, 20)] = i
    return dic

data = getData()

print(data.get(10, 0)) # get을 이용

if 10 in data.keys(): # keys를 이용
    print(data[10])
else:
    print(0)
</code></pre>
</li>
</ol>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1357</wp:post_id>
		<wp:post_date><![CDATA[2020-01-24 00:33:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-23 15:33:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-01 00:04:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-31 15:04:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ed%8a%9c%ed%94%8c-%ec%84%b8%ed%8a%b8-%eb%94%95%ec%85%94%eb%84%88%eb%a6%ac-%eb%b3%80%ec%88%98%eb%a5%bc-%eb%8b%a4%ec%96%91%ed%95%9c-%eb%b0%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1151</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 실습 &#8211; 원카드 게임 만들기 (2) &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1517</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-24 11:00:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-24 02:00:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 함수를 완전히 뒤엎습니다. 파이썬의 딕셔너리와 딕셔너리의 get 메소드를 활용하는 방법으로 수정할 예정입니다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1587694195.490149;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587693658.560879;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 실습 - 원카드 게임 만들기 (1)]]></title>
		<link>https://elvanov.com/1441</link>
		<pubDate>Sun, 02 Feb 2020 23:21:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1441</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## 들어가며\n\n하나의 실용적인 프로그램을 만드는 것은 어렵습니다. 아주 간단한 프로그램은 만들기 쉽지만 대개 교육의 목적이기 때문에 심히 실용적이지 않습니다. 그렇다고 실용적인 프로그램을 직접 만들겠다 하면, 정말 많은 변수에 대해서 모두 핸들링할 수 있어야 합니다. 그래서 초기의 설계 단계에서부터 실제 구현 단계까지 생각해야 할 것이 한 두 가지가 아닙니다. 실전 경험이 없는 초보자들은 자신이 다룰 수 있는 도구의 사용법을 모두 익혔다고 해도 그것을 응용하기가 굉장히 어렵습니다. \n\n그래서 교육적이고 간단한 프로그램과 실용적이고 복잡한 프로그램 가운데 어딘가에 끼여 있는, 교육용이기는 하지만 실용적인 프로그램을 만들 때 생각해야 할 것들을 정리할 수 있는 하나의 프로젝트를 진행하고자 합니다. 프로젝트는 현실에서 우리가 흔하게 접할 수 있어서 친근하게 느껴져야 하며, 또한 지금까지 배워온 여러가지 기법을 충분히 활용할 수 있는, 너무 작지 않은 규모의 프로젝트여야 합니다. 저는 간단한 게임을 만들면 좋겠다 싶었고, 어린 시절부터 간간히 친구들과 즐겨온 **원 카드 게임**을 직접 만들어보면 어떨까 생각이 들었습니다. (원 카드 게임에 대해 전혀 모르시는 분이라면 가까운 지인과 직접 해보시기를 권장드리며, 그것이 여의치 않다면 규칙 정하기를 아주 꼼꼼히 읽어주세요)\n\n\u002d\u002d-\n\n## 사전 공부\n\n- 변수와 리스트의 개념과 사용법\n- 연산자\n- 함수\n- 클래스\n\n\u002d\u002d-\n\n## 규칙 정하기\n\n우리는 원카드 게임을 만들 것입니다. 근데 원카드 게임이 무엇이죠?\n\n\n\u003e - 앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낸다.\n\n\n정확합니다! 게임을 만약 한 문장으로 정리한다면 위와 같이 간단하게 정리할 수 있겠습니다. 하지만 우리의 컴퓨터에게는 처음부터 끝까지 일일히 가르쳐줘야 합니다. 저러한 자연어를 충분히 이해하려면 인공지능의 수준은 아직 멀었습니다. 사실 원카드를 전혀 모르는 사람 입장에서도 저 말은 굉장히 뜬금없습니다. \u0022카드를 어떻게 얻는 것인가?\u0022, \u0022카드를 낼 수 있는건가?\u0022, \u0022카드를 어디에서 어디로 낸다는 것인가?\u0022, \u0022카드를 아무 때에나 내도 되는 것인가?\u0022등등 질문 투성이로 머리가 복잡하게 얽힐 것입니다. 지금부터는 컴퓨터가 이해할 수 있을 만큼 게임의 규칙을 상세하고 명확하게 정해나갈 것입니다. 원 카드를 전혀 모르는 원시인을 가르친다고 상상합시다.\n\n\u003e - **처음 게임을 시작하게 되면, 플레이어들은 7장씩 나눠갖는다.**\n\u003e - **플레이어는 자신의 차례가 될 때마다 카드를 내거나, 먹어야 한다.**\n\u003e - 플레이어는 앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낼 수 있다.\n\u003e - **낼 수 있는 카드가 없다면, 한 장 먹어야 한다.**\n\u003e - **행동을 마치게 되면 다음 플레이어의 차례로 넘어간다.**\n\n규칙이 어느정도 상세해졌습니다. 가능하다면 규칙을 더욱 세부적으로 짜본 다음에 개발 순서를 정해보도록 합시다.\n\n\u003e - **게임 준비 단계**\n\u003e    - **덱은 조커 포함 54장의 모든 트럼프카드를 무작위로 섞는다.**\n\u003e    - 처음 게임을 시작하게 되면, 플레이어들은 **덱에서** 7장씩 나눠갖는다.\n\u003e    - **낸 카드 뭉치에 덱에서 한 장을 꺼내 보이도록 놓는다.**\n\u003e - **게임 진행 단계**\n\u003e    - 플레이어는 자신의 차례가 될 때마다 카드를 내거나, 덱의 카드를 먹어야 한다.\n\u003e    - 플레이어는 앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낼 수 있다.\n\u003e    - **플레이어는 2, A, Joker 카드를 통해 공격할 수 있다. 공격받은 사람은 더 강력한 카드로 공격을 이어나갈 수 있으며, 받아칠 수 없다면 부과된 만큼 카드를 먹는다. 공격을 이어나갈 때는 부과되는 카드가 누적된다.**\n\u003e    - **Joker 카드는 언제든지 낼 수 있다. Joker는 Joker끼리 받아칠 수 있다.**\n\u003e    - 낼 수 있는 카드가 없다면, 한 장 먹어야 한다.\n\u003e    - 행동을 마치게 되면 다음 플레이어의 차례로 넘어간다.\n\u003e - **게임 끝 단계**\n\u003e    - **플레이어의 모든 카드가 소모되면 그 플레이어는 즉시 승리한다.**\n\u003e - **공격 카드**\n\u003e    - **2 카드는 카드 2개 공격을 할 수 있다.**\n\u003e    - **A 카드는 카드 3개 공격을 할 수 있다.**\n\u003e    - **흑백 조커 카드는 카드 5개 공격을 할 수 있다.**\n\u003e    - **색 조커 카드는 카드 10개 공격을 할 수 있다.**\n\u003e - **특수 카드**\n\u003e    - **7 카드를 낼 때 원하는 모양으로 바꿀 수 있다. 즉 스페이드 7을 내면서 다이아몬드를 선언하면 다이아몬드 7을 낸 것과 동일한 취급을 받는다.**\n\u003e    - **K 카드를 내면 즉시 한 번 더 진행할 수 있다. 낼 카드가 없다면 한 장 먹어야 한다.**\n\u003e    - **J 카드를 내면 다음 플레이어의 차례를 건너뛰고 다다음 플레이어부터 진행한다. (1:1은 K 카드와 동일한 효과를 가진다)**\n\u003e    - **Q 카드를 내면 플레이어간의 차례를 뒤바꾼다. (1:1은 아무런 효과가 없다)**\n\u003e    - **3 카드로 A 또는 2의 공격을 무효화할 수 있다.**\n\u003e - **특수 상황**\n\u003e    - **플레이어의 누구든 카드가 한 장 남은 순간에 \u0022원카드\u0022를 외칠 수 있다. 카드를 낸 본인이 \u0022원카드\u0022를 먼저 외쳤다면 아무런 일 없이 계속 게임이 진행된다. 본인이 아닌 다른 사람이 \u0022원카드\u0022를 먼저 외쳤다면 한 장 남은 플레이어는 카드 한 장을 즉시 먹는다.**\n\u003e    - **만약 덱의 모든 카드가 소모되었다면 낸 카드의 가장 윗 카드만 남겨두고 모두 섞어 다시 덱 자리에 놓는다**\n\n\u002d\u002d-\n\n## 개발 단계 대략적으로 정해보기\n\n게임은 항상 일반적인 상황과 예외적인 상황으로 구분할 수 있습니다. 예를 들어 **원카드 게임에서 게임 준비 단계와 게임 끝 단계는 절대 변하지 않습니다.** 이런 것부터 개발 우선순위를 높게 잡습니다.\n\n일반적인 카드를 내는 상황은 공격 카드를 내는 상황보다 훨씬 빈번합니다. 또한 공격 카드를 내는 상황이 7, J, Q, K 등의 특수카드를 내는 상황보다 더 빈번합니다. 그러므로 우리는 일반카드를 내는 메커니즘을 먼저 구상해본 뒤, 그 다음 공격 메커니즘, 그 다음 특수 카드 메커니즘을 실현해볼 것입니다.\n\n```mermaid-execute\ngraph TD\na[\u0022게임 시작과 끝 부분 구현\u0022]\nb[\u0022일반적인 카드를 내는 상황 구현\u003cbr\u003e(플레이어간 차례 전환 포함)\u0022]\nc[\u0022공격 카드를 내는 상황 구현\u0022]\nd[\u0022특수 카드를 내는 상황 구현\u0022]\na\u002d\u002d\u003eb\u002d\u002d\u003ec\u002d\u002d\u003ed\n```\n*개발 흐름 정해보기*\n\n\u002d\u002d-\n\n## 테스트 하기 쉬운 상황 고려하기\n\n우리가 실제 상황처럼 동작하는 것, 즉 완전히 완성된 프로그램과 개발 중인 프로그램의 개발은 다를 수 밖에 없습니다. 우리는 처음부터 아주 다양한 상황을 고려하여 차근차근 프로그램을 설계할 수도 있지만 이는 숙련된 프로그래머조차 넘기 힘든 난관입니다. 그러므로 우리는 프로그램을 다소 축소하여 더 개발하기 쉽도록 만들어 볼 것입니다.\n\n- **원카드를 외치는 메커니즘은 아예 만들지 않는다. (또는 추후에 만든다)**\n- **플레이어를 2명으로 정하고, 한 명을 컴퓨터로 한다.**\n- **컴퓨터는 낼 수 있는 카드 중 아무 카드를 랜덤으로 낸다.**\n\n\u002d\u002d-\n\n## 코드 조각 구상하기\n\n지금껏 우리는 규칙을 대충 정해봤습니다. 하지만 이러한 규칙은 컴퓨터가 이해할 수 없지요. 이런 규칙을 컴퓨터가 이해할 수 있도록 바꾸어 보는 단계입니다. 우리는 각종 변수를 만들고, 분기를 만들 때 `if`를 사용하고, 반복하고자 할 때 `for`와 `while`을 사용하고, 반복되는 일은 함수로 묶는 등의 작업을 할 수 있습니다. \n\n아래 규칙 문장들은 우선적으로 생각해볼 것들을 필자의 머릿속에 떠오른 대로 적어본 것입니다. 이 규칙들을 어떻게 실제로 코딩할지 한번 생각해봅시다. 그 다음에 아래 쪽에 구상의 실제 코드를 살펴봅시다. 구상 예시는 단지 필자가 생각하는 구현 방법에 지나지 않으며, 더 효율적이고 좋은 구상 방법이 있을 수 있습니다.\n\n- **뽑을 수 있는 카드뭉치, 플레이어가 가지고 있는 카드 등을 어떻게 나타낼까요? (힌트-리스트)**\n- **카드를 먹는다는 행위를 어떻게 나타낼까요?**\n- **카드 하나하나를 어떻게 나타낼까요?**\n- **플레이어가 낼 수 있는 카드를 어떻게 판단할까요?**\n\n\u002d\u002d-\n\n### 코드 조각 구상 예시\n\n\n- 뽑을 수 있는 카드뭉치, 플레이어가 가지고 있는 카드 등을 어떻게 나타낼까요?  \n   → `deck`, `player` 등의 리스트를 만듭니다. 이 리스트는 카드 뭉치나 우리의 패라고 뜻을 정할 수 있습니다. \n\n```python\ndeck = []\nplayer = []\n```\n\n\n- 카드를 먹는다는 행위를 어떻게 나타낼까요?  \n   → `deck` 리스트의 마지막 요소를 삭제하고, 그 항목을 `player` 리스트에 추가합니다.  \n\n```python\nlast_card = deck.pop()\nplayer.append(last_card)\n```\n\n- 카드 요소를 어떻게 나타낼까요?  \n   → 간단하게 튜플로 나타낼 수 있을 것 같습니다. `('♥', '5')`라면 하트 모양의 5인 카드를 나타낼 수 있겠습니다. 리스트로 나타내도 되지만 카드 요소를 수정할 일은 없으므로 더 간단한 형태인 튜플로 나타냅니다.  \n   → 숫자를 숫자형인 `5`로 하지 않고 `'5'`로 한 이유는 이후 J,Q,K 등의 숫자가 아닌 숫자(?)도 추가되기 때문입니다.  \n   → `shape` 속성과 `number` 속성을 가진 Card 클래스로도 나타낼 수 있을 것 같습니다.\n\n```python\nsome_card = ('♥', '5')\n\nclass Card:\n    def __init__(self, shape, num):\n        self.shape = shape\n        self.num = num\nsome_card2 = Card('♥', '5')\n```\n\n- 플레이어가 낼 수 있는 카드를 어떻게 판단할까요?  \n   → 플레이어가 낼 수 있는 카드는 이미 냈던 카드와 모양이 같거나 숫자가 같은 카드입니다. 이미 냈던 카드 또한 리스트로 `put` 변수를 둡시다. 이 리스트의 가장 마지막 요소는 `put[-1]`로 나타낼 수 있습니다. 낼 수 있는 카드의 모음을 `available` 리스트로 나타난다고 가정했을 때 코드로는 다음과 같이 작성할 수 있겠습니다.\n\n```python\nput = []\n\n# 카드가 단순한 튜플일 때\navailable = []\nfor card in player:\n    if put[-1][0] == card[0] or put[-1][1] == card[1]:\n        available.append(card)\n\n# 카드가 클래스로 만든 객체일 때\navailable = []\nfor card in player:\n    if put[-1].shape == card.shape or put[-1].num == card.num:\n        available.append(card)\n\n```\n\n\u002d\u002d-\n\n## 게임 준비 부분 코딩\n\n게임 준비 부분부터 차근차근 개발해봅시다. 우선 카드를 만들어야겠지요. 클래스를 이용할 수도 있겠지만, 그냥 튜플을 써보도록 합시다. 반복되는 부분은 `for`로 처리하고, 조커와 같은 특수 카드는 손수 추가해줍시다. `deck`을 리스트로 먼저 만듭니다.\n\n```python\ndeck = []\n```\n\n그 다음 for문을 돌릴 것들을 생각해봅시다.\n\n```python\nfor shape in ??:\n    for num in ??:\n        deck.append((shape, num))\n```\n\n`??` 안에 뭐가 들어가면 좋을까요? 다음과 같이 문자열로 하여 한 글자씩 반복하게 하면 좋을 것 같습니다.\n\n```python\n# nums과 shapes 정의\nshapes = '♥♣♠◆'\nnums = []\nfor i in range(2,11):\n    nums.append(str(i))\nfor c in 'JQKA':\n    nums.append(c)\n\n# 덱 만들기\nfor shape in shapes:\n    for num in nums:\n        deck.append((shape, num))\n\n```\n\n이제 특수 카드를 추가해줍시다. 조커는 모양 칸에 'Joker'가, 숫자 칸에는 색깔 정보가 들어가도록 합시다. 이는 애시당초의 카드 설계와 다소 어긋나지만, 특수 카드의 종류가 많은 것도 아니고 예외로 간주하여 적당히 처리할 수 있을 것 같습니다.\n\n```python\ndeck.append(('Joker', 'black'))\ndeck.append(('Joker', 'colored'))\n```\n\n이제 카드를 섞어줍니다. `random` 모듈을 이용합니다.\n\n```python\nimport random\nrandom.shuffle(deck)\n```\n\n그리고 플레이어와 컴퓨터에 카드를 분배해줍니다.\n\n```python\n# 플레이어에게 카드 나누기\nplayer = []\ncomputer = []\n\nfor i in range(7):\n    player.append(deck.pop())\n    computer.append(deck.pop())\n```\n\n마지막으로, 덱에서 낸 카드로 카드 하나만 옮겨줍니다.\n\n```python\n# 낸 카드에 하나 올려놓기\nput = []\nput.append(deck.pop())\n```\n\n이로써 게임 준비 부분의 모든 코드는 완료되었습니다. 아래 코드를 참조해주세요.\n\n-expandable-\n\n```python\nimport random\n\ndeck = []\n\n# num과 shape 정의\nshapes = '♥♣♠◆'\nnums = []\nfor i in range(2,11):\n    nums.append(str(i))\nfor c in 'JQKA':\n    nums.append(c)\n\n# 덱 만들기\nfor shape in shapes:\n    for num in nums:\n        deck.append((shape, num))\n\ndeck.append(('Joker', 'black'))\ndeck.append(('Joker', 'colored'))\nrandom.shuffle(deck)\n\n# 플레이어에게 카드 나누기\n\nplayer = []\ncomputer = []\n\nfor i in range(7):\n    player.append(deck.pop())\n    computer.append(deck.pop())\n\n# 낸 카드에 하나 올려놓기\nput = []\nput.append(deck.pop())\n```\n\n-/expandable-\n\n\u002d\u002d-\n\n## 게임의 끝 부분 만들기\n\n본격적으로 코딩할 차례입니다. 게임이 끝나는 시점은 누군가가 패가 전부 떨어질 때입니다. 즉 게임은 플레이어나 컴퓨터의 패가 다 떨어질 때까지 무제한으로 반복합니다. 무제한 반복은 `while True:` 로 구현할 수 있겠지요? 크게 틀만 잡도록 합시다.\n\n```python\n# 게임 시작\nwhile True:\n\n    # 플레이어의 차례\n    # 플레이어가 무언가를 한다..\n\n    if len(player) == 0:\n        print(\u0022플레이어가 이겼습니다!\u0022)\n        break\n\n    # 컴퓨터의 차례\n    # 컴퓨터가 무언가를 한다..\n\n    if len(computer) == 0:\n        print(\u0022컴퓨터가 이겼습니다!\u0022)\n        break\n\n```\n\n\u003e ### 프로그램은 `Ctrl+C`로 강제종료합니다.\n\u003e \n\u003e 이제 루프를 무한대로 돌 것입니다. 즉 프로그램이 무한대로 돌아간다는 것을 의미합니다. 물론 종료되는 조건은 `패를 다 썼을때`로 명확하게 있지만, 그렇다면 프로그램을 끝내고 싶을 때마다 카드를 다 소모할 때까지 게임을 계속해야 할까요? 그렇지 않습니다. 처음 [CLI](/128)에 대해 배웠을 때, 콘솔에서 강제 종료를 의미하는 단축키가 있었습니다. 바로 `Ctrl+C` 입니다. 이를 이용하면 언제든지 프로그램 실행 중간에 강제 종료할 수 있습니다. \n\n\n\u002d\u002d-\n\n## 게임의 핵심 부분 코딩하기\n\n게임의 핵심 부분에 대한 순서를 간단히 생각해보도록 합시다.\n\n```mermaid-execute\ngraph TD\nst[플레이어의 턴 시작]\nst\u002d\u002d\u003eimf[게임 진행 정보 출력]\u002d\u002d\u003ea\na[낼 수 있는 카드를\u003cbr\u003e모두 구해본다.]\u002d\u002d\u003eb{낼 수 있는\u003cbr\u003e카드가\u003cbr\u003e있는가?}\nb\u002d\u002d\u003e|Yes|c[이들 중 카드를\u003cbr\u003e골라서 낸다.]\u002d\u002d\u003een\nb\u002d\u002d\u003e|No|d[카드를 한 장\u003cbr\u003e먹는다.]\nd\u002d\u002d\u003een[플레이어의 턴 끝]\nst2[컴퓨터의 턴 시작]\nst2\u002d\u002d\u003ea2\na2[낼 수 있는 카드를\u003cbr\u003e모두 구해본다.]\u002d\u002d\u003eb2{낼 수 있는\u003cbr\u003e카드가\u003cbr\u003e있는가?}\nb2\u002d\u002d\u003e|Yes|c2[이들 중 카드를\u003cbr\u003e랜덤으로 골라서\u003cbr\u003e낸다.]\u002d\u002d\u003een2\nb2\u002d\u002d\u003e|No|d2[카드를 한 장\u003cbr\u003e먹는다.]\nd2\u002d\u002d\u003een2[컴퓨터의 턴 끝]\n```\n*게임의 순서도*\n\n\u002d\u002d-\n\n### 간단한 정보 출력하기\n\n게임의 핵심 부분을 차례로 만들어갑시다. 우선 플레이어와 게임의 상태가 어떤지 출력해줄 수 있도록 합니다. \n\n```python\n# 플레이어의 현재 패 출력\nprint(\u0022플레이어의 차례입니다.\u0022)\nprint(\u0022현재 패 \u003e\u003e\u0022, player)\nprint(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n```\n\n어떤 리스트에 `append`할 때마다 리스트의 마지막에 항목이 추가되며, 어떤 리스트의 마지막 요소는 `[-1]`로 구할 수 있습니다. 그러므로 `put[-1]`은 낸 카드 중의 마지막 카드를 가리키게 됩니다.\n\n\u002d\u002d-\n\n### 낼 수 있는 카드인지 판단하기\n\n이제 낼 수 있는 카드를 판단해봅시다. 아직까지는 공격 메커니즘을 넣지 않았으므로 공격을 전혀 고려하지 않아도 됩니다. 낼 수 있는 카드인지 판단하는 순서는 다음과 같습니다.\n\n```mermaid-execute\ngraph TD\na[패에 있는 어떤 카드 card와 \u003cbr\u003e이미 놓여져 있는 카드\u003cbr\u003eput을 고려한다.]\na\u002d\u002d\u003eb\nb{card와 put의\u003cbr\u003e모양이 같은가?}\u002d\u002d\u003e|Yes|y\nc{card와 put의\u003cbr\u003e숫자가 같은가?}\u002d\u002d\u003e|Yes|y\nd{card가 조커인가?}\u002d\u002d\u003e|Yes|y\ne{put이 조커인가?}\u002d\u002d\u003e|Yes|y\nb\u002d\u002d\u003e|No|c\u002d\u002d\u003e|No|d\u002d\u002d\u003e|No|e\u002d\u002d\u003e|No|f[card는 낼 수 없다.]\ny[card는 낼 수 있다.]\n```\n*낼 수 있는 카드 판단*\n\n카드를 선택하는 시점은 낼 수 있는 카드를 모두 알게 된 다음이기 때문에 우선 모든 카드를 낼 수 있는지를 검사하고, 가능한 카드를 `available`이라는 임시 리스트에 넣어둡니다. 그리고 낼 수 있는 카드가 제대로 나왔는지 `print`를 통해 확인해봅시다.\n\n```python\n# 가능한 카드 출력\navailable = []\nfor card in player:\n    if (card[0] == put[-1][0]\n        or card[1] == put[-1][1]\n        or card[0] == 'Joker'\n        or put[-1][0] == 'Joker'):\n        available.append(card)\n        \nprint(\u0022낼 수 있는 카드:\u0022, available)\n```\n\n```plaintext\n플레이어의 차례입니다.\n현재 패 \u003e\u003e [('♣', '10'), ('♠', '3'), ('♣', '3'), ('◆', '6'), ('♣', 'K'), ('♥', '3'), ('♠', '8')]\n놓여진 카드 \u003e\u003e ('♣', '6')\n낼 수 있는 카드: [('♣', '10'), ('♣', '3'), ('◆', '6'), ('♣', 'K')]\n```\n\n좋습니다. 제대로 동작합니다. 이제 이것들 중 플레이어가 선택할 수 있도록 해봅시다.\n\n\u002d\u002d-\n\n### 플레이어가 카드 선택하기\n\n사용자의 입력을 받는 방법은 굉장히 다양합니다. 우리는 사용 가능한 카드에 번호를 매기고, 이 번호를 통해 입력을 받는 방법을 취할 것입니다. 번호로 입력받기 위해서 리스트의 인덱스를 바로 얻는 방법이 있을 수 있겠습니다.\n\n```python\nprint(\u0022낼 수 있는 카드:\u0022, available)\ni = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\ni -= 1\nselected = available[i]\nplayer.remove(selected)\nput.append(selected) \n```\n\n플레이어가 번호를 입력하여, 인덱스로 변환시킨 뒤 인덱스로 항목을 접근하고 있습니다. 리스트의 `remove` 메소드를 통해 항목을 삭제함으로써 `player`가 카드를 냈다는것을 표현할 수 있습니다. 낸 카드는 `put.append` 해줌으로써 카드를 냈다고 처리합시다.\n\n앗, 잠깐만요, 만약 낼 수 있는 카드가 없어서 카드를 먹을 수 밖에 없는 상황이라면 어떡하죠?\n\n\u002d\u002d-\n\n### 낼 수 있는 카드가 없는 경우 카드 먹기\n\n카드를 선택하기 전에 카드를 먹어야 하는 상황인지에 대해서 먼저 판단해야 할 것 같습니다. 우리가 앞서 카드 하나하나에 대해 검사한 후 `available`을 구해 보았습니다. 이 `available` 리스트의 길이를 구한다면 우리가 낼 수 있는 카드가 하나라도 있는지 없는지 알 수 있을 것입니다. 다음이 코드입니다.\n\n```python\n# 낼 수 있는 카드가 있는 경우\nif len(available) \u003e 0:\n    i = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\n    i -= 1\n    selected = available[i]\n    player.remove(selected)\n    put.append(selected)\n\n# 낼 수 있는 카드가 없는 경우\nelse:\n    print(\u0022낼 수 있는 카드가 없어 먹습니다.\u0022)\n    player.append(deck.pop())\n```\n\n좋습니다. 우리가 게임의 끝 부분까지 녹여서 코드를 만든다면 커다란 `while` 문의 내용은 다음과 같이 완성되었을 것입니다.\n\n```python\nwhile True:\n\n    # 플레이어의 차례\n    print(\u0022플레이어의 차례입니다.\u0022)\n    print(\u0022현재 패 \u003e\u003e\u0022, player)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드 출력\n    available = []\n    for card in player:\n        if (card[0] == put[-1][0]\n            or card[1] == put[-1][1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n        \n    print(\u0022낼 수 있는 카드:\u0022, available)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        i = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\n        i -= 1\n        selected = available[i]\n        player.remove(selected)\n        put.append(selected)\n\n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(\u0022낼 수 있는 카드가 없어 먹습니다.\u0022)\n        player.append(deck.pop())\n\n    if len(player) == 0:\n        print(\u0022플레이어가 이겼습니다!\u0022)\n        break\n```\n\n\u002d\u002d-\n\n### 컴퓨터의 차례 만들기\n\n컴퓨터의 차례는 지금 껏 작성한 코드를 복사하여 그대로 붙여넣은 뒤, 일부만 수정해주면 됩니다.\n\n- 컴퓨터는 패의 정보를 자세하게 출력할 필요가 없습니다.\n- 컴퓨터는 랜덤으로 가능한 카드를 선택합니다.\n\n`while`의 컴퓨터 부분의 코드는 다음과 같습니다.\n\n```python\n# 게임 시작\nwhile True:\n\n    # 플레이어의 차례\n    # .. 중략 ..\n   \n    # 컴퓨터의 차례\n    print(\u0022컴퓨터의 차례입니다.\u0022)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드\n    available = []\n    for card in computer:\n        if (card[0] == put[-1][0]\n            or card[1] == put[-1][1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        selected = random.choice(available)\n        computer.remove(selected)\n        put.append(selected)\n        print(\u0022컴퓨터가\u0022, selected, \u0022를 냈습니다.\u0022)\n\n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(\u0022낼 수 있는 카드가 없어 먹습니다.\u0022)\n        computer.append(deck.pop())\n\n    if len(computer) == 0:\n        print(\u0022컴퓨터가 이겼습니다!\u0022)\n        break\n```\n\n\u002d\u002d-\n\n## 중간 마무리\n\n지금까지 대략적으로 핵심적인 게임 기능을 구현해보았습니다. 실제로 플레이해보면 제대로 동작하고 있음을 확인할 수 있습니다. 하지만 아직 갈 길이 멀었습니다. 다음 시간에는 함수를 이용해서 비슷한 기능을 최대한 묶은 다음 공격 메커니즘이나 특수한 상황을 더 처리해볼 것입니다. 지금까지 작성한 모든 코드는 아래를 펼쳐 확인할 수 있습니다.\n\n-expandable-\n\n```python\nimport random\n\ndeck = []\n\n# num과 shape 정의\nshapes = '♥♣♠◆'\nnums = []\nfor i in range(2,11):\n    nums.append(str(i))\nfor c in 'JQKA':\n    nums.append(c)\n\n# 덱 만들기\nfor shape in shapes:\n    for num in nums:\n        deck.append((shape, num))\n\ndeck.append(('Joker', 'black'))\ndeck.append(('Joker', 'colored'))\nrandom.shuffle(deck)\n\n# 플레이어에게 카드 나누기\n\nplayer = []\ncomputer = []\n\nfor i in range(7):\n    player.append(deck.pop())\n    computer.append(deck.pop())\n\n# 낸 카드에 하나 올려놓기\nput = []\nput.append(deck.pop())\n\n    \n# 게임 시작\nwhile True:\n\n    # 플레이어의 차례\n    print(\u0022플레이어의 차례입니다.\u0022)\n    print(\u0022현재 패 \u003e\u003e\u0022, player)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드\n    available = []\n    for card in player:\n        if (card[0] == put[-1][0]\n            or card[1] == put[-1][1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n        \n    print(\u0022낼 수 있는 카드:\u0022, available)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        i = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\n        i -= 1\n        selected = available[i]\n        player.remove(selected)\n        put.append(selected)\n\n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(\u0022낼 수 있는 카드가 없어 먹습니다.\u0022)\n        player.append(deck.pop())\n\n    if len(player) == 0:\n        print(\u0022플레이어가 이겼습니다!\u0022)\n        break\n\n    # 컴퓨터의 차례\n    print(\u0022컴퓨터의 차례입니다.\u0022)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드\n    available = []\n    for card in computer:\n        if (card[0] == put[-1][0]\n            or card[1] == put[-1][1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        selected = random.choice(available)\n        computer.remove(selected)\n        put.append(selected)\n        print(\u0022컴퓨터가\u0022, selected, \u0022를 냈습니다.\u0022)\n\n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(\u0022낼 수 있는 카드가 없어 먹습니다.\u0022)\n        computer.append(deck.pop())\n\n    if len(computer) == 0:\n        print(\u0022컴퓨터가 이겼습니다!\u0022)\n        break\n```\n\n-/expandable-\n\n\n\n"} -->
<div class="wp-block-jetpack-markdown"><h2>들어가며</h2>
<p>하나의 실용적인 프로그램을 만드는 것은 어렵습니다. 아주 간단한 프로그램은 만들기 쉽지만 대개 교육의 목적이기 때문에 심히 실용적이지 않습니다. 그렇다고 실용적인 프로그램을 직접 만들겠다 하면, 정말 많은 변수에 대해서 모두 핸들링할 수 있어야 합니다. 그래서 초기의 설계 단계에서부터 실제 구현 단계까지 생각해야 할 것이 한 두 가지가 아닙니다. 실전 경험이 없는 초보자들은 자신이 다룰 수 있는 도구의 사용법을 모두 익혔다고 해도 그것을 응용하기가 굉장히 어렵습니다.</p>
<p>그래서 교육적이고 간단한 프로그램과 실용적이고 복잡한 프로그램 가운데 어딘가에 끼여 있는, 교육용이기는 하지만 실용적인 프로그램을 만들 때 생각해야 할 것들을 정리할 수 있는 하나의 프로젝트를 진행하고자 합니다. 프로젝트는 현실에서 우리가 흔하게 접할 수 있어서 친근하게 느껴져야 하며, 또한 지금까지 배워온 여러가지 기법을 충분히 활용할 수 있는, 너무 작지 않은 규모의 프로젝트여야 합니다. 저는 간단한 게임을 만들면 좋겠다 싶었고, 어린 시절부터 간간히 친구들과 즐겨온 <strong>원 카드 게임</strong>을 직접 만들어보면 어떨까 생각이 들었습니다. (원 카드 게임에 대해 전혀 모르시는 분이라면 가까운 지인과 직접 해보시기를 권장드리며, 그것이 여의치 않다면 규칙 정하기를 아주 꼼꼼히 읽어주세요)</p>
<hr>
<h2>사전 공부</h2>
<ul>
<li>변수와 리스트의 개념과 사용법</li>
<li>연산자</li>
<li>함수</li>
<li>클래스</li>
</ul>
<hr>
<h2>규칙 정하기</h2>
<p>우리는 원카드 게임을 만들 것입니다. 근데 원카드 게임이 무엇이죠?</p>
<blockquote>
<ul>
<li>앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낸다.</li>
</ul>
</blockquote>
<p>정확합니다! 게임을 만약 한 문장으로 정리한다면 위와 같이 간단하게 정리할 수 있겠습니다. 하지만 우리의 컴퓨터에게는 처음부터 끝까지 일일히 가르쳐줘야 합니다. 저러한 자연어를 충분히 이해하려면 인공지능의 수준은 아직 멀었습니다. 사실 원카드를 전혀 모르는 사람 입장에서도 저 말은 굉장히 뜬금없습니다. &quot;카드를 어떻게 얻는 것인가?&quot;, &quot;카드를 낼 수 있는건가?&quot;, &quot;카드를 어디에서 어디로 낸다는 것인가?&quot;, &quot;카드를 아무 때에나 내도 되는 것인가?&quot;등등 질문 투성이로 머리가 복잡하게 얽힐 것입니다. 지금부터는 컴퓨터가 이해할 수 있을 만큼 게임의 규칙을 상세하고 명확하게 정해나갈 것입니다. 원 카드를 전혀 모르는 원시인을 가르친다고 상상합시다.</p>
<blockquote>
<ul>
<li><strong>처음 게임을 시작하게 되면, 플레이어들은 7장씩 나눠갖는다.</strong></li>
<li><strong>플레이어는 자신의 차례가 될 때마다 카드를 내거나, 먹어야 한다.</strong></li>
<li>플레이어는 앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낼 수 있다.</li>
<li><strong>낼 수 있는 카드가 없다면, 한 장 먹어야 한다.</strong></li>
<li><strong>행동을 마치게 되면 다음 플레이어의 차례로 넘어간다.</strong></li>
</ul>
</blockquote>
<p>규칙이 어느정도 상세해졌습니다. 가능하다면 규칙을 더욱 세부적으로 짜본 다음에 개발 순서를 정해보도록 합시다.</p>
<blockquote>
<ul>
<li><strong>게임 준비 단계</strong>
<ul>
<li><strong>덱은 조커 포함 54장의 모든 트럼프카드를 무작위로 섞는다.</strong></li>
<li>처음 게임을 시작하게 되면, 플레이어들은 <strong>덱에서</strong> 7장씩 나눠갖는다.</li>
<li><strong>낸 카드 뭉치에 덱에서 한 장을 꺼내 보이도록 놓는다.</strong></li>
</ul>
</li>
<li><strong>게임 진행 단계</strong>
<ul>
<li>플레이어는 자신의 차례가 될 때마다 카드를 내거나, 덱의 카드를 먹어야 한다.</li>
<li>플레이어는 앞의 사람이 낸 카드와 모양이 같거나 숫자가 같은 카드를 낼 수 있다.</li>
<li><strong>플레이어는 2, A, Joker 카드를 통해 공격할 수 있다. 공격받은 사람은 더 강력한 카드로 공격을 이어나갈 수 있으며, 받아칠 수 없다면 부과된 만큼 카드를 먹는다. 공격을 이어나갈 때는 부과되는 카드가 누적된다.</strong></li>
<li><strong>Joker 카드는 언제든지 낼 수 있다. Joker는 Joker끼리 받아칠 수 있다.</strong></li>
<li>낼 수 있는 카드가 없다면, 한 장 먹어야 한다.</li>
<li>행동을 마치게 되면 다음 플레이어의 차례로 넘어간다.</li>
</ul>
</li>
<li><strong>게임 끝 단계</strong>
<ul>
<li><strong>플레이어의 모든 카드가 소모되면 그 플레이어는 즉시 승리한다.</strong></li>
</ul>
</li>
<li><strong>공격 카드</strong>
<ul>
<li><strong>2 카드는 카드 2개 공격을 할 수 있다.</strong></li>
<li><strong>A 카드는 카드 3개 공격을 할 수 있다.</strong></li>
<li><strong>흑백 조커 카드는 카드 5개 공격을 할 수 있다.</strong></li>
<li><strong>색 조커 카드는 카드 10개 공격을 할 수 있다.</strong></li>
</ul>
</li>
<li><strong>특수 카드</strong>
<ul>
<li><strong>7 카드를 낼 때 원하는 모양으로 바꿀 수 있다. 즉 스페이드 7을 내면서 다이아몬드를 선언하면 다이아몬드 7을 낸 것과 동일한 취급을 받는다.</strong></li>
<li><strong>K 카드를 내면 즉시 한 번 더 진행할 수 있다. 낼 카드가 없다면 한 장 먹어야 한다.</strong></li>
<li><strong>J 카드를 내면 다음 플레이어의 차례를 건너뛰고 다다음 플레이어부터 진행한다. (1:1은 K 카드와 동일한 효과를 가진다)</strong></li>
<li><strong>Q 카드를 내면 플레이어간의 차례를 뒤바꾼다. (1:1은 아무런 효과가 없다)</strong></li>
<li><strong>3 카드로 A 또는 2의 공격을 무효화할 수 있다.</strong></li>
</ul>
</li>
<li><strong>특수 상황</strong>
<ul>
<li><strong>플레이어의 누구든 카드가 한 장 남은 순간에 &quot;원카드&quot;를 외칠 수 있다. 카드를 낸 본인이 &quot;원카드&quot;를 먼저 외쳤다면 아무런 일 없이 계속 게임이 진행된다. 본인이 아닌 다른 사람이 &quot;원카드&quot;를 먼저 외쳤다면 한 장 남은 플레이어는 카드 한 장을 즉시 먹는다.</strong></li>
<li><strong>만약 덱의 모든 카드가 소모되었다면 낸 카드의 가장 윗 카드만 남겨두고 모두 섞어 다시 덱 자리에 놓는다</strong></li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<h2>개발 단계 대략적으로 정해보기</h2>
<p>게임은 항상 일반적인 상황과 예외적인 상황으로 구분할 수 있습니다. 예를 들어 <strong>원카드 게임에서 게임 준비 단계와 게임 끝 단계는 절대 변하지 않습니다.</strong> 이런 것부터 개발 우선순위를 높게 잡습니다.</p>
<p>일반적인 카드를 내는 상황은 공격 카드를 내는 상황보다 훨씬 빈번합니다. 또한 공격 카드를 내는 상황이 7, J, Q, K 등의 특수카드를 내는 상황보다 더 빈번합니다. 그러므로 우리는 일반카드를 내는 메커니즘을 먼저 구상해본 뒤, 그 다음 공격 메커니즘, 그 다음 특수 카드 메커니즘을 실현해볼 것입니다.</p>
<pre><code class="language-mermaid-execute">graph TD
a[&quot;게임 시작과 끝 부분 구현&quot;]
b[&quot;일반적인 카드를 내는 상황 구현&lt;br&gt;(플레이어간 차례 전환 포함)&quot;]
c[&quot;공격 카드를 내는 상황 구현&quot;]
d[&quot;특수 카드를 내는 상황 구현&quot;]
a--&gt;b--&gt;c--&gt;d
</code></pre>
<p><em>개발 흐름 정해보기</em></p>
<hr>
<h2>테스트 하기 쉬운 상황 고려하기</h2>
<p>우리가 실제 상황처럼 동작하는 것, 즉 완전히 완성된 프로그램과 개발 중인 프로그램의 개발은 다를 수 밖에 없습니다. 우리는 처음부터 아주 다양한 상황을 고려하여 차근차근 프로그램을 설계할 수도 있지만 이는 숙련된 프로그래머조차 넘기 힘든 난관입니다. 그러므로 우리는 프로그램을 다소 축소하여 더 개발하기 쉽도록 만들어 볼 것입니다.</p>
<ul>
<li><strong>원카드를 외치는 메커니즘은 아예 만들지 않는다. (또는 추후에 만든다)</strong></li>
<li><strong>플레이어를 2명으로 정하고, 한 명을 컴퓨터로 한다.</strong></li>
<li><strong>컴퓨터는 낼 수 있는 카드 중 아무 카드를 랜덤으로 낸다.</strong></li>
</ul>
<hr>
<h2>코드 조각 구상하기</h2>
<p>지금껏 우리는 규칙을 대충 정해봤습니다. 하지만 이러한 규칙은 컴퓨터가 이해할 수 없지요. 이런 규칙을 컴퓨터가 이해할 수 있도록 바꾸어 보는 단계입니다. 우리는 각종 변수를 만들고, 분기를 만들 때 <code>if</code>를 사용하고, 반복하고자 할 때 <code>for</code>와 <code>while</code>을 사용하고, 반복되는 일은 함수로 묶는 등의 작업을 할 수 있습니다.</p>
<p>아래 규칙 문장들은 우선적으로 생각해볼 것들을 필자의 머릿속에 떠오른 대로 적어본 것입니다. 이 규칙들을 어떻게 실제로 코딩할지 한번 생각해봅시다. 그 다음에 아래 쪽에 구상의 실제 코드를 살펴봅시다. 구상 예시는 단지 필자가 생각하는 구현 방법에 지나지 않으며, 더 효율적이고 좋은 구상 방법이 있을 수 있습니다.</p>
<ul>
<li><strong>뽑을 수 있는 카드뭉치, 플레이어가 가지고 있는 카드 등을 어떻게 나타낼까요? (힌트-리스트)</strong></li>
<li><strong>카드를 먹는다는 행위를 어떻게 나타낼까요?</strong></li>
<li><strong>카드 하나하나를 어떻게 나타낼까요?</strong></li>
<li><strong>플레이어가 낼 수 있는 카드를 어떻게 판단할까요?</strong></li>
</ul>
<hr>
<h3>코드 조각 구상 예시</h3>
<ul>
<li>뽑을 수 있는 카드뭉치, 플레이어가 가지고 있는 카드 등을 어떻게 나타낼까요?<br>
→ <code>deck</code>, <code>player</code> 등의 리스트를 만듭니다. 이 리스트는 카드 뭉치나 우리의 패라고 뜻을 정할 수 있습니다.</li>
</ul>
<pre><code class="language-python">deck = []
player = []
</code></pre>
<ul>
<li>카드를 먹는다는 행위를 어떻게 나타낼까요?<br>
→ <code>deck</code> 리스트의 마지막 요소를 삭제하고, 그 항목을 <code>player</code> 리스트에 추가합니다.</li>
</ul>
<pre><code class="language-python">last_card = deck.pop()
player.append(last_card)
</code></pre>
<ul>
<li>카드 요소를 어떻게 나타낼까요?<br>
→ 간단하게 튜플로 나타낼 수 있을 것 같습니다. <code>('♥', '5')</code>라면 하트 모양의 5인 카드를 나타낼 수 있겠습니다. 리스트로 나타내도 되지만 카드 요소를 수정할 일은 없으므로 더 간단한 형태인 튜플로 나타냅니다.<br>
→ 숫자를 숫자형인 <code>5</code>로 하지 않고 <code>'5'</code>로 한 이유는 이후 J,Q,K 등의 숫자가 아닌 숫자(?)도 추가되기 때문입니다.<br>
→ <code>shape</code> 속성과 <code>number</code> 속성을 가진 Card 클래스로도 나타낼 수 있을 것 같습니다.</li>
</ul>
<pre><code class="language-python">some_card = ('♥', '5')

class Card:
    def __init__(self, shape, num):
        self.shape = shape
        self.num = num
some_card2 = Card('♥', '5')
</code></pre>
<ul>
<li>플레이어가 낼 수 있는 카드를 어떻게 판단할까요?<br>
→ 플레이어가 낼 수 있는 카드는 이미 냈던 카드와 모양이 같거나 숫자가 같은 카드입니다. 이미 냈던 카드 또한 리스트로 <code>put</code> 변수를 둡시다. 이 리스트의 가장 마지막 요소는 <code>put[-1]</code>로 나타낼 수 있습니다. 낼 수 있는 카드의 모음을 <code>available</code> 리스트로 나타난다고 가정했을 때 코드로는 다음과 같이 작성할 수 있겠습니다.</li>
</ul>
<pre><code class="language-python">put = []

# 카드가 단순한 튜플일 때
available = []
for card in player:
    if put[-1][0] == card[0] or put[-1][1] == card[1]:
        available.append(card)

# 카드가 클래스로 만든 객체일 때
available = []
for card in player:
    if put[-1].shape == card.shape or put[-1].num == card.num:
        available.append(card)

</code></pre>
<hr>
<h2>게임 준비 부분 코딩</h2>
<p>게임 준비 부분부터 차근차근 개발해봅시다. 우선 카드를 만들어야겠지요. 클래스를 이용할 수도 있겠지만, 그냥 튜플을 써보도록 합시다. 반복되는 부분은 <code>for</code>로 처리하고, 조커와 같은 특수 카드는 손수 추가해줍시다. <code>deck</code>을 리스트로 먼저 만듭니다.</p>
<pre><code class="language-python">deck = []
</code></pre>
<p>그 다음 for문을 돌릴 것들을 생각해봅시다.</p>
<pre><code class="language-python">for shape in ??:
    for num in ??:
        deck.append((shape, num))
</code></pre>
<p><code>??</code> 안에 뭐가 들어가면 좋을까요? 다음과 같이 문자열로 하여 한 글자씩 반복하게 하면 좋을 것 같습니다.</p>
<pre><code class="language-python"># nums과 shapes 정의
shapes = '♥♣♠◆'
nums = []
for i in range(2,11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

</code></pre>
<p>이제 특수 카드를 추가해줍시다. 조커는 모양 칸에 'Joker'가, 숫자 칸에는 색깔 정보가 들어가도록 합시다. 이는 애시당초의 카드 설계와 다소 어긋나지만, 특수 카드의 종류가 많은 것도 아니고 예외로 간주하여 적당히 처리할 수 있을 것 같습니다.</p>
<pre><code class="language-python">deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
</code></pre>
<p>이제 카드를 섞어줍니다. <code>random</code> 모듈을 이용합니다.</p>
<pre><code class="language-python">import random
random.shuffle(deck)
</code></pre>
<p>그리고 플레이어와 컴퓨터에 카드를 분배해줍니다.</p>
<pre><code class="language-python"># 플레이어에게 카드 나누기
player = []
computer = []

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())
</code></pre>
<p>마지막으로, 덱에서 낸 카드로 카드 하나만 옮겨줍니다.</p>
<pre><code class="language-python"># 낸 카드에 하나 올려놓기
put = []
put.append(deck.pop())
</code></pre>
<p>이로써 게임 준비 부분의 모든 코드는 완료되었습니다. 아래 코드를 참조해주세요.</p>
<p>-expandable-</p>
<pre><code class="language-python">import random

deck = []

# num과 shape 정의
shapes = '♥♣♠◆'
nums = []
for i in range(2,11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = []
computer = []

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = []
put.append(deck.pop())
</code></pre>
<p>-/expandable-</p>
<hr>
<h2>게임의 끝 부분 만들기</h2>
<p>본격적으로 코딩할 차례입니다. 게임이 끝나는 시점은 누군가가 패가 전부 떨어질 때입니다. 즉 게임은 플레이어나 컴퓨터의 패가 다 떨어질 때까지 무제한으로 반복합니다. 무제한 반복은 <code>while True:</code> 로 구현할 수 있겠지요? 크게 틀만 잡도록 합시다.</p>
<pre><code class="language-python"># 게임 시작
while True:

    # 플레이어의 차례
    # 플레이어가 무언가를 한다..

    if len(player) == 0:
        print(&quot;플레이어가 이겼습니다!&quot;)
        break

    # 컴퓨터의 차례
    # 컴퓨터가 무언가를 한다..

    if len(computer) == 0:
        print(&quot;컴퓨터가 이겼습니다!&quot;)
        break

</code></pre>
<blockquote>
<h3>프로그램은 <code>Ctrl+C</code>로 강제종료합니다.</h3>
<p>이제 루프를 무한대로 돌 것입니다. 즉 프로그램이 무한대로 돌아간다는 것을 의미합니다. 물론 종료되는 조건은 <code>패를 다 썼을때</code>로 명확하게 있지만, 그렇다면 프로그램을 끝내고 싶을 때마다 카드를 다 소모할 때까지 게임을 계속해야 할까요? 그렇지 않습니다. 처음 <a href="/128">CLI</a>에 대해 배웠을 때, 콘솔에서 강제 종료를 의미하는 단축키가 있었습니다. 바로 <code>Ctrl+C</code> 입니다. 이를 이용하면 언제든지 프로그램 실행 중간에 강제 종료할 수 있습니다.</p>
</blockquote>
<hr>
<h2>게임의 핵심 부분 코딩하기</h2>
<p>게임의 핵심 부분에 대한 순서를 간단히 생각해보도록 합시다.</p>
<pre><code class="language-mermaid-execute">graph TD
st[플레이어의 턴 시작]
st--&gt;imf[게임 진행 정보 출력]--&gt;a
a[낼 수 있는 카드를&lt;br&gt;모두 구해본다.]--&gt;b{낼 수 있는&lt;br&gt;카드가&lt;br&gt;있는가?}
b--&gt;|Yes|c[이들 중 카드를&lt;br&gt;골라서 낸다.]--&gt;en
b--&gt;|No|d[카드를 한 장&lt;br&gt;먹는다.]
d--&gt;en[플레이어의 턴 끝]
st2[컴퓨터의 턴 시작]
st2--&gt;a2
a2[낼 수 있는 카드를&lt;br&gt;모두 구해본다.]--&gt;b2{낼 수 있는&lt;br&gt;카드가&lt;br&gt;있는가?}
b2--&gt;|Yes|c2[이들 중 카드를&lt;br&gt;랜덤으로 골라서&lt;br&gt;낸다.]--&gt;en2
b2--&gt;|No|d2[카드를 한 장&lt;br&gt;먹는다.]
d2--&gt;en2[컴퓨터의 턴 끝]
</code></pre>
<p><em>게임의 순서도</em></p>
<hr>
<h3>간단한 정보 출력하기</h3>
<p>게임의 핵심 부분을 차례로 만들어갑시다. 우선 플레이어와 게임의 상태가 어떤지 출력해줄 수 있도록 합니다.</p>
<pre><code class="language-python"># 플레이어의 현재 패 출력
print(&quot;플레이어의 차례입니다.&quot;)
print(&quot;현재 패 &gt;&gt;&quot;, player)
print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])
</code></pre>
<p>어떤 리스트에 <code>append</code>할 때마다 리스트의 마지막에 항목이 추가되며, 어떤 리스트의 마지막 요소는 <code>[-1]</code>로 구할 수 있습니다. 그러므로 <code>put[-1]</code>은 낸 카드 중의 마지막 카드를 가리키게 됩니다.</p>
<hr>
<h3>낼 수 있는 카드인지 판단하기</h3>
<p>이제 낼 수 있는 카드를 판단해봅시다. 아직까지는 공격 메커니즘을 넣지 않았으므로 공격을 전혀 고려하지 않아도 됩니다. 낼 수 있는 카드인지 판단하는 순서는 다음과 같습니다.</p>
<pre><code class="language-mermaid-execute">graph TD
a[패에 있는 어떤 카드 card와 &lt;br&gt;이미 놓여져 있는 카드&lt;br&gt;put을 고려한다.]
a--&gt;b
b{card와 put의&lt;br&gt;모양이 같은가?}--&gt;|Yes|y
c{card와 put의&lt;br&gt;숫자가 같은가?}--&gt;|Yes|y
d{card가 조커인가?}--&gt;|Yes|y
e{put이 조커인가?}--&gt;|Yes|y
b--&gt;|No|c--&gt;|No|d--&gt;|No|e--&gt;|No|f[card는 낼 수 없다.]
y[card는 낼 수 있다.]
</code></pre>
<p><em>낼 수 있는 카드 판단</em></p>
<p>카드를 선택하는 시점은 낼 수 있는 카드를 모두 알게 된 다음이기 때문에 우선 모든 카드를 낼 수 있는지를 검사하고, 가능한 카드를 <code>available</code>이라는 임시 리스트에 넣어둡니다. 그리고 낼 수 있는 카드가 제대로 나왔는지 <code>print</code>를 통해 확인해봅시다.</p>
<pre><code class="language-python"># 가능한 카드 출력
available = []
for card in player:
    if (card[0] == put[-1][0]
        or card[1] == put[-1][1]
        or card[0] == 'Joker'
        or put[-1][0] == 'Joker'):
        available.append(card)
        
print(&quot;낼 수 있는 카드:&quot;, available)
</code></pre>
<pre><code class="language-plaintext">플레이어의 차례입니다.
현재 패 &gt;&gt; [('♣', '10'), ('♠', '3'), ('♣', '3'), ('◆', '6'), ('♣', 'K'), ('♥', '3'), ('♠', '8')]
놓여진 카드 &gt;&gt; ('♣', '6')
낼 수 있는 카드: [('♣', '10'), ('♣', '3'), ('◆', '6'), ('♣', 'K')]
</code></pre>
<p>좋습니다. 제대로 동작합니다. 이제 이것들 중 플레이어가 선택할 수 있도록 해봅시다.</p>
<hr>
<h3>플레이어가 카드 선택하기</h3>
<p>사용자의 입력을 받는 방법은 굉장히 다양합니다. 우리는 사용 가능한 카드에 번호를 매기고, 이 번호를 통해 입력을 받는 방법을 취할 것입니다. 번호로 입력받기 위해서 리스트의 인덱스를 바로 얻는 방법이 있을 수 있겠습니다.</p>
<pre><code class="language-python">print(&quot;낼 수 있는 카드:&quot;, available)
i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
i -= 1
selected = available[i]
player.remove(selected)
put.append(selected) 
</code></pre>
<p>플레이어가 번호를 입력하여, 인덱스로 변환시킨 뒤 인덱스로 항목을 접근하고 있습니다. 리스트의 <code>remove</code> 메소드를 통해 항목을 삭제함으로써 <code>player</code>가 카드를 냈다는것을 표현할 수 있습니다. 낸 카드는 <code>put.append</code> 해줌으로써 카드를 냈다고 처리합시다.</p>
<p>앗, 잠깐만요, 만약 낼 수 있는 카드가 없어서 카드를 먹을 수 밖에 없는 상황이라면 어떡하죠?</p>
<hr>
<h3>낼 수 있는 카드가 없는 경우 카드 먹기</h3>
<p>카드를 선택하기 전에 카드를 먹어야 하는 상황인지에 대해서 먼저 판단해야 할 것 같습니다. 우리가 앞서 카드 하나하나에 대해 검사한 후 <code>available</code>을 구해 보았습니다. 이 <code>available</code> 리스트의 길이를 구한다면 우리가 낼 수 있는 카드가 하나라도 있는지 없는지 알 수 있을 것입니다. 다음이 코드입니다.</p>
<pre><code class="language-python"># 낼 수 있는 카드가 있는 경우
if len(available) &gt; 0:
    i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
    i -= 1
    selected = available[i]
    player.remove(selected)
    put.append(selected)

# 낼 수 있는 카드가 없는 경우
else:
    print(&quot;낼 수 있는 카드가 없어 먹습니다.&quot;)
    player.append(deck.pop())
</code></pre>
<p>좋습니다. 우리가 게임의 끝 부분까지 녹여서 코드를 만든다면 커다란 <code>while</code> 문의 내용은 다음과 같이 완성되었을 것입니다.</p>
<pre><code class="language-python">while True:

    # 플레이어의 차례
    print(&quot;플레이어의 차례입니다.&quot;)
    print(&quot;현재 패 &gt;&gt;&quot;, player)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드 출력
    available = []
    for card in player:
        if (card[0] == put[-1][0]
            or card[1] == put[-1][1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)
        
    print(&quot;낼 수 있는 카드:&quot;, available)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
        i -= 1
        selected = available[i]
        player.remove(selected)
        put.append(selected)

    # 낼 수 있는 카드가 없는 경우
    else:
        print(&quot;낼 수 있는 카드가 없어 먹습니다.&quot;)
        player.append(deck.pop())

    if len(player) == 0:
        print(&quot;플레이어가 이겼습니다!&quot;)
        break
</code></pre>
<hr>
<h3>컴퓨터의 차례 만들기</h3>
<p>컴퓨터의 차례는 지금 껏 작성한 코드를 복사하여 그대로 붙여넣은 뒤, 일부만 수정해주면 됩니다.</p>
<ul>
<li>컴퓨터는 패의 정보를 자세하게 출력할 필요가 없습니다.</li>
<li>컴퓨터는 랜덤으로 가능한 카드를 선택합니다.</li>
</ul>
<p><code>while</code>의 컴퓨터 부분의 코드는 다음과 같습니다.</p>
<pre><code class="language-python"># 게임 시작
while True:

    # 플레이어의 차례
    # .. 중략 ..
   
    # 컴퓨터의 차례
    print(&quot;컴퓨터의 차례입니다.&quot;)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드
    available = []
    for card in computer:
        if (card[0] == put[-1][0]
            or card[1] == put[-1][1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        selected = random.choice(available)
        computer.remove(selected)
        put.append(selected)
        print(&quot;컴퓨터가&quot;, selected, &quot;를 냈습니다.&quot;)

    # 낼 수 있는 카드가 없는 경우
    else:
        print(&quot;낼 수 있는 카드가 없어 먹습니다.&quot;)
        computer.append(deck.pop())

    if len(computer) == 0:
        print(&quot;컴퓨터가 이겼습니다!&quot;)
        break
</code></pre>
<hr>
<h2>중간 마무리</h2>
<p>지금까지 대략적으로 핵심적인 게임 기능을 구현해보았습니다. 실제로 플레이해보면 제대로 동작하고 있음을 확인할 수 있습니다. 하지만 아직 갈 길이 멀었습니다. 다음 시간에는 함수를 이용해서 비슷한 기능을 최대한 묶은 다음 공격 메커니즘이나 특수한 상황을 더 처리해볼 것입니다. 지금까지 작성한 모든 코드는 아래를 펼쳐 확인할 수 있습니다.</p>
<p>-expandable-</p>
<pre><code class="language-python">import random

deck = []

# num과 shape 정의
shapes = '♥♣♠◆'
nums = []
for i in range(2,11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = []
computer = []

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = []
put.append(deck.pop())

    
# 게임 시작
while True:

    # 플레이어의 차례
    print(&quot;플레이어의 차례입니다.&quot;)
    print(&quot;현재 패 &gt;&gt;&quot;, player)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드
    available = []
    for card in player:
        if (card[0] == put[-1][0]
            or card[1] == put[-1][1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)
        
    print(&quot;낼 수 있는 카드:&quot;, available)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
        i -= 1
        selected = available[i]
        player.remove(selected)
        put.append(selected)

    # 낼 수 있는 카드가 없는 경우
    else:
        print(&quot;낼 수 있는 카드가 없어 먹습니다.&quot;)
        player.append(deck.pop())

    if len(player) == 0:
        print(&quot;플레이어가 이겼습니다!&quot;)
        break

    # 컴퓨터의 차례
    print(&quot;컴퓨터의 차례입니다.&quot;)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드
    available = []
    for card in computer:
        if (card[0] == put[-1][0]
            or card[1] == put[-1][1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        selected = random.choice(available)
        computer.remove(selected)
        put.append(selected)
        print(&quot;컴퓨터가&quot;, selected, &quot;를 냈습니다.&quot;)

    # 낼 수 있는 카드가 없는 경우
    else:
        print(&quot;낼 수 있는 카드가 없어 먹습니다.&quot;)
        computer.append(deck.pop())

    if len(computer) == 0:
        print(&quot;컴퓨터가 이겼습니다!&quot;)
        break
</code></pre>
<p>-/expandable-</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1441</wp:post_id>
		<wp:post_date><![CDATA[2020-02-03 08:21:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-02 23:21:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 22:34:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 13:34:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%8b%a4%ec%8a%b5-%ec%9b%90%ec%b9%b4%eb%93%9c-%ea%b2%8c%ec%9e%84-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6825</wp:comment_id>
			<wp:comment_author><![CDATA[태우]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rlaxodn2245@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.96.184.133]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-04-17 11:59:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-04-17 02:59:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[정말 감사합니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1618628347.055118;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619001784.456492;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7138</wp:comment_id>
			<wp:comment_author><![CDATA[kim]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gnsdl3700@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.238.67.149]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-16 21:41:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-16 12:41:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[좋은정보 감사합니다 혹시 이렇게 변형한 코드도 알려주실수있으실까요?
모던 파이썬 독학중인데 5장에나오는 카드게임을 혼자 풀어보기 너무어렵네요.

카드게임인데 3명의 플레이어가 카드게임하는것 입니다.



각 라운드마다 플레이어들은 덱에서 카드를 가져옵니다.



가장 높은 카드를 뽑은 플레이어가 그 라운드를 승리하는것 입니다.



이긴 사람은 자신이 가지고 있는 카드를 가장 낮은 카드를 가진 플레이어에게 줍니다.



라운드를 여러 번 거치다가 덱이 비게되면 게임이 끝납니다.



게임이 끝났을 때 손에 카드를 제일 적게 가지고 있는 플레이어가

최종 승리자입니다.



카드는 2 ~ 9 번호가 있고

스페이드, 하트, 다이아몬드, 클로버 인 4개 문양이 있습니다.



일단 숫자가 높으면 더 높은 카드이고, 숫자가 같을 경우는

스페이드 &gt; 하트 &gt; 다이아몬드 &gt;클로버 순으로 더 높은 카드이다.
[출처] [Python] 카드놀이. 누가 제일 큰 수를 뽑았을까? | 파이썬 어렵지 않아요!|작성자 나도대표할래]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623847304.985032;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7137</wp:comment_id>
			<wp:comment_author><![CDATA[kim]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gnsdl3700@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.238.67.149]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-16 21:40:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-16 12:40:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요 정말감사합니다.

좋은정보 감사합니다..
위코드 스파이더로 따라해보며 정말 많이 배웠습니다.

혹시 이렇게 변형한 코드도 알려주실수있으실까요?
모던 파이썬 독학중인데 5장에나오는 카드게임을 혼자 풀어보기 너무어렵네요.

카드게임인데 3명의 플레이어가 카드게임하는것 입니다.



각 라운드마다 플레이어들은 덱에서 카드를 가져옵니다.



가장 높은 카드를 뽑은 플레이어가 그 라운드를 승리하는것 입니다.



이긴 사람은 자신이 가지고 있는 카드를 가장 낮은 카드를 가진 플레이어에게 줍니다.



라운드를 여러 번 거치다가 덱이 비게되면 게임이 끝납니다.



게임이 끝났을 때 손에 카드를 제일 적게 가지고 있는 플레이어가

최종 승리자입니다.



카드는 2 ~ 9 번호가 있고

스페이드, 하트, 다이아몬드, 클로버 인 4개 문양이 있습니다.



일단 숫자가 높으면 더 높은 카드이고, 숫자가 같을 경우는

스페이드 &gt; 하트 &gt; 다이아몬드 &gt;클로버 순으로 더 높은 카드이다.
[출처] [Python] 카드놀이. 누가 제일 큰 수를 뽑았을까? | 파이썬 어렵지 않아요!|작성자 나도대표할래]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623847249.52003;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10141</wp:comment_id>
			<wp:comment_author><![CDATA[아무개]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[y000311@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.252.203.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-05-30 10:37:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-05-30 01:37:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다. 선생님.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1653874677.815872;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489194.150839;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 실습 - 원카드 게임 만들기 (2)]]></title>
		<link>https://elvanov.com/1517</link>
		<pubDate>Mon, 10 Feb 2020 07:46:41 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1517</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"지난 시간까지 대략적으로 핵심적인 기능만 작성해보았습니다.\n\n\u002d\u002d-\n\n## 비슷한 기능을 함수로 묶기\n\n지금의 코드는 플레이어 부분과 컴퓨터 부분이 유사합니다. 완전히 똑같지는 않지만 구조는 비슷하기 때문에 공격 메커니즘을 추가한다고 했을 때 비슷한 코드를 다시 두번 작성해야 합니다. 이러한 귀찮음을 피하기 위해 비슷한 기능을 최대한 함수로 묶어보도록 합시다.\n\n### `getAvailable`\n\n`getAvailable`은 주어진 상황에서 가능한 카드의 리스트인 `available`를 반환하는 함수입니다. 어떤 플레이어의 패인 `hand`와 마지막으로 놓여있는 카드인 `last_hand` 를 인수로 받습니다.\n\n코드로는 다음과 같습니다.\n\n```python\n# 가능한 카드 리스트를 반환\ndef getAvailable(hand, last_card):\n    available = []\n    for card in hand:\n        if (card[0] == last_card[0]\n            or card[1] == last_card[1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n    return available\n```\n\n이로써 available을 구하는 다소 긴 과정이 다음과 같은 코드로 압축될 수 있습니다.\n\n```python\n# 플레이어 부분\navailable = getAvailable(player, put[-1])\n\n# 컴퓨터 부분\navailable = getAvailable(computer, put[-1])\n```\n\n### `turn`\n\n비슷한 원리로 전체 과정을 줄여봅시다. `turn` 함수는 플레이어든, 컴퓨터든 간에 하나의 차례를 통째로 표현합니다. 함수를 정의하기 이전에 우리가 큰 `while`에서 어떻게 이 함수를 이용하고 싶은지 먼저 적어봅시다. 우리는 차례를 다음과 같이 간단하게 나타내고 싶습니다.\n\n```python\nwhile True:\n    turn(player)\n    turn(computer)\n```\n\n하지만 `turn` 함수 입장에서, 들어오는 카드의 리스트가 `player` 것인지, `computer` 것인지 판단할 수 없습니다. 그러므로 인수 하나를 추가해서 컴퓨터라면 `True`, 그렇지 않다면 `False`를 넣을 수 있게 해봅시다.\n\n```python\nwhile True:\n    turn(player, False)\n    turn(computer, True)\n```\n\n아직 turn 함수는 정의하지 않았습니다. 하지만 함수를 어떻게 호출할 것인지부터 적는다면 함수 정의를 더 쉽게 할 수도 있습니다.\n\n모든 과정을 `turn` 안에 넣었다고 가정할 때, 문제는 이 무한루프를 멈출 방법이 없어졌다는 것입니다. 함수 안에서 `break` 해봤자 함수는 격리된 공간이기 때문에 외부의 `while`에 영향을 미칠 수 없습니다. 함수는 리턴 값으로 결과를 반환할 수 있습니다. 만약 플레이어가 이겼다면 `True`를, 그렇지 않다면 `False`를 반환하도록 합시다. 그렇다면 `while`을 멈출 수 있는 수단이 생깁니다.\n\n```python\nwhile True:\n  \n    if turn(player, False):\n        break\n\n    if turn(computer, True):\n        break\n```\n\n좋습니다. 이제 함수를 어떻게 호출하고 결과 값이 무엇이 나와야 하는지 정해졌습니다. 코드를 작성해봅시다.\n\n```python\ndef turn(hand, isComputer):\n\n    # 전역 변수 접근\n    global put, deck\n\n    # 이름 정하기\n    if isComputer:\n        name = \u0022컴퓨터\u0022\n    else:\n        name = \u0022플레이어\u0022\n\n    # 차례\n    print(name, \u0022의 차례입니다.\u0022)\n    if not isComputer:\n        print(\u0022현재 패 \u003e\u003e\u0022, hand)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드\n    available = getAvailable(hand, put[-1])\n    if not isComputer:\n        print(\u0022낼 수 있는 카드:\u0022, available)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        if isComputer:\n            selected = random.choice(available)\n            print(\u0022컴퓨터가\u0022, selected, \u0022를 냈습니다.\u0022)\n        else:\n            i = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\n            i -= 1\n            selected = available[i]\n        hand.remove(selected)\n        put.append(selected)\n    \n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(name, \u0022가 낼 수 있는 카드가 없어 먹습니다.\u0022)\n        hand.append(deck.pop())\n\n    if len(hand) == 0:\n        print(name, \u0022가 이겼습니다!\u0022)\n        return True\n\n    else:\n        return False\n```\n\n`put`과 `deck`은 함수의 외부에 있기 때문에 접근할 수 없지만, `global` 키워드를 이용하여 접근을 허용하고 있습니다. 또한 `isComputer`로 컴퓨터의 유무를 확인할 수 있도록 하였으나 `True`와 `False` 만으로는 어떤 뜻인지 알 수 없으므로 명시적으로 주체의 이름을 정해줍니다. 이 이름은 나중에 출력할 때 쓰입니다. \n\n함수 내에서 필요할 때마다 `if isComputer:` 를 작성하여 컴퓨터로서 처리되어야 할 부분과 플레이어로서 처리되어야 할 부분을 구분합니다. 전체 코드의 줄 변화는 크게 없지만 우리는 이제 코드를 수정하기 용이해졌습니다. 전체 코드는 다음과 같습니다.\n\n-expandable-\n\n```python\nimport random\n\n# 가능한 카드 리스트를 반환\ndef getAvailable(hand, last_card):\n    available = []\n    for card in hand:\n        if (card[0] == last_card[0]\n            or card[1] == last_card[1]\n            or card[0] == 'Joker'\n            or put[-1][0] == 'Joker'):\n            available.append(card)\n    return available\n\ndef turn(hand, isComputer):\n\n    # 전역 변수 접근\n    global put, deck\n\n    # 이름 정하기\n    if isComputer:\n        name = \u0022컴퓨터\u0022\n    else:\n        name = \u0022플레이어\u0022\n\n    # 차례\n    print(name, \u0022의 차례입니다.\u0022)\n    if not isComputer:\n        print(\u0022현재 패 \u003e\u003e\u0022, hand)\n    print(\u0022놓여진 카드 \u003e\u003e\u0022, put[-1])\n\n    # 가능한 카드\n    available = getAvailable(hand, put[-1])\n    if not isComputer:\n        print(\u0022낼 수 있는 카드:\u0022, available)\n\n    # 낼 수 있는 카드가 있는 경우\n    if len(available) \u003e 0:\n        if isComputer:\n            selected = random.choice(available)\n            print(\u0022컴퓨터가\u0022, selected, \u0022를 냈습니다.\u0022)\n        else:\n            i = int(input(\u0022몇 번째 카드를 내시겠습니까?\u0022))\n            i -= 1\n            selected = available[i]\n        hand.remove(selected)\n        put.append(selected)\n    \n    # 낼 수 있는 카드가 없는 경우\n    else:\n        print(name, \u0022가 낼 수 있는 카드가 없어 먹습니다.\u0022)\n        hand.append(deck.pop())\n\n    if len(hand) == 0:\n        print(name, \u0022가 이겼습니다!\u0022)\n        return True\n\n    else:\n        return False\n\ndeck = []\n\n# num과 shape 정의\nshapes = '♥♣♠◆'\nnums = []\nfor i in range(2,11):\n    nums.append(str(i))\nfor c in 'JQKA':\n    nums.append(c)\n\n# 덱 만들기\nfor shape in shapes:\n    for num in nums:\n        deck.append((shape, num))\n\ndeck.append(('Joker', 'black'))\ndeck.append(('Joker', 'colored'))\nrandom.shuffle(deck)\n\n# 플레이어에게 카드 나누기\n\nplayer = []\ncomputer = []\n\nfor i in range(7):\n    player.append(deck.pop())\n    computer.append(deck.pop())\n\n# 낸 카드에 하나 올려놓기\nput = []\nput.append(deck.pop())\n\n# 게임 시작\nwhile True:\n\n    if turn(player, False):\n        break\n\n    if turn(computer, True):\n        break\n```\n\n-/expandable-\n\n\n\u002d\u002d-\n\n## 공격 메커니즘 만들기\n\n### 공격 메커니즘 구상하기\n\n대략적인 공격 메커니즘을 먼저 생각해봅시다.\n\n```mermaid-execute\ngraph TD\nst[턴이 시작된다]\na{공격받는\u003cbr\u003e상황인가?}\nam{낼 카드가\u003cbr\u003e있는가?}\nb[더 상위의\u003cbr\u003e공격카드를\u003cbr\u003e낸다]\nc[공격을 계속한다]\nbn[공격받은 만큼\u003cbr\u003e카드를 먹는다]\na\u002d\u002d\u003e|Yes|am\u002d\u002d\u003e|Yes|b\u002d\u002d\u003ec\nam\u002d\u002d\u003e|No|bn\nan{낼 카드가\u003cbr\u003e있는가?}\nany[카드를\u003cbr\u003e고른다]\nann[카드를 한장\u003cbr\u003e먹는다]\nan\u002d\u002d\u003e|Yes|any\nan\u002d\u002d\u003e|No|ann\na\u002d\u002d\u003e|No|an\nst\u002d\u002d\u003ea\nbn\u002d\u002d\u003ebn1[공격 상황을\u003cbr\u003e종료한다]\nany\u002d\u002d\u003eany1{공격카드인가?}\nany1\u002d\u002d\u003e|Yes|sta[\u0022공격 상황을\u003cbr\u003e시작한다\u0022]\nsta\u002d\u002d\u003een[\u0022턴을 끝낸다\u0022]\nbn1\u002d\u002d\u003een\nann\u002d\u002d\u003een\nc\u002d\u002d\u003een\n```\n*공격 메커니즘*\n"} -->
<div class="wp-block-jetpack-markdown"><p>지난 시간까지 대략적으로 핵심적인 기능만 작성해보았습니다.</p>
<hr>
<h2>비슷한 기능을 함수로 묶기</h2>
<p>지금의 코드는 플레이어 부분과 컴퓨터 부분이 유사합니다. 완전히 똑같지는 않지만 구조는 비슷하기 때문에 공격 메커니즘을 추가한다고 했을 때 비슷한 코드를 다시 두번 작성해야 합니다. 이러한 귀찮음을 피하기 위해 비슷한 기능을 최대한 함수로 묶어보도록 합시다.</p>
<h3><code>getAvailable</code></h3>
<p><code>getAvailable</code>은 주어진 상황에서 가능한 카드의 리스트인 <code>available</code>를 반환하는 함수입니다. 어떤 플레이어의 패인 <code>hand</code>와 마지막으로 놓여있는 카드인 <code>last_hand</code> 를 인수로 받습니다.</p>
<p>코드로는 다음과 같습니다.</p>
<pre><code class="language-python"># 가능한 카드 리스트를 반환
def getAvailable(hand, last_card):
    available = []
    for card in hand:
        if (card[0] == last_card[0]
            or card[1] == last_card[1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)
    return available
</code></pre>
<p>이로써 available을 구하는 다소 긴 과정이 다음과 같은 코드로 압축될 수 있습니다.</p>
<pre><code class="language-python"># 플레이어 부분
available = getAvailable(player, put[-1])

# 컴퓨터 부분
available = getAvailable(computer, put[-1])
</code></pre>
<h3><code>turn</code></h3>
<p>비슷한 원리로 전체 과정을 줄여봅시다. <code>turn</code> 함수는 플레이어든, 컴퓨터든 간에 하나의 차례를 통째로 표현합니다. 함수를 정의하기 이전에 우리가 큰 <code>while</code>에서 어떻게 이 함수를 이용하고 싶은지 먼저 적어봅시다. 우리는 차례를 다음과 같이 간단하게 나타내고 싶습니다.</p>
<pre><code class="language-python">while True:
    turn(player)
    turn(computer)
</code></pre>
<p>하지만 <code>turn</code> 함수 입장에서, 들어오는 카드의 리스트가 <code>player</code> 것인지, <code>computer</code> 것인지 판단할 수 없습니다. 그러므로 인수 하나를 추가해서 컴퓨터라면 <code>True</code>, 그렇지 않다면 <code>False</code>를 넣을 수 있게 해봅시다.</p>
<pre><code class="language-python">while True:
    turn(player, False)
    turn(computer, True)
</code></pre>
<p>아직 turn 함수는 정의하지 않았습니다. 하지만 함수를 어떻게 호출할 것인지부터 적는다면 함수 정의를 더 쉽게 할 수도 있습니다.</p>
<p>모든 과정을 <code>turn</code> 안에 넣었다고 가정할 때, 문제는 이 무한루프를 멈출 방법이 없어졌다는 것입니다. 함수 안에서 <code>break</code> 해봤자 함수는 격리된 공간이기 때문에 외부의 <code>while</code>에 영향을 미칠 수 없습니다. 함수는 리턴 값으로 결과를 반환할 수 있습니다. 만약 플레이어가 이겼다면 <code>True</code>를, 그렇지 않다면 <code>False</code>를 반환하도록 합시다. 그렇다면 <code>while</code>을 멈출 수 있는 수단이 생깁니다.</p>
<pre><code class="language-python">while True:
  
    if turn(player, False):
        break

    if turn(computer, True):
        break
</code></pre>
<p>좋습니다. 이제 함수를 어떻게 호출하고 결과 값이 무엇이 나와야 하는지 정해졌습니다. 코드를 작성해봅시다.</p>
<pre><code class="language-python">def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck

    # 이름 정하기
    if isComputer:
        name = &quot;컴퓨터&quot;
    else:
        name = &quot;플레이어&quot;

    # 차례
    print(name, &quot;의 차례입니다.&quot;)
    if not isComputer:
        print(&quot;현재 패 &gt;&gt;&quot;, hand)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드
    available = getAvailable(hand, put[-1])
    if not isComputer:
        print(&quot;낼 수 있는 카드:&quot;, available)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        if isComputer:
            selected = random.choice(available)
            print(&quot;컴퓨터가&quot;, selected, &quot;를 냈습니다.&quot;)
        else:
            i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
            i -= 1
            selected = available[i]
        hand.remove(selected)
        put.append(selected)
    
    # 낼 수 있는 카드가 없는 경우
    else:
        print(name, &quot;가 낼 수 있는 카드가 없어 먹습니다.&quot;)
        hand.append(deck.pop())

    if len(hand) == 0:
        print(name, &quot;가 이겼습니다!&quot;)
        return True

    else:
        return False
</code></pre>
<p><code>put</code>과 <code>deck</code>은 함수의 외부에 있기 때문에 접근할 수 없지만, <code>global</code> 키워드를 이용하여 접근을 허용하고 있습니다. 또한 <code>isComputer</code>로 컴퓨터의 유무를 확인할 수 있도록 하였으나 <code>True</code>와 <code>False</code> 만으로는 어떤 뜻인지 알 수 없으므로 명시적으로 주체의 이름을 정해줍니다. 이 이름은 나중에 출력할 때 쓰입니다.</p>
<p>함수 내에서 필요할 때마다 <code>if isComputer:</code> 를 작성하여 컴퓨터로서 처리되어야 할 부분과 플레이어로서 처리되어야 할 부분을 구분합니다. 전체 코드의 줄 변화는 크게 없지만 우리는 이제 코드를 수정하기 용이해졌습니다. 전체 코드는 다음과 같습니다.</p>
<p>-expandable-</p>
<pre><code class="language-python">import random

# 가능한 카드 리스트를 반환
def getAvailable(hand, last_card):
    available = []
    for card in hand:
        if (card[0] == last_card[0]
            or card[1] == last_card[1]
            or card[0] == 'Joker'
            or put[-1][0] == 'Joker'):
            available.append(card)
    return available

def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck

    # 이름 정하기
    if isComputer:
        name = &quot;컴퓨터&quot;
    else:
        name = &quot;플레이어&quot;

    # 차례
    print(name, &quot;의 차례입니다.&quot;)
    if not isComputer:
        print(&quot;현재 패 &gt;&gt;&quot;, hand)
    print(&quot;놓여진 카드 &gt;&gt;&quot;, put[-1])

    # 가능한 카드
    available = getAvailable(hand, put[-1])
    if not isComputer:
        print(&quot;낼 수 있는 카드:&quot;, available)

    # 낼 수 있는 카드가 있는 경우
    if len(available) &gt; 0:
        if isComputer:
            selected = random.choice(available)
            print(&quot;컴퓨터가&quot;, selected, &quot;를 냈습니다.&quot;)
        else:
            i = int(input(&quot;몇 번째 카드를 내시겠습니까?&quot;))
            i -= 1
            selected = available[i]
        hand.remove(selected)
        put.append(selected)
    
    # 낼 수 있는 카드가 없는 경우
    else:
        print(name, &quot;가 낼 수 있는 카드가 없어 먹습니다.&quot;)
        hand.append(deck.pop())

    if len(hand) == 0:
        print(name, &quot;가 이겼습니다!&quot;)
        return True

    else:
        return False

deck = []

# num과 shape 정의
shapes = '♥♣♠◆'
nums = []
for i in range(2,11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = []
computer = []

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = []
put.append(deck.pop())

# 게임 시작
while True:

    if turn(player, False):
        break

    if turn(computer, True):
        break
</code></pre>
<p>-/expandable-</p>
<hr>
<h2>공격 메커니즘 만들기</h2>
<h3>공격 메커니즘 구상하기</h3>
<p>대략적인 공격 메커니즘을 먼저 생각해봅시다.</p>
<pre><code class="language-mermaid-execute">graph TD
st[턴이 시작된다]
a{공격받는&lt;br&gt;상황인가?}
am{낼 카드가&lt;br&gt;있는가?}
b[더 상위의&lt;br&gt;공격카드를&lt;br&gt;낸다]
c[공격을 계속한다]
bn[공격받은 만큼&lt;br&gt;카드를 먹는다]
a--&gt;|Yes|am--&gt;|Yes|b--&gt;c
am--&gt;|No|bn
an{낼 카드가&lt;br&gt;있는가?}
any[카드를&lt;br&gt;고른다]
ann[카드를 한장&lt;br&gt;먹는다]
an--&gt;|Yes|any
an--&gt;|No|ann
a--&gt;|No|an
st--&gt;a
bn--&gt;bn1[공격 상황을&lt;br&gt;종료한다]
any--&gt;any1{공격카드인가?}
any1--&gt;|Yes|sta[&quot;공격 상황을&lt;br&gt;시작한다&quot;]
sta--&gt;en[&quot;턴을 끝낸다&quot;]
bn1--&gt;en
ann--&gt;en
c--&gt;en
</code></pre>
<p><em>공격 메커니즘</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>위의 메커니즘은 아주 러프하게 작성한 것입니다. 본격적으로 코드를 작성하기 전에 조금 더 생각을 정리해봅시다. 상황이 더 복잡해졌고, 중복되는 코드가 많아질 예정입니다. 무작정 코드를 작성하다가는 밀려드는 코드에 정신을 차리지 못할 것입니다!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 게임을 좌지우지하는 두 가지 상황이 있습니다. 첫 번째는 <strong>공격 상황인지의 여부</strong>이고 두 번째는 <strong>그에 따라 낼 수 있는 카드가 존재하는 지의 여부</strong>입니다. 이를 각각 <code><strong>is_attack</strong></code>과 <strong><code>is_available</code> </strong>이라는 이름으로 부르겠습니다. 이 변수를 어떻게 다룰지는 후술하겠습니다. 일단 이 변수에 따라서 영역을 분할해 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|영역|영향 받는 것|영향을 주는 것|\n|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|\n|턴 시작|-|-|\n|낼 수 있는 카드 고르기|`is_attack`에 따라 낼 수 있는 카드가 다름. |낼 수 있는 카드가 없다면 `is_avilable = False`, 낼 수 있다면 `is_available = True`|\n|카드 내기|`is_available`이 `True`라면 실행|공격 카드일시 `is_attack`를 `True`로 설정|\n|카드 먹기|`is_available`이 `False`라면 실행|`is_attack`이 True라면, `is_attack`를 `False`로 설정|\n|턴 끝|-|-|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th style="text-align:center">영역</th>
<th style="text-align:center">영향 받는 것</th>
<th style="text-align:center">영향을 주는 것</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">턴 시작</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">낼 수 있는 카드 고르기</td>
<td style="text-align:center"><code>is_attack</code>에 따라 낼 수 있는 카드가 다름.</td>
<td style="text-align:center">낼 수 있는 카드가 없다면 <code>is_avilable = False</code>, 낼 수 있다면 <code>is_available = True</code></td>
</tr>
<tr>
<td style="text-align:center">카드 내기</td>
<td style="text-align:center"><code>is_available</code>이 <code>True</code>라면 실행</td>
<td style="text-align:center">공격 카드일시 <code>is_attack</code>를 <code>True</code>로 설정</td>
</tr>
<tr>
<td style="text-align:center">카드 먹기</td>
<td style="text-align:center"><code>is_available</code>이 <code>False</code>라면 실행</td>
<td style="text-align:center"><code>is_attack</code>이 True라면, <code>is_attack</code>를 <code>False</code>로 설정</td>
</tr>
<tr>
<td style="text-align:center">턴 끝</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이렇게 분할하는 이유는, 실제로 코딩을 할 때 어떤 부분에서 무엇을 처리하는지 확실히 하기 위함입니다. <code>if</code>문을 그대로 따라가면서 모든 기능을 집어넣다 보면 유지보수가 굉장히 어려워집니다. 그리고 영역을 나눠놓으면 나중에 함수로 기능을 분리시키기도 편리합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 표에서는 아직 하나의 기능을 고려하지 않았습니다. 바로 카드를 먹을 때, 공격을 받는 상황이었다면 공격받은 만큼 먹었다는 것이죠. 우리는 <code>bool</code> 형의 두 가지 변수밖에 가지지 않았습니다. 공격을 얼마나 받았는지를 저장하는 변수가 또 하나 더 필요해졌습니다. 그 변수의 이름은 <code>damage</code>로 설정하고 타입은 숫자형으로 하겠습니다. 그리고 이제 여러 방면에서 <code>damage</code>가 다루어집니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|영역|영향 받는 것|영향을 주는 것|\n|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|\n|턴 시작|-|-|\n|낼 수 있는 카드 고르기|`is_attack`에 따라 낼 수 있는 카드가 다름. |낼 수 있는 카드가 없다면 `is_avilable = False`, 낼 수 있다면 `is_available = True`|\n|카드 내기|`is_available`이 `True`라면 실행|공격 카드일시 `is_attack`를 `True`로 설정. **처음 공격이라면 `damage`를 공격만큼만 설정하고, 이어지는 공격이라면 `damage`를 증감한다.**|\n|카드 먹기|`is_available`이 `False`라면 실행, `is_attack`에 따라 얼마나 먹는지 달라짐| **공격 상황이라면 `damage`만큼 카드를 먹고 `damage`를 `0`으로 초기화 후 공격 상황 종료. 공격 상황이 아니라면 카드를 `1`개 먹음.** |\n|턴 끝|-|-|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th style="text-align:center">영역</th>
<th style="text-align:center">영향 받는 것</th>
<th style="text-align:center">영향을 주는 것</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">턴 시작</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">낼 수 있는 카드 고르기</td>
<td style="text-align:center"><code>is_attack</code>에 따라 낼 수 있는 카드가 다름.</td>
<td style="text-align:center">낼 수 있는 카드가 없다면 <code>is_avilable = False</code>, 낼 수 있다면 <code>is_available = True</code></td>
</tr>
<tr>
<td style="text-align:center">카드 내기</td>
<td style="text-align:center"><code>is_available</code>이 <code>True</code>라면 실행</td>
<td style="text-align:center">공격 카드일시 <code>is_attack</code>를 <code>True</code>로 설정. <strong>처음 공격이라면 <code>damage</code>를 공격만큼만 설정하고, 이어지는 공격이라면 <code>damage</code>를 증감한다.</strong></td>
</tr>
<tr>
<td style="text-align:center">카드 먹기</td>
<td style="text-align:center"><code>is_available</code>이 <code>False</code>라면 실행, <code>is_attack</code>에 따라 얼마나 먹는지 달라짐</td>
<td style="text-align:center"><strong>공격 상황이라면 <code>damage</code>만큼 카드를 먹고 <code>damage</code>를 <code>0</code>으로 초기화 후 공격 상황 종료. 공격 상황이 아니라면 카드를 <code>1</code>개 먹음.</strong></td>
</tr>
<tr>
<td style="text-align:center">턴 끝</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>우리는 이제 코드를 직접 짜지 않고도 머릿속으로(!) 코드를 최적화할 수도 있습니다. 코드를 어디서 어떻게 효율적으로 만드는가는 많이 코딩해봐야 감이 생깁니다. <strong>카드 먹기</strong> 부분을 조금 더 손을 봅시다. 우리는 조건에 따라 분기해야 하는 비슷한 부분을, 묶어줄 수 있습니다. 저것만 따로 순서도를 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\na0[먹기 시작]\u002d\u002d\u003ea1\na1{is_attack}\na1\u002d\u002d\u003e|True|a2[damage만큼\u003cbr\u003e카드를 먹음]\na1\u002d\u002d\u003e|False|a3[1만큼 카드를 먹음]\na2\u002d\u002d\u003ea4[damage = 0]\na4\u002d\u002d\u003ea5[is_attack = False]\na5\u002d\u002d\u003ea6[먹기 끝]\na3\u002d\u002d\u003ea6\n```\n*카드 먹기 부분*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
a0[먹기 시작]--&gt;a1
a1{is_attack}
a1--&gt;|True|a2[damage만큼&lt;br&gt;카드를 먹음]
a1--&gt;|False|a3[1만큼 카드를 먹음]
a2--&gt;a4[damage = 0]
a4--&gt;a5[is_attack = False]
a5--&gt;a6[먹기 끝]
a3--&gt;a6
</code></pre>
<p><em>카드 먹기 부분</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>곰곰히 생각해봅시다. 왼쪽은 <code>damage</code>만큼 카드를 먹고, 오른쪽은 <code>1</code>만큼 카드를 먹습니다. 근데 만약에 <code>damage</code>가 <code>1</code>이라면 분기를 나눌 필요도 없이 <code>damage</code>만큼만 먹는 코드 하나만 있으면 충분하지 않을까요? 그렇다면 공격상황이 아니어도 처음부터 <code>damage</code>가 <code>1</code>이도록 만들면 될까요? 그런데 그게 가능할까요? 한 번 해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\na0[먹기 시작]\u002d\u002d\u003ea1\na1{is_attack}\na1\u002d\u002d\u003e|True|a4[damage = 1]\na4\u002d\u002d\u003ea5\na5[is_attack = False]\na5\u002d\u002d\u003ea2\na6[먹기 끝]\na2\u002d\u002d\u003ea6\na1\u002d\u002d\u003e|False|a2[damage만큼\u003cbr\u003e카드를 먹음]\n```\n*카드 먹기 부분 수정 1*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
a0[먹기 시작]--&gt;a1
a1{is_attack}
a1--&gt;|True|a4[damage = 1]
a4--&gt;a5
a5[is_attack = False]
a5--&gt;a2
a6[먹기 끝]
a2--&gt;a6
a1--&gt;|False|a2[damage만큼&lt;br&gt;카드를 먹음]
</code></pre>
<p><em>카드 먹기 부분 수정 1</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>그럴싸합니다. <code>damage</code>를 초기화 할 때 <code>1</code>로 하니까 상관없을 것 같고, 어차피 나중에 공격을 시작할 때에는 <code>1</code>에서 증감하는 것이 아니라 정확한 값으로 공격을 대입하는 것이니 <code>1</code>이라는 값이 자연스럽게 버려질 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>계속해서 수정해봅시다. 사실 공격 상황이든 상황이 아니든 일단 먹는다면, 공격이 종료된다고 보아도 됩니다. 공격 상황이 아닐 때에도 굳이 <code>is_attack = False</code> 라고 한다면 자원의 낭비라고 생각될 수도 있으나 코드 효율성을 생각한다면 훨씬 지구에 이득입니다. <code>damage = 1</code> 구문도 마찬가지입니다. 이렇게 모든 항목을 조건에서 제외하면 분기 자체가 사라지는 기적이 생깁니다!</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\na0[먹기 시작]\u002d\u002d\u003ea5\na4[damage = 1]\na4\u002d\u002d\u003ea6\na5[is_attack = False]\na5\u002d\u002d\u003ea2\na6[먹기 끝]\na2\u002d\u002d\u003ea4\na2[damage만큼\u003cbr\u003e카드를 먹음]\n```\n*카드 먹기 부분 수정 2*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
a0[먹기 시작]--&gt;a5
a4[damage = 1]
a4--&gt;a6
a5[is_attack = False]
a5--&gt;a2
a6[먹기 끝]
a2--&gt;a4
a2[damage만큼&lt;br&gt;카드를 먹음]
</code></pre>
<p><em>카드 먹기 부분 수정 2</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>수정한 것을 바탕으로 영역 표를 다시 한번 수정해봅시다. <code>is_attack</code>에 따른 분기가 사라지니까 <strong>영향 받는 것에서도 <code>is_attack</code>이 사라집니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|영역|영향 받는 것|영향을 주는 것|\n|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|\n|턴 시작|-|-|\n|낼 수 있는 카드 고르기|`is_attack`에 따라 낼 수 있는 카드가 다름. |낼 수 있는 카드가 없다면 `is_avilable = False`, 낼 수 있다면 `is_available = True`|\n|카드 내기|`is_available`이 `True`라면 실행|공격 카드일시 `is_attack`를 `True`로 설정. 처음 공격이라면 `damage`를 공격만큼만 설정하고, 이어지는 공격이라면 `damage`를 증감한다.|\n|카드 먹기|`is_available`이 `False`라면 실행, ~~`is_attack`에 따라 얼마나 먹는지 달라짐~~| **무조건 공격 상황을 종료하고 `damage` 만큼 카드를 먹은 뒤 `damage`를 1로 초기화함.** |\n|턴 끝|-|-|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th style="text-align:center">영역</th>
<th style="text-align:center">영향 받는 것</th>
<th style="text-align:center">영향을 주는 것</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">턴 시작</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">낼 수 있는 카드 고르기</td>
<td style="text-align:center"><code>is_attack</code>에 따라 낼 수 있는 카드가 다름.</td>
<td style="text-align:center">낼 수 있는 카드가 없다면 <code>is_avilable = False</code>, 낼 수 있다면 <code>is_available = True</code></td>
</tr>
<tr>
<td style="text-align:center">카드 내기</td>
<td style="text-align:center"><code>is_available</code>이 <code>True</code>라면 실행</td>
<td style="text-align:center">공격 카드일시 <code>is_attack</code>를 <code>True</code>로 설정. 처음 공격이라면 <code>damage</code>를 공격만큼만 설정하고, 이어지는 공격이라면 <code>damage</code>를 증감한다.</td>
</tr>
<tr>
<td style="text-align:center">카드 먹기</td>
<td style="text-align:center"><code>is_available</code>이 <code>False</code>라면 실행, <s><code>is_attack</code>에 따라 얼마나 먹는지 달라짐</s></td>
<td style="text-align:center"><strong>무조건 공격 상황을 종료하고 <code>damage</code> 만큼 카드를 먹은 뒤 <code>damage</code>를 1로 초기화함.</strong></td>
</tr>
<tr>
<td style="text-align:center">턴 끝</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>카드 내기, 카드 먹기 구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>너무 머리만 쓰니까 머리가 지끈지끈합니다. 이제 코드로 적어봅시다. 우선 영역을 주석으로 확실하게 표시해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>
    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1])
    if not isComputer:
        print("낼 수 있는 카드:", available)

### 중략 ###

    # ----------- 카드 고르기 ---------------------
    if len(available) > 0:

### 중략 ###

    # ------------ 카드 먹기 -----------------------
    else:
        print(name, "가 낼 수 있는 카드가 없어 먹습니다.")
        hand.append(deck.pop())
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 변수를 정의해줍니다. 특히 <code>is_attack</code>과 <code>damage</code> 변수는 턴이 지나도 계속해서 기억이 되어야 하므로 <code>turn</code> 함수의 바깥에서 정의해주고, <code>global</code>로 땡겨옵니다. <code>is_available</code> 또한 <code>turn</code> 함수 내에서 조건에 맞게 정의해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>is_attack = False
damage = 1

def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck, is_attack, damage

### 중략 ###

    # ----------- 카드 고르기 ---------------------
    is_available = len(available) > 0
    if is_available:</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>낼 수 있는 카드를 구하는 부분부터 생각해봅시다. 근데 또 머리가 아픕니다. 공격 상황일때 덱 위에 올라가 있는 카드에 따라 낼 수 있는 카드가 한정되어 있습니다. 예를 들어 <code>2</code>가 올라가 있으면 <code>Joker</code>를 낼 수 있지만, <code>Joker</code>가 올라가 있다면 <code>a</code>를 낼 수 없습니다. 이 상황은 조금 있다가 다시 살펴보도록 합시다. 쉬운 것부터 먼저 구현해보도록 하자구요!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>우선 카드를 내는 부분부터 설정해봅시다. 우리는 여기서 새로운 함수 2개를 만들 것입니다. 바로 <strong>카드가 공격 카드인지 판별하는 <code>is_attack_card</code> 함수와, 카드의 공격력을 계산하는 함수인 <code>get_damage</code> 함수</strong>입니다. 이런 기능은 다른 곳에서도 쓰일 가능성이 많으므로 처음부터 함수로 만들도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def is_attack_card(card):
    return card&#91;0] == 'Joker' or card&#91;1] in &#91;'A', '2']

def get_damage(card):
    damage = 0
    if card&#91;0] == 'Joker':
        if card&#91;1] == 'colored':
            damage = 10
        else:
            damage = 5
    elif card&#91;1] == 'A':
        damage = 3
    elif card&#91;1] == '2':
        damage = 2
    return damage</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다. 이제 카드 내는 부분을 수정해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># ----------- 카드 고르기 ---------------------
    is_available = len(available) > 0
    if is_available:

### 중략 ###

        if is_attack_card(selected):
            if not is_attack:
                damage = get_damage(selected)
            else:
                damage += get_damage(selected)
            
            is_attack = True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>처음 공격했는지를 판단하기 위해 <code>not is_attack</code>으로 처음에 먼저 체크를 하여 <code>damage</code>를 설정해주는 모습입니다. 마지막으로 <code>is_attack</code>을 <code>True</code>로 설정합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 카드를 먹는 부분을 수정해봅시다. 더 쉽습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # ------------ 카드 먹기 -----------------------
    else:
        print(name, "가 낼 수 있는 카드가 없어", damage, "장 먹습니다.")
        is_attack = False
        for i in range(damage):
            hand.append(deck.pop())
        damage = 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>혹시 눈치 빠르신 분이 계실 지는 모르겠지만, 카드 먹는 부분에는 치명적인 오류가 있습니다. 바로 <code>deck</code>에서 모든 카드를 뽑았을 때, 빈 <code>deck</code>에서 <code>pop</code>가 실행되는 에러입니다. 아직 직접적으로 문제가 나오지는 않았지만 언젠가 반드시 터질 문제입니다. 일단 낼 수 있는 카드를 구하는 부분을 먼저 구현하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>낼 수 있는 카드 고르기 구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>현재 상황이 공격 상황인지 아닌지에 따라 낼 수 있는 카드가 달라지는데, 이 부분을 더 자세히 알아보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|공격 상황|일반 상황|\n|\u002d\u002d-|\u002d\u002d-|\n|`put[-1]`의 카드는 무조건 공격 카드임. 이 카드보다 더 높은 공격력을 가진 카드이면서 모양이 같아야함. 단, 조커는 색깔과 공격력에 상관없이 낼 수 있음.|`put[-1]`이 조커인 경우 아무 카드나 낼 수 있음. 조커가 아니라면 모양이 같거나, 숫자가 같거나 해야 함.|"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>공격 상황</th>
<th>일반 상황</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>put[-1]</code>의 카드는 무조건 공격 카드임. 이 카드보다 더 높은 공격력을 가진 카드이면서 모양이 같아야함. 단, 조커는 색깔과 공격력에 상관없이 낼 수 있음.</td>
<td><code>put[-1]</code>이 조커인 경우 아무 카드나 낼 수 있음. 조커가 아니라면 모양이 같거나, 숫자가 같거나 해야 함.</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>저 상황을 코딩할 수 있는 상황으로 간단하게 만들어야 합니다. 변수는 다양합니다. 공격 상황과 일반 상황을 저렇게 나누어놓은 것 이외에도, <code>hand</code> 조커인지, 덱에 놓여져 있는 카드가 조커인지에 따라 또 달라질 수 있습니다. 쉬운 것부터 차근차근 해나가봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 <strong>일반 상황일 때 놓여져 있는 카드가 조커라면</strong>, 이 말인 즉슨 내가 조커를 내고 상대가 다 카드를 와장창 받아먹고 그 다음 내 턴이 왔다는 뜻이므로, 내 <code>hand</code>에 있는 어떤 카드든지 전부 다 낼 수 있습니다. 이 경우를 가장 먼저 처리합니다. 이제 <code>hand</code>의 카드 한장 한장이 가능한지 살펴보아야겠습니다. 우선 <strong><code>hand</code>에 있는 카드가 조커면</strong> 공격 상황이든 아니든 무조건 낼 수 있으므로, 무조건 포함시킵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음으로는, 공격 상황이든 일반 상황이든 <strong>모양과 숫자가 모두 다른 카드는 절대 낼 수 없으므로 우선 제외</strong>시킵니다. 그 다음 공격 상황에 대해서만, <strong>놓여져 있는 카드보다 공격력이 높은 카드를 낼 수 있도록 포함</strong>시킵니다. 그러면 완성입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이를 순서로 표현하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\ned[getAvailable 끝]\na[getAvailable 시작] \u002d\u002d\u003e b{공격 상황이 아니\u003cbr\u003e면서 덱에 조커가\u003cbr\u003e올려져 있는가?}\nb\u002d\u002d\u003e|yes|c[플레이어의 핸드를\u003cbr\u003e전부 낼 수 있다.]\u002d\u002d\u003eed\nb\u002d\u002d\u003e|no|d[핸드의 카드들을\u003cbr\u003e하나하나 검사 한다.]\nd\u002d\u002d\u003ee{카드가\u003cbr\u003e조커인가?}\ne\u002d\u002d\u003e|Yes|f[낼 수 있는 카드로\u003cbr\u003e판단한다.]\ne\u002d\u002d\u003e|No|g{모양과 숫자가\u003cbr\u003e모두 다른가?}\ng\u002d\u002d\u003e|Yes|h[낼 수 없는 카드로\u003cbr\u003e판단한다.]\ng\u002d\u002d\u003e|No|i{공격 상황인가?}\nh\u002d\u002d\u003ez\nf\u002d\u002d\u003ez[완료될 때까지 반복한다]\u002d\u002d\u003ed\nz\u002d\u002d\u003e|완료|ed\ni\u002d\u002d\u003e|Yes|j{내어져 있는\u003cbr\u003e카드보다\u003cbr\u003e공격력이 같거나\u003cbr\u003e높은가?}\nj\u002d\u002d\u003e|Yes|f\nj\u002d\u002d\u003e|No|h\ni\u002d\u002d\u003e|No|f\n```\n*수정된 `getAvailable`의 순서 1*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
ed[getAvailable 끝]
a[getAvailable 시작] --&gt; b{공격 상황이 아니&lt;br&gt;면서 덱에 조커가&lt;br&gt;올려져 있는가?}
b--&gt;|yes|c[플레이어의 핸드를&lt;br&gt;전부 낼 수 있다.]--&gt;ed
b--&gt;|no|d[핸드의 카드들을&lt;br&gt;하나하나 검사 한다.]
d--&gt;e{카드가&lt;br&gt;조커인가?}
e--&gt;|Yes|f[낼 수 있는 카드로&lt;br&gt;판단한다.]
e--&gt;|No|g{모양과 숫자가&lt;br&gt;모두 다른가?}
g--&gt;|Yes|h[낼 수 없는 카드로&lt;br&gt;판단한다.]
g--&gt;|No|i{공격 상황인가?}
h--&gt;z
f--&gt;z[완료될 때까지 반복한다]--&gt;d
z--&gt;|완료|ed
i--&gt;|Yes|j{내어져 있는&lt;br&gt;카드보다&lt;br&gt;공격력이 같거나&lt;br&gt;높은가?}
j--&gt;|Yes|f
j--&gt;|No|h
i--&gt;|No|f
</code></pre>
<p><em>수정된 <code>getAvailable</code>의 순서 1</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 한번 정리되었으니 코딩을 해봅시다. 공격력을 얻는 부분은 우리가 <code>get_damage</code> 함수를 구현했으니 손쉽게 할 수 있을 것입니다. 그리고 공격 상황인지를 알기 위해 변수를 얻어와야 하는데, <code>global is_attack</code> 하는 방법이 있겠지만, 간단한 변수이기 때문에 인수로 하나 추가해 주었습니다. 리스트의 <code>extend</code> 함수는 인수로 들어가는 또 다른 리스트를 그대로 확장한다는 의미입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def getAvailable(hand, last_card, is_attack):
    available = &#91;]
    if not is_attack and last_card&#91;0] == 'Joker':
        available.extend(hand)
        return available
    
    for card in hand:
        if card&#91;0] == 'Joker':
            available.append(card)
            
        elif (card&#91;0] != last_card&#91;0] 
            and card&#91;1] != last_card&#91;1]):
            continue

        elif is_attack:
            if get_damage(card) >= get_damage(last_card):
                available.append(card)
        else:
            available.append(card)

    return available</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>함수의 정의 부분을 바꾸었으니 이제 호출 부분도 바꾸어줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)
    if not isComputer:
        print("낼 수 있는 카드:", available)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 비로소 제대로 작동하는지 확인할 수 있습니다! 한번 실행해봐서 문제가 없는지 테스트를 해봅시다. 아래는 지금까지 작성한 모든 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>-expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>import random

# 가능한 카드 리스트를 반환


def getAvailable(hand, last_card, is_attack):
    available = &#91;]
    if not is_attack and last_card&#91;0] == 'Joker':
        available.extend(hand)
        return available

    for card in hand:
        if card&#91;0] == 'Joker':
            available.append(card)

        elif (card&#91;0] != last_card&#91;0]
              and card&#91;1] != last_card&#91;1]):
            continue

        elif is_attack:
            if get_damage(card) >= get_damage(last_card):
                available.append(card)
        else:
            available.append(card)

    return available


is_attack = False
damage = 1


def is_attack_card(card):
    return card&#91;0] == 'Joker' or card&#91;1] in &#91;'A', '2']


def get_damage(card):
    damage = 0
    if card&#91;0] == 'Joker':
        if card&#91;1] == 'colored':
            damage = 10
        else:
            damage = 5
    elif card&#91;1] == 'A':
        damage = 3
    elif card&#91;1] == '2':
        damage = 2
    return damage


def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck, is_attack, damage

    # 이름 정하기
    if isComputer:
        name = "컴퓨터"
    else:
        name = "플레이어"

    # 차례
    print(name, "의 차례입니다.")
    if not isComputer:
        print("현재 패 >>", hand)
    print("놓여진 카드 >>", put&#91;-1])

    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)
    if not isComputer:
        print("낼 수 있는 카드:", available)

    # ----------- 카드 고르기 ---------------------
    is_available = len(available) > 0
    if is_available:
        if isComputer:
            selected = random.choice(available)
            print("컴퓨터가", selected, "를 냈습니다.")
        else:
            i = int(input("몇 번째 카드를 내시겠습니까?"))
            i -= 1
            selected = available&#91;i]
        hand.remove(selected)
        put.append(selected)

        if is_attack_card(selected):
            if not is_attack:
                damage = get_damage(selected)
            else:
                damage += get_damage(selected)

            is_attack = True

    # ------------ 카드 먹기 -----------------------
    else:
        print(name, "가 낼 수 있는 카드가 없어", damage, "장 먹습니다.")
        is_attack = False
        for i in range(damage):
            hand.append(deck.pop())
        damage = 1

    if len(hand) == 0:
        print(name, "가 이겼습니다!")
        return True

    else:
        return False

deck = &#91;]

# num과 shape 정의
shapes = '♥♣♠◆'
nums = &#91;]
for i in range(2, 11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = &#91;]
computer = &#91;]

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
while True:

    if turn(player, False):
        break

    if turn(computer, True):
        break
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>-/expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제: 카드 먹기 보완</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아까 카드 먹기에 대한 심각한 결함이 있다고 하였죠? 실제로 게임을 진행하다 보면 다음과 같은 에러를 맞닥뜨립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>( ... 중략 )
플레이어 가 낼 수 있는 카드가 없어 5 장 먹습니다.
Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test.py", line 144, in &lt;module>
    if turn(player, False):
  File "c:/Users/tooth/Desktop/test.py", line 99, in turn
    hand.append(deck.pop())
IndexError: pop from empty list</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 문제를 해결하기 위해 카드를 먹는 <code>draw</code> 함수를 새롭게 정의하세요. 이 함수는 <code>deck</code>에 카드가 없을 때 <code>put</code>에 가장 위에 있는 카드 한 장만 남기고 섞어 다시 <code>deck</code>에 넣는 기능을 포함합니다. 이 기능이 있으면 절대 에러가 나지 않겠지요. <code>draw</code> 함수는 인수로 어떤 <code>hand</code>를 가져옵니다. <code>draw</code> 함수에서 <code>deck</code>과 <code>put</code>에 대한 접근은, <code>turn</code> 함수가 그래왔던 것처럼 함수 내부에서 <code>global</code> 로 선언하여 접근할 수 있도록 합니다. 함수를 정의한 후 호출 부분까지 완전히 구현해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>풀이</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>deck</code>에서 모든 카드를 먹었기 때문에 <code>deck</code>은 텅텅 비어있게 되었는데, 이를 어떻게 처리해야 합니다. <code>put</code>에서 제일 위에 있는 카드 하나를 제외하고, 모든 카드를 다시 섞에 <code>deck</code>에 놓는 작업을 해야 합니다. <code>draw</code> 함수를 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def draw(hand):
    global put, deck
    
    hand.append(deck.pop())

    if len(deck) == 0:
        print("카드를 다시 섞습니다!")
        last_card = put.pop()
        random.shuffle(put)
        put, deck = deck, put
        put.append(last_card)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>리스트는 가변 객체이므로 단순한 대입문은 이름을 추가시켜주는 것과 같습니다. 그러니까 <code>ls1 = ls2</code> 을 하게 되면, <code>ls2</code>을 가리키는 리스트의 이름이 <code>ls1</code>, <code>ls2</code> 두 개가 된다는 뜻입니다. 그러므로 <code>put, deck = deck, put</code> 구문은 실제 데이터를 바꾸는 게 아니라 그냥 이름만 떼서 서로 바꾸는 작업입니다. 커다란 창고의 출입문에 푯말만 서로 바꾼다고 상상하시면 됩니다. 함수의 정의 부분을 새로 만들었으니 호출할 부분을 수정해 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # ------------ 카드 먹기 -----------------------
    else:
        print(name, "가 낼 수 있는 카드가 없어", damage, "장 먹습니다.")
        is_attack = False
        for i in range(damage):
            draw(hand)
        damage = 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다! 원하는 대로 카드가 잘 섞입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제: <code>print</code> 개선하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금은 너무 보기가 힘듭니다. 카드를 보여주는 방식이 너무 파이썬에서 보여주는 방식 같습니다. <code>('♣', '10')</code>말고 <strong><code>♣10</code> 이렇게 간단하게 표현</strong>하면 되지 않을까요?, 그리고 계속 아래에서 새로운 메시지가 올라오니 정신이 사납습니다. <strong>중요한 건 고정</strong>시키는 방법은 없을까요? 위쪽에 현재 나와있는 카드, 플레이어의 패, 플레이어가 낼 수 있는 패를 고정시키고 아래쪽에는 메시지가 계속 업데이트 되는 식으로 만드는 겁니다! 하는 김에 <strong>메시지에 숫자를 매겨</strong>서 얼마나 게임이 진행됐는지도 체크해봅시다. 아래는 실행 결과를 먼저 구상해본 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>:: last put card ::  &#91;&#91;&#91;&#91;JokerBlack]
:: player's hand ::  &#91;♣10] &#91;♥9] &#91;◆8]
::   available   :: 
---------------------------------------------------
&#91; 23] 컴퓨터 의 차례입니다.
&#91; 24] 컴퓨터 가 낼 수 있는 카드가 없어 3 장 먹습니다.
&#91; 25] 플레이어 의 차례입니다.
&#91; 26] 몇 번째 카드를 내시겠습니까?1
&#91; 27] 컴퓨터 의 차례입니다.
&#91; 28] 컴퓨터가 ('Joker', 'black') 를 냈습니다.
&#91; 29] 플레이어 의 차례입니다.
&#91; 30] 플레이어 가 낼 수 있는 카드가 없어 8 장 먹습니다.</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 순차적으로 과제를 부여하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>우선 카드를 좀 더 간편하게 출력할 수 있도록 바꾸어봅시다. <code>card_str</code> 함수는 카드 하나를 인수로 받고, <code>[♣10]</code> 형식의 문자열을 반환합니다. 이 함수를 이용해서 출력까지 해보세요. </li><li>이제 완전하게 출력하는 <code>hand_str</code> 함수를 만들어봅시다. 이 함수는 패가 담긴 리스트인 <code>hand</code> 하나를 입력받고, 안의 내용을 모두 문자열로 반환합니다. 반드시 <code>card_str</code> 함수를 이용하는 내용을 포함시키세요. 가능하다면 <a href="https://elvanov.com/413#%EC%A1%B0%EC%9E%91--8"><code>str</code>의 <code>join</code></a> 기능을 활용하세요.<br>함수 내부에서 <code>print</code>를 쓰지 않는 이유는, 앞으로 우리가 고정위치로 출력할 것임에 따라 실제 값이 필요하기 때문입니다. 이 또한 제대로 작동하는지까지 테스트해보시기 바랍니다.</li><li>화면의 특정 위치에 어떻게 문자열을 고정시킬지 고민해봅시다. 기나긴 사색 보다는 인터넷 검색을 적극적으로 이용해봅시다. </li><li>메시지에 번호를 매겨야 합니다. 새로운 변수가 필요할 것 같습니다. 이것도 어떻게 구현할지 고민해봅니다.</li><li>3번과 4번을 구현합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>풀이</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>card_str</code> 함수부터 먼저 구현합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def card_str(card):
    return f'&#91;{card&#91;0]}{card&#91;1]}]'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇게 어렵지 않습니다. <a href="https://elvanov.com/413">f-string</a>을 이용하면 손쉽게 해결할 수 있습니다. 실제로 출력하는 것을 테스트해봅시다. 아직 엉성합니다. 뒤에서 깔끔하게 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # 차례
    print(name, "의 차례입니다.")
    if not isComputer:
        print("현재 패 >> ", end="")
        for card in hand:
            print(card_str(card) + " ", end="")
        print("")

### 후략 ###</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>플레이어 의 차례입니다.
현재 패 >> &#91;♥9]&#91;♠8]&#91;◆8]&#91;♥J]&#91;♥A]&#91;◆3]&#91;◆10]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 <code>hand_str</code> 함수를 구현합니다. <code>str</code>의 <code>join</code> 기능은 배열의 여러 요소에서 하나의 문자열로 변환시킬 때 아주 편리한 도구입니다. 이것을 활용할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def hand_str(hand):
    ls = &#91;]
    for card in hand:
        ls.append(card_str(card))
    return " ".join(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>파이썬에서 제공하는 <code>map</code> 이라는 함수를 이용하면 함수의 내용을 단 한줄로도 구현할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def hand_str(hand):
    return " ".join(map(card_str, hand))</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>함수를 호출할 수 있도록 <code>turn</code> 함수의 내부를 수정해줍시다. 만든 <code>card_str</code>과 <code>hand_str</code> 두 가지 함수를 적절히 사용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # 차례
    print(name, "의 차례입니다.")
    if not isComputer:
        print("플레이어의 패 >> ", hand_str(hand))
    print("놓여진 카드 >>", card_str(put&#91;-1]))

    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)
    if not isComputer:
        print("낼 수 있는 카드:", hand_str(available))</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는  결과입니다. 보기만 해도 눈이 편해졌습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>플레이어의 패 >> &#91;◆K] &#91;◆8] &#91;♥10] &#91;♣A] &#91;♥A] &#91;♠9]
놓여진 카드 >> &#91;◆6]
낼 수 있는 카드: &#91;◆K] &#91;◆8]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>자, 이제 고민의 시간입니다. 어떻게 화면에 고정시킬 수 있을까요? 화면이 무슨 리스트도 아니고 대괄호로 특정한 자리를 집어낼 수 있는 것도 아니고, 어떻게 아래 쪽만 변하도록 할까요? 이럴 때에는 발상의 전환을 해야 합니다. 특정 부분만 움직이게 만드는 것은 <strong>화면을 모두 삭제하고 고정된 요소는 똑같은 위치에 출력하고 바뀌는 요소는 다른 위치에 출력하라는 것</strong>과 일맥상통합니다! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이것을 어떻게 가능하게 할 수 있을까요? <strong>콘솔 화면 삭제</strong> 등으로 인터넷에 검색해봅시다. 검색 과정은 생략하도록 할게요. 방법은 <code>os.system("cls")</code> (맥은 <code>os.system("clear")</code>)를 이용하는 것입니다. <code>os</code> 모듈에서는 시스템 명령어를 사용할 수 있는 <code>system</code> 함수를 가지고 있습니다. <code>cls</code> 명령어는 콘솔에 출력되어 있는 모든 텍스트를 삭제하라는 뜻입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>매번 메시지를 화면에 띄울 때마다 전부 다 지우고 처음부터 작성하는 로직이 필요해졌습니다. 다음은 그 역할을 하는 <code>print_message</code> 함수를 구현한 모습입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>message_count = 0
messages = &#91;]

def print_message(message):
    global put, deck, player, is_attack, messages, message_count
    os.system("cls")

    output = &#91;]
    output.append(f":: last put card ::  &#91;&#91;&#91;{card_str(put&#91;-1])}")
    output.append(f":: player's hand ::  {hand_str(player)}")
    output.append(f"::   available   ::  {hand_str(getAvailable(player, put&#91;-1], is_attack))}")
    output.append("-" * 30)

    message_count += 1
    messages.append(message)
    if len(messages) == 16:
        messages.pop(0)
    for i, m in enumerate(messages) :
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')

    output.append("-" * 30)
    
    print("\n".join(output))
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 위 구현에 대해 설명하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>제일 먼저, 사용할 수 있는 변수를 <code>global</code>로 땡겨옵니다.</li><li>우선 처음에 <code>os.system("cls")</code>로 화면을 깨끗이 정리합니다. 코드의 최상단에 <code>import os</code> 집어넣는 걸 잊지 마세요!</li><li>코드에서는 <code>output</code>이라는 리스트를 만들어서 출력 내용을 저장해놓았다가 한번에 <code>print("\n".join(output))</code>으로 출력합니다. <code>output.append</code> 하지 않고 그때 그때 바로 <code>print</code>로 출력할 수도 있지만, <code>print</code>를 한 번에 많이 쓰게 되면 속도가 조금 느려지므로 한번에 처리하기 위해 위와 같이 구현했습니다. </li><li>메시지를 처리하는 부분에서는, <code>message_count</code>를 증감시켜주고, <code>messages</code>에 <code>message</code>를 넣어줍니다. <code>messages</code>의 길이가 16가 되면 하나를 삭제하여 길이가 15로 유지되도록 했습니다.</li><li>메시지 번호를 계산하기 위해 <code>message_count - len(messages) + i + 1</code> 라는 요상한 식을 이용했습니다. <code>i</code>는 인덱스를 의미합니다. 표를 통해서 보면 훨씬 이해가 잘 갈 것입니다. (<code>message_count는 250라 가정</code>)</li></ul>
<!-- /wp:list -->

<!-- wp:jetpack/markdown {"source":"|`len(messages)`|`i`|`message_count - len(messages) + i + 1`|\n|:\u002d\u002d-:|:\u002d\u002d-:|:\u002d\u002d-:|\n|15|0|236|\n|15|1|237|\n|15|2|238|\n|15|3|239|\n|15|4|240|\n|15|5|241|\n|15|6|242|\n|15|7|243|\n|15|8|244|\n|15|9|245|\n|15|10|246|\n|15|11|247|\n|15|12|248|\n|15|13|249|\n|15|14|250|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th style="text-align:center"><code>len(messages)</code></th>
<th style="text-align:center"><code>i</code></th>
<th style="text-align:center"><code>message_count - len(messages) + i + 1</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">0</td>
<td style="text-align:center">236</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">1</td>
<td style="text-align:center">237</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">2</td>
<td style="text-align:center">238</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">3</td>
<td style="text-align:center">239</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">4</td>
<td style="text-align:center">240</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">5</td>
<td style="text-align:center">241</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">6</td>
<td style="text-align:center">242</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">7</td>
<td style="text-align:center">243</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">8</td>
<td style="text-align:center">244</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">9</td>
<td style="text-align:center">245</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">10</td>
<td style="text-align:center">246</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">11</td>
<td style="text-align:center">247</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">12</td>
<td style="text-align:center">248</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">13</td>
<td style="text-align:center">249</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">14</td>
<td style="text-align:center">250</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:list -->
<ul><li><code>enumerate</code>라는 요상한 게 등장했습니다! 이건 무엇일까요? 이건 <code>for</code> 루프를 돌 때 한 껏 간편하게 돌 수 있게 해주는 도구입니다. <code>enumerate</code>를 사용하면 <code>(index, value)</code> 식으로 리스트 내 요소를 사용할 수 있게 됩니다. 코드로 설명하면 다음과 같습니다.</li></ul>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    i = 0
    for m in messages :
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')
        i += 1

## 이걸 enumerate 로 고치면?

    for i, m in enumerate(messages) :
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')

## 이렇게 됩니다!</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 <code>print_message</code> 함수를 호출할 수 있도록 <code>turn</code> 함수 내부를 수정해볼까요? 일단 기존의 <code>print</code> 함수 호출을 대체해줍니다. <code>print_message</code> 함수는 <code>print</code> 함수와 달리 인수를 하나밖에 받지 못합니다. 그러므로 호출하는 부분도 전부 하나의 문자열을 받도록 수정해줍니다. f-string 이 간단하겠지요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print_message(f'{name}의 차례입니다.')
print_message(f'{name}가 {selected}를 냈습니다."')
print_message(f'{name}가 낼 수 있는 카드가 없어 {damage}장 먹습니다.')
print_message(f"{name}가 이겼습니다!")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>작업이 완료되면 기존의 현재 놓여져 있는 카드, 가지고 있는 패, 낼 수 있는 카드를 출력하는 부분을 없애줍니다. 이 부분은 <code>print_message</code>에서 자동으로 계속 출력합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>추가 조치</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>더 깔끔하게 보이기 위해, 카드를 골랐을 때에는 플레이어나 컴퓨터나 상관없이 화면에 출력하도록 합시다. 그리고 플레이어가 카드를 먹을 때에는 플레이어가 확인하고 진행할 수 있도록 <code>input</code>을 이용해 흐름을 멈추어줍시다. 아래 두 코드 블록은 조치한 것들입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # ----------- 카드 고르기 ---------------------
    is_available = len(available) > 0
  
### 중략 ###

        print_message(f'{name}가 {selected}를 냈습니다."')</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>    # ------------ 카드 먹기 -----------------------
    else:
        print_message(f'{name}가 낼 수 있는 카드가 없어 {damage}장 먹습니다.')
        if not isComputer:
            input("계속 하려면 엔터를 누르세요")

### 중략 ###</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제: <code>get_damage</code> 개선</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>get_damage</code> 함수를 완전히 뒤엎습니다. 파이썬의 <a href="https://elvanov.com/1357">딕셔너리</a>와 딕셔너리의 get 메소드를 활용하는 방법으로 수정할 예정입니다. <strong>딕셔너리인 <code>damage_map</code> 은 키로 카드의 숫자(<code>card[1]</code>에 해당하는 내용)를 가지고 값으로 공격력을 가집니다.</strong> 숫자에 대응되는 공격력 데이터를 가진 <code>damage_map</code> 으로 손쉽게 <code>get_damage</code> 를 구현할 수 있습니다. <code>damage_map</code> 은 전역으로 정의하고, <code>get_damage</code> 내부에서는 <code>global</code>로 <code>damage_map</code>에 접근하여 나머지 내용을 작성하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>풀이</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>damage_map = {
    'colored': 15,
    'black': 10,
    'A': 3,
    '2': 2
}

def get_damage(card):
    global damage_map
    return damage_map.get(card&#91;1], 0)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>딕셔너리는 리스트와 비슷하게 <code>[key]</code> 이렇게 값에 접근할 수 있습니다. 하지만 없는 키 값에 접근하게 되면 에러가 발생하는데요, 그것을 방지하기 위해 <code>get</code>을 씁니다. <code>get</code>에서 첫번째 인수를 키로 하여 값을 찾는데요, 만약 키가 없다면 인수의 두번째를 기본 값으로 하여 가져옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>최종 코드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래는 최종 코드입니다. 다음 시간에는 이 코드 기준으로 설명할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>-expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>import random
import os

# 가능한 카드 리스트를 반환


def getAvailable(hand, last_card, is_attack):
    available = &#91;]
    if not is_attack and last_card&#91;0] == 'Joker':
        available.extend(hand)
        return available

    for card in hand:
        if card&#91;0] == 'Joker':
            available.append(card)

        elif (card&#91;0] != last_card&#91;0]
              and card&#91;1] != last_card&#91;1]):
            continue

        elif is_attack:
            if get_damage(card) >= get_damage(last_card):
                available.append(card)
        else:
            available.append(card)

    return available


is_attack = False
damage = 1


def is_attack_card(card):
    return card&#91;0] == 'Joker' or card&#91;1] in &#91;'A', '2']


damage_map = {
    'colored': 15,
    'black': 10,
    'A': 3,
    '2': 2
}


def get_damage(card):
    global damage_map
    return damage_map.get(card&#91;1], 0)


def draw(hand):
    global put, deck

    hand.append(deck.pop())

    if len(deck) == 0:
        print("카드를 다시 섞습니다!")
        last_card = put.pop()
        random.shuffle(put)
        put, deck = deck, put
        put.append(last_card)


def card_str(card):
    return f'&#91;{card&#91;0]}{card&#91;1]}]'


def hand_str(hand):
    return " ".join(map(card_str, hand))


message_count = 0
messages = &#91;]


def print_message(message):
    global put, deck, player, is_attack, messages, message_count
    os.system("cls")

    output = &#91;]
    output.append(f":: last put card ::  &#91;&#91;&#91;{card_str(put&#91;-1])}")
    output.append(f":: player's hand ::  {hand_str(player)}")
    output.append(
        f"::   available   ::  {hand_str(getAvailable(player, put&#91;-1], is_attack))}")
    output.append("-" * 30)

    message_count += 1
    messages.append(message)
    if len(messages) == 16:
        messages.pop(0)
    for i, m in enumerate(messages):
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')
    output.append("-" * 30)

    print("\n".join(output))


def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck, is_attack, damage

    # 이름 정하기
    if isComputer:
        name = "컴퓨터"
    else:
        name = "플레이어"

    # 차례
    print_message(f'{name}의 차례입니다.')

    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)

    # ----------- 카드 고르기 ---------------------
    is_available = len(available) > 0
    if is_available:
        if isComputer:
            selected = random.choice(available)
        else:
            i = int(input("몇 번째 카드를 내시겠습니까?"))
            i -= 1
            selected = available&#91;i]
        hand.remove(selected)
        put.append(selected)

        if is_attack_card(selected):
            if not is_attack:
                damage = get_damage(selected)
            else:
                damage += get_damage(selected)

            is_attack = True

        print_message(f'{name}가 {selected}를 냈습니다."')

    # ------------ 카드 먹기 -----------------------
    else:
        print_message(f'{name}가 낼 수 있는 카드가 없어 {damage}장 먹습니다.')
        if not isComputer:
            input("계속 하려면 엔터를 누르세요")
        is_attack = False
        for i in range(damage):
            draw(hand)
        damage = 1

    if len(hand) == 0:
        print_message(f"{name}가 이겼습니다!")
        return True

    else:
        return False


deck = &#91;]

# num과 shape 정의
shapes = '♥♣♠◆'
nums = &#91;]
for i in range(2, 11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = &#91;]
computer = &#91;]

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
while True:

    if turn(player, False):
        break

    if turn(computer, True):
        break
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>-/expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>마무리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음 시간에는 입력방법 개선, 낼 수 있는 카드가 있어도 먹는 행동 구현, 컴퓨터 여러 개 추가하면서 턴 시스템 개선, 7 J Q K와 같은 특수 카드를 구현해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1517</wp:post_id>
		<wp:post_date><![CDATA[2020-02-10 16:46:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-10 07:46:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-24 12:34:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-24 03:34:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%8b%a4%ec%8a%b5-%ec%9b%90%ec%b9%b4%eb%93%9c-%ea%b2%8c%ec%9e%84-%eb%a7%8c%eb%93%a4%ea%b8%b0-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>4006</wp:comment_id>
			<wp:comment_author><![CDATA[fking bootloader]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[iwbtg-123456@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.109.166.145]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-14 20:08:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-14 11:08:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[멀티로는 만들수 있나요?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1600081715.845898;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608698097.640869;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>5353</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.123.112.79]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-23 13:34:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-23 04:34:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ㅠㅠ네 그 내용은 여기 없어요.. 네트워크 관련된 거는 다른 공부가 필요하기에~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>4006</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608698098.656437;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[작은 아씨들 (2019) 영화 리뷰]]></title>
		<link>https://elvanov.com/1540</link>
		<pubDate>Tue, 10 Mar 2020 08:04:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1540</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":1541,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/03/95067e42423443af9ed5a6268aa3c57b1578630925922-683x1024.jpg" alt="" class="wp-image-1541"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

영화를 보았다. 오랜만에 본 영화이다. 여자친구랑 같이 보았다. 본래 나는 아무 생각없이 가볍게 시작하는 영화가 좋다. 동시에 어떤 깨달음이나 여운을 주는 영화가 좋다. 엔딩이 확실한 영화. 그런 점에서 기생충은 최근 1년간 본 영화 중에 가장 임팩트가 있었지 않나 싶다. 기회가 된다면 한번 더 보고 싶다. 나는 약간 유머러스한 조조 래빗이라는 영화에 마음이 더 끌렸지만 작은 아씨들의 예고편을 보고 썩 나쁘지는 않겠다 싶어서 선택했다. 사실 여자친구가 더 보고 싶어해서 보게 되었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일상적이다. 첫째&nbsp;메그는 배우가 되고 싶었으나 소소한 살림살이를 책임지는 아내가 되었고, 둘째 조는 유명한 작가를 꿈꾸고 계속 고군분투하지만, 피아노 치기를 좋아하는 병약한 셋쩨 베스의 죽음을 가까이서 겪고 울분을 토하게 된다. 넷째 에이미는 언니 조를 미워하고 소중한 것들을 빼앗기도 했지만 결국 찌질함을 극복하고 미성의 남자 로리와 잘 된다. 조는 슬픔을 극복하고 새로운 사랑을 시작한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>영화의 배경은 옛날이다. 정확히 찾아보기 전까지는 대충 20세기 초반인 줄 알았으나 19세기란다. 뭐 그거나 그거나. 역사와는 전혀 친근하지 않은 나에게는 세계사의 흐름을 잘 모른다. 대충 남북 전쟁에서 한 쪽은 노예제를 찬성하고 한 쪽은 노예제를 반대한다는 것 밖에 모른다. 그 즈음의 여성의 지위가 어느 정도로 볼품없었는지도 모른다. 애초에 영화의 고증에 대해서는 그렇게 큰 관심이 없다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 시대의 흐름을 잘 모른다면 영화를 이해하는 데 더 많은 노력이 들 수 밖에 없다. 캐릭터들이 왜 저렇게 행동하지? 왜 저런 말을 하지? 자꾸 머릿속에 드는 의문점이 집중을 흐릴테니까.&nbsp;하지만 잠깐, 영화 만드는 사람들도 멍청하지는 않다. 그 원작 소설에서 현대인들에게 호소할 수 있을 만한 것들을 뽑아내야 대중적으로도 먹힐 테니까, 그것이 무엇인가 생각해보자. 캐릭터부터 짚어보자.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 조. 조의 캐릭터는 명확하다. 조는 진취적이다. 결코 주어진 상황에 굴복하려고 하지 않는다. 이름 조차 중성적이다. (물론 한국인의 시선이지만 외국인 입장은 어떨지 모른다)&nbsp;하지만 조는 정말로 어쩔 수 없는 상황을 맞닥뜨리고 힘들어한다. 동생의 죽음은 정말 가슴이 찢어진다. 자신의 꿈을 위해 고된 길을 택했지만, 너무나도 외로워한다. (개인적으로 명언이라고 생각한다. Mom,&nbsp;I'm so lonely.. 하고 절규하는 조) 어릴 적 친구 로리를 마음속에 그리지만, 다시 좌절한다. 익숙하지 않은 사랑이라는 감정에 대해 혼란스러워 하지만, 지켜보는 이들 입장에서는 너무나 귀엽다. 와. 캐릭터 정말 사랑스럽게 잘 잡았다고 생각한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>메그. 메그도 명언 하나 날렸다. 니 꿈이 중요하다고 해서 내 꿈이 안&nbsp;중요한 건 아니야! (정확히는 "내 꿈과 네 꿈이 다르다고 해서 중요하지 않은 건 아냐") 본래 배우라는 샤방샤방한 꿈을 꾸었지만, 다른 길을 가는 것도 나쁘지 않다는 걸 몸소 보여주셨다. 그리고 엠마 왓슨은 이쁘다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>베스는 병약하다. 죽음을 목전에 두고 있다. 해탈했다. 왜 자신에게 이렇게 죽음이 빨리 찾아왔냐고 절규하지 않는다. 하고 싶은 게 많다고 떼쓰지도 않는다. 오히려 슬퍼하는 조를 달래준다. 죽음은 무겁다.&nbsp;사람은 누구나 죽는다. 사실 죽음은 무거울 이유도 없다. 죽음이, 운명이 찾아오기 전에,&nbsp;후회없이, 할 수 있는 걸 즐겁게 할 수 밖에 없지 않겠나. 나도 가까운 사람이 죽음을 목전에 두고 있고, 그 사람은 그렇게까지 죽음을 두려워하지 않는다. 뭐 아무리 그래도, 날 것의 죽음은 너무 어색한 존재여서 영영 친해질 수 없을 것 같다. 멀지도 않고 가깝지도 않고 참으로 어색하다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>에이미는 질투의 화신이고 찌질하다. 본인의 찌질한 면모를 싫어한다. 전혀 이해가지 않는 게 아니다. 나도 찌질하고, 그러한 면모를 남에게 보여주기 싫다. 에이미가 조의 소설을 태워버렸을 때 너무&nbsp;심한 행동이었다고 마음을 쓰게 되는 장면도 너무 공감되었다. 고모 할머니와 같이 따라가게 되는 사람이 바로 자신이라는 걸 알게 되었을 때 비로소 조를 이겨넘겼다 하고 더 통쾌하고 신나지 않았을까. 로리에게 처음 고백받았을 때에도 마음이 찢어지게 거절하는 장면도 가슴이 미어졌다.&nbsp;참&nbsp;사람 성격이란 것이 마음대로 되나. 성격도 그렇고 감정도 그렇고 마음대로 되는 게 없다. 평생 누군가와 비교당하며 살게 된다면 해탈한 성인군자가 아닌 이상 마음에 상처가 가득할 것이다. 에이미가 성장해가는 과정은 아름답게 그려졌다고 생각한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>베스와 메그가 분량이 적어서 좀 더 해탈한 이미지였던 건지는 모르겠으나, 조와 에이미는&nbsp;참 인간적으로 느껴지고 공감갈 만한 요소가 잘 배치되어 있었다고 생각한다. 나는 남자로서 로리의 행동이 좀 이해가 안갔다. 애초에 로리라는 인간에 대한 설명이 부족한 게 아닐까 생각한다. 등장인물들, 즉 여성들의 입장에서 로리를 묘사한 것이 아닌가 라고도 생각한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>파티라는 게 그렇게 재밌을까? 그때 당시에는 인싸 아싸 할 것 없이 전부 파티를 즐겼던 건가? 아니다. 그냥 등장인물들이 다 인싸였던 것이다. 자기네 집에서 즉흥 연극을 하는 걸 보면 장난이 아니다.&nbsp;자기 자신의 세계에 빠져있는 너드에게는 영화 전반적으로 매력적인 요소가 거의 없었다. 그나마 베스? 하지만 베스는 명예롭게 죽었다. 아싸는 명예로운 죽음을 앞둔 상태에서 해탈하여야 비로소 빛이 나는가? 웃기다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아무튼 이 영화는 여자들이 보면 좋아할 만한 영화이다.

</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1540</wp:post_id>
		<wp:post_date><![CDATA[2020-03-10 17:04:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-10 08:04:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-10 17:04:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-10 08:04:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9e%91%ec%9d%80-%ec%95%84%ec%94%a8%eb%93%a4-2019-%ec%98%81%ed%99%94-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1541]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[워드프레스 동적 블록 만들기 튜토리얼 (Gutenberg)]]></title>
		<link>https://elvanov.com/1543</link>
		<pubDate>Sun, 15 Mar 2020 10:58:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1543</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>기본 개념</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 글은 독자들이 워드프레스의 기본적인 작동 원리를 안다는 가정하게 작성되었다. 어쨌거나 직접  ftp를 통해서든, 로컬 개발 환경을 만들어 개발하든 직접 php 파일을 개선시켜나가는 사람들에게 유용한 글이다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> babel이나 node.js, webpack, wp-cli 등은 사용하지 않았다. 제대로 개발하려면 위와 같은 개발환경을 세팅하고 빌드 및 배포의 과정까지 자동화하면 더욱 더 생산성 높게 개발할 수 있겠지만 필자의 내공은 그렇게 높지가 않다. 거기까지는 무리이다. 필자는 docker를 이용해 로컬 개발 환경을 구성하여, 자식 테마를 직접 수정해나가며 개발한 뒤, wp-migration이라는 블로그 이전 플러그인을 이용해 통째로 웹호스팅 서버에 덮어씌우는 다소 고전적인 방식으로 개발중이다. 아예 ftp를 이용해서 웹호스팅 내의 파일을 직접 수정할 수도 있겠으나, ftp를 한번 거쳐야 한다는 번거로움이 있어서, 이왕 하는 김에 로컬에서 해보자 하고 아주 소심하게 docker를 이용해보았다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>워드프레스가 어떻게 돌아가는지 모른다면, 이 글을 읽기에 다소 힘들 수도 있다. 필자 또한 워드프레스에 조예가 깊지 않으므로 많이 엇나갈 수도 있지만 간단하게 설명해보겠다. 우선 워드프레스를 php 위에서 돌아가는 프로그램으로 생각하자. 만약 유저가 적절한 주소를 쳐서 요청을 보내면 php 위에서 돌아가는 워드프레스가 알아서 그 요청을 처리하고 그 결과를 html으로 조합하여 응답한다. 유저는 워드프레스가 생성한 html를 브라우저에서 보게 되는 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>php는 요청을 처리하고 적절한 결과를 만들어내는 일을 하기 때문에 서버에서 할 일이 많다. 즉 자원이 상당히 한정적이라고 이야기할 수 있다. 시대의 흐름은 웹앱의 추세로 넘어가고 온갖 상태가 동적으로 관리되는 중에 php의 처리방식으로는 버거워진다. 그래서 자바스크립트도 수레 당기기에 적극적으로 동참한다. Gutenberg (한국어로 읽자면 구텐베르크)와 같은 신식 에디팅 환경에서는 태반이 자바스크립트다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>브라우저에서만 작동하는 자바스크립트는 그렇다면 어떻게 필요한 정보를 서버에서 받아오고, 서버에게 변경된 사항을 전달할까? 본래 워드프레스에도 클라이언트로부터의 세세한 요청을 처리하기 위해 ajax 요청 응답 처리를 할 수 있도록 해놓았는데, 최근에는 더 세련되게 REST API로 아예 다 받을 수 있도록 해놓았다. 그러니까 예전에는 php에서 데이터를 처리하고 보여주는 것까지 모두 담당했다면 지금은 워드프레스 코어가 돌아가는 부분을 php에서 처리하고 데이터를 보여주는 쪽을 자바스크립트가 담당하며 그 사이의 통신을 REST API로 통일시킨다는 것이다! REST API 요청도 우리가 필요할 때만 해도 되고, 왠만한 경우는 워드프레스에서 제공해주는 자바스크립트 라이브러리가 일을 다 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\nsubgraph 프론트엔드\n  B[\u0022유저(브라우저)\u0022]\n  B \u002d\u002d\u003e C[자바스크립트]\n  C \u002d\u002d\u003e B\nend\nsubgraph 백엔드\nc[\u0022워드프레스 (php)\u0022]\nc \u002d\u002d\u003e |완성된 페이지|B\nB \u002d\u002d\u003e |요청|c\nend\n\t\t\n```\n*옛날의 워드프레스*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
subgraph 프론트엔드
  B[&quot;유저(브라우저)&quot;]
  B --&gt; C[자바스크립트]
  C --&gt; B
end
subgraph 백엔드
c[&quot;워드프레스 (php)&quot;]
c --&gt; |완성된 페이지|B
B --&gt; |요청|c
end
		
</code></pre>
<p><em>옛날의 워드프레스</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\nsubgraph 프론트엔드\n  B[\u0022유저(브라우저)\u0022]\n  B \u002d\u002d\u003e |유저 행동|C[자바스크립트]\n  C \u002d\u002d\u003e |정보 실시간 갱신|B\n  \nend\nC \u002d\u002d\u003e |REST API를 통해\u003cbr\u003e필요한 정보 요청\u003cbr\u003e및 정보 갱신|c\nc \u002d\u002d\u003e |정보 전달|C\n\nsubgraph 백엔드\nc[\u0022워드프레스 (php)\u0022]\nc \u002d\u002d\u003e|기본 HTML| B\nB \u002d\u002d\u003e|페이지 요청| c\nend\n\t\t\n```\n*요즘의 워드프레스*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
subgraph 프론트엔드
  B[&quot;유저(브라우저)&quot;]
  B --&gt; |유저 행동|C[자바스크립트]
  C --&gt; |정보 실시간 갱신|B
  
end
C --&gt; |REST API를 통해&lt;br&gt;필요한 정보 요청&lt;br&gt;및 정보 갱신|c
c --&gt; |정보 전달|C

subgraph 백엔드
c[&quot;워드프레스 (php)&quot;]
c --&gt;|기본 HTML| B
B --&gt;|페이지 요청| c
end
		
</code></pre>
<p><em>요즘의 워드프레스</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>계속되는 추세가 php 부분을 덜어낸다고 들었다. 왜 덜어내는지, 어떤 걸로 다시 채워넣을지는 잘 모르겠지만, 어쨌건 워드프레스가 기능을 분리하고 새로운 걸로 만들고 하니 계속해서 변할 것 같다. 이 글도 곧 고전이 될 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>파일들의 역할</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>필자는 <strong>카테고리 분류에 따라 최근 글 하나를 특정 템플릿으로 출력하는 블록</strong>을 만들고자 한다. 아래 파일들은 테마 폴더에 위치한다. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>functions.php</code> : 여기서는 새로운 블록에 따른 js 파일 등록을 하고, 블록에서 저장된 attribute 등을 불러와 렌더링하는 render 함수를 구현한다.</li><li><code>editor/recent-posts-block.js</code> : 구텐베르크에서 잘 작동하는 블록을 만들 것이다. <code>functions.php</code>에서 불러올 예정이다. <code>withSelect</code>를 통해 카테고리 목록을 백엔드에서 가져온 뒤 콤보박스 창으로 선택할 수 있게 할 것이다. 선택하면 해당 카테고리의 id 값을 attribute로 저장한다.</li><li><code>recent-widget-template.php</code> : 출력되는 부분을 <code>functions.php</code>와 독립시키기 위해 별도의 파일로 만들었다. 이 부분을 <code>functions.php</code> 파일 내에 두어도 무방하나, 코드가 지저분해질 수 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>보통 블록을 새롭게 만들고자 할 때, 사용자 정의 플러그인을 만들어서 하는 경향이 있다. 왜냐하면 그 기능을 떼고 붙이기가 더 편리하기 때문이다. 하지만 플러그인은 필자 스타일이 아니다. 필자는 테마 메커니즘을 적극적으로 활용할 것이다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>전체 코드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>전체 코드 먼저 보자.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>// mytheme/functions.php
function ezkorry_recent_posts_render($attributes, $content)
{
  // 출력 버퍼 켜기. 지금부터 출력되는 것들을 따로 저장한다.
  ob_start(); 

  // show vars for debug
  // print_r($content); 
  // print_r($attributes);

  // 실행할 쿼리.
  $args = array(
    'cat' => $attributes&#91;'category_id'],
    'posts_per_page' => 1,
    'offset' => $attributes&#91;'offset']
    
  );

  // 쿼리 생성
  $query = new WP_Query($args);

  // 생성한 쿼리를 기반으로 루프 돌기 
  if ($query->have_posts()) :
    while ($query->have_posts()) :
      $query->the_post();
      set_query_var('widget_type', $attributes&#91;'widget_type']);
      get_template_part('template-recent-posts');
    endwhile;
  endif;

  // 쿼리 초기화
  wp_reset_postdata();

  // 출력된 내용 저장
  $output = ob_get_contents();

  // 출력 버퍼 끄기
  ob_end_clean(); // Turn off ouput buffer

  // 결과 리턴
  return $output;
}

function ezkorry_recent_posts_register()
{

  wp_register_script(
    'ezkorry_recent_posts',
    get_stylesheet_directory_uri() . '/editor/recent-posts-block.js',
    array('wp-editor')
  );

  register_block_type('ezkorry/recent-posts', array(
    'editor_script' => 'ezkorry_recent_posts',
    'render_callback' => 'ezkorry_recent_posts_render'

  ));
}
add_action('init', 'ezkorry_recent_posts_register');</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// mytheme/editor/recent-posts-block.js

(function(wp) {
  var el = wp.element.createElement,
    registerBlockType = wp.blocks.registerBlockType,
    withSelect = wp.data.withSelect;
  const { InspectorControls, RichText } = wp.blockEditor;
  const { SelectControl, PanelBody, TextControl } = wp.components;

  registerBlockType("ezkorry/recent-posts", {
    title: "ezkorry recent posts",
    icon: "megaphone",
    category: "widgets",
    attributes: {
      category_id: {
        type: "string",
        selector: "power-overwhelming",
        default: 1
      },
      content: {
        type: "string",
        selector: "js-guten-content"
      },
      offset: {
        type: "string",
        default: 0,
      },

      widget_type: {
        type: "string"
      }
    },
    edit: withSelect(function(select) {
      // select에서 어떤 데이터를 긁어올 수 있는가에 대한 테스트용
      return {
        posts: select("core").getEntityRecords("postType", "post"),
        blocks: select("core").getEntityRecords("postType", "wp_block"),
        pages: select("core").getEntityRecords("postType", "page"),
        attachments: select("core").getEntityRecords("postType", "attachment"),
        categories: select("core").getEntityRecords("taxonomy", "category"),
        tags: select("core").getEntityRecords("taxonomy", "post_tag"),
        medias: select("core").getEntityRecords("root", "media"),
        post2: select("core").getEntityRecords("root", "postType")
      };
    })(function(props) {
      var { category_id, offset, widget_type } = props.attributes;
      const { attributes, className, setAttributes } = props;

      if (!props.categories || !props.attributes.category_id) {
        return "로딩중";
      }
      console.log(props);

      var options = props.categories.map(function(item) {
        return { label: item.name, value: item.id };
      });

      const widget_options = &#91;
        { label: "좌 썸네일", value: "left-thumbnail" },
        { label: "상단 썸네일", value: "top-thumbnail" }
      ];

      return &#91;
        el(
          InspectorControls,
          null,
          el(PanelBody, { title: "설정" }, &#91;
            el(SelectControl, {
              label: "위젯 타입",
              value: widget_type,
              options: widget_options,
              onChange: function(value) {
                setAttributes({ widget_type: value });
              }
            }),

            el(SelectControl, {
              label: "카테고리",
              value: category_id,
              options,
              onChange: function(value) {
                setAttributes({ category_id: value });
              }
            }),

            el(TextControl, {
              label: "오프셋",
              value: offset,
              type: 'number',
              
              help: "적힌 숫자만큼 포스팅이 생략됩니다.",
              onChange: function(value) {
                setAttributes({ offset: value });
              }
            })
          ])
        ),
        el(RichText, {
          className: "js-guten-content",
          value: attributes.content,
          tagName: "h3",
          placeholder: "호호",
          onChange(value) {
            setAttributes({ content: value });
          }
        })
      ];
    })
  });
})(window.wp);
</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>&lt;?php
// mytheme/recent-widget-template.php

$widget_type = get_query_var('widget_type');
$col = 12;
if ($widget_type == 'left-thumbnail') {
  $col = 6;
}
?>
&lt;div class="recent-posts-category &lt;?php echo get_query_var('widget_type'); ?>">
  &lt;!--&lt;div class="container">-->
  &lt;div class="row">
    &lt;div class="col-sm-&lt;?php echo $col; ?> align-self-center">
      &lt;div class="thumbnail img-container">
        &lt;a href="&lt;?php the_permalink(); ?>">
          &lt;?php the_post_thumbnail(); ?>
        &lt;/a>
      &lt;/div>
    &lt;/div>
    &lt;div class="col-sm-&lt;?php echo $col; ?> align-self-center">
      &lt;p class="category">&lt;span>&lt;?php the_category(', '); ?>&lt;/span>&lt;/p>
      &lt;h2 class="entry-title">&lt;a href="&lt;?php the_permalink(); ?>"> &lt;?php the_title(); ?>&lt;/a>&lt;/h2>

      &lt;div class="excerpt">
        &lt;?php the_excerpt(); ?>
      &lt;/div>
      &lt;?php if ($widget_type == 'left-thumbnail'): ?>
      &lt;div class="read-more">&lt;a href="&lt;?php the_permalink(); ?>">READ MORE&lt;/a>&lt;/div>
      &lt;?php endif; ?>
      &lt;!--&lt;div class="date">&lt;span>&lt;?php the_time(get_option('date_format')) ?>&lt;/span>&lt;/div>-->
    &lt;/div>
  &lt;/div>
  &lt;!--&lt;/div>-->

&lt;/div></code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>구현</h2>
<!-- /wp:heading -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\n  a[\u0022에디터가 로딩된다\u0022] \u002d\u002d\u003e b[\u0022init 후크가 실행되며 \u003cbr\u003erecent-posts-block.js\u003cbr\u003e파일도 로딩된다.\u0022]\n  b \u002d\u002d\u003e c[js 파일의 registerBlockType이\u003cbr\u003e실행되고 포스트 내용에 있는 블록 데이터가\u003cbr\u003e적절하게 파싱된다. ]\nc -.- ca[파싱 방법은 js 파일의\u003cbr\u003eregisterBlockType의 attributes\u003cbr\u003e항목 설정된 것을 기반으로 결정한다.]\n  c \u002d\u002d\u003e d[js의 edit함수에서 주어진\u003cbr\u003e데이터를 바탕으로 에디터에서\u003cbr\u003e어떻게 보여질지를 결정한다.]\nd\u002d\u002d\u003ee[변경된 내용이 저장된다.\u003cbr\u003esave 함수가 없으므로\u003cbr\u003e기본적인 형태로 포스트 내용에\u003cbr\u003eattribute를 모두 포함시켜 저장한다. ]\n\nj[\u0022실제 페이지 요청\u0022]\u002d\u002d\u003ek[\u0022init 후크가 실행되며\u003cbr\u003ephp의 register_block_type도 실행된다.\u0022]\nk\u002d\u002d\u003el[포스트 내용에 있는\u003cbr\u003e블록 데이터를 적절하게 파싱하여\u003cbr\u003ephp의 render 함수로 넘긴다.]\nl\u002d\u002d\u003em[render 함수의 return 값과,\u003cbr\u003e기타 등등을 조합하여\u003cbr\u003ehtml을 생성하고\u003cbr\u003e유저에게 내보낸다.]\n```\n*대락적인 흐름도*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
  a[&quot;에디터가 로딩된다&quot;] --&gt; b[&quot;init 후크가 실행되며 &lt;br&gt;recent-posts-block.js&lt;br&gt;파일도 로딩된다.&quot;]
  b --&gt; c[js 파일의 registerBlockType이&lt;br&gt;실행되고 포스트 내용에 있는 블록 데이터가&lt;br&gt;적절하게 파싱된다. ]
c -.- ca[파싱 방법은 js 파일의&lt;br&gt;registerBlockType의 attributes&lt;br&gt;항목 설정된 것을 기반으로 결정한다.]
  c --&gt; d[js의 edit함수에서 주어진&lt;br&gt;데이터를 바탕으로 에디터에서&lt;br&gt;어떻게 보여질지를 결정한다.]
d--&gt;e[변경된 내용이 저장된다.&lt;br&gt;save 함수가 없으므로&lt;br&gt;기본적인 형태로 포스트 내용에&lt;br&gt;attribute를 모두 포함시켜 저장한다. ]

j[&quot;실제 페이지 요청&quot;]--&gt;k[&quot;init 후크가 실행되며&lt;br&gt;php의 register_block_type도 실행된다.&quot;]
k--&gt;l[포스트 내용에 있는&lt;br&gt;블록 데이터를 적절하게 파싱하여&lt;br&gt;php의 render 함수로 넘긴다.]
l--&gt;m[render 함수의 return 값과,&lt;br&gt;기타 등등을 조합하여&lt;br&gt;html을 생성하고&lt;br&gt;유저에게 내보낸다.]
</code></pre>
<p><em>대락적인 흐름도</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:heading {"level":3} -->
<h3> <code>recent-posts-block.js</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 js 파일부터 살펴보자. js 파일은 워드프레스의 신식 에디터인 구텐베르크로 작업할 때에만 불러온다. 실제 사이트의 페이지를 요청할 때 이 js파일은 로딩되지도 않고 실제로 쓰임새도 없다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 파일에서 가장 중요한 점은 핵심 기능인 <code>registerBlockType</code> 함수를 제대로 호출하는 데 있다. 이 함수를 호출할 때의 인자는 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>첫 번째 인자는 블록의 이름이다. 커다란 대분류(네임스페이스라고 생각하면 편하다)를 왼쪽에, 세부 블록 이름을 오른쪽에 하여 이름을 정하면 된다. 필자는 <code>ezkorry/recent-posts</code>라고 정했다.</li><li>두 번째 인자는 블록에 대한 자세한 사항을 적는 인자이다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>블록의 자세한 사항은 다음과 같은 방법으로 세부사항을 결정하면 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>title</code> : 에디터에서 편집할 때 겉으로 드러나는 이름을 지정한다.</li><li><code>icon</code> : 보이는 아이콘을 지정한다. 아이콘의 이름만 지정하면 알아서 아이콘이 보여진다. 아이콘 목록은 <a href="https://developer.wordpress.org/resource/dashicons">대쉬콘</a> 참조 (예를 들어  <code>dashicons-randomize</code> 아이콘을 사용하고 싶다면 <code>icon: 'randomize'</code>로 지정하면 된다 .)</li><li><code>category</code> : 블록이 데이터의 어느 분류에 위치해있을지를 정한다. 그 목록은 <a href="https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#category">공식 문서</a> 참조.</li><li><code>attributes</code> : 블록과 함께 저장될 속성을 먼저 지정해준다. 속성이라고 해도 의미가 잘 통하기는 하지만 아직 정식으로 국내 용어가 정립된 것이 아니므로 <code>attribute</code> 라고 계속 이야기할 것이다. <code>attribute</code>가 어떤 식으로 저장될지, 혹은 데이터에서 어떻게 불러올지도 여기서 정하는데, 관련된 키는 <code>source</code>, <code>selector</code> 등이다. 아래에서 다시 설명하도록 한다.</li><li><code>edit</code> : 블록이 에디터에서 수정될 때 어떻게 보여질지를 결정한다. 여기에서는 실제 글을 쓰는 칸, InspectorControls(사이드바), 툴바 등에서 보일 요소를 모두 설정할 수 있다. edit은 인수를 하나 받는 함수이다. 대개 이 인수의 이름을 <code>props</code>라고 하며, 블록과 관련된 정보가 담겨있다. <code>edit</code>은 <code>wp.element.createElement</code> 함수의 호출 결과를 반환하여야 한다. 이 특별한 함수는 위의 예제에서 <code>el</code>이라는 약칭으로 하여 계속 호출하고 있다. 이 함수에 대한 자세한 설명은 아래에서 계속한다. 어쨌거나 저쨌거나 <code>edit</code>은 다음과 같은 형태를 보일 것이다.</li></ul>
<!-- /wp:list -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>registerBlockType('...', {
    ...
    edit: function(props) {
        ...
        return el(
            ....
        );
    },
    ...
});</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>save</code> : 블록이 실제로 어떻게 보여질지를 결정한다. edit 함수와 마찬가지로 <code>props</code>를 인수로 받고 값 하나를 리턴한다. 이 리턴값은 편집이 끝나는 시점에 데이터베이스의 포스트 내용에 특정한 형태로 저장된다. (이 글 하단 참조)  </li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><code>attributes</code> 설정</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음과 같은 기본 구조이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>
attributes: {
  속성1: {
    type: string
    source: ...,
    selector: ...,
    default: ...,
    ...
  },
  속성2: {
    ...
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>속성 이름은 그냥 키 값으로 설정하면 된다. 속성을 저장하는 방식과 읽는 방식을 결정하는 <code>source</code>, <code>selector</code> 등은 이 글에서 다루지 않는다. <strong>그냥 <code>type</code>을 <code>string</code>으로 설정하고 <code>default</code>로 기본 값을 설정하자.</strong> attribute를 올바르게 설정했다면 <code>edit</code> 함수에서 <code>props.attributes.속성1</code> 과 같이 접근할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><code>withSelect</code></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사실 잘 모른다. 여기서는 워드프레스에게 정보를 요청하고, 그 정보를 <code>props</code>에 저장시키는 역할로 <code>withSelect</code>를 사용했다. <code>withSelect</code>는 <code>edit</code>의 래퍼 함수로 볼 수 있고, <code>edit</code>에 해당하는 함수는 <code>withSelect</code>의 두 번째 인수로 전달한다. 첫 번째 인수로 들어가는 함수는 <code>select</code>라는 인자를 직접 호출해서 여러가지 정보를 불러오겠다 하는 것이다. 뭔 말인지 나도 모르겠다. 아래 예제를 참조하자. 두 번째 함수에서 <code>props</code>를 출력해보면 대략적으로 작동하는 원리를 알 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>    edit: withSelect(function(select) {
      // select에서 어떤 데이터를 긁어올 수 있는가에 대한 테스트용
      return {
        posts: select("core").getEntityRecords("postType", "post"),
        blocks: select("core").getEntityRecords("postType", "wp_block"),
        pages: select("core").getEntityRecords("postType", "page"),
        attachments: select("core").getEntityRecords("postType", "attachment"),
        categories: select("core").getEntityRecords("taxonomy", "category"),
        tags: select("core").getEntityRecords("taxonomy", "post_tag"),
        medias: select("core").getEntityRecords("root", "media"),
        post2: select("core").getEntityRecords("root", "postType")
      };
    })(function(props) {
      console.log(props)
    })</code></pre>
<!-- /wp:code -->

<!-- wp:image {"align":"center","id":1567,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/03/image.png" alt="" class="wp-image-1567"/><figcaption>콘솔에 나타난 결과</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><code>select</code>나 <code>getEntityRecords</code>나 이런 함수 안에 들어갈 인자가 무엇이냐에 대한 설명이 참으로 찾기 힘들다. 구글링과 여러가지 시도를 통해 대략적으로 어떤 정보를 가져올 수 있는지 테스트해보았다. 아래는 <code>select("core").getEntityRecords(...)</code>에 들어갈 인수에 따른 데이터이다. 이 방법들은 모든 것들을 다 긁어오므로 일부만 가져오려면 세 번째 인수에 쿼리를 추가해야 한다. 그 방법들은 연구가 다소 필요하므로 이 글에서는 적지 않겠다. (레퍼런스 참조)  </p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>첫 번째 인수</td><td>두 번째 인수</td><td>결과</td></tr><tr><td><code>postType</code></td><td><code>post</code></td><td>글 목록</td></tr><tr><td> <code>postType</code> </td><td><code>wp_block</code></td><td>아무 것도 안나옴</td></tr><tr><td> <code>postType</code> </td><td><code>page</code></td><td>페이지 목록</td></tr><tr><td> <code>postType</code> </td><td><code>attachment</code></td><td>미디어 목록</td></tr><tr><td><code>taxonomy</code></td><td><code>category</code></td><td>카테고리 목록</td></tr><tr><td><code>taxonomy</code></td><td><code>post_tag</code></td><td>태그 목록</td></tr><tr><td><code>root</code></td><td><code>media</code></td><td>미디어 목록 <br>('postType', 'attachment'와 동일)</td></tr><tr><td><code>root</code></td><td><code>postType</code></td><td>글 타입 목록</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><code>edit</code>에서 값이 제대로 로딩됐는지 확인 </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>새로운 <code>props</code>가 갱신될 때마다 <code>edit</code> 함수가 실행되므로, 만약 원하는 정보가 없다면 그냥 의미없는 값을 <code>return</code> 해버리는 것으로 간단하게 처리를 할 수 있다. 아래는 그 코드이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>if (!props.categories || !props.attributes.category_id) {
  return "로딩중";
}</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>요소를 만들자 (createElement)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>함수로 어떤 요소를 계속해서 만들어내는 형태는, 필자도 자세히는 모르지만 <strong><a href="https://ko.reactjs.org/">react</a></strong>에서의 쓰임새와 비슷하다고 한다.  <code>wp.element.createElement</code> 함수(줄여서 <code>el</code>)가 받는 세 가지 인수에 대한 간략한 설명은 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>첫 번째 인수 : 해당 element가 어떤 종류인지 그 타입을 정한다. 미리 만들어진 컴포넌트를 이용할 수도 있고 사용자 정의 템플릿을 이용할 수도 있다.</li><li>두 번째 인수 : 해당 element를 생성할 때 필요한 정보를 넣는다.</li><li>세 번째 인수 : 해당 element의 자식(children)을 넣는다. 자식이 하나만 있다면 <code>el</code>을 다시 호출할 수도 있고 자식이 여러 개라면 <code>el</code> 호출을 담은 배열을 넣을 수도 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>위 예제에서 <code>el</code> 부분만 뽑아서 본다면 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>  function(props) {
    ...
    return &#91;
        el(
          InspectorControls,
          null,
          el(PanelBody, ..., &#91;
            el(SelectControl, {
              ...
            }),

            el(SelectControl, {
              ...
            }),

            el(TextControl, {
              ...
            })
          ])
        ),
        el(RichText, {
          ...
        })
      ];
    }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 예제에 쓰인 컴포넌트(element 타입)는 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>InspectorControls</code> : 사이드바에 해당한다.</li><li><code>PanelBody</code> : 사이드바 안의 그룹에 해당한다.</li><li><code>SelectControl</code> : 목록 중 하나를 선택할 수 있는 ui이다.</li><li><code>TextControl</code> : 텍스트를 적을 수 있는 ui이다.</li><li><code>RichText</code> : 에디터의 본 화면에서 텍스트를 적을 수 있도록 한다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>보면 <code>InspectorControls</code> 와 <code>RichText</code>가 동일한 배열에 있는 것을 확인할 수 있는데, 저렇게 해놓기만 해도 <code>InspectorControls</code>는 사이드바 자리에, 그리고 <code>RichText</code>는 에디터의 본래 편집 자리에 각각 잘 위치하게 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>유의하여야 할 점은 요소마다 <code>value</code>, <code>onChange</code> 등을 적절하게 잘 설정하여야 현재의 값을 잘 표시하고 변경될 값을 무사히 적용시킬 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><code>save</code>를 안쓰는 이유</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>save</code>는 이 글이 어떻게 외부로 보여질지 결정한다고 했는데, 이 글에서는 <code>save</code>를 만들지 않는다. 왜냐하면 서버사이드에서 렌더링하기 때문이다. 우리가 자바스크립트 단에서 하는 역할은 값을 저장할 <code>attribute</code> 들을 설정하고 그 <code>attribute</code> 들을 수정할 수 있는 에디터 ui를 만드는 것이다. 이 값들을 조합하여 실제 페이지로 만드는 건 php로 역할을 넘긴다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>functions.php</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>워드프레스에서는 사용자가 작성한 코드를 워드프레스의 실행 흐름 속으로 녹이기 위하여 <code>filter</code>, <code>action</code>등의 개념을 만들고, 그러한 <code>filter</code>와 <code>action</code>이 실행되는 후크를 사전에 세팅해두었다. 이 예제에서는 <code>init</code>이라는 후크에다가 우리의 블록 등록과 관련된 코드를 연결시킬 것이다. 기본 구조는 아래와 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>function ezkorry_recent_posts_register()
{
  ...
}
add_action('init', 'ezkorry_recent_posts_register');</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>ezkorry_recent_posts_register</code> 함수에서는 우리가 작성한 js 파일과, <code>render_callback</code> 함수를 지정한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>wp_register_script(
    'ezkorry_recent_posts',
    get_stylesheet_directory_uri() . '/editor/recent-posts-block.js',
    array('wp-editor')
);

register_block_type('ezkorry/recent-posts', array(
  'editor_script' => 'ezkorry_recent_posts',
  'render_callback' => 'ezkorry_recent_posts_render'
));</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>render_callback</code>인 <code>ezkorry_recent_posts_render</code> 함수도 만들어준다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>function ezkorry_recent_posts_render($attributes, $content)
{
  // 출력 버퍼 켜기. 지금부터 출력되는 것들을 따로 저장한다.
  ob_start(); 

  // 실행할 쿼리.
  $args = array(
    'cat' => $attributes&#91;'category_id'],
    'posts_per_page' => 1,
    'offset' => $attributes&#91;'offset']
    
  );

  // 쿼리 생성
  $query = new WP_Query($args);

  // 생성한 쿼리를 기반으로 루프 돌기 
  if ($query->have_posts()) :
    while ($query->have_posts()) :
      $query->the_post();
      set_query_var('widget_type', $attributes&#91;'widget_type']);
      get_template_part('template-recent-posts');
    endwhile;
  endif;

  // 쿼리 초기화
  wp_reset_postdata();

  // 출력된 내용 저장
  $output = ob_get_contents();

  // 출력 버퍼 끄기
  ob_end_clean(); // Turn off ouput buffer

  // 결과 리턴
  return $output;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>여기서는 크게 두 가지 흐름이 있다. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>출력 버퍼 설정 : <code>ob_start()</code>를 호출하고 <code>ob_end_clean()</code>을 호출하기 전 까지 출력 버퍼를 활성화시켜서 출력된 내용을 모두 하나의 문자열에 저장하겠다는 흐름이다. </li><li>워드프레스 쿼리 : 저장된 글을 불러오기 하여 새로운 쿼리를 만드는 흐름이다. <code>new WP_Query()</code>를 이용해 쿼리를 만들고 <code>$query-&gt;have_posts()</code> 를 이용해 글이 있는지 체크를 한다. <code>$query-&gt;the_post()</code>로 <strong>현재</strong> 글을 설정하여 따로 만들 템플릿 파일 내에서 <code>the_title()</code> 등의 함수를 쓸 수 있도록 한다. 모든 작업을 마치면 <code>wp_reset_postdata()</code>를 호출하여 본래의 흐름으로 돌아간다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>템플릿 파일을 로딩하기 위해 <code>get_template_part('template-recent-posts')</code> 라고 작성했다. 이렇게 하면 테마 폴더에 있는 <code>template-recent-posts.php</code> 파일이 불러와진다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>템플릿 파일로 데이터를 전달하기 위해 <code>set_query_var</code> 함수를 이용했다. 템플릿 파일 내부에서는 <code>get_query_var</code> 함수로 값에 접근할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>template-recent-posts.php</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 위 코드를 참조해주세용. 어려운 내용은 아님.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>유의사항</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>골때리는 점은, php의 <code>registerBlockType</code>과 js의 <code>register_block_type</code>의 짝짜꿍이 아주 잘 들어맞아야 문제없이 작동한다는 것이다. 우여곡절이 좀 많았다. 아래는 유의해야 할 항목들이다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> <strong>js의 <code>registerBlockType</code>과 php의 <code>register_block_type</code>에서 쓰인 첫번 째 인수 (블록의 이름)이 완전히 동일해야 한다.</strong>  </li><li> <strong>js에서, <code>registerBlockType</code> 할 때 <code>save</code> 함수가 정의가 되어있지 않거나 <code>null</code>을 <code>return</code>해야 한다.</strong> <code>save</code> 함수는 저장 과정에서 작동하므로 나중에 php가 저장된 데이터를 읽을 때 제대로 작동하지 않을 여지가 크다.  </li><li><strong>js에서, 해당 <code>attribute</code>에서 <code>source</code>가 정의되지 않고 <code>selector</code>가 정의되어 있어야 한다.</strong>  <code>source</code>가 정의되어 있지 않아야 php에서 잘 읽히더라. <code>selector</code>의 역할은 사실 잘 모르겠다. 본래 css 실렉터처럼 실제 저장된 데이터에서 데이터를 뽑아낼 때 쓰는 건데, (예를 들어 <code>source</code>를 <code>attribute</code>로 하고 <code>selector</code>를 <code>href</code>로 하면 어떤 엘리먼트의 <code>href </code>속성 데이터를 불러온다.) 실제 데이터 저장된 것을 보나 php의 render 함수에서 보나 selector는 찾아볼 수 없었다. </li><li><strong>js의 해당 attribute에서 <code>tpye</code>은 <code>string</code>이어야 한다. </strong> <a href="https://developer.wordpress.org/block-editor/developers/block-api/block-attributes/">공식 문서</a>를 살펴보면  지원되는 <code>type</code>이  <code>null, boolean, object, array, number, string, integer</code>로 굉장히 다양하다. category id가 숫자라서 <code>integer</code>를 썼는데 제대로 작동하지 않아 도대체 원인이 무엇인가 별 쓸 데 없는 짓을 다 해보고 이 <code>type</code>을 <code>string</code>으로 고쳐보니 문제 없이 작동되었다. 원인은 잘 모르겠다. 서버사이드와 짝짜꿍 하려면 마음 편하게 <code>string</code>을 쓰는 걸 추천한다. </li><li><strong>php에서, <code>register_block_type</code> 할 때 <code>attributes</code>가 정의되어 있지 않아야 한다.</strong> 설정하기만 해도 js에서 설정한 <code>attributes</code>와 충돌하는 모양이다. 마음 편하게 아무 정의도 하지 말자. </li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>참고사항</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>블록의 <code>attribute</code> 들은 어디에 어떻게 저장되나?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 포스트 내용에 특별한 형식으로 저장된다. 데이터베이스로 따지면 wp_posts에 post_content에 글 내용과 함께 저장된다. 저장되는 방식은 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- wp:ezkorry/recent-posts {"category_id":"2","content":"특별1","widget_type":"left-thumbnail"} /-->

&lt;!-- wp:columns -->
&lt;div class="wp-block-columns">&lt;!-- wp:column -->
&lt;div class="wp-block-column">&lt;!-- wp:ezkorry/recent-posts {"category_id":"3","content":"미드1","widget_type":"top-thumbnail"} /-->&lt;/div>
&lt;!-- /wp:column -->

&lt;!-- wp:column -->
&lt;div class="wp-block-column">&lt;!-- wp:ezkorry/recent-posts {"category_id":"4","content":"미드2","widget_type":"top-thumbnail"} /-->&lt;/div>
&lt;!-- /wp:column -->

&lt;!-- wp:column -->
&lt;div class="wp-block-column">&lt;!-- wp:ezkorry/recent-posts {"category_id":"5","content":"미드3","widget_type":"top-thumbnail"} /-->&lt;/div>
&lt;!-- /wp:column -->&lt;/div>
&lt;!-- /wp:columns -->

&lt;!-- wp:columns -->
&lt;div class="wp-block-columns">&lt;!-- wp:column {"verticalAlignment":"top"} -->
&lt;div class="wp-block-column is-vertically-aligned-top">&lt;!-- wp:paragraph -->
&lt;p>파워오버웰밍~~~호우 맨 파워스튜&lt;/p>
&lt;!-- /wp:paragraph -->

&lt;!-- wp:latest-posts {"displayPostContent":true} /-->&lt;/div>
&lt;!-- /wp:column -->

&lt;!-- wp:column -->
&lt;div class="wp-block-column">&lt;/div>
&lt;!-- /wp:column -->&lt;/div>
&lt;!-- /wp:columns -->

&lt;!-- wp:paragraph -->
&lt;p>&lt;/p>
&lt;!-- /wp:paragraph --></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이런 데이터를 워드프레스에서 읽어서 <code>$attributes</code> 등을 설정하고, render 함수에 적절하게 인수로서 전달해주는 것이다. 어쨌거나 어떻게 저장되는지 신경쓸 필요는 없다. 워드프레스에서 알아서 이 정보들을 읽으니까.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><code>withSelect</code>를 적절히 이용해서 <code>save</code> 함수를 구현하면 굳이 서버사이드에서 렌더링할 필요가 없지 않나?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그렇다고 볼 수 있다. 하지만 필자는 <code>withSelect</code>의 정확한 쓰임새도 모르고, 특히 워드프레스에서 제공해주는 REST API를 통해 적절한 쿼리를 수행하는 예제는 (열심히 찾아보지는 않았지만) 잘 찾아볼 수 없었다. 아마 이런 흐름이 최근의 흐름이기도 하여 관련된 정보가 많이 없는 탓일 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>save</code> 함수를 적절히 구현할 수 있다면 정말 좋다. 왜냐하면 굳이 php에서 렌더링 함수를 짜줄 필요가 없기 때문이다. 다양한 프론트엔드 자바스크립트 라이브러리를 활용할 여지가 커진다는 것도 장점이겠다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>기타</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>js 파일을 등록하고 <code>register_block_type</code> 함수를 실행하는 <code>ezkorry_recent_posts_register</code> 함수에서는 사이트 관리자가 Gutenberg를 사용 중인지 아닌지 별도로 체크하지 않고 있다. 즉 구형 에디터를 쓰는 사람이라면 에러가 날 수도 있다는 뜻.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>레퍼런스</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Create Your Own Dynamic Gutenberg Block for Wordpress, Part 1 (<a href="https://davidyeiser.com/tutorials/wordpress-create-dynamic-gutenberg-block">https://davidyeiser.com/tutorials/wordpress-create-dynamic-gutenberg-block</a>)</li><li>위 게시물의 소스코드(<a href="https://github.com/davidyeiser/detailer/tree/tutorial/part1/blocks/book-details">https://github.com/davidyeiser/detailer/tree/tutorial/part1/blocks/book-details</a>)</li><li>Using withSelect for WordPress Block Components (<a href="https://wpdev.life/using-withselect-for-wordpress-block-components/">https://wpdev.life/using-withselect-for-wordpress-block-components/</a>)</li><li>블록의 카테고리 목록(공식 문서)(<a href="https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#category">https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#category</a>)</li><li>블록 attribute(공식 문서)( <a href="https://developer.wordpress.org/block-editor/developers/block-api/block-attributes/">https://developer.wordpress.org/block-editor/developers/block-api/block-attributes/</a> )</li><li>대쉬콘 (공식 문서) ( <a href="https://developer.wordpress.org/resource/dashicons">https://developer.wordpress.org/resource/dashicons</a> )</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1543</wp:post_id>
		<wp:post_date><![CDATA[2020-03-15 19:58:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-15 10:58:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-16 06:23:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-15 21:23:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%84%eb%a0%88%ec%8a%a4-%eb%8f%99%ec%a0%81-%eb%b8%94%eb%a1%9d-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ed%8a%9c%ed%86%a0%eb%a6%ac%ec%96%bc-gutenberg]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1078</wp:comment_id>
			<wp:comment_author><![CDATA[워드프레스 에디터에서 핵심 javascript 가 불러와지지 않는 문제 수정 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/1608</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-14 13:09:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-14 04:09:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 코드는 동적 블록 만들기 튜토리얼의 일부이다. 본래 작동하다가, 어느 날 갑자기 작동하지 않아 에디터 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1586837978.469084;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1586837388.280589;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[미라클 이퀘이션 리뷰]]></title>
		<link>https://elvanov.com/1580</link>
		<pubDate>Fri, 20 Mar 2020 09:13:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1580</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
<div class="ttbReview"><table><tbody><tr><td><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=226781607&amp;ttbkey=ttbeszqsc1121648002&amp;COPYPaper=1" target="_blank" rel="noopener noreferrer"><img src="https://image.aladin.co.kr/product/22678/16/cover/k582636034_1.jpg" alt="" border="0" class="jetpack-lazy-load-exclude"></a></td><td align="left" style="vertical-align:top;"><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=226781607&amp;ttbkey=ttbeszqsc1121648002&amp;COPYPaper=1" target="_blank" class="aladdin_title" rel="noopener noreferrer">미라클 이퀘이션</a> - <img class="jetpack-lazy-load-exclude" src="//image.aladin.co.kr/img/common/star_s6.gif" border="0" alt="6점"><br>할 엘로드 지음, 김잔디 옮김/한빛비즈</td></tr></tbody></table></div>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>미라클 이퀘이션은 미라클 모닝을 쓴  할 엘로드라는 사람이 쓴 책이다. 미라클 모닝을 읽어보진 않아서 그 책의 내용은 잘 모르지만, 대충 아침 일찍 일어나서 남들과 다른 삶의 시작을 맞이하라는 내용 같다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>고등학교 때에는 자기계발에 관심이 많아서 이것 저것 읽어보다가 아주 오랜만에, 지금 자기계발서를 백만년 만에 읽어보았다.  미라클 이퀘이션도 내용으로 따지면 참으로 진부하다.  근데 오히려 진부함이 나에게 새로운 충격을 주었다. 책은 전반적으로 종교적 분위기를 띤다. 정말로 내가 할 수 있을 것 같은 믿음을 준다. 뭐, 그러한 믿음이 사실이든 아니든 그러한 진부함은 나에게 잊고 있었던 무언가를 깨우치게 해 주었다. 고등학교 시절 열정에 넘쳤던 그 잊고 있었던 기분을 잠시나마 느낄 수 있었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>내용은 간단하다. 확고한 신념을 가진 채 목표를 세우고 남다른 노력을 하면 그 일이 이루어지는 기적! 사실 말도 안 되지만 논리적으로는 큰 하자가 없다. 실현 가능한 영역과 그렇지 않은 영역이 있다고 가정해보자. 보통의 노력을 했을 때보다 남다른 노력을 했을 때에는 실현 가능한 영역이 조금이나마 넓어질 것이다. 그 넓어지는 영역에 해당하는 목표를 진작에 세워놓고, 남다른 노력을 하여 목표를 실현시킨다면 그것은 가히 기적이라 여겨질 것이다. 그것이 반복되면 사람 자체가 업그레이드 되는 셈이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 아무리 열심히 노력하더라도 불가능한 영역이 있기 마련이다. 그렇다면 실패를 맛보게 될 것이다. 이 책에서는 목표의 실현이 아니라 노력을 통한 자신의 성장이 목표의 궁극적인 목적이라고 설명한다. 다소 힘이 빠진다. 목표를 실패했을 때의 좌절감을 컨트롤하는 게 어디 쉬운가. 감정의 통제는 정말 힘든 것이다. 하기사 이 책에서는 계속 그렇게 얘기한다. 그 어려운 것을 당신은 해낼 수 있습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>나는 이 책을 읽고 작은 목표를 세워서 이루는 소소한 성취감만으로 충분한가 라는 질문을 스스로 하게 되었다. 나에게도 성공의 욕구가 있지만 그런 자그마한 성취로는 이룰 수 있는 성공이 제한적일 것이다. 그런 자각을 하게 된 셈이다. 내가 열심히 노력한 것이 사실은 열심히 노력한 게 아니라면? 뭔가 더 해볼만한 게 있지 않을까? 하고 희망의 생각이 내 머릿속을 채우기 시작했다. 자신감이라고 해야 할까, 알 수 없는 고양감은 분명 "내가 열심히 한게 사실 열심히 한게 아니구나" 하는 무력감과는 다르다. 이런 긍정적인 생각을 들게 한 이 책에게 다소 감사한 마음이 든다. 내용은 진부하지만.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1580</wp:post_id>
		<wp:post_date><![CDATA[2020-03-20 18:13:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-20 09:13:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 19:22:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 10:22:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%af%b8%eb%9d%bc%ed%81%b4-%ec%9d%b4%ed%80%98%ec%9d%b4%ec%85%98-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
		<category domain="category" nicename="books"><![CDATA[책]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[포드 V 페라리 리뷰]]></title>
		<link>https://elvanov.com/1589</link>
		<pubDate>Fri, 20 Mar 2020 12:48:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1589</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":1590,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/03/d12272a466d141d7bc78c0c3f9e9dc511573821108046-714x1024.jpg" alt="" class="wp-image-1590"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>포드라는 공장에서 자동차를 찍어내는 회사가 있다. 이 거대한 회사가, 실속은 없지만 레이싱에서 1등 해먹는 페라리에게 굴욕을 당한다. 그래서 포드는 은퇴한 전설 캐롤 셸비를 영입한다. 이 사람은 자신의 절친이자 레이싱 밖에 모르는 망나니 켄 마일스를 데려오고, 여차저차 우여곡절 끝에 레이싱에서 이긴다. 그러나 씁쓸함이 남는 승리였고 켄 마일스는 허무하게 죽는다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>스토리는 심플하다. 근데 레이싱 액션이 죽여준다. 나는 2종이라 기어를 직접 바꿀 필요가 없어서 레이싱의 현란한 움직임에 대해 와~ 쩐다 하는 건 없었다. 차 부품에도 관심없어서, 와 저걸 저렇게 한다고? 라는 것도 없었다. 근데 레이싱의 긴박함은 잘 연출했다고 생각하고, 캐릭터도 유쾌하여 가볍게 잘 볼 수 있었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>중간에 회장님이 질질 짜는 장면이 제일 웃겼다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1589</wp:post_id>
		<wp:post_date><![CDATA[2020-03-20 21:48:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-20 12:48:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-20 21:48:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-20 12:48:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8f%ac%eb%93%9c-v-%ed%8e%98%eb%9d%bc%eb%a6%ac-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[텍스트 돌아가는 배너 만들기 (javascript)]]></title>
		<link>https://elvanov.com/1592</link>
		<pubDate>Sat, 21 Mar 2020 09:26:13 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1592</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>외부 라이브러리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>라이브러리는 Zepto와 anime.js를 이용했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Zepto는 편리하게 엘리먼트를 선택하기 위해서이고, anime.js는 편하게 loop를 설정하기 위하여 이용했다. css animation을 꼭 이용해보고 싶었지만, css에 변수를 어떻게 전달할지에 대한 마땅한 대책이 떠오르지 않아서 애니메이션 라이브러리를 이용했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 전체 코드에서 확인할 테지만, head 태그 부분에서 스크립트를 불러올 수 있도록 했다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>전체 코드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 <code>Result</code>를 눌러보면 바로 결과를 확인할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<script async="" src="//jsfiddle.net/eszqsc112/hsx9cvt5/embed/js,html,css,result/dark/"></script>
<!-- /wp:html -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>구현 흐름</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li> DOM을 관리할 수 있는 자바스크립트 라이브러리를 이용해 (여기서는 zepto이다.) 텍스트 및 데이터들을 불러온다.</li><li> 텍스트를 실제로 화면에 띄운 다음에, 가로 사이즈를 측정한다.  </li><li> 배너 전체 너비가 다 채워질 때까지 텍스트를 복제한다. 정확히는 (<strong>배너 전체 너비 + 텍스트 하나의 너비</strong>)가 다 채워져야 한다. 왜냐하면 텍스트가 움직이는 만큼에도 텍스트가 채워져 있어야 하기 때문이다.</li><li> 텍스트를 일정한 속도로 이동시키고, 이동된 <code>x</code>가 텍스트 너비만큼 이동되는 순간 0으로 초기화시킨다. 이를 무제한 반복한다. (실제로는 자바스크립트에서 매 렌더링 프레임마다 특정 코드를 실행시키는 것이 번거로워서 무한루프 기능이 있는 자바스크립트 애니메이션 라이브러리인 <code>anime.js</code>를 이용했다.)</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>실제 구현시 유의사항</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>Zepto(function($) {
  $(window).on('load', function() {
    $.each($(".ezkorry-roller"), function(index, item) {
      ...
    });
  })
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>배너에 돌릴 텍스트의 가로 사이즈를 구할 때, <code>DOMContentLoaded</code> 이벤트는 단순히 DOM 구조가 완료되었을 때 실행되므로, 실제 폰트가 아닌 기본 폰트로 적용된 상태에서 가로 길이를 구하기 때문에 우리의 의도에 살짝 빗나간다. 실제 폰트가 적용되었을 때 가로 길이를 구할 수 있도록 <code>load</code> 이벤트를 이용한다.  </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-css"} -->
<pre class="wp-block-code language-css"><code>.ezkorry-roller {
  overflow: hidden;
  white-space: nowrap;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>가장 바깥 쪽 <code>div</code> 요소 (위 예제에서는 <code>.ezkorry-roller</code>)의 내용에 대해 스크롤이 생기지 않도록 <code>overflow: hidden; white-space: nowrap;</code> 의 내용으로 css를 적용해주었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>      const wrapper = $("&lt;div />", { class:"ezkorry-roller-wrapper"});
      const roller = $(item);
      roller.append(wrapper);
      const span = roller.find('span').first();
      wrapper.append(span);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>실제 텍스트인 <code>span</code>과 <code>div.ezkorry-roller</code> 사이에 <code>div.ezkorry-roller-wrapper</code>를 놓은 이유는, 이 요소에다가 움직이는 애니메이션을 먹일 것이기 때문이다. 기존의 구조에서는 애니메이션을 먹일 요소가 마땅히 없다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>      const span_width = span.get(0).offsetWidth;
      const max_width = roller.width() + span_width;
      let inner_width = span_width;

      while(max_width > inner_width) {
        wrapper.append(span.clone());
        inner_width += span_width;
      }
      
      anime({
        targets: '.ezkorry-roller-wrapper',
        translateX: {
          value: '-=' + span_width + 'px',
          duration: 3000
        },
        loop: true,
        easing: 'linear'
      });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>핵심 부분이다. <code>span_width</code>는 텍스트 하나의 길이이고, <code>max_width</code> 채워야 할 전체 너비를 나타내며, <code>inner_width</code>는 <code>while</code> 내부를 돌기 위한 조건 변수로 두었다. 그리고 애니메이션은 <code>anime.js</code>를 이용해서 무한으로 오른쪽에서 왼쪽으로 돌도록 만들었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>간단한 동작이라 라이브러리를 찾지 않고 직접 구현했다. 그러나 여전히 zepto나 anime.js의 라이브러리 사용법을 찾는다고 적지 않은 시간을 할애했다. 두 라이브러리는 앞으로도 두고두고 쓸 것 같으니 뭐 이정도 선에서 깔끔하게 구현한 걸 만족한다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1592</wp:post_id>
		<wp:post_date><![CDATA[2020-03-21 18:26:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-21 09:26:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-22 21:31:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-22 12:31:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%85%8d%ec%8a%a4%ed%8a%b8-%eb%8f%8c%ec%95%84%ea%b0%80%eb%8a%94-%eb%b0%b0%eb%84%88-%eb%a7%8c%eb%93%a4%ea%b8%b0-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[워드프레스 에디터에서 핵심 javascript 가 불러와지지 않는 문제 수정]]></title>
		<link>https://elvanov.com/1608</link>
		<pubDate>Tue, 14 Apr 2020 04:09:36 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1608</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>window.wp</code>나 <code>wp</code> 모두 개발자가 만든 자바스크립트 내에서 <code>undefined</code>를 뿜어내며 불러와지지 않는 문제이다. 어느 날 갑자기 잘 되던 코드가 안되서 원인을 찾다가 우여곡절 끝에 때려맞춰서 문제를 해결했다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>문제를 상세하게 보기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://elvanov.com/1543">동적 블록 만들기 튜토리얼</a> 결과, 문제가 발생했다.. 본래 작동하다가, 어느 날 갑자기 작동하지 않아 에디터 상에서 블록을 불러올 수 없었다. 에러 메시지를 확인해보니 다음과 같았다.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>recent-posts-block.js?ver=5.3.2:6 Uncaught TypeError: Cannot read property 'element' of undefined
    at recent-posts-block.js?ver=5.3.2:6
    at recent-posts-block.js?ver=5.3.2:134</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>저 부분이 어디냐구?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>var el = wp.element.createElement</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 부분이다. 그러니까 저 부분은 <code>window.wp</code>를 <code>wp</code>로 감싼 형태라서 실질적으로 <code>window</code>에 <code>wp</code>가 정의되지 않았다는 문제라고 보면 된다. 본래 에디터가 로딩되면 <code>wp</code>도 자동으로 만들어지기 때문에 이때까지 이런 에러는 일어난 적도 없었고 일어날 리도 없었다. 근데 문제가 생겼다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이런 문제가 갑자기 왜 발생했는지는 모르겠지만 내부적으로 워드프레스가 돌아가는 방식이 미묘하게 바뀐 게 원인이라고밖에 설명할 수 없었다. 플러그인을 바꾼 것도 아니고, 여하튼 규정할 수 있는 원인이 없었다. 어쨌든 문제가 발생했으니 고쳐야 할 것 아닌가..</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>문제를 고쳐가는 과정</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>저 문제가 발생하는 이유는 워드프레스 구텐베르크, 즉 블록 에디터의 핵심 자바스크립트 라이브러리들이 로딩되기 <strong>전에</strong> 직접 만든 js 파일이 로딩되기 때문이다. 그래서 강제적으로 로딩 순서를 조정해줄 수 밖에 없었다. 아래 코드는 문제가 되는 코드이다. 기가 찬 점은 공식 문서에서의 예문과 거의 다를 바가 없다는 점이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>function ezkorry_recent_posts_register()
{

  wp_register_script(
    'ezkorry_recent_posts',
    get_stylesheet_directory_uri() . '/editor/recent-posts-block.js'
  );

  register_block_type('ezkorry/recent-posts', array(
    'editor_script' => 'ezkorry_recent_posts',
    'render_callback' => 'ezkorry_recent_posts_render'

  ));
}
add_action('init', 'ezkorry_recent_posts_register');</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>add_action 부분 수정 시도 (실패)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>액션 실행의 우선순의를 설정해주는 세 번째 파라미터에 50과 같은 큰 숫자를 적어도 변함이 없었다. 그렇다고 <code>enqueue_block_editor_assets</code>를 액션 후크로 쓰자니, 동적 블록 관련 기능은 저 후크로 쓰면 안되므로 패스했다. 아래와 같은 코드는 문제를 해결해주지 않았다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>// 문제가 해결 안 돼!
add_action('init', 'ezkorry_recent_posts_register', 50);

// 이것도!
add_action( 'enqueue_block_editor_assets', 'ezkorry_recent_posts_script_enqueue' );</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>dependency 조정 (성공)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 코드의 <code>wp_register_script</code> 함수는 세 번째 인수로써 의존하고 있는 코드를 명시할 수 있다. 이는 <code>wp_enqueue_script</code> 함수도 마찬가지이다. 그래서 이 세번째 인수에 블록 에디터와 관련된 핵심 요소를 집어넣으면 되지 않을까 하고 검색해보았다.  <a href="https://developer.wordpress.org/reference/functions/wp_register_script/#core-registered-scripts">공식 문서</a>를 살펴보면 알겠지만, 워드프레스 코어 단에서 등록된 스크립트의 종류가 굉장히 많음을 알 수 있다. 여기서 도대체 무엇일까. 무엇일까.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1610,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/image.png" alt="" class="wp-image-1610"/><figcaption>이미 등록된 스크립트의 일부</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>불행히도, 내가 원했던 후크는 <strong>여기에 없었다!</strong> 계속해서 구글링한 결과 정답을 찾게 되었다. (사실상 거의 그냥 때려맞춘 거나 마찬가지였다.) <code>wp-editor</code> 만 의존성에 추가해주면 된다. 아래는 그 내용을 적용하여, 원래 내용에서 단 1줄만 추가한 내용이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-php"} -->
<pre class="wp-block-code language-php"><code>function ezkorry_recent_posts_register()
{

  wp_register_script(
    'ezkorry_recent_posts',
    get_stylesheet_directory_uri() . '/editor/recent-posts-block.js',
    array('wp-editor')
  );

  register_block_type('ezkorry/recent-posts', array(
    'editor_script' => 'ezkorry_recent_posts',
    'render_callback' => 'ezkorry_recent_posts_render'

  ));
}
add_action('init', 'ezkorry_recent_posts_register');</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>워드프레스가 은근히 딱딱 정리되지 않아서 개발하기 힘들다. <code>php</code>가 대세가 아니어서 그런가. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1608</wp:post_id>
		<wp:post_date><![CDATA[2020-04-14 13:09:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-14 04:09:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-14 13:20:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-14 04:20:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9b%8c%eb%93%9c%ed%94%84%eb%a0%88%ec%8a%a4-%ec%97%90%eb%94%94%ed%84%b0%ec%97%90%ec%84%9c-%ed%95%b5%ec%8b%ac-javascript-%ea%b0%80-%eb%b6%88%eb%9f%ac%ec%99%80%ec%a7%80%ec%a7%80-%ec%95%8a%eb%8a%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="wordpress"><![CDATA[워드프레스]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2f975decb6d9cf2dbfd10f66462cae16]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="rLQvFxKV6Z"><a href="https://developer.wordpress.org/reference/functions/wp_register_script/">wp_register_script()</a></blockquote><iframe title="&#8220;wp_register_script()&#8221; &#8212; WordPress Developer Resources" class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://developer.wordpress.org/reference/functions/wp_register_script/embed/#?secret=rLQvFxKV6Z" data-secret="rLQvFxKV6Z" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_2f975decb6d9cf2dbfd10f66462cae16]]></wp:meta_key>
		<wp:meta_value><![CDATA[1586837378]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7137a6f50e81f034bb4ab91b8d9a7db2]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="F5jENdL0V6"><a href="https://developer.wordpress.org/reference/functions/wp_register_script/">wp_register_script()</a></blockquote><iframe title="&#8220;wp_register_script()&#8221; &#8212; WordPress Developer Resources" class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://developer.wordpress.org/reference/functions/wp_register_script/embed/#?secret=F5jENdL0V6" data-secret="F5jENdL0V6" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_7137a6f50e81f034bb4ab91b8d9a7db2]]></wp:meta_key>
		<wp:meta_value><![CDATA[1586837386]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[파이썬] print의 결과를 변수에 저장하기]]></title>
		<link>https://elvanov.com/1618</link>
		<pubDate>Tue, 21 Apr 2020 06:10:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1618</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>파이썬의 <code>print</code> 함수에는 return 값이 없다. 그냥 바로 출력할 뿐이다. 만약 <code>print</code>의 사용법을 그대로 차용하면서 <code>print</code>의 결과값을 변수로 저장하고 싶다면, 사용자가 <code>StringIO</code> 클래스 기반 객체를 만들어 <code>getvalue()</code> 하면 된다. 그렇게 어렵지 않다. 아래가 그 예시이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from io import StringIO

def return_print(*message):
    io = StringIO()
    print(*message, file=io, end="")
    return io.getvalue()

wow = return_print("하하", "호호", "히히")
print(wow)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>하하 호호 히히</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>*message</code>와 같은 용법은 <a href="https://elvanov.com/304#%EA%B0%80%EB%B3%80+%EC%9D%B8%E--1">위치 기반 가변 인수</a>를 참고하라.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>중간의 <code>print</code> 함수에서 <code>end=""</code>로 둔 이유는 그냥 <code>print</code>는 기본적으로 줄바꿈을 포함하기 때문에 그것을 제외하기 위함이다. 이것 또한 입맛대로 해도 된다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1618</wp:post_id>
		<wp:post_date><![CDATA[2020-04-21 15:10:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-21 06:10:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-22 09:56:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-22 00:56:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-print%ec%9d%98-%ea%b2%b0%ea%b3%bc%eb%a5%bc-%eb%b3%80%ec%88%98%ec%97%90-%ec%a0%80%ec%9e%a5%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[파이썬]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - NotImplementedError와 NotImplemented]]></title>
		<link>https://elvanov.com/1620</link>
		<pubDate>Tue, 21 Apr 2020 22:03:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1620</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>각종 에러를 접하다 보면 <code>NotImplemented</code>와 <code>NotImplement</code>가 혼동된다는 점을 알 수 있습니다. 여기서는 간단하게 그 차이만 알아보고, 자세한 사항은 연결고리를 참조합니다. 아래 두 주제 전부 클래스와 밀접한 연관이 있기 때문에 아직 클래스에 익숙하지 않다면, 클래스를 더 연습하고 오시기를 권장드립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><code>NotImplementedError</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>상위 클래스를 설계할 때, 하위 클래스에서 반드시 오버라이드하여 상세하게 구현해야 하는 메소드를 명시하고자 하려면, 해당 메소드의 내용으로&nbsp;<code>raise NotImplementedError(메시지)</code>만 넣어놓게 됩니다. 아래와 같이 <code>BaseWheel</code>로 객체를 만들어놓고 <code>roll</code> 메소드를 호출하려고 하면 에러가 뜬다는 것을 확인할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class BaseWheel:
    def roll(self):
        raise NotImplementedError("roll 메소드를 구현하여야 합니다.")

class FastWheel(BaseWheel):
    def roll(self):
        print("빠르게 굴러간다~!")

someWheel = BaseWheel()
someWheel.roll()</code></pre>
<!-- /wp:code -->

<!-- wp:jetpack/markdown {"source":"```plaintext\nTraceback (most recent call last):\n  File \u0022c:/Users/tooth/Downloads/test.py\u0022, line 10, in \u003cmodule\u003e\n    someWheel.roll()\n  File \u0022c:/Users/tooth/Downloads/test.py\u0022, line 3, in roll     \n    raise NotImplementedError(\u0022roll 메소드를 구현하여야 합니다.\u0022)\nNotImplementedError: roll 메소드를 구현하여야 합니다.\n```"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-plaintext">Traceback (most recent call last):
  File &quot;c:/Users/tooth/Downloads/test.py&quot;, line 10, in &lt;module&gt;
    someWheel.roll()
  File &quot;c:/Users/tooth/Downloads/test.py&quot;, line 3, in roll     
    raise NotImplementedError(&quot;roll 메소드를 구현하여야 합니다.&quot;)
NotImplementedError: roll 메소드를 구현하여야 합니다.
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>반면 <code>FastWheel</code>로 roll을 호출하면 아무런 문제가 없다는 것을 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class BaseWheel:
    def roll(self):
        raise NotImplementedError("roll 메소드를 구현하여야 합니다.")

class FastWheel(BaseWheel):
    def roll(self):
        print("빠르게 굴러간다~!")

someWheel = FastWheel()
someWheel.roll()</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>빠르게 굴러간다~!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>에러는 다양한 경우에서 다른 개발자에게 의도를 보여주기 좋습니다. 만약 베이스 클래스를 만들면서 반드시 구현해야 하는 기능(메소드)를 명확하게 하기 위해 <code>raise NotImplementedError(...)</code>를 활용하도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><code>NotImplemented</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어떤 클래스의 연산자, 특히 수치형에서 작동하는 중위 연산자에서 <strong>지원하지 않는 연산이라고 알리기 위해&nbsp;<code>NotImplemented</code>&nbsp;를&nbsp;<code>return</code>&nbsp;합니다.</strong>&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>NotImplemented</code>는 키워드이자 값입니다. 즉 <code>None</code>이나 <code>True</code>, <code>False</code>와 동등한 지위를 가진 녀석이란 것이죠. <code>True</code>가 참, <code>False</code>가 거짓, <code>None</code>이 아무 것도 없음을 나타내는 것처럼 <code>NotImplemented</code>는 ㅁ구현되지 않음을 나타내는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>수치 연산에서 굳이 에러를 발생시키지 않고 특정한 값을 반환하는 이유는, 파이썬 인터프리터가 다른 가능한 연산을 찾아볼 기회를 주기 위해서입니다. 보통 에러를 발생시킨다면 try-except 문에서 에러를 핸들링해주지 않는 이상 프로그램이 곧장 뻗습니다. 뭔가가 실패했을 때 다른 방법을 찾아보기보다 아무 것도 못하고 프로그램이 종료된다면, 설계가 유연해지지 않겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>작동 원리는 다음과 같습니다. 어떤 클래스에서&nbsp;<code>__add__</code>&nbsp;메소드를 구현했는데 이 메소드 내부에서&nbsp;<code>NotImplemented</code>를 반환한다면, 파이썬은&nbsp;<code>__radd__</code>&nbsp;메소드를 검색해보는 시도 또한 해봅니다. 모든 시도가&nbsp;<code>NotImplemented</code>로 끝난다면, 그제서야 파이썬은&nbsp;<code>TypeError</code>를 발생시킵니다. 아래는 간단한 예시입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Time:
    def __init__(self, hour, minute, second):
        self.second = second
        self.minute = minute
        self.hour = hour
    
    def __add__(self, other):
        try:
            return Time(self.hour, self.minute, other + self.second)
        except TypeError:
            return NotImplemented
    
    def __repr__(self):
        return f'Time(hour={self.hour}, minute={self.minute}, second={self.second})'
    
    def __str__(self):
        return f'{self.hour:0>2}:{self.minute:0>2}:{self.second:0>2}'

class Minute:
    def __init__(self, value):
        self.value = value
    
    def __radd__(self, other):
        return Time(other.hour, other.minute + self.value, other.second)

t = Time(12, 23, 00)
print("초기 상태", t)

t += 22
print("22초 추가", t)

m = Minute(15)
t += m
print("15분 추가", t)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>Time</code> 객체인 <code>t</code>와 <code>Minute</code> 객체인 <code>m</code>이 더해지는 <code>t+m</code> 연산에서, Time.__add__ 메소드는 <code>TypeError</code>를 일으킵니다. 왜냐하면 <code>Minute</code>가 <code>int</code>와 더하는 연산을 지원하지 않기 때문이지요. 그래서 그 경우에는 <code>NotImplemented</code>를 반환하도록 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>파이썬 인터프리터는 <code>t+m</code> 연산에서 <code>NotImplemented</code>가 결과로 나왔으니, 이제 m의 클래스인 <code>Minute</code>에서 <code>__radd__</code> 메소드를 찾습니다. 어, 있네요! 이것마저 안된다면 에러를 발생시킬 터였지만, 다행히 무사히 작동합니다. <code>__radd__</code>에는 <code>self</code>가 연산자 오른쪽에 있는 값이고, <code>other</code>가 연산자 왼쪽에 있는 값입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>더 자세한 설명은 <a href="https://elvanov.com/1265">특별 메소드 글</a>을 참조하세요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>NotImplementedError</code>와 <code>NotImplemented</code>의 차이를 설명하세요.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1620</wp:post_id>
		<wp:post_date><![CDATA[2020-04-22 07:03:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-21 22:03:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-22 09:56:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-22 00:56:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-notimplementederror%ec%99%80-notimplemented]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8514</wp:comment_id>
			<wp:comment_author><![CDATA[유나]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bootyoona@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.130.121.145]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-23 09:59:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-23 00:59:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요, 혹시 상위클라스에서 NonImplementedError 제기하는 대신, pass 만 적을 경우 어떠한 문제가 생기나요? 어차피 하위클라스에서 동일 메소드 정의 시 덮어쓰기가 되니 상관 없는게 아닐까해서요. 감사합니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642899570.142002;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 어노테이션 - 수월하게 프로그래밍하기]]></title>
		<link>https://elvanov.com/1631</link>
		<pubDate>Wed, 22 Apr 2020 00:47:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1631</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>어노테이션은 사전적 의미로는 주석입니다. 하지만 우리가 <code>#</code>으로 작성하는 주석과 혼동될 수 있기 때문에 어노테이션이라고 계속 말하도록 하겠습니다. 그리고 구글에다가 검색해보다 알게 된 사실인데, 자바에서는 어노테이션이 파이썬의 데코레이터(추가 예정)와 대응되는 것 같습니다. 파이썬의 어노테이션은 다소 다른 용도입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>어노테이션이 적용된 모습</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>제가 쓰는 Visual Studio Code를 포함하여 요즘의 텍스트 에디터 및 IDE는 타입을 추정하는 능력이 탁월합니다. 대부분의 상황에서는 파이썬의 어노테이션으로 타입을 명시할 필요가 없지요. 하지만 그 강력한 타입 추정도 잡아내지 못하는 타입이 있기 마련입니다. 아래 예제를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":1632,"sizeSlug":"large"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/u2.gif" alt="" class="wp-image-1632"/><figcaption>어노테이션이 적용된 모습</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>에디터 입장에서는 기가 찰 겁니다. 함수의 인수로 뭐가 올지 모르는데 어떻게 그게 <code>Watch</code> 클래스인 걸 알겠습니까? 타입 추정이 제대로 되지 않는다는 게 당연해보입니다. 그럴 때는 함수의 인수에 직접 어노테이션을 적용하면 됩니다. 인수의 이름 뒤에 <code>: 타입</code>을 작성하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다른 사람들이 정성스레 만들어놓은 모듈을 끌고 와서 간단한 프로그램을 만든다 하더라도, 이제 100줄 넘기기는 우스우실 것입니다. 직접 클래스를 설계해야 하는 상황에 온다면, 200~300줄도 가볍습니다. 이렇게 길어지는 코드에서, 매번 클래스의 어떤 속성을 무슨 이름으로 짜넣었는지 찾는다고 스크롤을 올리고 내리다 보면, 마우스 휠 밖에 왔다갔다 하지 못하는 스스로를 발견하게 됩니다. 이런 절망적인 상황에서 어노테이션은 한 줄기 빛이자 희망입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>기본적인 사용법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사용하는 위치는 크게 세 가지로 나뉩니다. 함수의 인수, 함수의 반환, 변수의 정의 입니다. 아래 코드는 그 모든 것을 표현하는 코드입니다. 변수나 인수의 경우 변수명과 <code>=</code> 사이에 <code>: 타입</code>을 적어서 표시하고, 함수의 반환값의 경우 함수 블록이 시작하기 직전에 <code>-&gt; 타입</code>으로 적어서 표시합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def something(num: int = 10) -> Time:
    w: Watch = notExistFunction()
    return w.time + num</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>코드에서 무엇이 어떻게 어노테이션되었는가는 아래 표를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|구분|어노테이션 된 타입|비고|\n|\u002d\u002d-|:\u002d\u002d-:|\u002d\u002d-|\n|`something`의 인수 `num`|`int`|기본값이 10이다.|\n|`something`의 리턴 값|`Time`|-|\n|지역 변수 `w`|`Watch`|`notExistFunction()`의 결과가 대입되었다.|\n\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>구분</th>
<th style="text-align:center">어노테이션 된 타입</th>
<th>비고</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>something</code>의 인수 <code>num</code></td>
<td style="text-align:center"><code>int</code></td>
<td>기본값이 10이다.</td>
</tr>
<tr>
<td><code>something</code>의 리턴 값</td>
<td style="text-align:center"><code>Time</code></td>
<td>-</td>
</tr>
<tr>
<td>지역 변수 <code>w</code></td>
<td style="text-align:center"><code>Watch</code></td>
<td><code>notExistFunction()</code>의 결과가 대입되었다.</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>컨테이너 사용법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>리스트와 딕셔너리 같은 컨테이너의 경우 조금 난감합니다. 왜냐하면 해당 변수(인수)가 리스트인 것 까지는 어노테이션으로 쉽게 할 수 있으나, 그 안에 있는 요소가 무슨 타입인지는 지정할 수 없기 때문입니다. 아래 예제에서 가장 하단에 <code>watchList.pop()</code>까지는 타입 추정이 잘 작동하지만, 이 리스트 안에 어떤 요소가 있는지는 추정할 수 없으므로 <code>getTime()</code>은 직접 쳐서 넣어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class Watch:
    def __init__(self, time, color):
        self.time = time
        self.color = color

    def getTime(self):
        return self.time

def handleWatchList(watchList: list):
    watchList.pop().getTime()</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 이를 극적으로 바꿀 수 있습니다. 아래 예제대로 한다면 리스트 내부에 있는 요소까지 에디터에서 다룰 수 있게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from typing import List

class Watch:
    def __init__(self, time, color):
        self.time = time
        self.color = color

    def getTime(self):
        return self.time


def handleWatchList(watchList: List&#91;Watch]):
    watchList.pop().getTime()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 <code>typing</code> 모듈에서 <code>List</code>를 임포트합니다. 이 <code>List</code> 클래스는 어노테이션만을 위한 클래스입니다. 이 <code>List</code>에 대괄호를 이용해 내부에 있는 요소의 타입까지 지정할 수 있습니다. 예를 들어 <code>list</code>에 <code>Watch</code> 객체가 들어간다면 <code>List[Watch]</code>로 지정하면 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>딕셔너리도 다소 비슷한데요, 딕셔너리는 <code>Dict</code>와 대괄호를 이용하며, 대괄호 안에 키의 타입과 값의 타입을 각각 설정할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from typing import Dict

class Watch:
    def __init__(self, time, color):
        self.time = time
        self.color = color

    def getTime(self):
        return self.time


def handleWatchList(watchDict: Dict&#91;str, Watch]):
    watchDict.popitem()&#91;1].getTime()</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>고급 - 클래스 속성과 일반 속성</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>클래스 속성과 일반 속성은 <a href="https://www.python.org/dev/peps/pep-0526/">공식 문서</a>를 참조하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from typing import ClassVar, Dict

class BasicStarship:
    captain: str = 'Picard'               # 기본값이 있는 일반 속성
    damage: int                           # 기본값이 없는 일반 속성
    stats: ClassVar&#91;Dict&#91;str, int]] = {}  # 클래스 속성</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>고급 - 함수</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>함수, 즉 호출할 수 있는 객체를 나타내고 싶을 때도 있을텐데요, 그럴 때는 <code>Callable</code>를 이용하면 됩니다. <code>Callable</code>의 사용법은 <code>Callable[[인수1타입, 인수2타입, ...], 리턴타입]</code>으로 하면 됩니다. 아래는 간단한 예제입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def executeCallback(num:int, callback:Callable&#91;&#91;int, int], str]):
    p = callback(num, 10)
    p.lower()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>인수나 리턴에 아무것도 넣고 싶지 않다면 <code>None</code>을 활용하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def executeCallback(num:int, callback:Callable&#91;&#91;None], None]):
    callback()</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>유의사항</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어노테이션을 적용했다고 해서 해당 타입을 강제로 사용해야 하는 것은 아닙니다. 오히려 실제 프로그램이 실행될 때에는 어노테이션은 정말로 아무런 역할을 하지 않습니다! 오로지 어노테이션은 에디터로 작업할 때 유용하기 위해 지정하는 것임을 유념해주세요. 아래처럼 해도 실행에는 아무런 지장이 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def add(num: str) -> str:
    return 10 + num

print(add(20))</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>30</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>레퍼런스</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://docs.python.org/ko/3/library/typing.html">typing 공식 문서 (영어)</a></li><li><a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 - 변수 어노테이션 문법 (영어)</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1631</wp:post_id>
		<wp:post_date><![CDATA[2020-04-22 09:47:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-22 00:47:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-22 09:53:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-22 00:53:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%96%b4%eb%85%b8%ed%85%8c%ec%9d%b4%ec%85%98%ec%9c%bc%eb%a1%9c-%ec%89%bd%ea%b2%8c-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ed%95%98%ec%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>7927</wp:comment_id>
			<wp:comment_author><![CDATA[너울]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hurwun0103@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[175.113.221.140]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-20 06:19:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-19 21:19:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[잘 읽고 갑니다. 공식 문서에 있는 내용을 번역해서 쉽게 풀어 설명해주시니 접근성이 높아지네요. 자주 참고할 것 같습니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588751.673242;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637356794.993639;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[C언어로 빠른 삼중 분할 퀵 정렬 구현하기]]></title>
		<link>https://elvanov.com/1644</link>
		<pubDate>Wed, 22 Apr 2020 23:55:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1644</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Algorithms 4th edition (로버트 세지윅, 케빈 웨인 지음 | 권오인 옮김 | 길벗) 에서 소개된, 벤틀리(J. Bentley)와 세지윅(R. Sedgewick)이 고안한 빠른 삼중 분할 퀵 정렬 (연습문제 2.3.22) 을 직접 풀어보고자 함.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>선 전체 코드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다만, 본 코드로는 직접 실행시키지 못한다. 커다란 데이터 파일을 읽고 실제 출력까지 어떻게 되는지 보기를 원한다면 <a href="https://gitlab.com/EzKorry/algorithm-learn">프로젝트</a>를 직접 실행해보도록 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>#include &lt;string.h>

// 값을 서로 뒤바꾸는 함수
void exch(char** a, int i, int j)
{
	char* temp = a&#91;i];
	a&#91;i] = a&#91;j];
	a&#91;j] = temp;
}

void quick_fast3way_sort(char** a, int lo, int hi) {
	printf("%07d to %07d starts\n", lo, hi);
	if (lo >= hi) return;

	int p = lo, i = lo-1, q = hi, j = hi + 1;
	//while (strcmp(a&#91;++p], a&#91;lo])) 
	while (true) {
		while (++i &lt;= hi) { //i가 hi보다 크다면 즉시 멈춘다.

			// 비교 실시
			int cmp = strcmp(a&#91;i], a&#91;lo]);
			
			// a&#91;i] &lt; a&#91;lo] 일 때에는 아무것도 하지 않는다.
			// a&#91;i] > a&#91;lo] 이면 a&#91;i]와 a&#91;j]를 바꿀 준비를 해야 한다.
			if (cmp > 0 ) break;  

			// a&#91;i] == a&#91;lo] 이고, j가 먼저 검사를 안했다면 a&#91;i]와 a&#91;p++]를 교환한다.
			else if (cmp == 0 &amp;&amp; i &lt; j) exch(a, i, p++); 
		}
		while (--j >= lo) { // j가 lo보다 작다면 즉시 멈춘다.
			// 비교 실시
			int cmp = strcmp(a&#91;lo], a&#91;j]);

			// a&#91;lo] &lt; a&#91;j] 일 때에는 아무것도 하지 않는다.
			// a&#91;lo] > a&#91;j] 이면 a&#91;i]와 a&#91;j]를 바꿀 준비를 해야 한다.
			if (cmp > 0) break; 
			
			// a&#91;lo] == a&#91;j] 이고, i가 먼저 검사를 안했다면 a&#91;j]와 a&#91;q--]를 교환한다.
			else if (cmp == 0 &amp;&amp; i &lt; j) exch(a, j, q--);
		}
		if (i >= j) break;
		exch(a, i, j);
	}
	int left_same_count = p - lo;
	int right_same_count = hi - q;
	int leftmove = min(j- p + 1, left_same_count);
	int rightmove = min(q - i + 1, right_same_count);

	int mj = j, mi = i;

	while (leftmove-- > 0 &amp;&amp; mj >= lo) exch(a, lo + leftmove, mj--);
	while (rightmove-- > 0 &amp;&amp; mi &lt;= hi) exch(a, hi - rightmove, mi++);

	j -= left_same_count;
	i += right_same_count;
	
	quick_fast3way_sort(a, lo, j);
	quick_fast3way_sort(a, i, hi);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>사용할 때에는 <code>char*</code>의 배열 <code>strings</code>이 있다 가정하고, 또 이 배열의 길이를 <code>strings_length</code>로 가정했을 때, <code>quick_fast3way_sort(strings, 0, strings_length - 1);</code>와 같이 실행하면 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>고안</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>빠른 삼중 퀵 정렬에 필요한 변수들</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>삼중 분할을 하는 이유는 중복된 키(같은 키)가 무엇인지만 알면 그것들은 더이상 정렬할 필요가 없다는 개념에서 출발한다. 본래의 퀵 정렬은 기준점이 되는 하나를 완벽한 위치에 꽂아넣고, 인덱스가 작은 쪽(이하 <strong>왼쪽</strong>)에는 그 기준점보다 작은 것들로, 인덱스가 큰 쪽(이하 <strong>오른쪽</strong>)에는 그 기준점보다 큰 것들로 구분하는 작업이었는데, 이제 그 기준점이 넓어진다고 보면 된다. 이를 알기 쉽게 정리하면 다음과 같다. <code>lo</code>는 정렬하고자 하는 첫번째 인덱스를, <code>hi</code>는 마지막 인덱스를 의미한다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td class="has-text-align-center" data-align="center"></td><td>일반 퀵정렬</td><td>삼중 퀵정렬</td></tr><tr><td class="has-text-align-center" data-align="center">기준점</td><td><code>i</code></td><td><code>j 에서 i (j &lt; i)</code></td></tr><tr><td class="has-text-align-center" data-align="center">작은 부분</td><td><code>lo ~ i</code></td><td><code>lo ~ j</code></td></tr><tr><td class="has-text-align-center" data-align="center">큰 부분</td><td><code>i ~ hi</code></td><td><code>i ~ hi</code></td></tr><tr><td class="has-text-align-center" data-align="center">다음<br>탐색에서<br>제외</td><td><code>i</code></td><td><code>j ~ i</code></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>그렇다면, 중복되는 키에 대해서 따로 관리할 필요가 생기는데, 간단한 삼중 퀵정렬은 가운데에서 출발하여 점차 기준점이 넓어지도록 구현한다. 이 구현은 직접 해보지 않아서 잘 모르겠다. 이 글에서는 처음 개요에서 이야기한 두 명의 과학자가 고안한 방법대로 <code>i</code>와 <code>j</code>를 탐색해나가며 똑같은 키를 발견하는 그 때마다 양쪽 끝에 저장해두는 것으로 한다. 그림으로 표현하면 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1649,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/스캔-2020.-4.-23.-1-1024x747.jpg" alt="" class="wp-image-1649"/><figcaption>그림 2-24 벤틀리-멕로이의 3-중 분할</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>다루는 배열의 이름은 <code>a</code>이고 기준 값은 <code>a[lo]</code>와 같다. 기존에 퀵 정렬에서 사용하던 두 개의 변수에서, 두 개의 변수가 더 추가되어 총 4개의 변수를 다루게 된다. 각 변수의 역할은 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>p</code> : <code>i</code>가 탐색해나가며 키가 같은지 찾게 될텐데, 그 때 추가될 위치</li><li><code>i</code> : 기준 값과 <code>lo</code>로부터 차례로 비교해나가는 위치</li><li><code>j</code> : 기준 값을 <code>hi</code>로부터 차례로 비교해나가는 위치</li><li><code>q</code> : <code>j</code>가 탐색해나가며 키가 같은지 찾게 될텐데, 그 때 추가될 위치</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>큰 값에서 <code>i</code>가 멈추고, 작은 값에서 <code>j</code>가 멈춘 다음 <code>a[i]</code>와  <code>a[j]</code>가 교체된다. 따라서, 다음이 보장된다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>lo ~ p-1</code> : 기준 값과 같다.</li><li><code>p ~ i</code> : 기준 값보다 작은 값이다.</li><li><code>i+1 ~ j-1</code> : 아직 기준 값보다 큰지 작은지 알 수 없는 값이다.</li><li><code>j ~ q</code> : 기준 값보다 큰 값이다.</li><li><code>q+1 ~ hi</code> : 기준 값과 같다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>여기까지 고안한 후, 미시적인 상황에 대해 고려를 하지 않고 바로 코드 작성에 들어가니까 4~5 시간을 끙끙대도 풀지 못했다. 근데 공책에 어떻게 할지 적고 푸니까 30분 만에 풀리더라. 삼중 분할 퀵 정렬은 워낙에 가능한 상황이 많기 때문에 이를 모두 정리할 필요가 있었다. 이후 과정에서는 p, q가 별로 쓸모없으므로 표기하지 않는다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 없는 중간 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 있는 중간 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 없는 최하위 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">p, i</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>아무 것도 움직이지 않는다.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 있는 최하위 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">p, i</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 없는 최상위 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">j, q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 있는 최상위 값</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">8</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">8</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">8</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">q, j</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>8</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중복 두 개</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i, p, q</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>아무 것도 움직이지 않는다.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>하위값 두 개</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center">i, p, q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">4</td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>아무 것도 움직이지 않는다.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>상위값 두 개</h3>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이전</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center">p</td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">j</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">중간 과정</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">j, p, q</td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center">i</td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph {"align":"center"} -->
<p class="has-text-align-center">이후</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"wide"} -->
<figure class="wp-block-table alignwide"><table><thead><tr><th class="has-text-align-center" data-align="center">id</th><th class="has-text-align-center" data-align="center">값</th><th class="has-text-align-center" data-align="center">변수</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center">lo</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center"><strong>j</strong></td></tr><tr><td class="has-text-align-center" data-align="center">hi</td><td class="has-text-align-center" data-align="center"><strong>3</strong></td><td class="has-text-align-center" data-align="center"></td></tr><tr><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"></td><td class="has-text-align-center" data-align="center"><strong>i</strong></td></tr></tbody></table></figure>
<!-- /wp:table --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>구현</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>위 9가지 상황에 대해 정리를 했다. 이제 정리하면서 코드를 만들어보자.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>기본적으로는 <code>i</code>는 왼쪽에서 <code>j</code>는 오른쪽에서 출발하여, <code>i</code>는 있어서는 안될 큰 값을 바꾸기 위해 멈추고, <code>j</code>는 있어서는 안 될 작은 값을 바꾸기 위해 멈춘다. 그리고 이 둘을 교체한다. 이를 계속해서 반복한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>i</code>와 <code>j</code>의 앞으로의 탐색에서 나올 같은 값과 교체할 위치를, <code>q</code>와 <code>p</code>가 무조건 나타내도록 한다. 그래서 같은 값을 교체할 일이 있을 때에만, 교체 직후 <code>p</code>와 <code>q</code>는 증감/감소 하도록 한다. <code>i</code>와 <code>j</code>의 탐색이 끝나고, 다시 기준값을 가운데로 옮기는 과정에서는 단순히 얼마나 옮겨야 하는가만 보면 되기 때문에 <code>p</code>, <code>q</code>의 값은 변하지 않는다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>최종 <code>i</code>, <code>j</code> 위치 고려 </h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>모든 정렬을 완성시켰을 때 <code>j ~ lo</code>는 무조건 기준 값보다 작아야 한다. 이는 정렬한 모든 값이 같거나 클 때도 동일하게 작동한다. 즉<strong> <code>j</code>가<code> lo</code>보다 작아질 수도 있다.</strong></li><li>마찬가지로 <code>i</code>도 모든 정렬을 시켰을 때에 <code>i ~ hi</code>는 무조건 기준 값보다 커야 한다. 이는 정렬한 것들이 모두 기준 값보다 작거나 같을 때도 동일하게 작동한다. 즉 <strong><code>i</code>가 <code>hi</code>보다 클 수도 있다</strong>.</li><li><code>i</code>와 <code>j</code>가 범위를 벗어날 수 있기 때문에 범위를 벗어난 직후에 유효성을 체크하도록 한다. 이는 아래 코드로 설명될 수 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>while (++i &lt;= hi) { // 우선 i를 증감시키고, 그 다음 hi보다 작거나 같은지 검사
    // 중략
}
while (--j >= lo) { // 우선 j를 가감시키고, 그 다음 lo보다 크거나 같은지 검사
    // 중략
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>또한 해당 루프의 종료 조건은 무조건 다음과 같아야 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 중략 */

// 비교 실시
int cmp = strcmp(a&#91;i], a&#91;lo]);
			
// a&#91;i] &lt; a&#91;lo] 일 때에는 아무것도 하지 않는다.
// a&#91;i] > a&#91;lo] 이면 a&#91;i]와 a&#91;j]를 바꿀 준비를 해야 한다.
if (cmp > 0 ) break;  

/* 중략 */

int cmp = strcmp(a&#91;lo], a&#91;j]);

// a&#91;lo] &lt; a&#91;j] 일 때에는 아무것도 하지 않는다.
// a&#91;lo] > a&#91;j] 이면 a&#91;i]와 a&#91;j]를 바꿀 준비를 해야 한다.
if (cmp > 0) break; 

/* 중략 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>만약 <code>i &lt; j</code>가 된다면 바로 루프를 종료하는 것이 하나의 방법이 아닌가? 불행히도 아니다. 왜냐하면 중복된 키가 아주 많을 수 있기 때문이다. <code>i</code>는 같은 기준값의 오른쪽을 의미하고, <code>j</code>는 왼쪽을 의미한다. <code>i</code>가 이미 오른쪽 끝에 가 있는 상태에서, <code>j</code>도 왼쪽 끝에 도달하기 위해 <code>j</code>는 계속 가감되어야 한다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>같은 값 자리 바꾸기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기본적으로 기준 값과 같다면, <code>a[p]</code>와 <code>a[i]</code>를 바꿔주면 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자리바꿈이 중복이 되면 안 된다. 우선 키를 움직이고 비교를 하기 때문에 이미 검사한 항목이 다시 자리바꿈될 여지가 있다. 예를 들어 <strong>중복 없는 최하위 값</strong>을 보면 비교 값이 이미 최하위 값이기 때문에 <code>i</code>는 바로 앞에서 멈추어 버리고 <code>j</code>는 위에서 쏜살같이 내려온다. 이윽고 <code>j</code>가 첫번째에 도달했을 때, <code>j</code>가 오른쪽 첫째와 왼쪽 첫째를 바꾸어버린다면, 감시망에 공백이 생긴다. <code>p</code> 미만의 요소들은 무조건 기준 값과 같아야 하는데 그렇지 않게 된 것이다! 이를 위해 자리를 바꾸기 위한 조건으로 <code>i &lt; j</code> 를 추가하였다. 아래 코드에서 확인할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 중략 */

// a&#91;i] == a&#91;lo] 이고, j가 먼저 검사를 안했다면 a&#91;i]와 a&#91;p++]를 교환한다.
else if (cmp == 0 &amp;&amp; i &lt; j) exch(a, i, p++); 

/* 중략 */

// a&#91;lo] == a&#91;j] 이고, i가 먼저 검사를 안했다면 a&#91;j]와 a&#91;q--]를 교환한다.
else if (cmp == 0 &amp;&amp; i &lt; j) exch(a, j, q--);

/* 중략 */</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>같은 값 제 위치로 이동하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>모든 루프가 끝났다면 <code>j</code>가 <code>i</code>보다 작아지게 된다. 그리고  <code>p ~ q</code>의 값들은 전부 기준 값이 된다. 이제 <code>lo ~ p-1</code>의 영역을 <code>j</code>에서부터 채워나가면 되고, <code>q+1 ~ hi</code>의 영역을 <code>i</code>에서부터 채워나가면 된다. 갑자기 교차가 되서 헷갈릴 수 있지만 그림을 계속 보면서 이해하려고 하면 천천히 이해된다...! <code>i</code>와 <code>j</code>는 범위 밖을 나가있을 수도 있지만 상관 없는 이유는 후술한다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>옮겨야 하는 개수를 최적화하기 위해 왼쪽 및 오른쪽에서 같은 값의 개수와 교체 횟수를 분리시킨다. 무슨 뜻이냐면, 예를 들어 <code>8 8 8 8 8 8 2 3</code> 의 배열과 <code>8 8 2 3 4 5 6 7 </code> 을 비교하면 <code>8</code>의 개수는 차이가 나지만, 옮겨야 하는 건 양쪽 끝 2개 끼리만 교체하면 된다는 사실을 알 수 있다. 옮겨야 하는 횟수인 <code>leftmove</code>와 <code>rightmove</code>를 우선 구한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 중략 */

int left_same_count = p - lo;
int right_same_count = hi - q;
int leftmove = min(j - p + 1, left_same_count);
int rightmove = min(q - i + 1, right_same_count);

/* 중략 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이후에 차례대로 바꾼다. 바꿔야 하는 횟수가 남아있음에도 바꾸면 안 되는 상황이 있다. 바로 모든 값이 같은 상황인 <strong>중복 두개</strong>를 살펴보자. 이 때에는 <code>j</code>가 <code>lo</code>보다 작은 상황이고, <code>leftmove</code>도 <code>2</code>로 계산된다.<strong> 중복 없는 최하위</strong> 값인 상황도 <code>j</code>는 <code>lo</code>보다 작고 <code>leftmove</code>는 <code>1</code>이다. 이런 상황에서는 교체하면 안 된다. <code>i</code>의 경우에는 이런 상황은 오지 않지만 똑같이 마음 편하게 <code>while</code>에 조건을 추가해주자. 그 다음 <code>i</code>와 <code>j</code>를 적절하게 이동시킨다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>int mj = j, mi = i;

while (leftmove-- > 0 &amp;&amp; mj >= lo) exch(a, lo + leftmove, mj--);
while (rightmove-- > 0 &amp;&amp; mi &lt;= hi) exch(a, hi - rightmove, mi++);

j -= left_same_count;
i += right_same_count;</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>재귀적으로 정렬 반복하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 <code>j+1 ~ i-1</code> 위치에 있는 값들은 평생동안 변하지 않는다! <code>lo ~ j</code>와 <code>i ~ hi</code> 부분에 대해서 다시 정렬해주자. <code>j</code>와 <code>i</code>가 범위를 벗어났다고 해서 걱정할 필요 없다. 바로 아래에서 살펴보듯이 정렬 함수가 본격적으로 실행하기 전에 유효범위를 체크하기 때문이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>quick_fast3way_sort(a, lo, j);
quick_fast3way_sort(a, i, hi);</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>종료</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>종료는 간단하다. 범위가 유효하지 않다면 바로 <code>return</code> 하여 함수를 종료시키면 된다. 이 코드는 정렬 함수의 제일 앞부분에 놓도록 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 중략 */

if (lo >= hi) return;

/* 중략 */</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>직접 만들었는데 힘들었다. 다음은 결과가 나왔다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>... 중략
your your your your your your your your your your your your your your your 
your your your your your your your your your your your your your your your 
your your your your your your your your your your your your your your your 
your your your your your your your your your your your your your your your 
your your your your your your your your your your your your your your your 
your your your your your your your your your your your youre youre youre 
youre youre youre youre youre youre youre yourn yourn yours yours yours 
yours yours yours yours yours yours yours yours yours yours yours yours 
yours yourself yourself yourself yourself yourself yourself yourself 
yourself yourself yourself yourself yourself yourself yourself yourself 
yourself yourself yourself yourself yourself yourself yourself yourself 
yourself yourself yourself yourself yourself yourself yourself yourself 
yourself yourself yourself yourself yourself yourself yourself yourself 
yourself yourselfflung yourselfthat yourselves yourselves yourselves youth 
youth youth youth youth youth youth youth youth youthful youthful youthful 
youthfulness youths youties youunder youve youve youve youve youve youve 
youve zealous zealous

정렬에 1198 밀리초가 소요되었습니다.
count: 135643</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>대략 13만개가 넘는 단어들을 정렬하는 데 1초가 좀 더 걸렸다. 빠른 건진 잘 모르겠다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>바깥 고리</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://gitlab.com/EzKorry/algorithm-learn">프로젝트</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1644</wp:post_id>
		<wp:post_date><![CDATA[2020-04-23 08:55:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-22 23:55:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-23 12:18:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-23 03:18:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-%eb%b9%a0%eb%a5%b8-%ec%82%bc%ec%a4%91-%eb%b6%84%ed%95%a0-%ed%80%b5-%ec%a0%95%eb%a0%ac-%ea%b5%ac%ed%98%84%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c"><![CDATA[c]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[알고리즘]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 실습 - 원카드 게임 만들기 (3) (작성중)]]></title>
		<link>https://elvanov.com/1688</link>
		<pubDate>Thu, 23 Apr 2020 21:54:24 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1688</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>이번 시간이 원카드 게임 만들기의 마지막 시간입니다. 이번 시간에는 다음 4가지를 구현하며 완성시키도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>입력을 개선합니다. 현재 상황에서는 올바르지 않은 입력을 했을 시 에러를 뿜으며 프로그램이 종료되지만, 이제는 제대로된 입력을 하라고 메시지를 띄우며 다시 입력받도록 합니다.</li><li>낼 수 있는 카드가 있어도 먹는 행동을 구현하겠습니다. 먹는 행동은 충분히 전략적으로 이용할 수 있기 때문이죠. <code>0</code>을 입력하면 카드를 먹도록 하겠습니다.</li><li>컴퓨터를 여러 명 추가하여 여러 명이서 게임을 할 수 있도록 해봅시다.</li><li>7, J, Q, K 등의 특수 카드를 구현합니다. </li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>입력 개선하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지난 시간에 이은 코드를 그대로 실행해보도록 하겠습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>:: last put card ::  &#91;&#91;&#91;&#91;♥5]
:: player's hand ::  &#91;♣5] &#91;♣3] &#91;◆6] &#91;♥6] &#91;♥Q] &#91;♠J] &#91;♠7]
::   available   ::  &#91;♣5] &#91;♥6] &#91;♥Q]
------------------------------
&#91;  1] 플레이어의 차례입니다.
------------------------------
몇 번째 카드를 내시겠습니까?4
Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 190, in &lt;module>
    if turn(player, False):
  File "c:/Users/tooth/Desktop/test2.py", line 123, in turn    
    selected = available&#91;i]
IndexError: list index out of range</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 상황에서는 <code>[♣5] [♥6] [♥Q]</code>를 낼 수 있기 때문에 1~3의 입력이 들어와야 합니다. 하지만 <code>4</code>를 입력하게 되면 <code>IndexError</code>를 내뿜으며 프로그램이 종료됩니다. 만약 숫자가 아닌 그냥 문자를 입력하게 되면 어떻게 될까요? 이 또한 마찬가지로 에러를 내뿜게 되겠지요. 우리는 아래 수정할 코드를 보다시피, 입력 값을 곧바로 <code>int()</code>에 넣고 있는데, 여기에 숫자가 아닌 문자열이 들어가면 바로 <code>ValueError</code>를 일으킵니다. 이렇듯 잘못된 입력이 들어왔을 때 친절하게 메시지를띄워주고 다시 입력하도록 로직을 변경하려고 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 한번 순서도를 짜볼까요? 우선 <code>카드를 낼 수 있다!</code> 부터 시작하여 <code>해당하는 카드를 뽑는다.</code> 를 끝으로 하는 순서도입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\no[카드를 낼 수 있다!] \u002d\u002d\u003e a\na[입력을 받는다] \u002d\u002d\u003e b{입력이\u003cbr\u003e숫자인가?}\nb \u002d\u002d\u003e |Yes|c{입력이\u003cbr\u003e범위 내인가?}\nc \u002d\u002d\u003e |Yes|d[해당하는 카드를 뽑는다.]\nb \u002d\u002d\u003e |No|a\nc \u002d\u002d\u003e |No|a\n```\n*조건에 맞게 카드를 뽑기*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
o[카드를 낼 수 있다!] --&gt; a
a[입력을 받는다] --&gt; b{입력이&lt;br&gt;숫자인가?}
b --&gt; |Yes|c{입력이&lt;br&gt;범위 내인가?}
c --&gt; |Yes|d[해당하는 카드를 뽑는다.]
b --&gt; |No|a
c --&gt; |No|a
</code></pre>
<p><em>조건에 맞게 카드를 뽑기</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>범위 내인지 아닌지 체크하는 코드를 먼저 한번 생각해봅시다. 아마 <code>i</code>와 <code>len(available)</code>을 비교하면 될 것 같은데, 사실 비교가 가능하려면 둘 다 숫자형이어야 하기 때문에 입력이 숫자인지 아닌지부터 판별하는 절차를 먼저 밟았습니다. 어쨌건 지난 시간에 공격 메커니즘을 짰을 때보다 훨씬 간단해 보이는군요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 반복을 해야겠습니다. 사용자가 계속해서 올바르지 않은 입력을 할 가능성이 있으니까요. 그렇다면 조건을 어떻게 해야 할까요? 우리는 루프를 끝내는 조건이 명확하게 딱 변수 하나로 정할 수 없습니다. 숫자인지 판별한 다음 범위내에 있는지도 판별해야 하니 그 과정이 다소 길다 할 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>그렇다면 <code>while True:</code>로 해놓고 적당한 시점에 <code>break</code>를 하여 입력값이 올바르다는 것을 보증하면 되지 않을까요? 그렇다면 아래 두 가지 순서도로 할 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\naa[\u0022시작 (1안)\u0022]\u002d\u002d\u003ea\na{while True:}\na\u002d\u002d\u003e|무조건 True|b[입력을 받는다.]\nb\u002d\u002d\u003ec{숫자가 아닌가?\u003cbr\u003e아니면 범위에\u003cbr\u003e벗어났나?}\nc\u002d\u002d\u003e|Yes|d[잘못된 원인을 알려주고 continue]\u002d\u002d\u003ea\nc\u002d\u002d\u003e|No|e[항목을 뽑아내고\u003cbr\u003ebreak하여 \u003cbr\u003e루프를 끝냄.]\ne\u002d\u002d\u003ef[계속 진행]\n```\n*`continue`와 `break`를 이용하는 방법*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
aa[&quot;시작 (1안)&quot;]--&gt;a
a{while True:}
a--&gt;|무조건 True|b[입력을 받는다.]
b--&gt;c{숫자가 아닌가?&lt;br&gt;아니면 범위에&lt;br&gt;벗어났나?}
c--&gt;|Yes|d[잘못된 원인을 알려주고 continue]--&gt;a
c--&gt;|No|e[항목을 뽑아내고&lt;br&gt;break하여 &lt;br&gt;루프를 끝냄.]
e--&gt;f[계속 진행]
</code></pre>
<p><em><code>continue</code>와 <code>break</code>를 이용하는 방법</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"```mermaid-execute\ngraph TD\naa[\u0022시작 (2안)\u0022]\u002d\u002d\u003ea\na{while True:}\na\u002d\u002d\u003e|무조건 True|b[입력을 받는다.]\nb\u002d\u002d\u003ec{숫자인가?\u003cbr\u003e 그리고 범위\u003cbr\u003e내인가?}\nc\u002d\u002d\u003e|Yes|d[항목을 뽑아내고 break]\u002d\u002d\u003ef[계속 진행]\nc\u002d\u002d\u003e|No|e[잘못된 원인을 알려준다\u003cbr\u003e루프의 끝]\ne\u002d\u002d\u003ea\n```\n*`break` 만을 이용하는 방법*"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-mermaid-execute">graph TD
aa[&quot;시작 (2안)&quot;]--&gt;a
a{while True:}
a--&gt;|무조건 True|b[입력을 받는다.]
b--&gt;c{숫자인가?&lt;br&gt; 그리고 범위&lt;br&gt;내인가?}
c--&gt;|Yes|d[항목을 뽑아내고 break]--&gt;f[계속 진행]
c--&gt;|No|e[잘못된 원인을 알려준다&lt;br&gt;루프의 끝]
e--&gt;a
</code></pre>
<p><em><code>break</code> 만을 이용하는 방법</em></p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>천천히 화살표를 따라가다 보면 논리적으로 이해할 수 있으실 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 이것을 코드로 옮겨봅시다. 우선 대략적인 구조를 먼저 짜보도록 합시다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># 1번째 안
while True:
    if 올바른가?:
        입력값이 올바를 때 처리
        break
    입력값이 올바르지 않을 때 처리

# 2번째 안
while True:
    if 올바르지 않은가?:
        입력값이 올바르지 않을 때 처리
        continue
    입력값이 올바를 때 처리
    break</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>문자열이 숫자인지 아닌지 판별하는 방법</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 조건을 생각해봅시다. 어떻게 <strong>문자열이 숫자인지 아닌지 판별</strong>할 수 있을까요? 당장 드는 생각은, <span style="text-decoration: underline;">문자열을 처음부터 검사하여 하나라도 <code>0</code>에서 <code>9</code>까지가 아닌 숫자가 나온다면, 숫자가 아니라고 판별해버리는 것</span>입니다. 아래 코드는 완전히 새로운 임시 파이썬 파일을 만들어, 독자적으로 구현해보았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = input()
is_number = False
for c in i:
    if c not in "0123456789":
        break
else:
    is_number = True

print(is_number)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(1번째 실행)
3
True

(2번째 실행)
2r
False

(3번째 실행)
12312314578768769
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드를 총 3번 실행시켜서 기능을 테스트해보니 만족할 만 합니다. 문자열과 아닌 것을 구분을 잘 하네요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>눈물겹게 기능을 하나하나 구현하고 있습니다. 하지만, <strong>문자열로 들어온 입력 값이 숫자인지 아닌지 판별하는 문제는 아마 코딩을 시작하는 인구의 99%가 겪었을 문제</strong>일 것입니다. <span style="text-decoration: underline;">아주 흔한 상황에서 쓰이는 도구들은 누군가가 만들어놓았을 가능성</span>이 높습니다. 실제로 파이썬에는 이 문제를 효율적으로 해결해주는 도구를 제공합니다. 물론 처음이니까 어떻게 쓰는지 모르는 건 당연합니다. 한번 검색해봅시다. 대충 검색해보셔도 됩니다!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1923,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/05/캡처.png" alt="" class="wp-image-1923"/><figcaption><code>파이썬 문자열 숫자 판별</code>이라고 구글에 검색한 모습</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>오.. 정말로 있군요!! 여러 개의 글을 살펴보니 <code>.isdigit()</code>이 우리의 목적에 부합합니다. 문자열의 메소드인 <code>isdigit</code>을 호출하면 그 문자열이 우리가 흔히 아는 숫자라면 <code>True</code>를 반환하고, 아니라면 <code>False</code>를 반환합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>한번 더 실험을 해봅시다. 이것도 마찬가지로 그냥 독자적인 파일입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = input()
print(i.isdigit())</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>(1번째 실행)
3
True

(2번째 실행)
2r
False

(3번째 실행)
12312314578768769
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>오! 정말로 잘 작동합니다. 어쨌든 여기까지 하고, <strong><span style="text-decoration: underline;">최종적인 입력 개선 구현으로 가기 전에, 한번 스스로의 힘으로 코딩하여 완성해보도록 합시다.</span></strong> 스스로 코딩해야 실력이 늡니다. 정말 애를 써도 무엇이 잘못되었는지 모르겠다면 아래 최종 구현으로 넘어가주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>최종 구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 정말로 코드로 작성해보도록 합시다. 아까 만들었던 두 가지 순서도를 기억해주세요. 바로 아래에 코드는 원래 작성되어 있던 부분입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = int(input("몇 번째 카드를 내시겠습니까?"))
i -= 1
selected = available&#91;i]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 부분을 다음과 같이 수정해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># 1안
while True:
    i = input("몇 번째 카드를 내시겠습니까?")
    if not i.isdigit():
        print_message("숫자를 입력해주세요.")
        continue
    i = int(i) - 1
    if i >= len(available):
        print_message("범위 내 숫자를 입력해주세요.")
        continue
    selected = available&#91;i]
    break

# 2안
while True:
    i = input("몇 번째 카드를 내시겠습니까?")
    if i.isdigit():
        i = int(i) - 1
        if i &lt; len(available):
            selected = available&#91;i]
            break
        else:
            print_message("범위 내 숫자를 입력해주세요.")
    else:
        print_message("숫자를 입력해주세요.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>:: last put card ::  &#91;&#91;&#91;&#91;◆A]
:: player's hand ::  &#91;♣10] &#91;♥Q] &#91;♣A] &#91;♣5] &#91;♣8] &#91;◆Q] &#91;◆9]
::   available   ::  &#91;♣A] &#91;◆Q] &#91;◆9]
------------------------------
&#91;  1] 플레이어의 차례입니다.
&#91;  2] 범위 내 숫자를 입력해주세요.
&#91;  3] 숫자를 입력해주세요.
------------------------------
몇 번째 카드를 내시겠습니까?</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 예제에서는 <code>4</code>과 <code>a</code>를 차례로 입력했습니다. <code>4</code>는 범위를 벗어났고, <code>a</code>는 숫자 자체가 아닙니다. 의도한 대로 잘 동작한다는 것을 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>어떤 기능을 구현할 때 쓸 수 있는 방법은 굉장히 많습니다. 명쾌한 정답 하나가 있는 상황은 생각보다 흔하지 않습니다. 하지만 <strong>생각해낸 대로 구현한다는 경험</strong>은 중요하기에, 우리가 생각했던 두 가지 방법을 모두 구현해보았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>둘 중 하나만 선택한다 하면 저는 1안입니다. 왜냐하면 <strong>조건에 맞지 않는 부분과 조건에 부합하는 부분이 더 명확하게 구분되어 있기 때문입니다.</strong> 특히 <code>break</code> 만을 사용한 2안 구현에서는 <code>if i.isdigit():</code>와 <code>print_message("숫자를 입력해주세요.")</code>가 멀리 떨어져있지만, <strong>1안에서는 <code>if not i.isdigit():</code>와 <code>print_message("숫자를 입력해주세요.")</code>가 딱 붙어있어 상대적으로 더 읽기 편합니다.</strong> 이건 저의 선택인 것이고, <span style="text-decoration: underline;">여러분들은 여러분들이 편한 방법대로 하시면 되겠습니다.</span> 이를테면 <code>while</code> 문 전체를 통째로 함수로 만들어 분리시키는 방법도 아주 좋을 것 같습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다음 구현은 1안을 구현한 상태로 진행하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>낼 수 있는 카드가 있어도 먹는 행동 구현</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>기능 정의</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>낼 수 있는 카드가 있음에도 의도적으로 먹는 행위는 원카드에서 금지되지 않습니다. 들고 있는 패가 아주 많은데 공격 카드가 몇 개 없다면, 공격 카드를 아끼기 위해 그냥 덱에 있는 카드 하나를 먹을 수도 있습니다. 이러한 전략적 행동을 구현해보도록 합시다. 우선 기능을 다음과 같이 정의합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>카드를 낼 수 있어도, 0이 입력된다면 카드를 먹는다.</strong></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>카드를 낼지 말지 결정하는 순간은 카드를 선택하는 순간입니다. 그러므로 "카드를 안낸다"라는 의사 표현을 하기 위해서 약속된 예외 입력을 새로 만들어야 합니다.여기서는 <code>0</code>으로 정했습니다. <code>0</code>이 입력되든 무엇이 입력되든 상관이 없겠습니다만, 단순히 선택하지 않겠다는 간략한 의미를 나타나기 위해 <code>0</code>을 사용했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>문제 인식</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자, 이제 무엇을 어떻게 수정해야 할까요? 막막합니다. 우선 지금까지 작성되어있는 코드에서, <strong>언제 내고 언제 먹는지</strong>를 다시 한번 살펴봅시다. 이는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><span style="text-decoration: underline;">낼 수 있는 카드가 있다면? <strong>⇒ </strong>무조건 낸다.</span></li><li>낼 수 있는 카드가 없다면?<strong> ⇒ </strong>먹는다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>밑줄 쳐져있는 부분을 확장해야 합니다. 그래서 다음과 같이 수정해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><span style="text-decoration: underline;">낼 수 있는 카드가 있는데 먹고 싶다면? <strong>⇒</strong> 먹는다.</span></li><li><span style="text-decoration: underline;">낼 수 있는 카드가 있고, 카드를 내고 싶다면? <strong>⇒</strong> 낸다.</span></li><li>낼 수 있는 카드가 없다면? <strong>⇒</strong> 먹는다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>좋긴 합니다만, 이렇게 된다면 한가지 치명적인 단점이 생깁니다. 우리는 입력이 <code>0</code>인지 아닌지 판단하는 것은 <code>if</code>로 쉽게 할 수 있습니다만, 그 분기에서 카드를 먹는 행위를 작성한다면 코드가 <strong>상당히 중복되어져 버립니다</strong>! 게다가 <strong>예상하지 못한 오류까지 </strong>발생할 수 있네요! 다음 코드에서 주석이 달린 부분을 면밀하게 살펴보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># ---------------- 카드 고르기 ---------------
is_available = len(available) > 0
if is_available: # 낼 수 있는 카드가 있을 때
    if isComputer:
        selected = random.choice(available)
    else:
        while True:
            i = input("몇 번째 카드를 내시겠습니까?")
            ### (중략) ###
            if i == 0 : # 카드 먹는 걸 선택하는 건지 판단 (예시)
                # -------------- 카드 먹기? ------------- ##b_1##
                print_message(f'{name}가 낼 수 있는 카드가 없어 {damage}장 먹습니다.')
                if not isComputer:
                    input("계속 하려면 엔터를 누르세요")
                is_attack = False
                for i in range(damage):
                    draw(hand)
                damage = 1
                break
            selected = available&#91;i]
            break
    hand.remove(selected) # 카드를 그냥 먹는 경우에는 오류!  ##b_2##
    put.append(selected) # 카드를 그냥 먹는 경우에는 오류!
    ### (공격 카드 처리 중략) ###
else: # 낼 수 있는 카드가 없을때
# -------------- 카드 먹기? -------------
    print_message(f'{name}가 낼 수 있는 카드가 없어 {damage}장 먹습니다.')
    if not isComputer:
        input("계속 하려면 엔터를 누르세요")
    is_attack = False
    for i in range(damage):
        draw(hand)
    damage = 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"fontSize":"small"} -->
<p class="has-small-font-size"><em>(이 코드는 잘못된 코드이므로 독자들이 코드를 구현하여 결과를 확인할 필요는 없습니다.)</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일단 코드가 훨씬 못생겨집니다. <a href="#b_1"><code>카드 먹기?</code> 부분</a>의 대략 7줄 부분이 중복 코드로 생겨버립니다. 중복된 코드는 보기 불편한 걸 넘어서서 코드를 이해하기도, 수정하기도 힘들게 합니다. 당장 성급하게 <code>0</code>을 입력했다고 해서 바로 카드를 먹으면 안될 것 같습니다. 공통적으로 적용할 수 있는 솔루션이 필요합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 더욱 중대한 오류가 있습니다. 카드를 고르는 <code>if is_avilable:</code> 블록 내부의 거의 마지막에, <a href="#b_2"><code>hand.remove(selected)</code>와 <code>put.append(selected)</code>가 등장하는 부분을 주목</a>해주세요. 이 부분에 다다르면, <strong>우리는 <code>selected</code>가 무조건 어떤 카드로 선택되어있다고 간주합니다. 하지만, 우리는 카드를 선택하지 않는다는 선택은 구현해놓지 않았습니다! </strong>위 프로그램을 그대로 실행하여 <code>0</code>을 입력한다 했을 때 다음 결과를 볼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>:: last put card ::  &#91;&#91;&#91;&#91;♣5]
:: player's hand ::  &#91;♠3] &#91;♣K] &#91;♠K] &#91;♣9] &#91;♣Q] &#91;◆3] &#91;♣J]
::   available   ::  &#91;♣K] &#91;♣9] &#91;♣Q] &#91;♣J]
------------------------------
&#91;  1] 플레이어의 차례입니다.
&#91;  2] 플레이어가 낼 수 있는 카드가 없어 1장 먹습니다.
------------------------------
계속 하려면 엔터를 누르세요
Traceback (most recent call last):
  File "c:/Users/tooth/Desktop/test2.py", line 208, in &lt;module>
    if turn(player, False):
  File "c:/Users/tooth/Desktop/test2.py", line 142, in turn
    hand.remove(selected) # 카드를 고르지 않고 먹는다고 했을때, 오류!    
UnboundLocalError: local variable 'selected' referenced before assignment</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p> 카드를 선택하지 않고 그냥 먹는다면 <code>selected</code>는 <code>None</code>이 되어 삭제도 못하고 추가도 못하고 프로그램은 에러를 내뿜으며 죽습니다. 이렇게 꼬여버린 상황을 어떻게 타개할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>문제를 나누기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음과 같이 구현하고 싶다고 했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong><span style="text-decoration: underline;">낼 수 있는 카드가 있는데 먹고 싶다면? ⇒ 먹는다.</span></strong></li><li>낼 수 있는 카드가 있고, 카드를 내고 싶다면? <strong>⇒</strong> 낸다.</li><li>낼 수 있는 카드가 없다면? <strong>⇒</strong> 먹는다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그리고, 굵게 밑줄 친 부분이 문제의 암덩어리라고 했습니다. 코드 중복과 에러가 발생합니다. 우리는 카드를 선택하고, 내고, 먹는 부분을 일일히 나눠야 합니다. 이번 절에서의 가장 핵심 내용입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>낼 수 있는 카드가 있는데 카드를 내고 싶다면? <strong>⇒</strong> <span class="has-inline-color has-vivid-cyan-blue-color"><strong>카드를 선택해둔다.</strong></span></li><li>0을 입력한다면 ? <strong>⇒</strong> <span class="has-inline-color has-vivid-red-color"><strong>선택해둔 카드는 없다.</strong></span></li><li>낼 수 있는 카드가 없다면? <strong>⇒</strong> <span class="has-inline-color has-vivid-red-color"><strong>선택하둔 카드는 없다.</strong></span></li><li><span class="has-inline-color has-vivid-cyan-blue-color"><strong>선택해둔 카드가 있다</strong></span>면? <strong>⇒</strong> <strong><span style="text-decoration: underline;">카드를 낸다.</span></strong></li><li><span class="has-inline-color has-vivid-red-color"><strong>선택해둔 카드가 없다</strong></span>면? <strong>⇒ <span style="text-decoration: underline;">먹는다.</span></strong></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>최종 구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>좋습니다. 이제 코드를 작성해봅시다. 카드를 내는 부분은 선택을 완전히 완료한 뒤에 내므로, 코드를 통째로 옮겨야 합니다. 시작은 카드를 선택하는 부분부터 입니다. 아래 코드를 참조해주세요! <a href="#a_3">## 3 ##</a> 등의 링크를 클릭하면 설명으로 이동합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># ----------- 카드 선택하기 ---------------------
selected = None ##a_1##
is_available = len(available) > 0
if is_available:
    if isComputer:
        selected = random.choice(available)
    else:
        while True:
            i = input("몇 번째 카드를 내시겠습니까? "
                "카드를 먹고 싶다면 0을 눌러주세요.") ##a_2##
            if not i.isdigit():
                print_message("숫자를 입력해주세요.")
                continue
            i = int(i) - 1
            if i >= len(available):
                print_message("범위 내 숫자를 입력해주세요.")
                continue
            if i != -1: ##a_3##
                selected = available&#91;i]
            break
else: ##a_4##
    print_message(f'{name}가 낼 수 있는 카드가 없습니다.') 

# ------------선택한 카드 내기 ----------------------- #
if selected is not None: ##a_5##
    hand.remove(selected)
    put.append(selected)

    if is_attack_card(selected):
        if not is_attack:
            damage = get_damage(selected)
        else:
            damage += get_damage(selected)

        is_attack = True

    print_message(f'{name}가 {selected}를 냈습니다."') 

# ------------ 카드 먹기 -----------------------
else: ##a_6##
    print_message(f'{name}가 {damage}장 먹습니다.')  ##a_7##
    if not isComputer:
        input("계속 하려면 엔터를 누르세요")
    is_attack = False
    for i in range(damage):
        draw(hand)
    damage = 1</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><em>a_1</em>(1.) <code>selected</code> 정의</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 <code>is_available</code>를 정의할 때 같이 <code>selected</code>를 <code>None</code>으로 정의해둡니다. <code>selected</code>를 미리 정의해둔 이유는, 추후 카드를 선택하려고 했을 때, 먹는다는 선택이면 <code>selected</code>에 아무런 행동도 안함으로써 <code>None</code>으로 남아있도록 하기 위함입니다. <code>selected</code>를 미리 정의해놓지 않으면 <code>selected</code>에 접근하려는 시도조차 실패하여 에러가 뜹니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_2</em>(2.) 입력 메시지 변경</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>input</code>의 메시지를 바꾸어줍니다. 0을 입력하게 되면 아무런 선택도 하지 않고 먹는다는 걸 명시합니다. 참고로, 단순한 문자열 리터럴이 이어져있으면 하나의 문자열로 인식합니다. 그래서 위와 같이 줄 하나가 너무 길어질 때 저렇게 줄을 구분하여 작성할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_3</em>(3.) 먹는다는 선택을 인식</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>i</code>를 판별하여 먹는다는 선택을 인식합니다. <code>0</code>이 아닌 <code>-1</code>과 비교한 이유는 우리가 입력값을 보정할 때 <code>i = int(i) - 1</code>를 하기 때문입니다. 만약 사용자가 <code>0</code>을 입력했다면 최종적으로는 <code>-1</code>이 됩니다. 만약 어떤 카드를 정말로 선택했다면, 거기에 대해서 <code>selected</code>에 선택한 카드를 설정합니다. 어떠한 카드도 선택하지 않았다면, 아무런 행동도 하지 않습니다. 왜냐하면 처음부터 <code>selected</code>는 <code>None</code>이었으니까요. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_4</em>(4.) 출력 메시지 변경 (1)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>여기는 <code>if is_available:</code> 절에 이은 <code>else</code> 절이므로 낼 수 있는 카드 자체가 없는 상황입니다. 낼 수 있는 카드가 없다고 메시지를 추가해줍시다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_5</em>(5.) 카드 내기 통째로 이동</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>카드를 내는 부분입니다. <span style="text-decoration: underline;"><strong>카드 선택에 바짝 붙어있었던 카드 내기를 통째로 떨구어 놓았습니다</strong>.</span> 이제 <code>selected</code>가 있는 경우에만 카드를 낼 수 있도록 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_6</em>(6.) 카드 먹기 부분</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>카드를 먹는 부분입니다. <code>selected</code>가 <code>None</code>일 경우에만 카드를 먹도록 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>a_7</em>(7.) 출력 메시지 변경 (2)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기존에는 무조건 카드를 낼 수 없어서 먹었는데, 이제는 플레이어가 원해서 카드를 먹을 수도 있으므로, 단순히 카드 몇 장 먹었다 하도록 메시지를 수정하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중간 정리</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금까지 작성한 전체 코드는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>-expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>import random
import os

# 가능한 카드 리스트를 반환
def getAvailable(hand, last_card, is_attack):
    available = &#91;]
    if not is_attack and last_card&#91;0] == 'Joker':
        available.extend(hand)
        return available

    for card in hand:
        if card&#91;0] == 'Joker':
            available.append(card)

        elif (card&#91;0] != last_card&#91;0]
              and card&#91;1] != last_card&#91;1]):
            continue

        elif is_attack:
            if get_damage(card) >= get_damage(last_card):
                available.append(card)
        else:
            available.append(card)

    return available

is_attack = False
damage = 1

def is_attack_card(card):
    return card&#91;0] == 'Joker' or card&#91;1] in &#91;'A', '2']

damage_map = {
    'colored': 15,
    'black': 10,
    'A': 3,
    '2': 2
}

def get_damage(card):
    global damage_map
    return damage_map.get(card&#91;1], 0)

def draw(hand):
    global put, deck

    hand.append(deck.pop())

    if len(deck) == 0:
        print("카드를 다시 섞습니다!")
        last_card = put.pop()
        random.shuffle(put)
        put, deck = deck, put
        put.append(last_card)

def card_str(card):
    return f'&#91;{card&#91;0]}{card&#91;1]}]'

def hand_str(hand):
    return " ".join(map(card_str, hand))

message_count = 0
messages = &#91;]

def print_message(message):
    global put, deck, player, is_attack, messages, message_count
    os.system("cls")

    output = &#91;]
    output.append(f":: last put card ::  &#91;&#91;&#91;{card_str(put&#91;-1])}")
    output.append(f":: player's hand ::  {hand_str(player)}")
    output.append(
        f"::   available   ::  {hand_str(getAvailable(player, put&#91;-1], is_attack))}")
    output.append("-" * 30)

    message_count += 1
    messages.append(message)
    if len(messages) == 16:
        messages.pop(0)
    for i, m in enumerate(messages):
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')
    output.append("-" * 30)

    print("\n".join(output))

def turn(hand, isComputer):

    # 전역 변수 접근
    global put, deck, is_attack, damage

    # 이름 정하기
    if isComputer:
        name = "컴퓨터"
    else:
        name = "플레이어"

    # 차례
    print_message(f'{name}의 차례입니다.')

    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)

    # ----------- 선택지 고르기 --------------------- 
    selected = None 
    is_available = len(available) > 0
    if is_available:
        if isComputer:
            selected = random.choice(available)
        else:
            while True:
                i = input("몇 번째 카드를 내시겠습니까? "
                    "카드를 먹고 싶다면 0을 눌러주세요.") 
                if not i.isdigit():
                    print_message("숫자를 입력해주세요.")
                    continue
                i = int(i) - 1
                if i >= len(available):
                    print_message("범위 내 숫자를 입력해주세요.")
                    continue
                if i != -1: 
                    selected = available&#91;i] 
                break
    else: 
        print_message(f'{name}가 낼 수 있는 카드가 없습니다.') 

    # ------------ 카드 먹기 -----------------------
    if selected is not None: 
        hand.remove(selected)
        put.append(selected)

        if is_attack_card(selected):
            if not is_attack:
                damage = get_damage(selected)
            else:
                damage += get_damage(selected)

            is_attack = True

        print_message(f'{name}가 {selected}를 냈습니다."')

    # ------------선택한 카드 내기 ----------------------- 
    else:
        print_message(f'{name}가 {damage}장 먹습니다.') 
        if not isComputer:
            input("계속 하려면 엔터를 누르세요")
        is_attack = False
        for i in range(damage):
            draw(hand)
        damage = 1

    if len(hand) == 0:
        print_message(f"{name}가 이겼습니다!")
        return True

    else:
        return False

deck = &#91;]

# num과 shape 정의
shapes = '♥♣♠◆'
nums = &#91;]
for i in range(2, 11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어에게 카드 나누기

player = &#91;]
computer = &#91;]

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
while True:

    if turn(player, False):
        break

    if turn(computer, True):
        break</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>-/expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>컴퓨터 여러 명 추가하며 턴 시스템 개선</h2>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>이번 절부터는 클래스에 대한 지식이 필요합니다. 클래스를 쓰지 않고서도 구현할 수 있지만 더 나은 가독성과 유지보수성을 위해 클래스를 사용합니다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>문제 파악</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><span style="text-decoration: underline;">사용자에게 숫자 입력을 받아서 컴퓨터의 수를 조정</span></strong>해본다고 가정해봅시다. 우선은 감이 오지 않으니까 하드코딩으로 한 명을 추가하여 봅시다. 이름은 <code>computer2</code> 로 정합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># 플레이어에게 카드 나누기

player = &#91;]
computer = &#91;]
computer2 = &#91;]

for i in range(7):
    player.append(deck.pop())
    computer.append(deck.pop())
    computer2.append(deck.pop())


# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
while True:

    if turn(player, False):
        break

    if turn(computer, True):
        break

    if turn(computer2, True):
        break</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>반복되는 부분이 보이시나요? 아래 내용은 그 반복되는 내용을 표로 정리한 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|반복되는 부분|설명|\n|\u002d\u002d-|\u002d\u002d-|\n|`player = []`|패를 새롭게 만들어내는 부분|\n|`player.append(deck.pop())`|덱에서 7장을 나눠주는 부분|\n|`if turn(player, False): ... `|턴을 시작하는 부분|"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>반복되는 부분</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>player = []</code></td>
<td>패를 새롭게 만들어내는 부분</td>
</tr>
<tr>
<td><code>player.append(deck.pop())</code></td>
<td>덱에서 7장을 나눠주는 부분</td>
</tr>
<tr>
<td><code>if turn(player, False): ...</code></td>
<td>턴을 시작하는 부분</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>컴퓨터의 수를 유동적으로 갖고가기 위해 <strong>반복되는 부분을 유연하게 바꿀 필요가 있습니다</strong>. 가장 먼저 와닿는 생각은, 플레이어와 컴퓨터를 담는 리스트를 하나 더 만들어서 관리하면 어떨까요? 겉으로 보았을 때에는 중첩 리스트가 되겠네요. 한번 시도해보도록 합시다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>일단 아래 코드는 작성하지 말고 눈으로만 봐주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>com_count = int(input('컴퓨터의 수를 입력해주세요. --> '))
people = &#91;]

# 플레이어 설정
people.append(&#91;])

# 컴퓨터 설정
for i in range(com_count):
    people.append(&#91;])

# 플레이어에게 카드 나누기
for i in range(7):
    for person in people:
        person.append(deck.pop())


# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
while True:
    for person in people:
        if turn(person, ...): ##g_1##
            break ##g_2##</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>people</code> 리스트를 새롭게 정의했습니다. 이 리스트에는 기존의 <code>player</code>와 <code>computer</code> 들이 들어갑니다. 비슷한 것들을 묶음에 따라 플레이어에게 카드를 나눈거나 턴을 진행시킬 때에 <code>for</code>문을 이용해 편하게 반복 작업을 할 수 있게 되었습니다! </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 위 코드에는 두 가지 큰 문제점이 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>g_1</em>(1.) <code>turn</code> 에 넘길 인수가 달라짐</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>플레이어와 컴퓨터는 <code>turn</code> 함수에 들어갈 인수가 다릅니다. 어떤 패가 플레이어의 패인지 컴퓨터의 패인지 확실히 구분짓기 위해 <code>True</code>, <code>False</code>로 나뉘었었는데, 지금 당장은 여기에 넣을 값이 애매합니다. 두개를 분리시켜서 작성해도 되지만 그렇게 하면 통일성이 사라지지요.<span style="text-decoration: underline;"> <strong>플레이어 및 컴퓨터의 패</strong></span><strong>, 그리고 <span style="text-decoration: underline;">컴퓨터인지 여부</span>를 결합시킬 방법이 필요</strong>해집니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 플레이어 및 컴퓨터의 패와 컴퓨터인지 여부를 결합시킬 방법이 필요합니다. 그렇게 해야 <a href="#g_1">게임 진행의 <code>for</code> 문</a>에서 동일한 인터페이스로 <code>turn</code> 함수를 이용할 수 있습니다. 여기에 조금 더 나아가서, 컴퓨터의 이름을 컴퓨터마다 다르게 하기 위해 이름 정보도 추가해보고자 합니다. 즉 이제 새롭게 만들고자 하는 어떤 묶음은 다음 세 가지 정보를 포함해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>화면 상에 나타날 이름인 <code>name</code></li><li>카드를 들고 있는 패인 <code>hand</code></li><li>컴퓨터인지 여부인 <code>is_computer</code></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4><em>g_2</em>(2.) <code>break</code> 가 쓸모 없어짐</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>여기서의 <code>break</code>는 안타깝게도 <code>for</code> 루프에 대응되는 <code>break</code> 입니다. 그래서 만약 어떤 플레이어가 승리하여 <code>turn</code> 함수가 <code>true</code>를 반환하더라도 제일 바깥의 <code>while</code> 문에는 닿지 않기 때문에<strong> 게임이 종료되지 않습니다!</strong> 바로 게임이 종료되도록 <code>exit()</code> 함수를 쓰거나 하는 방법도 있겠지만 그렇게 유용한 작업은 아닙니다. 이를 어떻게 해결해야 할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>중첩된 조건문과 <code>break</code>, 명확하지 않은 <code>turn</code> 반환값 등 문제를 다같이 수정해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="/1972"><code>namedtuple</code>은 튜플의 항목에 이름으로 접근할 수 있도록 만든 것</a>입니다. 플레이어의 정보를 묶어서 관리하기 위해 <code>namedtuple</code>을 이용할 것이기에, 아직 사용법을 모른다면 링크로 들어가셔서 관련 내용을 익히고 와주세요. 그리하여 <code>namedtuple</code>은 아래와 같이 호출될 것이고, <code>Person</code>을 이용해 세 가지 정보를 가지고 있는 객체를 만들 수 있게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>Person = collections.namedtuple('Person', 'name hand is_computer') </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>또한 턴이 넘어가는 구조를 아래와 같이 좀 더 고치도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><span style="text-decoration: underline;"><strong><code>turn</code> 함수에 전달하는 인수를 <code>Person</code> 으로 만든 객체 하나로 제한</strong></span>합니다. 만약 <code>def turn(person):</code> 과 같이 선언되어있다고 가정했을 때, <code>turn</code> 함수 내에서는 <code>person.name</code>, <code>person.hand</code>, <code>person.is_computer</code> 등과 같이 정보에 접근할 수 있습니다.</li><li>특정 플레이어가 이기는지 어떤지 확인하기 위하여 우리는 <code>turn</code> 함수 내에서 <code>hand</code>의 길이를 검사했습니다. 하지만 이 로직을 <strong><span style="text-decoration: underline;"><code>turn</code> 함수 바깥으로 빼와서 무한 루프 내에 구현</span></strong>하도록 하겠습니다. 즉 <strong>이제 <code>turn</code> 함수는 아무것도 반환하지 않습니다.</strong></li><li><strong><span style="text-decoration: underline;">플레이어를 순회하기 위해 <code>for</code> 루프를 쓰지 않습니다. </span></strong>왜냐하면 <code>for</code> 루프는 단 한번만 순회하기 때문에, 잘 동작하는 무한한 순회를 구현하려면 추가 작업이 많아지기 때문입니다. 그리하여 아래와 같은 작업이 필요합니다.<ul><li>인덱스 변수 <code>i</code>를 두어 <code>people[i]</code>와 같이 <code>Person</code> 객체로 직접 접근하도록 합니다. 초기값은 <code>0</code>으로 합니다.</li><li><code>IndexError</code>가 일어나지 않도록 <code>i</code>의 범위를 자동으로 잘 조절하기 위한 장치가 필요합니다.</li><li>매 루프마다 <code>i</code>를 증감시켜줍니다.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 코드를 작성해봅시다. 코드의 가장 기초적인 부분을 바꾸었으므로 고칠 것이 은근히 많아집니다. 우리는 원카드 프로젝트를 진행하면서 게임의 끝과 시작을 제일 먼저 구현했었는데요, 기초가 얼마나 튼튼하게 잘 잡혀져 있냐에 따라 앞으로의 개발이 얼마나 순탄할지가 좌우된다는 점을 깨닫게 되실 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>import collections ##h_1##
# ... 중략 ...

def print_message(message): ##h_2##
    global put, deck, is_attack, messages, message_count, people
    player = people&#91;0].hand

# ... 중략 ...

def turn(player): ##h_3##
    name = player.name
    hand = player.hand
    isComputer = player.is_computer

# ... 중략 ...

    # 삭제 ##h_4##
    # if len(hand) == 0:
    #     print_message(f"{name}가 이겼습니다!")
    #     return True
    # 
    # else:
    #     return False

# ... 중략 ...

# 플레이어 정보를 담는 namedtuple 생성
Person = collections.namedtuple('Person', 'name hand is_computer') ##h_5##
people = &#91;] 

# 플레이어 설정
people.append(Person('플레이어', &#91;], False)) ##h_6##

# 컴퓨터 설정
com_count = int(input('컴퓨터의 수를 입력해주세요. --> '))
for i in range(com_count): 
    people.append(Person(f'컴퓨터{i}', &#91;], True)) 

# 플레이어에게 카드 나누기
for i in range(7):
    for person in people:
        person.hand.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
i = 0 ##h_7##
while True:
    current_person = people&#91;i % len(people)] ##h_8##
    turn(current_person) ##h_9##
    if len(current_person.hand) == 0: ##h_10##
        print_message(f"{current_person.name}가 이겼습니다!")
        break
    i += 1 ##h_11##</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4><em>h_1</em>(1.) <code>namedtuple</code>을 사용하기 위한 <code>import</code></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>collections</code>를 <code>import</code> 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_2</em>(2.) <code>print_message</code> 수정</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>player</code> 전역 변수가 사라졌으므로 플레이어에 해당하는 <code>people[0]</code>을 이용해야 하는데요, 하위 내용을 수정하지 않기 위해 <code>player</code>에 새로 대입해주도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_3</em>(3.) <code>turn</code> 수정</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>Person</code> 객체 하나만 받을 수 있도록 선언부를 수정합니다. 하위 내용을 모두 수정하는 건 귀찮으니 기존에 사용했던 변수인 <code>name</code>, <code>hand</code>, <code>isComputer</code>를 적절하게 대입해주도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_4</em>(4.) 승리 판단 보류</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>누군가 이겼는지 판단하기 위한 코드를 <code>turn</code> 함수 바깥으로 빼내기 위해 삭제합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_5</em>(5.) <code>namedtuple</code>로 <code>Person</code> 클래스 생성</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>새로운 클래스를 정의합니다. <code>Person</code> 으로 만든 객체는 <code>name</code>, <code>hand</code>, <code>is_computer</code> 항목을 지니고 있게 됩니다. 이 <code>Person</code> 객체들을 담고 있을 <code>people</code>이라는 빈 리스트도 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_6</em>(6.) 플레이어 추가</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>플레이어를 추가하기 위한 코드입니다. 플레이어를 만들면서 <code>Person</code> 객체를 만들고 있습니다. 컴퓨터를 추가할 때에도 동일한 방법을 사용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_7</em>(7.) 인덱스 변수 초기화</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>people[i]</code>와 같이 직접 접근하기 위한 인덱스 변수 <code>i</code>를 정의합니다. 이러한 방법은 우리가 초기에 반복문에 대해 배웠을 때와 유사합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_8</em>(8.) 인덱스 값 보정</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>i</code>는 반드시 <code>0</code>에서 <code>len(people)-1</code> 사이에 존재해야 합니다. <code>0</code>이 첫번째 요소를 나타내고 <code>len(people)-1</code> 이 마지막 요소를 나타내기 때문입니다. 이 범위를 넘어가게 되면 <code>IndexError</code>를 일으키며 프로그램은 종료됩니다. (음수 인덱스는 끝에서부터 시작하지만 일단 생각하지 맙시다.) 우리는 매번 <code>if</code>문을 통해 <code>i</code>의 값이 범위 내에 있는지 없는지 체크한 후 값을 보정해줄 수 있지만, 그렇게 되면 더 복잡해집니다. 복잡한 것은 피하는 게 상책입니다. 좋은 방법이 없을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>한 가지 기가 막힌 방법이 있네요. <strong><span style="text-decoration: underline;"><code>i % len(people)</code> 의 값은 <code>0</code> 이상 <code>len(people)-1</code> 사이에 있다는 것이 보장</span></strong>됩니다. <code>i</code>의 값이 아무리 크든, 작든, 심지어 음수이든 이 조건은 충족됩니다. 이를 이용해 <code>people</code>에 직접 접근을 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_9</em>(9.) <code>turn</code> 호출</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>turn</code> 함수는 이제 아무것도 반환하지 않으므로 단순히 호출만 합니다. 그리고 인수를 <code>Person</code> 객체 하나만 받을 수 있도록 설계가 변경되었기 때문에, 그에 따라 <code>current_person</code> 하나만 인수로 넣어주도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_10</em>(10.) 승리 판단 추가</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>current_person</code>으로 현재 플레이어가 턴을 마친 후 승리했는지 안했는지 판단할 수 있습니다. 본래 <code>turn</code> 함수 내에 있었던 내용과 유사합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><em>h_11</em>(11.) 인덱스 증감</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음 플레이어를 나타나게 하기 위해 인덱스 변수 <code>i</code>를 변화시켜줍니다. 단순히 1만 증감해주도록 합니다. 수가 굉장히 커진다고 해도 <code>people</code>에 접근하는 과정에서 보정 과정을 거치므로 별다른 작업을 할 필요는 없습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중간 코드</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>-expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>import random
import os
import collections

# 가능한 카드 리스트를 반환


def getAvailable(hand, last_card, is_attack):
    available = &#91;]
    if not is_attack and last_card&#91;0] == 'Joker':
        available.extend(hand)
        return available

    for card in hand:
        if card&#91;0] == 'Joker':
            available.append(card)

        elif (card&#91;0] != last_card&#91;0]
              and card&#91;1] != last_card&#91;1]):
            continue

        elif is_attack:
            if get_damage(card) >= get_damage(last_card):
                available.append(card)
        else:
            available.append(card)

    return available


is_attack = False
damage = 1


def is_attack_card(card):
    return card&#91;0] == 'Joker' or card&#91;1] in &#91;'A', '2']


damage_map = {
    'colored': 15,
    'black': 10,
    'A': 3,
    '2': 2
}


def get_damage(card):
    global damage_map
    return damage_map.get(card&#91;1], 0)


def draw(hand):

    global put, deck

    hand.append(deck.pop())

    if len(deck) == 0:
        print("카드를 다시 섞습니다!")
        last_card = put.pop()
        random.shuffle(put)
        put, deck = deck, put
        put.append(last_card)


def card_str(card):
    return f'&#91;{card&#91;0]}{card&#91;1]}]'


def hand_str(hand):
    return " ".join(map(card_str, hand))


message_count = 0
messages = &#91;]


def print_message(message):
    global put, deck, is_attack, messages, message_count, people
    player = people&#91;0].hand
    os.system("cls")

    output = &#91;]
    output.append(f":: last put card ::  &#91;&#91;&#91;{card_str(put&#91;-1])}")
    output.append(f":: player's hand ::  {hand_str(player)}")
    output.append(
        f"::   available   ::  {hand_str(getAvailable(player, put&#91;-1], is_attack))}")
    output.append("-" * 30)

    message_count += 1
    messages.append(message)
    if len(messages) == 16:
        messages.pop(0)
    for i, m in enumerate(messages):
        output.append(f'&#91;{message_count - len(messages) + i + 1:>3}] {m}')
    output.append("-" * 30)

    print("\n".join(output))


def turn(person):
    # 전역 변수 접근
    global put, deck, is_attack, damage

    name = person.name
    hand = person.hand
    isComputer = person.is_computer

    # 차례
    print_message(f'{name}의 차례입니다.')

    # ----------- 낼 수 있는 카드 고르기 ---------------
    available = getAvailable(hand, put&#91;-1], is_attack)

    # ----------- 카드 선택하기 ---------------------
    selected = None
    is_available = len(available) > 0
    if is_available:
        if isComputer:
            selected = random.choice(available)
        else:
            while True:
                i = input("몇 번째 카드를 내시겠습니까? "
                          "카드를 먹고 싶다면 0을 눌러주세요.")
                if not i.isdigit():
                    print_message("숫자를 입력해주세요.")
                    continue
                i = int(i) - 1
                if i >= len(available):
                    print_message("범위 내 숫자를 입력해주세요.")
                    continue
                if i != -1:
                    selected = available&#91;i]
                break
    else:
        print_message(f'{name}가 낼 수 있는 카드가 없습니다.')

    # ------------선택한 카드 내기 -----------------------
    if selected is not None:
        hand.remove(selected)
        put.append(selected)

        if is_attack_card(selected):
            if not is_attack:
                damage = get_damage(selected)
            else:
                damage += get_damage(selected)

            is_attack = True

        print_message(f'{name}가 {selected}를 냈습니다."')

    # ------------ 카드 먹기 -----------------------
    else:
        print_message(f'{name}가 {damage}장 먹습니다.')
        if not isComputer:
            input("계속 하려면 엔터를 누르세요")
        is_attack = False
        for i in range(damage):
            draw(hand)
        damage = 1


deck = &#91;]

# num과 shape 정의
shapes = '♥♣♠◆'
nums = &#91;]
for i in range(2, 11):
    nums.append(str(i))
for c in 'JQKA':
    nums.append(c)

# 덱 만들기
for shape in shapes:
    for num in nums:
        deck.append((shape, num))

deck.append(('Joker', 'black'))
deck.append(('Joker', 'colored'))
random.shuffle(deck)

# 플레이어 정보를 담는 namedtuple 생성
Person = collections.namedtuple('Person', 'name hand is_computer')
people = &#91;]

# 플레이어 설정
people.append(Person('플레이어', &#91;], False))

# 컴퓨터 설정
com_count = int(input('컴퓨터의 수를 입력해주세요. --> '))
for i in range(com_count):
    people.append(Person(f'컴퓨터{i}', &#91;], True))

# 플레이어에게 카드 나누기
for i in range(7):
    for person in people:
        person.hand.append(deck.pop())

# 낸 카드에 하나 올려놓기
put = &#91;]
put.append(deck.pop())

# 게임 시작
i = 0
while True:
    current_person = people&#91;i % len(people)]
    turn(current_person)
    if len(current_person.hand) == 0:
        print_message(f"{current_person.name}가 이겼습니다!")
        break
    i += 1
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>-/expandable-</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>각종 특수 카드 구현</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제: 모든 카드를 <code>namedtuple</code>로 변경하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 과제입니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1688</wp:post_id>
		<wp:post_date><![CDATA[2020-04-24 06:54:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-23 21:54:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-29 14:55:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-29 05:55:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%8b%a4%ec%8a%b5-%ec%9b%90%ec%b9%b4%eb%93%9c-%ea%b2%8c%ec%9e%84-%eb%a7%8c%eb%93%a4%ea%b8%b0-3-%ec%9e%91%ec%84%b1%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 슬라이싱 - 리스트 간편하게 접근하기]]></title>
		<link>https://elvanov.com/1705</link>
		<pubDate>Fri, 24 Apr 2020 02:54:27 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1705</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>슬라이스를 사용하는 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 리스트 하나를 만들어봅시다. 아래 리스트는 항목이 총 18개입니다. 인덱스는 <code>0</code>에서 <code>17</code>이겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;1, 2, 23, 48, 5, 66, 7, 8, 9, 10, 14, 12, 18, 45, 19, 1, 5, 3]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다, 이제 이 리스트에서 인덱스 <code>2</code>부터 <code>17</code>까지의 요소를, 3칸 간격으로 뽑아내고 싶습니다. 고전적인 <code>while</code>과 변수 하나를 이용해서 구현을 해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;1, 2, 23, 48, 5, 66, 7, 8, 9, 10, 14, 12, 18, 45, 19, 1, 5, 3]
another_ls = &#91;]
i = 2
while i &lt; 18:
    another_ls.append(ls&#91;i])
    i += 3
print(another_ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;23, 66, 9, 12, 19, 3]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다. 우리의 의도대로 아주 잘 동작합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>그런데 뭔가 스멀스멀 떠오르지 않나요? 저런 상황은 우리가 이전에 한 번 접했습니다. 곧바로 <code>range</code>가 떠오릅니다. <a href="https://elvanov.com/545">우리가 <code>range</code>를 만들 때 범위를 어떻게 지정했는지 기억하시나요?</a></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;1, 2, 23, 48, 5, 66, 7, 8, 9, 10, 14, 12, 18, 45, 19, 1, 5, 3]
another_ls = &#91;]
for i in range(2, 18, 3):
    another_ls.append(ls&#91;i])
print(another_ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;23, 66, 9, 12, 19, 3]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>range(2, 18, 3)</code>은 2 이상 18 미만까지 간격을 3칸으로 하여 숫자를 뽑아내겠다는 뜻입니다. 이를 이용하여 <code>i</code>라는 변수를 일일히 다루지 않고 간편하게 <code>for</code>에 포함시켰습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만, <strong>슬라이싱</strong>이라는 문법을 이용하면 이조차 더 간단하게 하여, 아주 손쉽게 해당 리스트의 일부를 얻어올 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;1, 2, 23, 48, 5, 66, 7, 8, 9, 10, 14, 12, 18, 45, 19, 1, 5, 3]
another_ls = ls&#91;2:18:3]
print(another_ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;23, 66, 9, 12, 19, 3]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>용법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>문법은 <code>sequence[start:end:step]</code> 입니다.<strong> 즉 <code>start</code>부터 시작하여, <code>end</code> 미만일 때까지 (절대 <code>end</code>를 포함하지 않아요!) <code>step</code>의 간격만큼 반복한다는 뜻입니다!</strong> <code>range</code>와는 조금 비슷하지만 다르게, 각 항목을 생략할 수도 있는데요, <code>start</code>를 생략하게 되면 <code>0</code>으로, <code>end</code>를 생략하게 되면 완전 끝까지, <code>step</code>을 생략하면 1이 됩니다. 아래는 예시입니다. 참 쉽죠? <code>ls</code>는 처음에 0부터 15까지의 숫자를 차례대로 지니고 있습니다. 그래서 슬라이스 결과가 어떤 인덱스를 가리키는지 직관적으로 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = list(range(16))
print(ls)
print(f'{ls&#91;4:11:2] = }')
print(f'{ls&#91;:11:2] = }')
print(f'{ls&#91;4::2] = }')
print(f'{ls&#91;4:11:] = }')
print(f'{ls&#91;4::] = }')
print(f'{ls&#91;:11:] = }')
print(f'{ls&#91;::2] = }')
print(f'{ls&#91;::] = }')</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
ls&#91;4:11:2] = &#91;4, 6, 8, 10]
ls&#91;:11:2] = &#91;0, 2, 4, 6, 8, 10]
ls&#91;4::2] = &#91;4, 6, 8, 10, 12, 14]
ls&#91;4:11:] = &#91;4, 5, 6, 7, 8, 9, 10]
ls&#91;4::] = &#91;4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
ls&#91;:11:] = &#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ls&#91;::2] = &#91;0, 2, 4, 6, 8, 10, 12, 14]
ls&#91;::] = &#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>슬라이스에는 음수도 사용할 수 있습니다.</strong> <code>start</code>와 <code>end</code>에 음수가 있을 때에는 마지막으로부터 얼마나 떨어져있는지를 나타냅니다. 예를 들어 <code>-1</code>이라면 가장 마지막에 있는 항목이고 <code>-4</code>라면 마지막에서 네 번째에 있는 항목을 나타냅니다. <code>step</code>이 음수라면 인덱스가 점차적으로 작아집니다. 어느 하나가 음수이든지 상관없이 생략도 할 수 있습니다. 이를 이용해 온갖 기상천외한 조합을 만들 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = list(range(16))
print(ls)
print(ls&#91;-10:-3:]) # 마지막 10번째 이상, 마지막 3번째 미만, 1칸 씩 커짐.
print(ls&#91;12:5:-1]) # 12이하 5초과, 1칸 씩 작아짐.
print(ls&#91;12::-1]) # 12이하 처음까지, 1칸 씩 작아짐.</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
&#91;6, 7, 8, 9, 10, 11, 12]
&#91;12, 11, 10, 9, 8, 7, 6]
&#91;12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>슬라이스는 무엇인가?</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>ls = list(range(16))</code> 로부터 시작하도록 합니다. 아래 문제는 모두 슬라이스를 이용하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>이 리스트를 왼쪽 두 개, 오른쪽 두 개를 모두 제외하여 출력하세요.</li><li>이 리스트를 왼쪽 두 개, 오른쪽 두 개를 모두 제외하여, 큰 수부터 작은 수까지 3칸 간격으로 출력하세요.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:list {"ordered":true,"start":3} -->
<ol start="3"><li>리스트의 범위를 넘어가는 수를 넣었을 때 어떻게 되는지 실험해보세요.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>print(ls[2:-2:])</code> (결과: <code>[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</code> )</li><li><code>print(ls[-3:1:-2])</code> (결과: <code>[13, 10, 7, 4]</code> )</li><li>범위를 벗어난 항목에 대해서는 단순히 계산하지 않을 뿐이다. 에러는 발생하지 않는다. <code>start</code>를 <code>-100</code>과 같이 아주 큰 수를 둔다 해도 <code>0</code>부터 잘 시작한다.</li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1705</wp:post_id>
		<wp:post_date><![CDATA[2020-04-24 11:54:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-24 02:54:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-24 15:49:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-24 06:49:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%8a%ac%eb%9d%bc%ec%9d%b4%ec%8b%b1-%eb%a6%ac%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ea%b0%96%ea%b3%a0-%eb%86%80%ea%b8%b0-%ec%9e%91%ec%84%b1%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 지능형 리스트(List Comprehension) - 리스트 갖고 놀기]]></title>
		<link>https://elvanov.com/1713</link>
		<pubDate>Fri, 24 Apr 2020 05:31:02 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1713</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>지능형 리스트 또는 리스트 컴프리헨션이란, <strong>좀 더 편리하게 리스트를 만들 수 있는 방법</strong>을 제공합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>List Comprehension</code>을 한국어로 자연스럽게 번역한 것이 <code>지능형 리스트</code>이고, 우리나라의 저명한 파이썬 서적에 저렇게 표기되어 있습니다. 일각에서는 <code>리스트 표현식</code>이라는 표현도 심심찮게 보입니다. 다만 <strong>한국어로 번역된 파이썬 공식 문서에는 그대로 음차한 <code>리스트 컴프리헨션</code>이라고 되어있어, 추후 구글 검색시 유의해야 합니다.</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>간단한 예시</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어떤 수의 제곱수를 담고 있는 리스트를 만들고 싶다고 가정합시다. 즉 차례대로 1, 4, 9, 16, 25, 36 .. 이런 식으로 이어지는 리스트입니다. 1의 제곱부터 20의 제곱까지 담겨 있는 리스트를 만드려면 아래와 같이 하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;]
for i in range(1, 21):
    ls.append(i*i)
print(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>코드를 이해하기에는 그렇게 많이 어렵지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 지능형 리스트를 이용하면 리스트를 만드는 과정을 단 한 줄로 줄일 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;i*i for i in range(1,21)]
print(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>짜잔! 훨씬 읽기가 편해졌습니다. 이게 어떻게 가능하냐구요? 어떻게 <code>for</code>문이 리스트 대괄호 안에 들어가있을 수 있는 것일까요? 왜냐하면 파이썬이 "지능형 리스트"라는 이름으로 동작할 수 있도록 해놓았기 때문입니다! </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>for-in</code> 루프 용법</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>기본</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>가장 기본적인 형태의 용법은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>[ A for B in C ]</code></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>A</code>: 최종적으로 리스트에 들어갈 요소입니다. 함수 호출이 되어도 되고 계산 식이 되어도 됩니다. 여기서는 <code>B</code>를 활용할 수 있습니다. (대부분 활용합니다)</li><li><code>B</code> : <code>C</code>의 요소 하나하나를 나타냅니다.</li><li><code>C</code> : 지능형 리스트에서 활용할 또 다른 리스트입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>가장 간단한 형태의 예시를 살펴보면 다음과 같습니다. 우선 위 예제와 똑같이 제곱 수들을 구하는 예제입니다. 아래 예제는 <code>*</code> 연산을 시도하고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;i*i for i in &#91;-5, -4, -3, 1, 2, 3]]</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;25, 16, 9, 1, 4, 9]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>함수 호출도 가능합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>ls = &#91;abs(i) for i in &#91;-5, -4, -3, 1, 2, 3]]</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;5, 4, 3, 1, 2, 3]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>좀 더 복잡하게 하면 다음처럼도 해볼 수 있겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>people = &#91;{'name': '철수', 'age': 8},
          {'name': '영희', 'age': 12},
          {'name': '민수', 'age': 9}]
ls = &#91;f'{person&#91;"name"]}은 {person&#91;"age"]}살입니다.' for person in people]
print(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;'철수은 8살입니다.', '영희은 12살입니다.', '민수은 9살입니다.']</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>중첩</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>지능형 리스트는 내부에서 중첩할 수 있습니다. </strong>그러니까 <code>for-in</code> 부분을 여러 번 사용할 수 있다는 뜻입니다. 간단하게 두 개의 <code>for</code>문을 돌려 하나의 튜플을 만드는 걸 상상해봅시다. 아래 예제에서는 두 개의 <code>for-in</code>만 중첩되었지만 <strong>중첩 횟수는 제한이 없습니다!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;(i, j) for i in range(3) for j in range(4)]
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 때에는 순서가 어떻게 되냐면, 일단 <code>i</code>를 0~2까지 돌립니다. 그 내부에서 <code>j</code>를 0~3까지 돌립니다. 그 이후 <code>i</code>와 <code>j</code>가 포함된 튜플을 생성합니다. 이를 일반 식으로 고치면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;]
for i in range(3):
    for j in range(4):
        a.append((i, j))
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>중첩할 때, <strong>두 개의 지능형 리스트를 중첩시킬 수도 있습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;&#91;i for i in range(3)] for j in range(4)]
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;&#91;0, 1, 2], &#91;0, 1, 2], &#91;0, 1, 2], &#91;0, 1, 2]]</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>사실 중첩 때부터 헷갈리기 시작하는데, 식들의 <strong>평가 순서</strong>는 다음과 같습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li> <code>[A<span class="has-inline-color has-vivid-red-color">(2)</span> for-in<span class="has-inline-color has-vivid-red-color">(1)</span>]</code></li><li><code>[A<span class="has-inline-color has-vivid-red-color">(3)</span> for-in<span class="has-inline-color has-vivid-red-color">(1)</span> for-in<span class="has-inline-color has-vivid-red-color">(2)</span>]</code></li><li><code>[[A<span class="has-inline-color has-vivid-red-color">(3)</span> for-in<span class="has-inline-color has-vivid-red-color">(2)</span>] for-in<span class="has-inline-color has-vivid-red-color">(1)</span>]</code> (1번과 사실 같은 형태입니다.)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 때 후번에 있는 요소는 전번에서 생긴 변수를 사용할 수 있습니다. <code>(1)</code>에서 생긴, <code>for</code> 루프의 각 요소를 대변하는 변수를 <code>A</code>에서 사용할 수 있는 것처럼요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>if</code> 활용</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리가 만약에 어떤 리스트에 있는 값 중 특정 값 이상만 받아오고 싶다면 어떻게 해야 할까요? 아래는 사람이 딕셔너리 형태로 저장되어 있는 리스트에서 <code>age</code> 키의 값이 <code>9</code> 이상인 항목을 가져오고 싶다고 가정합니다. 즉 9살 이상인 사람만 받고 나머지는 걸러내겠다는 뜻이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>people = &#91;{'name': '철수', 'age': 8},
          {'name': '영희', 'age': 12},
          {'name': '민수', 'age': 9}]
ls = &#91;person for person in people if person&#91;"age"] >= 9]
print(ls)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;{'name': '영희', 'age': 12}, {'name': '민수', 'age': 9}]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>바로 <code>for</code> 뒤에 <code>if</code> 절을 추가시켜주면 됩니다. 이렇게 하면 해당 <code>if</code> 절의 결과가 참일 때에만 루프가 실행됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>복잡한 활용</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>중첩과 <code>if</code>를 섞어서 여러 번 많이많이 사용할 수 있습니다. 보기만 해도 복잡해지는 다음 지능형 리스트를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;(i, j) for i in &#91;2, 3, 4, 5, 7, 8] if i % 2 == 0 for j in range(i - 2, i + 2) if i * j &lt;= 50]
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;(2, 0), (2, 1), (2, 2), (2, 3), (4, 2), (4, 3), (4, 4), (4, 5), (8, 6)]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>사실 이렇게까지는 안 합니다. 왜냐하면 <strong>가독성 좋으려고 하려는 게 되려 가독성을 헤치기 때문입니다. 가독성이 좋지 않다면 원래 쓰던 대로 <code>for-in</code> 반복문과 <code>if</code> 조건문을 분리해서 사용합시다.</strong> 뭐, 예제에 불과한 위 코드를 굳이 해석하자고 하면, "<em><code>[2, 3, 4, 5, 7, 8]</code>이라는 리스트 중 짝수인 <code>i</code>를 순회한다. 그리고 <code>i - 2</code>부터 <code>i + 1</code>까지의 중 <code>i</code>와 곱하여 <code>50</code> 이하인 <code>j</code>를 뽑아낸다. 그리고 <code>(i, j)</code> 튜플을 만든다.</em>" 입니다. 위의 식을 한번 코드로 재구성해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">a = [<strong><span class="has-inline-color has-vivid-red-color">(i, j)</span> <span class="has-inline-color has-luminous-vivid-orange-color">for i in [2, 3, 4, 5, 7, 8]</span> <span class="has-inline-color has-vivid-green-cyan-color">if i % 2 == 0</span> <span class="has-inline-color has-vivid-cyan-blue-color">for j in range(i - 2, i + 2)</span> <span class="has-inline-color has-vivid-purple-color">if i * j &lt;= 50</span></strong>]

<span class="has-inline-color has-cyan-bluish-gray-color"># 이를 반복문과 조건문으로 고치면 다음과 같습니다.</span>

a = []
<strong><span class="has-inline-color has-luminous-vivid-orange-color">for i in [2, 3, 4, 5, 7, 8]</span>:
    <span class="has-inline-color has-light-green-cyan-color">if i % 2 == 0</span>:
        <span class="has-inline-color has-vivid-cyan-blue-color">for j in range(i - 2, i + 2)</span>:
            <span class="has-inline-color has-vivid-purple-color">if i * j &lt;= 50</span>:</strong>
                a.append(<span class="has-inline-color has-vivid-red-color"><strong>(i, j)</strong></span>)
 </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>이제 읽을 수는 있는 수준이지요? 굳이 지능형 리스트를 고수하겠다 하면, 지능형 리스트도 <strong>중간에 개행은 가능</strong>하니까 다음처럼 그나마 보기 편하게는 만들어볼 수 있겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;(i, j)
     for i in &#91;2, 3, 4, 5, 7, 8]
     if i % 2 == 0
     for j in range(i - 2, i + 2)
     if i * j &lt;= 50]
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>else를 넣고 싶다면?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지능형 리스트에서는 대괄호(<code>[]</code>)의 내부에 <code>for-in</code> 문과 <code>if</code> 까지만 들어갈 수 있고 <code>else</code>와 같은 다른 것들은 들어가지 못합니다. 그래서 <strong><code>if</code> 조건에 충족하지 못할 시에 다른 값을 넣고 싶은 경우에는 제일 최종적으로 계산되는 곳에 <a href="/1770">조건 표현식 (conditional expression)</a>을 이용하도록 합시다. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;"짝" if i % 2 == 0 else "홀" for i in range(10)]
print(a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>&#91;'짝', '홀', '짝', '홀', '짝', '홀', '짝', '홀', '짝', '홀']</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>연습 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>지능형 리스트는 언제 사용하는가?</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>지능형 리스트를 이용하여, 구구단의 곱셈하려는 숫자와 그 결과를 모두 튜플에 넣어서 리스트로 만드세요. 다음과 같이 출력되어야 합니다. <br><code>[(2, 1, 2), (2, 2, 4), (2, 3, 6), (2, 4, 8), ... , (9, 8, 72), (9, 9, 81)]</code></li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = &#91;(i, j, i*j) for i in range(2, 10) for j in range(1, 10)]
print(a)</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1713</wp:post_id>
		<wp:post_date><![CDATA[2020-04-24 14:31:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-24 05:31:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-28 12:30:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-28 03:30:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%a6%ac%ec%8a%a4%ed%8a%b8-%ec%bb%b4%ed%94%84%eb%a6%ac%ed%97%a8%ec%85%98-%eb%a6%ac%ec%8a%a4%ed%8a%b8-%ea%b0%96%ea%b3%a0-%eb%86%80%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 조건 표현식 (Conditional Expression) - 간단한 분기 나타내기]]></title>
		<link>https://elvanov.com/1770</link>
		<pubDate>Tue, 28 Apr 2020 02:57:04 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1770</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>이번 시간에는 간단하게 <strong>표현식으로 조건을 나눌 수 있는 방법</strong>을 보여드립니다. <strong><em>그냥 새로운 방법에 별로 관심이 없다면 가볍게 패스하셔도 좋습니다!</em></strong> 왜냐하면 조건 표현식은 다소 가독성이 떨어질 수 있다는 단점이 있고, 조건 표현식이 아닌 그냥 <a href="/217">조건문</a>을 이용해 코드가 몇 줄 더 길어지는 대신 더 가독성 좋고 의도가 확실한 코드를 작성할 수 있기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 이때까지 조건문(if statement)라고 했지, 표현식(expression)이라고는 하지 않았습니다. 표현식은 대강 설명하면 한 줄 안에 다 때려넣을 수 있다는 건데, 자세한 건 <a href="/622">해당 글</a>에서 설명하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>우선 예제를 살펴보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>number = 10
a = '짝수' if number % 2 == 0 else '홀수'
print(number, "은", a)

number = 25
a = '짝수' if number % 2 == 0 else '홀수'
print(number, "은", a)</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>10 은 짝수
25 은 홀수</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아니, 대입문과 <code>if</code>가 동시에 존재할 수 있다니요! 네. 할 수 있습니다. 여기서는 <code>if</code>가 <strong>조건문으로 쓰인 게 아니라 조건 표현식으로 쓰였습니다.</strong> 표현식은 표현식이 들어갈 수 있는 모든 곳에 들어갈 수 있습니다. <code>'짝수' if number % 2 == 0 else '홀수'</code> 부분은 통째로 작동하여, 조건에 따라 <code>'짝수'</code>일지 <code>'홀수'</code>일지를 평가합니다. <code>number</code>가 <code>10</code>이라면 <code>a = '짝수'</code>로 작동하고, <code>number</code>가 <code>25</code>라면 <code>a = '홀수'</code>로 작동하게 되는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>조건 표현식을 조금이나마 자연스럽게 쓰는 방법은 <a href="/1713">지능형 리스트</a>와 같이 활용하는 것입니다. 이외에는 실전에서 그렇게 많이 사용되지는 않습니다. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1770</wp:post_id>
		<wp:post_date><![CDATA[2020-04-28 11:57:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-28 02:57:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-15 07:19:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-14 22:19:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%ec%a1%b0%ea%b1%b4-%ed%91%9c%ed%98%84%ec%8b%9d-conditional-expression-%ea%b0%84%eb%8b%a8%ed%95%9c-%eb%b6%84%ea%b8%b0-%eb%82%98%ed%83%80%eb%82%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 반복문 코딩하기]]></title>
		<link>https://elvanov.com/1809</link>
		<pubDate>Wed, 29 Apr 2020 02:48:02 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1809</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>이제 본격적으로 반복문을 코딩해보는 작업을 할 것입니다. 반복문은 조건문과는 달리 <strong>조금의 코드만으로도 작업량이 굉장히 많아질 수 있습니다</strong>. 반복문에서는 한두 줄이라도 반복을 수천번 수백번 할 수 있기 때문에 다소 조심히 다루어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 이러한 반복을 유심히 살펴보게 해주는 도구를 먼저 알아볼 텐데요, 바로 우리가 지금까지 많이 써왔던 <code>print</code> 함수에 대한 중요성을 먼저 강조한 후 넘어가보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>print</code> 활용하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음은 <a href="https://elvanov.com/257">앞선 시간</a>의 <code>break</code>에 관한 예제에서 <code>print</code>에 좀 더 신경쓴 모습입니다. 실제 동작은 똑같습니다. 앞으로 <code>print</code>를 <a href="https://elvanov.com/304#print--10">더 잘 쓰는 방법</a>에 대해서 배우게 될 테지만 간략한 방법 하나를 바로 소개해드리겠습니다.  <span style="text-decoration: underline;"><code>print</code> 함수를 쓸 때, 내부에 쉼표로 항목들을 구분지을 수가 있는데, 저렇게 하면 형을 <code>str</code>로 고치지 않고도 <code>int</code>와 같은 숫자형을 바로 볼 수 있다는 게 장점입니다. 항목간 구분은 공백 한 칸으로 대체됩니다.</span></p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
attack = 1
loop_number = 1 # 루프가 몇 번째 돌았는지 알게 해주는 변수
while True:
    before_attack = attack # 해당 루프에서 attack 값이 바뀌기 전에 저장
    before_durability = durability # 해당 루프에서 durability 값이 바뀌기 전에 저장

    # 실제 동작
    durability -= attack
    attack += 1

    # 출력. 실제 동작 전과 동작 후를 비교할 수 있음.
    print("------------" , loop_number , "번째 루프 ------------")
    print("이전 | attack:", before_attack, ", durability:", before_durability) 
    print("이후 | attack:", attack, ", durability:", durability) 

    if durability &lt;= 0:
        break
    
    loop_number += 1 # 증감하기

print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>샌드백의 내구도를 입력하세요 >> 21
------------ 1 번째 루프 ------------
이전 | attack: 1 , durability: 21
이후 | attack: 2 , durability: 20
------------ 2 번째 루프 ------------
이전 | attack: 2 , durability: 20
이후 | attack: 3 , durability: 18
------------ 3 번째 루프 ------------
이전 | attack: 3 , durability: 18
이후 | attack: 4 , durability: 15
------------ 4 번째 루프 ------------
이전 | attack: 4 , durability: 15
이후 | attack: 5 , durability: 11
------------ 5 번째 루프 ------------
이전 | attack: 5 , durability: 11
이후 | attack: 6 , durability: 6
------------ 6 번째 루프 ------------
이전 | attack: 6 , durability: 6
이후 | attack: 7 , durability: 0
샌드백이 부서졌습니다! 최종 공격력은 7입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>어때요, 보기가 좀 더 편해지지 않았나요? <code>before_attack</code>, <code>before_durability</code>, <code>loop_number</code>은 오로지 <code>print</code>를 보조하기 위한 변수라 낭비라고 생각하실 수도 있는데, 변수 몇 개 더 쓰는거는 프로그램에겐 아무런 일도 아니므로 쓰고 싶은 만큼 왕창왕창 쓰도록 합시다! 뭐가 어떻게 돌아가는지, 왜 의도한 대로 작동하지 않는지 궁금하다면 <strong>머리를 싸매고 고민하는 것보다 <code>print</code>를 많이 써서 어떻게 돌아가는지 직접 눈으로 보는 게</strong> 훨씬 현명한 판단입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>반복문의 설계</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>반복문은 아주 강력한 도구입니다. 한두 줄의 코드를 써도 그것이 몇 백번, 몇 천번 반복하게 만들 수 있으니까요. 같은 코드를 몇 천줄 쓴다고 상상해보세요. 복사 붙여넣기 하는데만 한 세월일 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 반복문을 처음 맞닥뜨렸을 때 반복문을 어떻게 활용해야 할지 막막합니다. 언제 어떻게 써야 할지 감이 잘 오지가 않죠. 왜냐하면 <strong>반복문은 실제로 코드가 어떻게 실행되는지 상상하기가 어렵기 때문</strong>입니다.&nbsp;<code>if</code>문 같은 경우에는 코드가 실행되거나, 실행되지 않거나 입니다. 눈으로 따라가며 코드의 흐름을 어느정도 파악할 수 있습니다. 반복문은 한 번 반복할지, 세 번 반복할지, 혹은 100번 반복할지 모르는 법입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>반복문을 설계할 때 고려할 세 가지 핵심 생각은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>초기화 : <strong>반복문에 들어가기 전에, 준비 작업은 어떻게 할까?</strong></li><li>조건 : <strong>조건을 어떻게 작성할까?</strong></li><li>증감 : <strong>반복문 내부에서 조건 변수를 어떻게 조정할까?</strong></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>반복문에 들어가기 전에 준비 작업은 어떻게 할까?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다음 코드는 위 예제에서&nbsp;<code>attack = 1</code>을&nbsp;<code>while</code>&nbsp;블록 내부로 옮긴 코드입니다. 실행해볼까요? 아마도 우리의 의도대로 움직이지 않을겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>durability = int(input("샌드백의 내구도를 입력하세요 >> "))
loop_number = 1 # 루프가 몇 번째 돌았는지 알게 해주는 변수
while True:
    attack = 1
    before_attack = attack # 해당 루프에서 attack 값이 바뀌기 전에 저장
    before_durability = durability # 해당 루프에서 durability 값이 바뀌기 전에 저장

    # 실제 동작
    durability -= attack
    attack += 1

    # 출력. 실제 동작 전과 동작 후를 비교할 수 있음.
    print("------------" , loop_number , "번째 루프 ------------")
    print("이전 | attack:", before_attack, ", durability:", before_durability) 
    print("이후 | attack:", attack, ", durability:", durability) 

    if durability &lt;= 0:
        break
    
    loop_number += 1 # 증감하기

print("샌드백이 부서졌습니다! 최종 공격력은 " + str(attack) + "입니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>샌드백의 내구도를 입력하세요 >> 6
------------ 1 번째 루프 ------------
이전 | attack: 1 , durability: 6
이후 | attack: 2 , durability: 5
------------ 2 번째 루프 ------------
이전 | attack: 1 , durability: 5
이후 | attack: 2 , durability: 4
------------ 3 번째 루프 ------------
이전 | attack: 1 , durability: 4
이후 | attack: 2 , durability: 3
------------ 4 번째 루프 ------------
이전 | attack: 1 , durability: 3
이후 | attack: 2 , durability: 2
------------ 5 번째 루프 ------------
이전 | attack: 1 , durability: 2
이후 | attack: 2 , durability: 1
------------ 6 번째 루프 ------------
이전 | attack: 1 , durability: 1
이후 | attack: 2 , durability: 0
샌드백이 부서졌습니다! 최종 공격력은 2입니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>매 루프마다&nbsp;<code>attack += 1</code>을 해주었음에도 불구하고 계속 현재 공격력이&nbsp;<code>1</code>이라 출력하고 있습니다. 원인은 매 루프마다 실행되는&nbsp;<code>attack = 1</code>&nbsp;대입문입니다. 이전 루프에서&nbsp;<code>attack += 1</code>&nbsp;이 실행되어&nbsp;<code>attack</code>이&nbsp;<code>2</code>가 되었음에도 불구하고 다시&nbsp;<code>attack = 1</code>로 대입해주고 있습니다. 결국 매 루프마다 공격력은 변하지 않은 채 내구도는 1씩 닳게 되겠죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>attack</code>에 대한 초기화는&nbsp;<code>while</code>&nbsp;내부에 존재하면 안 됩니다. 반복문 이전에 설정해야 할 초깃값이 되어야 논리가 맞아 떨어집니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>조건을 어떻게 작성할까?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>while</code>에서 조건은&nbsp;<code>True</code>일 경우에만 계속해서 동작합니다. 한 번이라도&nbsp;<code>False</code>가 되면&nbsp;<code>while</code>&nbsp;문을 빠져나오게 되며, 다시는 돌아갈 수 없게 됩니다. 가장 처음으로&nbsp;<code>while</code>에 맞닥뜨렸을 때&nbsp;<code>False</code>&nbsp;라면, 한 번도 실행되지 않은 채 다음으로 넘어갑니다. 즉, 반복문이 반복될 동안은 조건이&nbsp;<code>True</code>로 유지되었다가, 종료하고 싶을 때 조건이&nbsp;<code>False</code>로 바뀌기만 하면 된다는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>반면&nbsp;<code>break</code>는 어느 정도 반대의 논리를 따릅니다.&nbsp;<code>break</code>는 대개&nbsp;<code>if</code>문 내부에 쓰이는 식으로 함께 쓰이는데, 이 때&nbsp;<code>if</code>&nbsp;조건은&nbsp;<code>False</code>여야 내부의&nbsp;<code>break</code>를 건들지 않아 종료되지 않고 계속해서 실행될 수 있으며, 한 번이라도&nbsp;<code>True</code>가 된다면&nbsp;<code>break</code>가 실행되는 결과를 낳아서 반복문이 종료됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>while</code>에서의 조건이나,&nbsp;<code>if</code>와&nbsp;<code>break</code>&nbsp;에서의 조건이나 마찬가지로, 대개 조건에서는 변수를 활용해야 합니다. 왜냐하면 바뀌지 않는 조건은 결과 또한&nbsp;<code>True</code>&nbsp;또는&nbsp;<code>False</code>로 고정되기 때문에, 노트북의 배터리가 방전될 때까지 무한히 반복하는 프로그램이 되거나 단 한번도 실행될 수 없는 무용지물이 되겠지요. 예를 들어, 다음&nbsp;<code>while</code>은 쓸모가 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code># 무한히 반복합니다.
while 3 &lt; 8:
    코드

# 절대 실행될 수 없습니다.
while 3 > 8:
    코드

# 영원히 종료되지 않습니다.
while True:
    코드
    if 3 > 8:
        break

# 마찬가지로 단 한번만 실행됩니다.
while True:
    코드
    if 3 &lt; 8:
        break

# a &lt; b 조건이 충족한다 하더라도 단 한번만 실행됩니다.
while a &lt; b:
    코드
    break</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>조건에 어떤 변수를 넣느냐가 관건입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>반복문 내부에서 조건 변수를 어떻게 조정할까?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>조건 변수를 조정한다는 게 어떤 의미일까요? 우리가 만든&nbsp;<code>while</code>&nbsp;문에서 조건은&nbsp;<code>durability &gt; 0</code>&nbsp;입니다. 우리는 값을 직접 입력하여&nbsp;<code>durability</code>의 초기값을 설정했습니다. 우리가 위에서&nbsp;<code>8000</code>,&nbsp;<code>300</code>이라고 입력한 것처럼요. 하지만 만약에 이&nbsp;<code>durability</code>가 영원히 변하지 않는다면 어떻게 될까요? 지금은&nbsp;<code>while</code>&nbsp;문 내부에서&nbsp;<code>durability -= attack</code>으로 지속적인 변화를 주고 있습니다만, 이 명령이 없다면 어떻게 될까요? 계속해서&nbsp;<code>while</code>&nbsp;문의 조건은&nbsp;<code>8000 &gt; 0</code>으로 고정되어 버릴테고, 우리의 루프는 영영 끝나지 않게 되어 버릴 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>조건을 아무리 잘 설정했다 하더라도, 실제 조건에 관여하는 변수들을 지속적으로 관리하고 조정해나가지 않는다면 조건은 무용지물입니다. 그러므로&nbsp;<strong>변수들을 어떻게 변화시켜나갈 것인가</strong>&nbsp;또한 중요한 화두입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>훌륭한 방법이 있습니다. 앞서&nbsp;<code>print("공격력: " + str(attack) + ", 내구도: " + str(durability))</code>&nbsp;이 줄을 추가한 것처럼 변화하는 변수를 실시간으로 확인할 수 있도록 변수의 내용을 매 루프마다 출력시키는 것입니다.&nbsp;<code>print</code>&nbsp;함수는 아무리 많이 써도 닳지 않습니다. 어떤 식으로 변수가 변화하는지 파악하기에 가장 좋은 방법입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>실전 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>처음에는 감이 오지 않습니다. 다음 문제를 풀어보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>수를 입력받고 이 수의 모든 약수를 출력하는 프로그램을 작성하여라.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>처음에는 이것을 반복문을 써야 하는지 아닌지도 감이 오시지 않을 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>컴퓨터가 이해할 수 있는 식을 생각하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리는 약수가 무엇인지는 대충 압니다.&nbsp;<code>a</code>를&nbsp;<code>b</code>로 나눴을 때 딱 나누어 떨어진다면&nbsp;<code>b</code>는&nbsp;<code>a</code>의 약수입니다. 하지만 나누어 떨어진다는 것은 무엇일까요? 우리는 저 문장으로도 뜻이 바로 통해버리기에 쉽게 생각하지만 <strong>컴퓨터는 <code>딱 나누어 떨어진다</code>라는 말을 이해할 수 없습니다.</strong>  컴퓨터는 <code>0</code>과 <code>1</code>, 아니 조금 더 확장시켜서 우리가 작성한 코드로만 이해할 수 있기 때문에 컴퓨터가 이해할 수 있도록 컴퓨터의 언어로 번역해줘야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 처음에 입력을 받는다고 했습니다. 그러므로&nbsp;<code>a</code>는 이미 정해진 상황입니다. <code>b</code>는 임의로 우리가&nbsp;<code>4</code>라고 정해봅시다. 그렇다면&nbsp;<code>딱 나누어 떨어진다</code>라는 것을 어떻게 코드로 적어줄 수 있을까요? 다음과 같이 하면 될 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = int(input())
b = 4 # 임시로 적었습니다.
if a % b == 0:
    print(str(b) + '는 ' + str(a) + '의 약수입니다!')
else:
    print(str(b) + '는 ' + str(a) + '의 약수가 아닙니다!')</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>12
4는 12의 약수입니다!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong><span style="text-decoration: underline;">이 단계에서의 핵심은&nbsp;<code>a % b == 0</code>&nbsp;이라고 적은 것입니다.</span></strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>후보군을 파악하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>계속해서 상상력을 발휘해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>a</code>는 입력으로 들어옵니다. (앞서 수를 하나 입력받는다고 했습니다.)</li><li>컴퓨터는 어떤 숫자가 약수일지 미리 판단할 수 없습니다. 컴퓨터는 <code>a % b == 0</code>라는 식을 돌려야 비로소 <code>b</code>가 <code>a</code>의 약수임을 확인할 수 있습니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>실제로 컴퓨터가 어떻게 돌아가는지 상상하기 위해 <code>a</code>가 <code>12</code>라고 가정해보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>... 음수의 모든 결과는 <code>False</code></li><li><code>12 % -1 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 0 == 0</code> 의 결과는 <code>False</code></li><li><strong><code>12 % 1 == 0</code> 의 결과는 <code>True</code></strong></li><li><strong><code>12 % 2 == 0</code> 의 결과는 <code>True</code></strong></li><li><strong><code>12 % 3 == 0</code> 의 결과는 <code>True</code></strong></li><li><strong><code>12 % 4 == 0</code> 의 결과는 <code>True</code></strong></li><li><code>12 % 5 == 0</code> 의 결과는 <code>False</code></li><li><strong><code>12 % 6 == 0</code> 의 결과는 <code>True</code></strong></li><li><code>12 % 7 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 8 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 9 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 10 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 11 == 0</code> 의 결과는 <code>False</code></li><li><strong><code>12 % 12 == 0</code> 의 결과는 <code>True</code></strong></li><li><code>12 % 13 == 0</code> 의 결과는 <code>False</code></li><li><code>12 % 14 == 0</code> 의 결과는 <code>False</code></li><li>... 이하 결과는 모두 <code>False</code></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>좋습니다. 이제서야 <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>6</code>, <code>12</code>가 <code>12</code>의 약수임을 컴퓨터는 확신할 수 있습니다. 가능한 모든 수를 검사해봤기 때문이죠. 우리는 앞으로 더 큰 숫자가 들어와도 이를 무리없이 행해야 합니다. 일일히 우리가 손으로 모든 상황을 검사해줄 수 없으니 검사의 범위를 지정해주어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러한 검사의 범위를 후보군이라고 이야기하겠습니다. 우리가 입력을 받는 순간 우리는 검사해야 할 범위를 명시해줄 수 있습니다. 그러니까 <code>12</code>의 약수를 구할 때 <code>-1000</code> 같은 건 검사할 필요도 없이 우리가 아니라고 말할 수 있습니다. 왜냐하면 <strong>음수는 약수를 논하는 자리에서는 아예 논리적으로 맞지 않는 불청객이기 때문</strong>입니다. <code>1000</code>같이 아주 큰 숫자도 전혀 필요 없습니다. <code>10000</code>도 마찬가지지요. 왜냐구요? <strong>약수는 무조건 해당 숫자보다 작거나 같은 범위에 있기 때문</strong>이지요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면, <code>19</code>는 <code>28371</code>의 약수가 될까요? 사람이 대답한다면 "모릅니다"라고 대답할 수 밖에 없을 겁니다. 암산으로도 하기가 힘들지요. 컴퓨터가 계산하면 정답을 알 수 있습니다. 어찌 되었든 <code>19</code>는 <code>28371</code>이라는 숫자의 약수를 구할 때 후보군이 될 자격이 충분합니다. <span style="text-decoration: underline;"><strong>정말 누가 봐도 불가능한 영역과, 직접 검사를 해보지 않고서는 모르는 영역을 나누어야 합니다</strong>.</span> 그 후, 검사를 해야 하는 영역을 검사해보면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>약수를 구하는 문제에서 검사해야 할 후보군은 명확합니다. <code><strong>1 이상 a 이하의 수</strong></code>를 검사해보면 됩니다. a보다 큰 숫자나, 1보다 작은 숫자는 약수가 될 가능성이 제로입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="text-decoration: underline;">이 단계에서의 핵심은&nbsp;<code>1 이상 a 이하의 수가 a의 약수가 될 가능성이 있다</code>&nbsp;고 이야기할 수 있다는 것입니다.</span></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>반복문의 설계를 떠올리며 변동하는 부분 파악하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금껏 정리한 내용은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>컴퓨터가 어떤 수가 약수인지 판단하는 근거는 <code>a % b == 0</code> 입니다.</li><li><code>a</code>는 입력으로 정해집니다. 이 때 검사해야 할 <code>b</code>의 범위는 <code>1 이상 a 이하</code>입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>좋습니다. 이제 반복문을 이용해 <code>b</code>를 제어할 차례입니다. <code>b</code>는 우리가 언제든지 새로 대입(<code>=</code>)해서 값을 만들어낼 수도 있고, <code>+=</code> 또는 <code>-=</code>를 통해 값을 증가시키거나 감소시킬 수도 있습니다. 우선 <strong>반복하면서 변화하는 <code>b</code>를 제어하기 위해 초기값을 설정해줍시다. 여기서는 <code>b</code>를 후보군의 시작인 <code>1</code>부터 차례대로 증가시키겠다</strong>고 가정하겠습니다. 왜 차례대로 <code>1</code>씩 증가하냐면, <strong>후보군 내의 모든 수를 검사해야 하기 때문</strong>입니다. <code>1</code>만 하고 <code>2</code>를 건너뛰고 <code>3</code>을 검사하면 안될 노릇이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 <strong><code>초기의 b의 값은 1</code></strong>로 정해지는 것이며, 매번 반복문을 돌 때마다 <strong><code>1씩 증가</code></strong>하는 것은 정해졌습니다. 이제 조건을 설정해야 합니다. 조건을 설정하지 않으면 <code>b</code>는 <code>a</code>를 넘어 <code>1000</code>, <code>10000</code>, <code>100000</code> 등등 컴퓨터가 동작하는 그 날까지 무한대로 <code>1</code>씩 증가할 것입니다.  <code>b</code>가 증가하면서 검사해야 할 조건은 <strong><code>b가 a 이하</code>인지</strong>만 검사하면 됩니다. <strong><code>b</code>는 처음에 <code>1</code>에서 부터 출발하여 증가하므로, 0 이하인지 아닌지 생각할 필요도 없습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 모든 내용을 표로 정리하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|간단한 이름|항목|조치|코드|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\u002d\u002d\u002d\u002d|\n|초기화|반복문에 들어가기 전에, 준비 작업은 어떻게 할까?|`b`를 `1`로 초기화시킨다.|`b = 1`|\n|조건|조건을 어떻게 작성할까?|`b`가 `a` 이하일 때까지만|`b \u003c= a`|\n|증감|반복문에서 조건 변수를 어떻게 조정할까?|`b`를 `1`씩 증가시킨다.|`b += 1`|"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>간단한 이름</th>
<th>항목</th>
<th>조치</th>
<th>코드</th>
</tr>
</thead>
<tbody>
<tr>
<td>초기화</td>
<td>반복문에 들어가기 전에, 준비 작업은 어떻게 할까?</td>
<td><code>b</code>를 <code>1</code>로 초기화시킨다.</td>
<td><code>b = 1</code></td>
</tr>
<tr>
<td>조건</td>
<td>조건을 어떻게 작성할까?</td>
<td><code>b</code>가 <code>a</code> 이하일 때까지만</td>
<td><code>b &lt;= a</code></td>
</tr>
<tr>
<td>증감</td>
<td>반복문에서 조건 변수를 어떻게 조정할까?</td>
<td><code>b</code>를 <code>1</code>씩 증가시킨다.</td>
<td><code>b += 1</code></td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p><strong><span style="text-decoration: underline;">이 단계에서의 핵심은 초기화, 조건, 증감에 해당하는 코드를 직접 적어보는 것입니다.</span></strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>반복문 작성하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>좋습니다. 이제 작성해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>a = int(input())
b = 1
while b &lt;= a:
    if a % b == 0:
        print(str(b) + '는 ' + str(a) + '의 약수입니다!')
    b += 1</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>12
1는 12의 약수입니다!
2는 12의 약수입니다!
3는 12의 약수입니다!
4는 12의 약수입니다!
6는 12의 약수입니다!
12는 12의 약수입니다!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>a</code>에 <code>12</code>를 입력했을 때, 위와 같은 결과가 나옵니다. 이를 루프 횟수에 따라 표로 정리하면 다음과 같습니다. 우선 <code>b</code>의 초깃값은 <code>1</code>  입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:jetpack/markdown {"source":"|루프 횟수|`a % b == 0`|`b`의 변화|\n|\u002d\u002d-|\u002d\u002d-|\u002d\u002d-|\n|`1`|`12 % 1 == 0` : `True`|1 증가|\n|`2`|`12 % 2 == 0` : `True`|1 증가|\n|`3`|`12 % 3 == 0` : `True`|1 증가|\n|...||||\n|`11`|`12 % 11 == 0` : `False`|1 증가|\n|`12`|`12 % 12 == 0` : `True`|1 증가|\n|`13`|-|-|\n"} -->
<div class="wp-block-jetpack-markdown"><table>
<thead>
<tr>
<th>루프 횟수</th>
<th><code>a % b == 0</code></th>
<th><code>b</code>의 변화</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td><code>12 % 1 == 0</code> : <code>True</code></td>
<td>1 증가</td>
</tr>
<tr>
<td><code>2</code></td>
<td><code>12 % 2 == 0</code> : <code>True</code></td>
<td>1 증가</td>
</tr>
<tr>
<td><code>3</code></td>
<td><code>12 % 3 == 0</code> : <code>True</code></td>
<td>1 증가</td>
</tr>
<tr>
<td>...</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>11</code></td>
<td><code>12 % 11 == 0</code> : <code>False</code></td>
<td>1 증가</td>
</tr>
<tr>
<td><code>12</code></td>
<td><code>12 % 12 == 0</code> : <code>True</code></td>
<td>1 증가</td>
</tr>
<tr>
<td><code>13</code></td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p>마지막에 <code>b</code>가 <code>13</code>이 되었을 때에, <code>while</code>의 조건을 그대로 대입해보면, <code>13 &lt;= 12</code>를 체크해 보았을 때 <code>False</code> 이므로 <code>while</code>을 빠져나가게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>성공했습니다! 훨씬 큰 숫자를 써도 잘 작동하는 것을 확인하실 수 있을 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>코드 전체에서 조건식은 2개가 등장했습니다. <strong>하나는&nbsp;<code>while</code>문에 들어간&nbsp;<code><em>b &lt;= a</em></code></strong>이고 하나는<strong>&nbsp;<code>if</code>문에 들어간&nbsp;<code><em>a % b == 0</em></code></strong>입니다. <strong>이 두 개의 구분은 유념</strong>해주시기 바랍니다. 후보군을 순회하는 것과 실제 조건이 들어맞는지 아닌지 체크하는 것은 별도의 작업이기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>다음과 같이 출력하는 프로그램을 만들어라.<br><br>하<br>하하<br>하하하<br>하하하하<br>…<br>하하하하하하하하<br></li><li>작은 수 하나와 큰 수 하나를 입력받고, 그 사이에 있는 모든 짝수를 출력하는 프로그램을 만들어라.</li><li>5개의 양의 정수를 입력받고, 이들 중 가장 큰 수를 출력하여라.</li><li>학생 10명의 점수를 각각 입력받고, 그 합계를 출력하라.</li><li>수를 계속 입력받아라. 입력받은 수는 계속해서 곱한다. 그 값이 1000이 넘어간다면, 그 값을 출력하고 프로그램을 종료하라.</li><li>수를 계속해서 입력받는다. 5 이상의 수가 3번째로 입력되는 순간 입력을 멈추고, 지금까지 입력받았던 모든 수를 합하여 출력하라.</li><li>다음 수식을 계산하고 그 결과를 출력하는 프로그램을 작성하여라.<br><code>S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + ... + 191</code></li><li>먼 미래, 인류는 치명적 바이러스 때문에 멸종 위기에 처했다. 인구는 50,000명 밖에 남지 않았으며, 이마저도 매년 10%씩 감소하는 추세이다. 이윽고 20,000명 이하가 될 때까지 몇 년이 걸리는지 계산하여라.</li><li>고대 그리스의 어떤 국가의 인구는 100,000명이다. 이 국가는 한창 성장세라서 인구가 매년 10% 증가한다. 하지만 호전적인 국가이기 때문에 매년 5,000명이 전쟁으로 사망한다. 200,000명이 넘을 때까지 몇 년이 걸리는지 계산하라. (단, 인구가 먼저 증가한 다음에 전쟁으로 사망한다고 가정한다.)</li><li>피보나치 수열은 앞 두개의 숫자는 1이며 다음 숫자는 바로 이전 숫자 두 개의 합이다.&nbsp;<code>(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...)</code>&nbsp;사용자로부터 양수 N을 입력받고, 피보나치 수열의 N 번째 수를 출력하여라.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>msg = ''
i = 0
while i &lt; 8:
    msg += '하'
    print(msg)
    i += 1</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":2} -->
<ol start="2"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>low = int(input('작은 수를 입력하세요 >> '))
high = int(input('큰 수를 입력하세요 >> '))

i = low
while i &lt;= high:
    if i % 2 == 0:
        print(i)
    i += 1</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":3} -->
<ol start="3"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = 0
max_num = 0
while i &lt; 5:
    num = int(input("숫자를 입력하세요 >> "))
    if max_num &lt; num:
        max_num = num
    i += 1
print('최댓값은', max_num, '입니다')</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":4} -->
<ol start="4"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>result = 0
i = 1
while i &lt;= 10:
    result += int(input(str(i) + '번째 학생의 점수를 입력하세요 >> '))
    i += 1
print('합계는', result, '점 입니다.')</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":5} -->
<ol start="5"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>result = 1
while True:
    result *= int(input())
    if result > 1000:
        print(result)
        break</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":6} -->
<ol start="6"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>count = 0
result = 0
while True:
    num = int(input())
    result += num
    if num >= 5:
        count += 1
    if count >= 3:
        break
print(result)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":7} -->
<ol start="7"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>num = 1
ac = 1
result = 0
while num &lt;= 191:
    result += num
    num += ac
    ac += 1
print(result)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":8} -->
<ol start="8"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>people = 50000
year = 0
while True:
    people *= 0.9
    year += 1
    if people &lt;= 20000:
        break
print(year, "년이 지났습니다.")</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":9} -->
<ol start="9"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>pop = 100000
year = 0
while pop &lt; 200000:
    pop *= 1.1
    pop -= 5000
    year += 1
print(year)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":10} -->
<ol start="10"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>i = int(input("숫자를 입력하세요 >> "))
if i == 1 or i == 2 :
    print(1)
else:
    s1 = 1
    s2 = 1
    j = 3
    while j &lt;= i:
        s3 = s1 + s2
        s1 = s2
        s2 = s3
        j += 1
    print(s3)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1809</wp:post_id>
		<wp:post_date><![CDATA[2020-04-29 11:48:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-29 02:48:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 20:17:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 11:17:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%b0%98%eb%b3%b5%eb%ac%b8-%ec%bd%94%eb%94%a9%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1219</wp:comment_id>
			<wp:comment_author><![CDATA[파이썬 강좌 &#8211; 반복문 ~ 비슷한 작업을 반복하기 &#8211; Under The Pencil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://elvanov.com/257</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.68.168.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-30 20:14:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-30 11:14:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 반복문을 설계하는 방법을 익힌 후 본격적으로 프로그래밍 문제를 풀어보도록 하겠습니다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1588245256.296004;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1588245482.370538;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[소리 안나오는 현상 고치기 (MSI 노트북, Nahimic 관련 이슈)]]></title>
		<link>https://elvanov.com/1846</link>
		<pubDate>Thu, 30 Apr 2020 13:25:54 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1846</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>문제 현상</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 절은 단순히 문제가 뭔지 찾고 싶은 필자의 여행을 적어놓은 것이다. 해결책을 빨리 보고 싶으신 분은 <code>문제 현상</code>을 스킵해도 무방하다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어느날 갑자기 소리가 안들렸다. 어제 생전 안쓰던 블루투스 스피커를 사용했는데, 혹시 그것 때문인가? 아니다, 그럴리는 없었다. 그냥 노트북과 <code>3.5mm</code> 잭으로 연결한 스피커 뿐만 아니라 <strong>노트북 내장 스피커도 나오지 않았다.</strong> 도대체 뭐가 문제인가!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:image {"id":1847,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/1.jpg" alt="" class="wp-image-1847"/><figcaption>버튼을 눌러도 반응이 없음.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>원래 저기 버튼 누르면 <strong><em>뚜루룽~</em></strong> 하면서 소리가 나와야 하는데 안 나왔다. 원인이 뭐지? 하면서 장치관리자를 찾아보다가 처음 보는 게 눈에 들어왔다. 바로 <code>Nahimic mirroring device</code> 라는 녀석이다. 웃긴 것은, <strong>이 놈은 처음부터 사용하지 않음으로 되어 있다가, 사용하기로 켜니까 여기서 볼륨 바가 왔다갔다 하는 것이다! </strong>물론 그 쪽으로 사운드를 연결하려 해도 소리는 나오지 않았다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1849,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic.jpg" alt="" class="wp-image-1849"/><figcaption>이때까지 보이지 않던 Nahimic 어쩌구 하는게 보임, 그리고 여기에 볼륨 바가 왔다갔다 하는 것을 발견함(이건 이미지 없음)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1852,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/장치관리자.jpg" alt="" class="wp-image-1852"/><figcaption>장치 관리자의 낯선 녀석</figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>여하튼 원인도 모르고, 삭제하고, 지우고, 드라이버 새로 깔고, 반복하고, 수천번 컴퓨터 껐다가 다시 켜고, 드라이버 자동 검색해보고 별의 별 짓을 다 했는데 고쳐지지 않았다. 조금 있다가, <strong>인터넷을 차단한 후 사운드 드라이버를 삭제해도 남아있는 초 초 기본 사운드 드라이버로는 사운드가 들린다는 사실을 깨달았다.</strong> 인터넷에 연결된 상태에서 <span style="text-decoration: underline;">윈도우가 자동으로 다운받는 드라이버가 문제</span>였다는 것이다! 오마이갓. 그렇다면 드라이버를 새롭게 깔아야 하는 것인가.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1851,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/changing.jpg" alt="" class="wp-image-1851"/><figcaption>인터넷을 연결한 상태에서 드라이버를 지워도 다시 깔리는데, 그 중간에 <strong>겁나게 없어졌다 생겼다를 반복</strong>하더라.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1850,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/확인중.jpg" alt="" class="wp-image-1850"/><figcaption>문제 해결 실행한 모습. 도움은 안됨.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":1848,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/delete.jpg" alt="" class="wp-image-1848"/><figcaption><code>Realtek High Definition Audio Driver</code>를 지워보기도 했다. 사실 그냥 스피커(<code>Realtek(R) Audio</code>)라고 되어있는 것과 차이는 전혀 모르겠다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>결국 구글링을 열심히하여 나오는 이상한(?) 솔루션을 따라할 수 밖에 없었다. 마이크로소프트가 자동으로 업데이트하는 드라이버가 하자가 있는 드라이버라니.. 이 사실도 믿기 힘들었지만 뭐 일단 해결이 안되니 할 수 있는 걸 다 할 수 밖에..</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>해결</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아마 <strong><span style="text-decoration: underline;">노트북(혹은 메인보드)이 MSI 계열에서만 생기는 문제</span></strong>인듯싶다. 여기서 사용되는, 뭔가 이상한 사운드 드라이버 하나가 추가되어 있는데, 그게 <code>Nahimic</code> 이라는 녀석인 것 같고, 윈도우는 그것마저 알아서 읽어버려 드라이버를 설치해보지만, 뭔가 버전이 맞지 않아서 아예 소리가 먹통이 되나보다. 그래서 이러한 <strong>사운드 드라이버를 모두 수동으로 설치하는 작업이 필요</strong>했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>참고로 필자는 <code>MSI GP63 Leopard 8RE</code>노트북에 <code>Windows 10 Pro x64 1909</code> 운영체제가 설치되어 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://www.msi.com/faq/notebook-3640">사운드 드라이버 문제에 대한 지침 (영문)</a></li><li><a href="https://storage-asset.msi.com/global/picture/faq/10016371@2019-1113-0829-525747@kb_03640_en.pdf">위 지침의 자세한 설명 (pdf, 영문)</a></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>아래 내용은 위 <code>pdf</code>을 쓸만한 것만 요약한 것이다. 자, 아주 간단하게 설명하도록 하겠다. (이미지도 없다!)</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><a href="https://nahimic.helprace.com/i734-new-nahimic-3-audio-driver-update">new nahimic 3 audio 글</a>로 들어가서 <a href="https://www.nahimic.com/download/11742/">MSI 노트북용 드라이버</a>를 다운받아 놓는다.</li><li>인터넷을 끊는다.</li><li>다음 문구가 들어간 건 <strong>모조리 삭제</strong>한다. <strong><code>앱 및 기능</code>과 <code>프로그램 및 기능</code> 둘다 들어가서 확인한다.</strong><ul><li>Realtek Audio</li><li>Realtek High Definition Audio Driver</li><li>Nahimic</li></ul></li><li>컴퓨터를 다시 시작한다. (<strong>아직 인터넷은 끊겨있는 상태이다</strong>.)</li><li><strong>다운받아 놓은 드라이버 두 종</strong>을 설치한다.<ul><li><code>MSI_Audiodrivers\Nahimic_drivers - MSI\install.bat</code></li><li><code>MSI_Audiodrivers\Realtek_driver\8904.1_UAD_WHQL_Nahimic_2020_0302_151438\Setup.exe</code></li></ul></li><li><strong>인터넷을 다시 연결한다.</strong></li><li><strong>Microsoft Store</strong>에서 다음 두 가지를 설치한다.<ul><li><a href="https://www.microsoft.com/ko-kr/p/realtek-audio-control/9p2b8mcsvpln">Realtek Audio Control</a></li><li><a href="https://www.microsoft.com/ko-kr/p/nahimic/9n36ppmp8s23">Nahimic</a></li></ul></li><li>소리가 잘 나오는지 확인한다!!</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>오 하나님. 감사합니다. 해결되었어요. <code>Nahimic</code> 켜보니까 뭔가 으리으리하더라. 무슨 귀찮은 부가효과인지! 싶었는데 효과 키고 끄니까 느낌이 좀 다르긴 함.ㅋ 그냥 이대로 써야겠다. 잘 써지다가 안써지는 건 극혐이긴 하지만.. 제발 앞으로 이상 없었으면 좋겠담..</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1854,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/04/nahimic2-1024x709.jpg" alt="" class="wp-image-1854"/><figcaption>각종 이펙트를 켜고 끌 수 있는 창</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1846</wp:post_id>
		<wp:post_date><![CDATA[2020-04-30 22:25:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-30 13:25:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-30 22:25:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-30 13:25:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%86%8c%eb%a6%ac-%ec%95%88%eb%82%98%ec%98%a4%eb%8a%94-%ed%98%84%ec%83%81-%ea%b3%a0%ec%b9%98%ea%b8%b0-msi-%eb%85%b8%ed%8a%b8%eb%b6%81-nahimic-%ea%b4%80%eb%a0%a8-%ec%9d%b4%ec%8a%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1778</wp:comment_id>
			<wp:comment_author><![CDATA[AGIH]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kds0188@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[49.174.226.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-31 12:42:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-31 03:42:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다감사합니다ㅠㅠ 드라이버 클린 인스톨 문제라고 직감해서 해결해보려고 했지만 안되고 있었는데 여기서 답을 찾아갑니다ㅠㅠ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1590896551.446808;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1590911704.882035;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1802</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[113.130.158.174]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-01 12:18:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-01 03:18:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[해결되었다니 다행이네요!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1778</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1590981529.371563;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1960</wp:comment_id>
			<wp:comment_author><![CDATA[Devos]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cjb4120@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.223.146.139]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-06 18:19:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-06 09:19:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[와 한달동안 포기하고있었는데... 이거 따라해서 겨우 됬네요 ㅠㅠ 
MSI GE75 Rader 쓰시는분들중에 이런현상 있으시면 꼭 해보세요]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1591435146.687394;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1591761718.403072;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2743</wp:comment_id>
			<wp:comment_author><![CDATA[doydo-it]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fkavm@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.176.18.253]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-18 19:07:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-18 10:07:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[와우... 해결!!!
감사합니다.!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1595066854.868493;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1595072812.808838;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2744</wp:comment_id>
			<wp:comment_author><![CDATA[KU]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[medici3vr@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[220.70.62.153]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-18 19:23:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-18 10:23:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[저 댓글 잘 안 남기는데.. 컴퓨터 학원에서 제 노트북만 소리가 안나서 계속 헤맸거든요. 한 달 동안 그냥 두었는데.. 솔직히 좀 감동입니다 ㅠㅠㅜ 덕분에 다시 팀프로젝트를 제대로 할 수 있겠어요. 고맙습니다!!! 정말 고맙습니다. 잘 안되는 친구들 이 링크 소개해줘야겠어요. 고맙습니다!!!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1595067809.326893;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1595072815.309648;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2303</wp:comment_id>
			<wp:comment_author><![CDATA[김형석]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ototyrxr@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[183.101.61.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-22 16:58:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-22 07:58:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[사랑을 고백해도 될까요? ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 계신 방향으로 그랜절 올리겠습니당 ㅠㅠㅠ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1592812687.616935;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1592887644.630848;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2318</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.113.98.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-23 13:47:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-23 04:47:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[해결되어서 다행이네요~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1960</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1592887667.759501;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2319</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.113.98.59]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-23 13:48:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-23 04:48:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[그럼 저는 맞그랜절~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2303</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1592887683.727933;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2649</wp:comment_id>
			<wp:comment_author><![CDATA[ckd1040]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pathos0307@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.255.223.240]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-12 23:14:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-12 14:14:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[선생님 감사합니다 덕분에 해결됬습니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1594568774.602469;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1594563247.195974;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2651</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[111.118.36.174]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-13 00:46:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-12 15:46:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[해결되어 다행입니다!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2649</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1594568801.726713;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>4033</wp:comment_id>
			<wp:comment_author><![CDATA[AL-D]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hmlimfgo04@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[220.116.104.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-16 23:59:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-16 14:59:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[지금 쓰는 노트북 처음 샀을 때 2주도 안돼서 같은 증상으로 맛이 가서 밀어버렸었는데, 이런 문제였군요. 좋은 정보 알아갑니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1600268385.892838;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600828682.11367;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>3063</wp:comment_id>
			<wp:comment_author><![CDATA[DV]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dooneri@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[106.101.193.183]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-08-04 11:00:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-08-04 02:00:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다...보고 잘 해결했습니다...정말 친절하신것 같아요...^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1596506421.905378;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1596756765.176606;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>3608</wp:comment_id>
			<wp:comment_author><![CDATA[무열공파]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[diner2002@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.168.75.85]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-08-26 20:32:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-08-26 11:32:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사감사합니다~ 드라이버 다 잡고 Mahimic 프로그램 구동해서 테스트 잘 마쳤는데요...흠
시스템의 설정-&gt;소리 에서 스피커가 기본은 Realtek speaker로 되어있는데, 이걸 Nahimac speaker로 바꾸면
시스템에서 아무 소리도 나지 않습니다. 테스트를 해보면 막대는 움직이는걸로 봐서 작동은 하고 있는것 같은데 말이죠?
그럼, 이게 게임을 돌릴 경우 Nahamic 스피커를 쓰는건지 아닌지 알 수가 없을것 같아서요ㅜㅜ
이 부분에 대해 지도편달 부탁드리겠습니다...
미리 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600828682.11996;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1598441545.900919;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7334</wp:comment_id>
			<wp:comment_author><![CDATA[김성주]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kjs3270@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[122.192.12.246]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-28 19:43:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-28 10:43:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[윈도우설정-소리설정에서 하단의 고급설정에서 설정을 하면되더러고요
소리제어판보다 윈도우에서의 설정이 우선인듯요.
nahimic3 도 이큐세팅에 따른 변화가 있고 쓸만하구요]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1627469008.185653;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627553320.694899;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7593</wp:comment_id>
			<wp:comment_author><![CDATA[멍멍이]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ysji21153@gne.go.kr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[49.171.166.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-11 22:02:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-11 13:02:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[성은이 망극하여이다. 저어어어어언하~~~~~~~~~~~~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631365328.290228;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631878753.418649;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[캐치 미 이프 유 캔 (2002) 리뷰]]></title>
		<link>https://elvanov.com/1860</link>
		<pubDate>Mon, 04 May 2020 07:29:33 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1860</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":1861,"width":418,"height":500,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/05/12110210A7E5399FE9.jpg" alt="" class="wp-image-1861" width="418" height="500"/><figcaption>잘생긴 레오나르도 디카프리오</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>컴퓨터로 보았다. 레오나르도 디카프리오는 아주 잘 생겼다. <s>렛잇비가 아니라</s> 레츠비 때까지만 해도 멋졌는데 왜 요새는 똥배 아저씨가 되었는지 모르겠다. 톰 행크스는 이름 아주 많이 들어보고, 유명한 것도 알지만 자세히는 몰랐는데, 연기를 잘하기는 잘하더라. 다 연기 잘한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>캐릭터가 다들 인상적이었다. 인간적인 게 인상적이다. 프랭크 애벅네일(디카프리오)는 사이가 틀어진 엄마와 아빠를 재결합하기 위해 고군분투했으며, 제대로 되지 않음에 절망했고, 외로워하고, 아버지에게 다른 차원의 관심을 요구한다. 칼 핸리티(톰 행크스)도 처음에 천재 악동을 잡을 뻔할 때의 서투름과 당황함, 단서를 기어코 찾아냈을 때의 기쁨, 디카프리오를 향한 연민 등 그의 감정이 생생히 스크린으로 느껴졌다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>보통 영화에서 천재를 묘사할 때에는 그의 탁월한 지능이나 능력을 직접적으로 묘사해서 관객들로 하여금 <em>우와~ 쩐다</em> 하는 반응을 이끌어내곤 하는데, 이 영화는 조금 결이 달랐다. 아무리 천재라고 해도 신이 아닌 이상 헤쳐나가기 힘든 위기를 맞이했을 때의 당혹스러움을 묘사했다. 극중 인물들에게는 들키지 않을 정도의 당황함과 스크린 너머의 우리들에게는 톡톡히 느껴질 만한 혼돈 사이에서 아슬아슬하게 줄타기 하는 연기(뭐, 연출일 수도 있고)도 정말 멋있다고 생각한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>인터넷에 이 영화에 대해 검색을 해봤다. 2002년에 개봉했으니, 촬영 소식은 그 전부터 들려왔을 터이다. 2001년, 씨네21의 어떤 기사에서 (가제긴 하겠지만) <strong>잡을테면 잡아봐</strong> 라고 번역된 영화 제목을 발견했다. 뭔가 귀여워서 웃겼다. 캐치 미 이프 유 캔이라는 영어 단어가 그렇게 어려운 편이 아니어서 그대로 음차하여 영화 제목으로 썼던 것이 좋았다고 생각한다. 영어 화자 입장이라면, 저렇게 깜찍한 "잡을테면 잡아봐"라는 어감일까, 그렇지 않을까 상상해보게 된다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1860</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 16:29:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 07:29:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-04 16:29:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-04 07:29:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%ba%90%ec%b9%98-%eb%af%b8-%ec%9d%b4%ed%94%84-%ec%9c%a0-%ec%ba%94-2002-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[찬실이는 복도 많지 (2019) 리뷰]]></title>
		<link>https://elvanov.com/1867</link>
		<pubDate>Tue, 12 May 2020 10:20:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1867</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":1868,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/05/e1e4c6106dce40a7b4af7f138bf446f11568823817066-1024x683.jpg" alt="" class="wp-image-1868"/><figcaption>열심히 걸어가는 찬실이</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>찬실은 나이 40이 되도록 자신이 좋아하는 일인 영화 일만을 열심히 좇았으나 허망하게 그만둘 수 밖에 없었고, 자신이 계속 추구하던 가치가 정말 가치있는 건가 라고 자문하게 된다. 흰색 반바지와 흰생 난닝구를 입고 돌아다니는 중국 배우를 자칭하는 희안한 귀신의 도움을 받으며, 생각을 깊게 하며 내적으로 성장한다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>영화 초반부에 찬실이의 상황이 확 안좋아지는 걸 빼고는 찬실을 둘러싼 환경은 영화 내도록 그렇게 크게 변하지 않는다. 세상에 대한 주인공의 태도가 변화해가는 과정은 어쩌면 두 가지로 이야기할 수 있겠다. 우선, 아무리 발버둥쳐도 인상깊게 반응해주지 않는 무던한 세상을 원망하다가, 서서히 순응해가는 과정이다. 일이 잘 안되니까 연애라도 해야지 하고 새롭게 관계를 진전시키려고 하지만, 이마저도 제대로 되지 않아 절망에 빠진다. 그런데 그게 과연 절망일까? 세상이 나를 힘들게 하려고 절망에 빠뜨리는 것일까? 무엇이 나를 힘들게 하는 것일까? 이런 의문을 찬실이는 계속해서 생각했을 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또 다른 하나는, 스스로를 둘러싼 환경은 본인 뜻과는 관계없이 마음대로 변화하는데, 마음과 생각은 정체되어 있다가 세상 따라 함께 서서히 변화해가는 과정일 수 있겠다. "내가 좋아하는 일은 영화이다." 라는 대전제의 믿음이 흔들리는 순간 찬실은 혼란스러워한다. 정말로 좋아하는 게 뭔지 생각해보라는 귀신의 말에 뇌가 풀가동된다. "영화 말고도 중요한 가치가 많아서 만약 영화 일을 하지 않더라도 살 수 있을 것 같다"는 썸남의 이야기에 흔들린다. 이윽고 "좋아한다는 것"의 무게를 살짝 덜어서, 그냥 마음가는 대로 시나리오를 쓴다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>영화 제목을 잘 지었다고 생각한다. 네이버 평점을 확인해보니 9.15점으로 아주 높은 편에 속했다. 40대 여주인공의, 극적인 성과없는 내면 성숙에 집중하는 이야기이다. 남자들 보다는 여자들 취향에 맞겠다 싶었는데, 제목부터가 남자들에게는 전혀 매력없이 다가오는 제목이니 애초에 남자들이 많이 안봤겠지 싶었다. 와우. 남녀 비율을 보니 성격은 완전히 다르기는 하지만 &lt;윤희에게>(2019)보다 여성 비율이 1%P 높은 75%이라니, 대단한 걸.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어머니가 돌아가신지 채 두 달이 되지 않았는데, 윤여정이 쓴 문구 "<strong>사람도 꽃처럼 돌아오면은 얼마나 좋겠습니까</strong>."를 보는데 눈물이 왈가닥 쏟아졌다. 마스크에서 짠내가 조금 날 것 같다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1867</wp:post_id>
		<wp:post_date><![CDATA[2020-05-12 19:20:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-12 10:20:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-12 19:20:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-12 10:20:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%b0%ac%ec%8b%a4%ec%9d%b4%eb%8a%94-%eb%b3%b5%eb%8f%84-%eb%a7%8e%ec%a7%80-2019-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - 변수의 범위 (Scope) ~ 이름을 탐색하기]]></title>
		<link>https://elvanov.com/1886</link>
		<pubDate>Wed, 13 May 2020 08:30:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1886</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1886</wp:post_id>
		<wp:post_date><![CDATA[2020-05-13 17:30:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-13 08:30:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 17:30:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 08:30:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-%eb%b3%80%ec%88%98%ec%9d%98-%eb%b2%94%ec%9c%84-scope-%ec%9d%b4%eb%a6%84%ec%9d%84-%ed%83%90%ec%83%89%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[파이썬 강좌 - namedtuple - 데이터 묶음 손쉽게 만들기]]></title>
		<link>https://elvanov.com/1972</link>
		<pubDate>Tue, 26 May 2020 04:31:03 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=1972</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>이번 절에서는 <code>namedtuple</code> 에 대해서 다룹니다. <code>namedtuple</code>은 간단히 말하자면 각 항목에 이름을 붙일 수 있는 튜플입니다. 이는 꼭 알 필요는 없지만 적지 않은 곳에 유용하게 쓰일 수 있습니다. 개발 속도와 편리함이 최고 장점인 파이썬인만큼, 유용한 도구를 많이 알아두면 더더욱 편리해지겠지요. 하지만 지금까지 배웠던 <a href="/182">클래스</a>나 각종 기본 컨테이너들, 이를테면 <a href="/273">리스트</a>, <a href="/1357">딕셔너리, 튜플</a> 등에 익숙하지 않다면 그것부터 먼저 확실하게 익히고 와주시길 바랍니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리는 데이터를 묶어서 관리하고자 할 때 편하게 쓸 수 있는 것이 <a href="/1357">튜플</a>과 <a href="/182">클래스</a>입니다. 클래스는 어떤 객체의 틀이라고 했습니다. 붕어빵을 찍어낼 때 쓰는 그 틀 말입니다. 틀을 통해 붕어빵(객체)을 찍어냅니다. 객체는 저마다의 속성과 메소드가 있고, 이는 언제든지 수정이 가능합니다. 그런데 메소드까지 정의하려니 머리가 아픕니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 우리에게는 언제든지 간단하게 사용할 수 있는 튜플이 있습니다. 하지만 튜플은 내부 데이터에 접근하려면 인덱스를 사용하는 수 밖에 없습니다. 이런 상황에서 어떻게 더 손쉽게 데이터를 묶어서 관리할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>구현 목표 설정</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>붕어빵의 정보를 관리한다고 생각해봅시다. 그냥 뭐 붕어빵 게임에서 손님들의 취향에 맞는 붕어빵을 잘 만들어야 낸다고 가정해보자구요. 그렇다면 붕어빵에 관련된 정보는 아래와 같이 설정하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>붕어빵에 관련하여 저장해야 할 정보는 속재료(팥, 바닐라)와 바삭함 정도(1~10). 붕어빵을 여러 개 저장할 수 있어야 함.</strong></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>또한, 우리에게는 다음과 같은 요구사항이 있다고 가정합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>다음 다섯 개의 붕어빵을 데이터로 가지고 있어주세요 &gt; <code>(팥, 1)</code>, <code>(바닐라, 5)</code>, <code>(바닐라, 4)</code>, <code>(팥, 8)</code>, <code>(팥, 9)</code></strong></li><li><strong>입력한 순서에서 세번째 붕어빵에 대한 정보를 출력하세요.</strong></li><li><strong>모든 붕어빵을 출력하세요.</strong></li><li><strong>바삭함이 <code>5</code> 미만인 붕어빵을 모두 삭제하고 다시 모든 붕어빵을 출력해보세요.</strong></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>쌩짜 리스트로 구현하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>가장 간단한 구현은 붕어빵의 속재료와 바삭함에 해당하는 정보를 각각 리스트로 만들어 인덱스 위주로 관리를 하는 것이죠. 예를 들어 <code>source</code> 리스트와 <code>crispy</code> 리스트를 만들고, 같은 인덱스를 가지고 있는 것끼리 같은 데이터를 저장한다는 개념을 우리가 기억하도록 합시다. 즉 <code>source[0]</code>과 <code>crispy[0]</code>을 붕어빵 하나에 대응시키고, <code>source[1]</code>과 <code>crispy[1]</code>을 또 다른 붕어빵 하나에 대응시키는 식으로 반복하는 것입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어쨌거나 이런 방법으로, 한번 구현해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>source = &#91;]
crispy = &#91;]

source.extend(&#91;"팥", "바닐라", "바닐라", "팥", "팥"])
crispy.extend(&#91;1, 5, 4, 8, 9])

print(f"세번째 붕어빵에 대한 정보 - 재료:{source&#91;2]}, 바삭함:{crispy&#91;2]}") ##a_1##

print(f"--- 모든 붕어빵을 출력 --- ")
for i in range(len(source)): ##a_2##
    print(f"{i+1}번째 붕어빵 - 재료:{source&#91;i]}, 바삭함:{crispy&#91;i]}")

print(f"--- 바삭함이 5 미만인 붕어빵들을 삭제합니다. ---") ##a_3##
remove_idx = &#91;i for i in range(len(crispy)) if crispy&#91;i] &lt; 5] 
remove_idx.sort(reverse=True)
for i in remove_idx:
    source.pop(i)
    crispy.pop(i)

print(f"--- 모든 붕어빵을 출력 ---")
for i in range(len(source)):
    print(f"{i+1}번째 붕어빵 - 재료:{source&#91;i]}, 바삭함:{crispy&#91;i]}")</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>세번째 붕어빵에 대한 정보 - 재료:바닐라, 바삭함:4
--- 모든 붕어빵을 출력 ---
1번째 붕어빵 - 재료:팥, 바삭함:1
2번째 붕어빵 - 재료:바닐라, 바삭함:5
3번째 붕어빵 - 재료:바닐라, 바삭함:4
4번째 붕어빵 - 재료:팥, 바삭함:8
5번째 붕어빵 - 재료:팥, 바삭함:9
--- 바삭함이 5 미만인 붕어빵들을 삭제합니다. ---
--- 모든 붕어빵을 출력 ---
1번째 붕어빵 - 재료:바닐라, 바삭함:5
2번째 붕어빵 - 재료:팥, 바삭함:8
3번째 붕어빵 - 재료:팥, 바삭함:9</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 작성하게 된다면 걷잡을 수 없는 개발의 늪으로 한 발자국 내딛는 것이나 마찬가지 입니다. 아래에서 각종 문제를 설명하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>a_1</em>(1.) 이름 설정의 문제</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"세번째 붕어빵에 대한 정보 - 재료:{source&#91;2]}, 바삭함:{crispy&#91;2]}") </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>단순한 리스트로 만들게 되면 이름부터 고민입니다. 한 눈에 보아도 <code>source</code>가 붕어빵의 재료를 나타내는 말이라는 것을 유츄해내기란 결코 쉬운 일이 아닙니다. 굳이 정확히 표현하자면 <code>fish_shaped_bun_sources</code>라고 표기해야 올바른 표현이겠지만, 변수명이 너무 길어지네요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또한 우리의 프로그램은 늘 간단하지만, 언제나 복잡해질 수 있는 가능성을 지니고 있습니다. 처음에는 간단하게 붕어빵만 취급하지만 국화빵까지 다루게 된다면 어떻게 될까요? 재료와 바삭함은 국화빵에도 동일하게 적용할 수 있는 부분이기 때문에 붕어빵과 국화빵을 명확하게 구별하기 위해 더 정확한 변수명을 사용하여야 겠습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>사실 이름 설정 문제는 후술할 문제에 비하면 그다지 까다롭진 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>a_2</em>(2.) 리스트 순회 문제</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>for i in range(len(source)):</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>리스트의 인덱스에 대응하는 항목을 한꺼번에 가져오기 위해 인덱스를 직접 순회하여야 하므로 <code>range(len(source))</code>가 계속 쓰이고 있습니다. 이는 가독성을 떨어뜨립니다. 또한 <code>source</code>의 길이를 잴 건지, <code>crispy</code>의 길이를 잴 건지 결정해야 하는데요, 둘 중 아무거나 선택해도 상관이 없지만, 아무 상관 없는 결정을 내려야 하는데에 더 피로감을 느낄 수도 있습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>a_3</em>(3.) 리스트 관리 문제</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>가장 큰 문제입니다. 우리는 데이터들을 업데이트하고 삭제할 때마다 난관에 봉착합니다. 가장 큰 관건은 <strong>리스트의 각 인덱스가 어떤 같은 붕어빵을 가리킨다</strong>라는 전제 조건을 항상 만족하도록 하는 것입니다. 만약 붕어빵 하나를 삭제하고 싶은데, 두 리스트 중 하나라도 삭제가 되지 않는다면 큰 문제입니다. 모든 인덱스가 뒤틀려져 데이터가 엉망이 되어버리고 말겠지요! 아래는 만약 <code>crispy</code>에서만 하나의 데이터가 삭제되었을 때의 데이터를 보여줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>리스트 인덱스</th><th><code>0</code></th><th><code>1</code></th><th><code>2</code></th><th><code>3</code></th><th><code>4</code></th></tr></thead><tbody><tr><td><code>source</code></td><td>팥</td><td>바닐라</td><td><strong><span class="has-inline-color has-vivid-red-color">바닐라</span></strong></td><td><span class="has-inline-color has-vivid-red-color"><strong>팥</strong></span></td><td><strong><span class="has-inline-color has-vivid-red-color">팥</span></strong></td></tr><tr><td><code>crispy</code></td><td><code>1</code></td><td><code>5</code></td><td><code><span class="has-inline-color has-vivid-red-color"><strong>8</strong></span></code></td><td><code><strong><span class="has-inline-color has-vivid-red-color">9</span></strong></code></td><td><strong><span class="has-inline-color has-vivid-red-color">–</span></strong></td></tr></tbody></table><figcaption><code>crispy</code>에서만 인덱스 <code>2</code>가 삭제되었을 때의 데이터 뒤틀림</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>이러한 상황을 보여주는 이유는, 우리는 언제든지 실수할 수 있는 사람이기 때문입니다. 프로그램이 의도대로 동작하지 않을 때 우리의 실수를 찾아들어가는 과정은 때로는 매우 고되기 때문에, 실수할 가능성 자체를 줄이는 노력도 필요합니다. 그러한 관점에서는 두 개의 리스트로 관리하는 건 썩 좋은 방법이 아닌듯 싶습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"--- 바삭함이 5 미만인 붕어빵들을 삭제합니다. ---") ##a_3##
remove_idx = &#91;i for i in range(len(crispy)) if crispy&#91;i] &lt; 5] 
remove_idx.sort(reverse=True)
for i in remove_idx:
    source.pop(i)
    crispy.pop(i)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>어쨌든 이러한 상황을 잘 다스리기 위해 조건에 맞는 붕어빵을 삭제하는 데만도 다음 세 가지 단계를 거쳐야 합니다. 아래는 위 코드를 순서에 맞게 설명한 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>우선 조건에 해당하는 항목의 인덱스를 뽑아내어 리스트에 보관합니다. (<code>remove_idx</code>) 여기서는 <a href="/1713">지능형 리스트</a>를 이용했습니다.</li><li>삭제해야 할 인덱스를 크기가 큰 순으로 정렬합니다. 인덱스가 작은 것부터 삭제하게 되면 뒤의 인덱스가 모두 -1이 되어버리므로 추가적으로 보정해야 올바른 항목을 삭제할 수 있기 때문에 더 힘들어집니다.</li><li>비로소 삭제합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>튜플로 구현하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>튜플은 여러 개의 데이터를 한꺼번에 묶을 때 아주 편리합니다. 그렇다면 한번 튜플로 작성해보도록 할까요? (아무래도 클래스보단 쉬우니깐요) 결과는 완전히 동일하므로 계속 생략하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>fishes = &#91;("팥", 1), ("바닐라", 5), ("바닐라", 4), ("팥", 8), ("팥", 9)] ##c_1##

def printFishes(fishes): ##c_2##
    print(f"--- 모든 붕어빵을 출력 --- ")
    for i, fish in enumerate(fishes):
        print(f"{i+1}번째 붕어빵 - 재료:{fish&#91;0]}, 바삭함:{fish&#91;1]}")

print(f"세번째 붕어빵에 대한 정보 - 재료:{fishes&#91;2]&#91;0]}, 바삭함:{fishes&#91;2]&#91;1]}") ##c_3##

printFishes(fishes)

print(f"--- 바삭함이 5 미만인 붕어빵들을 제외합니다. "
    "(5 이상만 가져옵니다.) -- ")
crispy_fishes = &#91;f for f in fishes if f&#91;1] >= 5] ##c_4##

printFishes(crispy_fishes)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>결과는 전과 거의 동일합니다. 바뀌어진 부분 위주로 코드를 살펴보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>c_1</em>(1.) 데이터 정의</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>fishes = &#91;("팥", 1), ("바닐라", 5), ("바닐라", 4), ("팥", 8), ("팥", 9)]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>튜플의 첫 번째 항목에는 재료를, 두번째 항목에는 바삭함 정도를 넣도록 변경했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>c_2</em>(2.) 편의 함수 정의</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>def printFishes(fishes):
    print(f"--- 모든 붕어빵을 출력 --- ")
    for i, fish in enumerate(fishes):
        print(f"{i+1}번째 붕어빵 - 재료:{fish&#91;0]}, 바삭함:{fish&#91;1]}")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>붕어빵을 담고 있는 배열을 받아 출력하는 편의 <a href="/270">함수를 따로 정의</a>했습니다. 함수 내부에서 <code>for</code>와 <code>enumerate</code>(추가 예정)를 통해 접근하고 있습니다. 첫번째 요소가 재료를 나타내고, 두번째 요소가 바삭함을 나타내므로 <code>fish[0]</code>, <code>fish[1]</code>과 같이 표현합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>여기에서 튜플을 썼을 때의 단점이 드러나지요. <strong><span style="text-decoration: underline;"><code>0</code>과 <code>1</code>은 단지 숫자일 뿐인데, 각각의 위치에 어떤 값이 대응되는지 아는 사람은 오로지 코딩을 직접 하는 우리밖에 없습니다. 아까 작성한 <code>source</code>와 <code>crispy</code>는 글자 자체가 사라졌다구요! </span></strong> 1년 뒤 이 프로그램을 본다고 상상해보세요. <code>fish[0]</code>과 <code>fish[1]</code>에 어떤 값을 넣었는지 저조차 기억하기 힘들 겁니다. 주석을 적어놓으면 되기야 하지만 쓸데없는 노력이 들어가게 된다는 기분이 드네요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>c_3</em>(3.) 값끼리 묶여있음이 보장됨</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"세번째 붕어빵에 대한 정보 - 재료:{fishes&#91;2]&#91;0]}, 바삭함:{fishes&#91;2]&#91;1]}")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>리스트 두 개를 쓰는 것보다 더 좋은 점입니다. 세 번째 붕어빵에 접근하기 위해 우리는 첫 번째 예시에서는 <code>source[2]</code>와 <code>crispy[2]</code> 이렇게 분리하여 접근하고 관리도 따로따로 해주어야 했습니다. 우리는 같은 인덱스 값에 대해서 올바르게 엮여있어야 한다는 것을 기억할 뿐 프로그램상으로 어떤 제약사항을 만들 수 없었습니다. 언제든 <code>source</code>와 <code>cripsy</code>의 길이가 달라질 위험이 있었으니까요. 반면 여기서는  <code>fishes[2]</code>라는 중간 과정이 있어, <code>fishes[2][0]</code>과 <code>fishes[2][1]</code>이 프로그램 상에서 하나의 튜플로 강하게 엮여있음을 보장해줍니다. 그래서 <strong>아무리 심한 실수를 해도 데이터가 뒤틀려있다는 걱정을 하지 않아도 됩니다</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 여전히 <code>0</code>과 <code>1</code>이라는 의미를 기억해야 하는 숫자를 사용하고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>c_4</em>(4.) 수월한 관리</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"--- 바삭함이 5 미만인 붕어빵들을 제외합니다. "
    "(5 이상만 가져옵니다.) -- ")
crispy_fishes = &#91;f for f in fishes if f&#91;1] >= 5] ##c_4##</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>바삭함이 <code>5</code> 미만인 항목을 삭제하는 대신, 새로운 리스트를 만들어 바삭함이 <code>5</code> 이상이 되는 붕어빵들을 긁어왔습니다. 만약 <code>source</code>와 <code>crispy</code> 두 개의 리스트로 관리해야 한다면, 새로운 리스트를 만들 때에도 두 개를 만들어서 따로 관리를 해주어야겠지만, 여기서는 그럴 필요가 없습니다! 한층 더 편리해졌다는 것을 느끼실 수 있을 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>클래스로 구현하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>0</code>과 <code>1</code>이라는 것을 쓰지 말고 <code>source</code>, <code>crispy</code>와 같이 의미가 있는 단어를 사용하기 위해 클래스를 만들어 구현해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>class FishShapedBun: ##d_1##
    
    def __init__(self, source, crispy):
        self.source = source
        self.crispy = crispy

def printFishes(fishes):
    print(f"--- 모든 붕어빵을 출력 --- ")
    for i, fish in enumerate(fishes):
        print(f"{i+1}번째 붕어빵 - 재료:{fish.source}, 바삭함:{fish.crispy}") ##d_2##


fishes_data = &#91;("팥", 1), ("바닐라", 5), ("바닐라", 4), ("팥", 8), ("팥", 9)]
fishes = &#91;FishShapedBun(*data) for data in fishes_data] ##d_3##

printFishes(fishes)

print(f"--- 바삭함이 5 미만인 붕어빵들을 제외합니다. "
    "(5 이상만 가져옵니다.) -- ")
crispy_fishes = &#91;fish for fish in fishes if fish.crispy >= 5]

printFishes(crispy_fishes)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>d_1</em>(1.) 클래스 정의</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>클래스 정의에 관한 부분입니다. 딱히 힘들지 않습니다. 내부적으로 <a href="/1265">특별 메소드</a>를 두 개 정의했는데요, 속성을 초기화하기 위한  <code>__init__</code>과 <code>print</code>할 때 예쁘게 보이게 하기 위한 <code>__repr__</code> 입니다. <strong>여기선 <code>source</code>와 <code>crispy</code>가 다시 등장하게 되었습니다! 의미있는 단어를 쓸 수 있어서</strong> 기쁨이 앞서군요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>살짝 아니꼬운 자세로 클래스를 보게 되면, 그냥 단순히 데이터 두 개를 엮는데 클래스까지 만들어야 하나 싶을 수 있습니다. 맞습니다. 데이터 두 개를 엮기 위해 클래스를 사용하는 것은 과분해보이기도 합니다. 유연함에 있어서 클래스는 속성과 메소드를 더 자유롭게 추가할 수 있으나, 사실 <strong>그렇게까지 많은 기능이 필요하지 않습니다</strong>! 이것이 클래스로 만들 때의 유일한 단점인데, 이를 극복하기 위해 후술할 <code>namedtuple</code>이 사용됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>d_2</em>(2.) 속성에 접근하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>객체의 속성에 접근하기 위해 <code>fish[0]</code>, <code>fish[1]</code> 대신 <strong><code>fish.source</code>, <code>fish.crispy</code> 를 사용</strong>했습니다. 기존에는 <code>0</code>과 <code>1</code>이 어떤 의미인지 기억해두고 있거나 주석으로 표기를 해놓거나 했어야 했는데, 이제는 한 눈에 무슨 의미인지 알아볼 수 있게 되었습니다. 가독성 향상은 커다란 성과입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>d_3</em>(3.) 인스턴스 만들기</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>fishes = &#91;FishShapedBun(*data) for data in fishes_data]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>여기에서는 <a href="/1713">지능형 리스트</a>와 함께 언패킹(추가 예정)을 이용했습니다. <code>FishShapedBun(*data)</code>는 <code>FishShapedBun(data[0], data[1])</code>과 같습니다. 그러니까 <code>data</code>의 모든 순회할수 있는 요소를 뽑아내어 생성자로 그대로 전달하는 것이지요. 지금은 <code>data</code> 내부에 팥과 바삭함이라는 두 항목밖에 없지만 만약에 항목이 5개라면 5개로 언패킹이 되겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>namedtuple</code>로 구현하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>드디어 <code>namedtuple</code>입니다! 클래스를 정의하는 대신 <code>namedtuple</code>을 구현하고, 나머지는 코드는 모두 같습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from collections import namedtuple ##e_1##

FishShapedBun = namedtuple('FishShapedBun', "source crispy") ##e_2##

def printFishes(fishes):
    print(f"--- 모든 붕어빵을 출력 --- ")
    for i, fish in enumerate(fishes):
        print(f"{i+1}번째 붕어빵 - 재료:{fish.source}, 바삭함:{fish.crispy}") ##e_3## 


fishes_data = &#91;("팥", 1), ("바닐라", 5), ("바닐라", 4), ("팥", 8), ("팥", 9)]
fishes = &#91;FishShapedBun(*data) for data in fishes_data] 

printFishes(fishes)

print(f"--- 바삭함이 5 미만인 붕어빵들을 제외합니다. "
    "(5 이상만 가져옵니다.) -- ")
crispy_fishes = &#91;fish for fish in fishes if fish.crispy >= 5] 

printFishes(crispy_fishes)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>namedtuple</code>은 튜플과 행동 방식이 아주 비슷하지만 내부 항목을 접근할 때 <code>0</code>, <code>1</code>, <code>2</code>와 같은 <strong><span style="text-decoration: underline;">인덱스 기반이 아니라 속성명을 주입하여 접근</span></strong>합니다. 직접 만든 클래스 기반의 객체와 동일한 사용 방법이지요. <code>namedtuple</code>은 튜플이 가진 단순함에 속성명으로 항목을 접근할 수 있는 기능만 덧댄 타입입니다. 클래스의 방대한 기능 앞에 쩔쩔매지 않고도 손쉽게 타입을 만들어서 이용할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>e_1</em>(1.) <code>import</code></h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>from collections import namedtuple</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>일단은 <code>namedtuple</code> 을 사용하기 위해 <code>collections</code> 모듈에 있는 <code>namedtuple</code>을 임포트 합니다. 기본적으로 제공해주는 타입이 아니기 때문에 임포트가 필요합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>e_2</em>(2.) 새로운 타입 정의</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>FishShapedBun = namedtuple('FishShapedBun', "source crispy")</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>class</code> 키워드를 쓰지 않고 클래스(타입)을 형성하는 과정입니다. 클래스는 메소드나 속성같은 요소와 비슷하게 하나의 객체로 인식이 가능하기 때문에 함수의 리턴값으로도 받아올 수 있습니다. 좀더 기술적인 용어로 정확하게 말하자면, 위 코드에서 <code>namedtuple</code>은 클래스 팩토리로서, <code>tuple</code>을 상속받아, 이름으로 항목에 접근할 수 있는 기능이 추가된 클래스를 형성하여 리턴합니다. <strong><code>namedtuple</code>을 호출하려면 두 가지 인수가 필요한데, 하나는 <span style="text-decoration: underline;">사용할 타입의 이름</span>이고, 하나는 <span style="text-decoration: underline;">사용할 속성들을 띄어쓰기로 나열한 문자열</span></strong>입니다. 사용할 타입의 이름은 사용할 변수명과 동일하게 설정해주면 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 내용과 같은 <strong>구체적인 동작 방식 및 호출 방법에 대해서는, 이 글에서는 다루지 않으므로 <a href="https://docs.python.org/ko/3/library/collections.html#collections.namedtuple">공식 문서(영어)</a>나 다른 문서를 참조해주시기 바랍니다!</strong> 우리는 핵심 개념만 이해하고 넘어가도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>namedtuple</code> 호출 시 사용할 타입의 이름과 변수명을 동일하게 설정하지 않았을 때 벌어지는 일</li><li><code>namedtuple</code> 호출 시 사용할 속성들을 나열하는 여러 방법</li><li><code>namedtuple</code> 호출 시 <code>rename</code>, <code>default</code>와 같은 다른 파라미터의 역할</li><li><code>_make</code>, <code>_asdict</code>와 같은 편리 메소드</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><em>e_3</em>(3.) 클래스 기반 객체와 동일하게 항목 접근</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>클래스를 썼을 때와 동일하게 <code>fish.source</code> 와 <code>fish.crispy</code> 로 접근할 수 있습니다. 아주 편리하지요!</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사실 아래의 프로그래밍 문제는 <code>namedtuple</code>과는 큰 연관성은 없습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>생짜 리스트로 구현하기</strong>에서, <code>for-in</code> 루프를 <code>len(source)-1</code> 부터 <code>0</code>까지 <code>i</code>를 계속 작아지도록 순회하여, <strong><code>for</code>문 내에서 즉시 삭제하여도 인덱스에 문제가 유발되지 않도록</strong> 프로그램을 수정해보세요.</li><li><strong>생짜 리스트로 구현하기</strong>에서, 바삭함이 5 미만인 붕어빵들을 직접 삭제하는 대신, 새로운 리스트를 만들어 바삭함이 5 이상만 되는 붕어빵만 따로 저장한 다음 원래의 리스트를 대체하는 방식으로 구현해보세요.</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>프로그래밍 문제 정답</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"--- 바삭함이 5 미만인 붕어빵들을 삭제합니다. ---")
for i in range(len(source)-1, -1, -1):
    if crispy&#91;i] &lt; 5:
        source.pop(i)
        crispy.pop(i)</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true,"start":2} -->
<ol start="2"><li>코드입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-python"} -->
<pre class="wp-block-code language-python"><code>print(f"--- 바삭함이 5 미만인 붕어빵들을 삭제합니다. ---")
new_source = &#91;]
new_crispy = &#91;]
for i in range(len(source)):
    if crispy&#91;i] >= 5:
        new_source.append(source&#91;i])
        new_crispy.append(crispy&#91;i])
source = new_source
crispy = new_crispy</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1972</wp:post_id>
		<wp:post_date><![CDATA[2020-05-26 13:31:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-26 04:31:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-29 06:55:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-28 21:55:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%8c%8c%ec%9d%b4%ec%8d%ac-%ea%b0%95%ec%a2%8c-namedtuple-%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%ac%b6%ec%9d%8c-%ec%86%90%ec%89%bd%ea%b2%8c-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python-class"><![CDATA[파이썬 강좌]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[온워드: 단 하루의 기적 리뷰]]></title>
		<link>https://elvanov.com/2000</link>
		<pubDate>Fri, 19 Jun 2020 15:22:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2000</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":2001,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/movie_image.jpg" alt="" class="wp-image-2001"/><figcaption>마법 퐈이아!</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>리뷰를 시작하기 전에 스포일러임을 감안해주시길 바란다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>백만년만에 영화관에 갔다. 코로나 사태로 아직까지 흉흉한 지금, CGV는 신기한 온도측정기계 앞에 서라고 한다. 섰더니 체온이 땋 나왔다. 신기했다. 금요일 밤인데도 정말 한산했고 (서면 CGV가 원래 한산한 건 있다.) 21:20에 시작하는 영화의 관객 수는 15명 내외였다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>영화를 보기 전에 나무위키의 평가를 보았는데, 뭐 적당히 잘 만들어진 수작이지만 이전에 만들었던 명작 급의 작품들에 미치지 못한다는 평이었다. 영화를 다 보고나니까 그 말이 이해가 되었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 악역이라는, 확실하게 대립되는 캐릭터가 등장하지 않는다. 동생 이안과 형 발리는 성향 차이때문에 대립되는 위치를 가지고 있지만, 그렇게 자주 싸우는 것도 아니고 그럭저럭 잘 지내는 것 같다. 형이 좀 부끄러운 행동을 많이 하거나 철없는 모습 때문에 동생이 곤혹을 치룬다는 것은 그렇게 큰 갈등으로 보이지 않는다. 애초에 형이 'screw up'에 삔또 상해서 삐지는 걸로 봐서는 겉으로는 아주 화목한 사이였나보다. 어쨌든 동생이 형에 대해 아주 싫어한다는 느낌이 별로 없다 보니 아빠와 하고 싶었던 리스트를 형에 대입하는 과정에서의 감정 변화도 많이 와닿지 않았다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 세계관이 그렇게 매력적이지 않다. 옛날에 마법이라는 것이 존재했지만, 과학이 발달함에 따라 마법은 거의 잊혀진 현대 판타지 세계를 그리고 있다. 하지만 그 마법에 심오한 철학이 담겨있는 것도 아니고, 퀘스트에 숭고한 목적이 있는 것도 아니었던 듯하다. 마법이 남을 이롭게 하는 데 잘 쓰였다는 말은 그냥 그 뿐이다. 마법이 그렇게 좋은 건진 잘 모르겠는데, 그런 옛 것을 어떤 진실되고 되찾아야 하는 것으로 포장해버린다. 과거와의 화해와 청산은 중요하지만, 자칫 과거로의 회귀로 들리기 쉽다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>킹치만... 형제라는 소재는 좋은 것 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2000</wp:post_id>
		<wp:post_date><![CDATA[2020-06-20 00:22:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-19 15:22:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-20 17:37:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-20 08:37:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%98%a8%ec%9b%8c%eb%93%9c-%eb%8b%a8-%ed%95%98%eb%a3%a8%ec%9d%98-%ea%b8%b0%ec%a0%81-%eb%a6%ac%eb%b7%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Windows] Node.js 전역 npm 패키지 명령어 실행시 ExecutionPolicy 오류]]></title>
		<link>https://elvanov.com/2004</link>
		<pubDate>Sun, 21 Jun 2020 09:29:16 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2004</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>들어가기 전에, <code>ExecutionPolicy</code> 보안 정책에 어긋난다고 해서 이것의 규제 장치를 풀어헤치는 것에 좀 반감이 들었다. <code>npm</code>을 통해 실행할 스크립트야 대부분 신뢰있는 스크립트겠지만, 어쨌건 방화벽 하나를 해제하는 기분이었다. 미래에 어떤 보안 위협이 내 컴퓨터에 올지 모르는 일이니까 걱정이 되었는데, <strong>그냥 걱정하지 않기로 했다.</strong> 깊은 생각을 하지 말자.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>copyfiles</code>를 전역 패키지 설치하여 사용하려고 했으나 에러가 떠서 해결방법을 찾아다녔다. <code>copyfiles</code> 뿐만 아니라 <code>pm2</code>, <code>vue</code> 등 윈도우 상에서 글로벌하게 <code>npm</code> 패키지를 설치했을 때 문제가 발생한다. 아래는 그 해결책을 적어놓은 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>처음에는 아예 전역 패키지 경로가 <code>Path</code>에 등록되어 있지 않을 수 있으므로, <strong>환경 변수 설정</strong>을 해준다. 경로는 다음과 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>C:\Users\&lt;username>\AppData\Roaming\npm</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이제 전역 패키지를 설치하고 실행을 해보자.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>PS ... > npm install -g copyfiles
...
PS ... > copyfiles
...
위치 줄:1 문자:1
+ copyfiles
+ ~~~~~~~~~
    + CategoryInfo          : 보안 오류: (:) &#91;], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>UnauthorizedAccess</code> 에러가 발생한다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>다음 명령어로 현재 <code>ExecutionPolicy</code>가 어떤 상태인지 확인해보자.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>PS ... > ExecutionPolicy
Restricted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>Restricted</code>는 제한된다는 뜻이다. 그럼 이 정책을 바꿀 차례가 되었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하지만 <code>Set-ExecutionPolicy Unrestricted</code> 명령어를 실행해도 마음처럼 되지 않는다. 에러가 한번 더 뜬다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>PS ... > Set-ExecutionPolicy Unrestricted
Set-ExecutionPolicy : Windows PowerShell에서 실행 정책을 업데이트했지만 좀 더 구체적인 범위에서 정의된 정책에 의해 설정이 재정의되었습니다. 재정의로 인해 셸은 현재 유효 실행 정책인 Restricted을(를) 유지합니다. 실행 정책 설 
정을 보려면 "Get-ExecutionPolicy -List"를 입력하십시오. 자세한 내용은 "Get-Help Set-ExecutionPolicy"를 참조하십시오.
위치 줄:1 문자:1
+ Set-ExecutionPolicy Unrestricted
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (:) &#91;Set-ExecutionPolicy], SecurityException
    + FullyQualifiedErrorId : ExecutionPolicyOverride,Microsoft.PowerShell.Commands.SetExecutionPolicyCommand</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>변경하려고 했으나 뭐 또 다른 설정 때문에 재정의되었다고 한다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>하라는 대로 <code>Get-ExecutionPolicy -List</code>를 실행시켜보자.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>        Scope ExecutionPolicy
        ----- ---------------
MachinePolicy       Undefined
   UserPolicy       Undefined
      Process       Undefined
  CurrentUser      Restricted
 LocalMachine    Unrestricted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>Scope</code>에서 <code>CurrentUser</code>가 <code>Restricted</code>인 걸 확인할 수 있다. <code>Scope</code>를 지정하여 바꾸면 해결될 것 같다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>구글링하여 <code>Set-ExecutionPolicy -Scope CurrentUser Unrestricted</code> 라는 명령어를 만들었다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>PS ... > Set-ExecutionPolicy -Scope CurrentUser Unrestricted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>실행을 시키니 아무런 메시지도 뜨지 않는다. 제대로 되었다는 것일까?</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><code>ExecutionPolicy</code> 명령어로 한번 더 확인해본다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-powershell"} -->
<pre class="wp-block-code language-powershell"><code>PS ... > ExecutionPolicy
Unrestricted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>오! <code>Unrestricted</code> 가 뜨면서 성공적으로 해결되었다. 끝~</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2004</wp:post_id>
		<wp:post_date><![CDATA[2020-06-21 18:29:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-21 09:29:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-21 18:29:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-21 09:29:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-node-js-%ec%a0%84%ec%97%ad-npm-%ed%8c%a8%ed%82%a4%ec%a7%80-%eb%aa%85%eb%a0%b9%ec%96%b4-%ec%8b%a4%ed%96%89%ec%8b%9c-executionpolicy-%ec%98%a4%eb%a5%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[42 SEOUL] 1. 지원 접수부터 La Piscine 직전까지]]></title>
		<link>https://elvanov.com/2008</link>
		<pubDate>Tue, 30 Jun 2020 11:45:56 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2008</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>간단 소개</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>필자에 관한 것 </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>필자는 프로그래밍에 관심이 많아서 이것저것 막 독학을 했고, 미흡한 실력으로 간단한 형태의 웹사이트를 만들 수 있는 정도까지 성장했다. 하지만 독학은 한계가 있었다. 예전에 (지금은 없어진) <a href="https://namu.wiki/w/NHN%20NEXT">NHN NEXT</a> 라는 곳에도 흥미가 있었는데, 그 때는 뭔가 교육받는 것에 대한 필요성을 크게 느끼지 못했던 것 같다. 지금은 그런 필요성을 느꼈다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>이노베이션 아카데미에 관한 것</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>정부 부처인 과학기술정보통신부에서 야심차게 소프트웨어 산업을 발전시키기 위한 기관을 신설했다. <a href="https://innoaca.kr/about">이노베이션 아카데미 재단</a>은 개발자를 양성하고자 하는 <a href="https://42seoul.kr/">42 SEOUL</a> 뿐만 아니라 다양한 프로젝트를 준비하고 있다. 창립일은 2019년 8월 1일이다. 42 SEOUL 은 혁신적인 교육을 표방하고 있다. 고졸자라면 아무나 지원할 수 있고, 1년에 2~3기수씩 운영된다. 입학하려면 4주 동안의 집중교육기간인 La Piscine(라피신)을 거쳐야 하며, 이 4주가 통째로 평가기간인 셈이다. 그리하여 최종 통과가 되면 최대 2년동안 교육을 받는다. <strong>체크인 미팅 등록</strong>이란 이 La Piscine을 거쳐 본 교육 과정으로 들어가는 자리에 체크인(등록)하는 이벤트(미팅)을 정식적으로 진행하겠다는 뜻이다. (<s>등록을 등록한다!</s>) 아무래도 자리도 제한되어있고, 최소한의 자격 요건 및 본인 확인을 거치는 과정이라고 생각하면 될 듯하다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>지원 경위</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>2019년 초부터 <a href="https://news.joins.com/article/23363854">보도기사</a>가 떴었다. 내가 직접 본 건 아니고, 나의 친형이 프로그래밍에 관심 많은 나에게 먼저 알려줬다. 그 이후로 예의주시 하고 있었고, <a href="https://zdnet.co.kr/view/?no=20190801141518">출범식</a> 소식도 보고.  <a href="https://www.youtube.com/watch?v=-1tsSwNykY8">설명회</a>는 그렇게 영양가 있다고는 생각되지 않았다. 저 동영상이 올라온 비슷한 시기에 오프라인 설명회도 다녀왔다. 그리고 기다렸다. 그래서 드디어 <a href="https://42seoul.kr/apply">지원 링크</a>가 열렸다! </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2014,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/1.jpg" alt="" class="wp-image-2014"/><figcaption>가입했을 때의 메일</figcaption></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>온라인 테스트</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>온라인 테스트는 <strong>2019년 11월 1일부터 한 달</strong>간 볼 수 있었다. 온라인 테스트 기간이 한달 동안이나 되지만, 좀 더 널널하면 좋으니까 11월 초에 시험치면 좋겠다 싶었다. 그래서 11월 5일에 온라인 시험을 봤다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>온라인 테스트는 두 가지로 진행되는데, 기억력과 논리력 테스트이다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>기억력은 그렇게 오래 걸리지 않는다. 경계선이 보이지 않는 넓은 판에서 랜덤한 칸에 색깔이 나타났다 사라지기를 여러번 반복한다. 그 순서를 기억하여 다시 칸을 차례대로 클릭해야 하는 게 시험이다. 단계를 올라갈 수록 더욱 어렵고 길어진다. 테스트는 게임 오버가 진행될 때까지 진행되므로, 어렵다고 느껴질 수 밖에 없다. 하지만 나는 나의 최선을 다했다고 생각한다. 나름 만족스러웠다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>논리력은 2시간 가량 소요된다. 게임 식으로 진행되는데, 명령들을 조합하여 주인공 캐릭터를 도착지까지 무사히 가도록 하는 게 목적이다. 명령들은 제한이 있고, 주인공 캐릭터가 움직이는 데도 특정 규칙이 있다. 이것도 물론 단계가 진행됨에 따라 난이도가 급상승한다. 어느정도 논리적이라고 생각하는 나도 중간에 막혀서 초반 30분까지 잘 풀다가 나머지 1시간 반을 한 문제에 오롯히 투자하다 끝났다. 몇 단계였는지는 기억이 안 난다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>테스트를 잘 쳤는지 걱정이 되었지만, 나 정도면 나름 잘 친거라고 기대도 하며, 합격 메일을 기다렸다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2013,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/2.jpg" alt="" class="wp-image-2013"/><figcaption>온라인 테스트 합격!</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>다음 날, 메일이 왔다. 오예 ~~~ 통과 했다! ? 정말 기뻤다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>지금 생각해보면, 테스트는 그렇게 변별력이 있는건 아니었다. 어떤 식으로 진행되는지는 유튜브를 조금만 찾아보면 금방 나왔다. 또, 온라인 테스트가 그렇듯이, 옆에서 잘하는 사람이 돕는 것에 대해 아무런 제한이 없다. 게다가 더 큰 문제가 기다리고 있었으니...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>지금 시점(2020년 중순)으로는 온라인 테스트는 상시 열려있는 것으로 알고 있다. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>체크인 미팅 등록</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2012,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/3.jpg" alt="" class="wp-image-2012"/><figcaption>체크인 미팅 안내 메일</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>온라인 테스트 합격 소식에 들뜬 마음으로 체크인 미팅 등록을 했다. 그런데, 띠용. 이게 무슨 일인가? 내 눈이 잘못되었는지 싶어 눈을 비비적 비비적 비비고 디비디비딥 했다. 근데 대기자가 <strong><span style="text-decoration: underline;">373명</span></strong>이었던가? 오.. 마이.. 갓.. 그 숫자가, 내가 373번째로 등록한 것이 아니라, <span style="text-decoration: underline;">정원은 이미 다 차고, 들어가지 못한 사람이 나 포함 373명</span>이라는 사실을 겨우 깨달았다. 허무감이 밀려왔다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>불합리함을 느꼈다. 나름 일찍 한다고 11월 초에 했는데, 이게 무슨 소용이지? 이미 정원은 다찼음에도 이노베이션아카데미 SNS는 열심히 홍보중이었다. 오메.. 도대체 무슨 일이야! 체크인 등록 정원이 300명이라고 가정하면, 이미 11월 2일에서 3일에 정원이 마감되었다는 사실이었다. 그렇다면 왜 온라인 테스트를 한 달 동안이나 오픈해 두었는가? 그래서 나름 신사적으로 항의 메일을 보냈다. 아래는 그 내용이다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>안녕하세요 ㅎㅎ , OO에 사는 OO살 청년 OOO입니다.</p><p>앞서 저는 올해 초부터 이노베이션 아카데미의 보도자료를 보면서 이 교육기관에 들어오고 싶다고 계속 생각해왔었고 부산대에서 열린 교육생 모집설명회도 다녀왔습니다.</p><p>그러나 아쉽게도 이번 42 Seoul에는 참여하지 못하게 되었습니다. 테스트를 11/5에 보고, 11/6에 결과를 전달받고 대기자 등록하여 현재 370번째인 상태입니다.</p><p>모집 신청을 해놓고 보니, 선착순이었던 점이 가장 당황스러웠었습니다. 앞서 설명회까지 다녀왔으나, 모집기간 및 일정은 알 수 있었지만 체크인 미팅이 선착순이었다는 점은 알 수 없었습니다. 더군다나 모집기간이 명시되어있고 온라인 테스트를 거친 Piscine 대상자를 400명 정도로 계획중이다 라는 사실에서, 온라인 테스트를 상대평가로 진행하는구나 혹은 절대평가라 하더라도 예측되는 전체 신청 인원 가운데 400명 정도를 뽑을 수 있는 난이도로 상한선을 준비했구나 라는 생각을 할 수 밖에 없었습니다.</p><p>선착순이라고 명시되어 있는 곳을 찾아보니 지원 링크(https://42seoul.kr/apply)에서 밖에 찾지 못했으며, 결국 사전에 미리 해당 페이지를 들어가본, 선착순이라고 인지한 일부 사람들이 더 기민하게 준비할 수 있지 않았나 하는 허탈한 마음이 들었습니다. 교육생들을 모집할 때 어떤 방식으로 해야 형평성과 공정성 및 변별력을 가질 수 있을지는 아주 어려운 문제라고 생각합니다. 하지만 이미 체크인 미팅의 자리가 다 찼음에도 SNS로 계속되는 교육생 모집 홍보를 보고 있으니, 전체 신청 인원의 추산과 더불어 교육생 모집 방식이 다소 삐걱거리지 않았나 하는 생각이 자꾸 머릿속에 듭니다.</p><p>궁금한 점은, 우선 이렇게 신청자가 이렇게 많이 모일 거라고 예측하시지 못하신건지, 아니면 온라인 테스트에 통과했지만 대기할 수 밖에 없는, 아마도 11/30일 까지 모집이 계속된다면 천 명은 가뿐히 넘길 것 같은 수많은 사람들에게 다른 가능성이 주어질 수 있는지에 대한 점입니다.</p><p>어떻게 구체적으로 조치를 취해달라는 요구는 절대 아니며, 공간과 예산의 한계로 일부 교육생들만 받을 수 밖에 없다는 상황은 충분히 이해합니다. 다만 저와 같은 생각을 하고 있는 사람들이 없지는 않을 거라고 생각합니다. 한 사람의 의견 표명으로서 봐주시면 감사드리겠고, 이것이 이노베이션 아카데미 및 42 Seoul을 운영하는 데 약간의 도움이 되었으면 하는 바람입니다.</p><p>감사합니다.</p><cite>2019.11.10, 필자의 항의 메일</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>OOO님 안녕하세요,<br>42 SEOUL 사무국입니다.<br>메일에 답변이 너무 늦어졌습니다. 죄송합니다.</p><p>말씀해주신 대기번호라면 2기 혹은 3기 체크인 등록 안내를 받으셨을 것 같은데 무사히 등록하셨을지요?</p><p>우선, 선착순 체크인 등록에 대해 충분한 정보를 전달 드리지 못해 혼란스러움과 불편함을 느끼셨을 부분에 대해 죄송한 마음을 전합니다. Ecole 42 시스템은 순위를 매겨 교육생을 모집하는방식이 아니라, 가능성과 잠재력이 있는 누구나 교육에 참여할 수 있도록 구성되어 있고, 42 SEOUL 역시 동일한 교육철학과 방식으로 운영되기 때문에 이번 선발 방식에서도 선착순 으로 체크인 등록이 진행되었습니다.</p><p>말씀해주신것처럼, 이렇게 많은 분들이 소프트웨어 교육에 관심을 가지고 계실거라 예상하지 못했던 것도 사실입니다. 부산대 설명회에 오셨다면 더욱 잘 아시겠지만, 사전 홍보시에는 체감할 수 있는 큰 반응을 얻지 못했기에 11월 30일까지 가능한 많은 홍보를 계획하기도 했습니다.</p><p>오늘 기준으로 8천명이 넘는 분들이 온라인 테스트에 지원을 해주셨습니다. 온라인 테스트를 오픈하고 수일만에 1기 등록이 마감되는 것을 보면서, 11월 이내에 시험을 보신 분들께 조금이라도 우선 혜택을 드릴 수 있기 위해 1기 2차, 2기, 3기의 체크인을 오픈했습니다. 또한, 앞으로 더 많은 분들께 1개월 집중 교육 과정의 기회를 제공해드릴 수 있는 다양한 방안 역시 고민 중에 있습니다.</p><p>오랜기간 관심 가져주셨는데 정보를 충분히 전달 드리지 못해 죄송합니다. 앞으로도 지금처럼 꾸준한 응원과 또 좋은 의견을 알려주시면 귀기울여 듣고 개선 방안에 대해 고민하겠습니다.<br>감사합니다.</p><cite>2019.11.25, 이노베이션아카데미 사무국</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>ㅋㅋㅋ <strong>25일 만에 8,000명 지원이면 킹정이지</strong>~ 뭐 별 수 있나.. 메일 답변이 온 시점은, 추가 2기 3기를 모집하겠다 공지하고, 체크인 미팅 등록 오픈도 전부 끝난 시점이었다. 얼마나 바빴을까, 내가 대기업에 취직하거나 공무원으로 일해본 적은 없지만 얼마나 정신없었을까 하는 생각이 들었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>추가 2기 3기를 모집하겠다는 공지는 11월 초중순 쯤이었던 걸로 기억한다. 그 때 부터 사실 <em>아, 이 분들이 이렇게 사람들이 몰릴 지는 예상하지 못했구나</em> 싶었다. 돈은 많지만 경험과 사람이 부족한 느낌이었다. 어쩔 수 없지, 처음 운영이니까. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2023,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/4.jpg" alt="" class="wp-image-2023"/><figcaption>2기/3기 체크인 미팅 이벤트 오픈 일정 메일 (이하 생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>나는 추가 2기 체크인 미팅 등록 오픈날 아침 피시방에 가서 <code>F5</code>를 겁나게 눌렀다. <code>10:00</code>부터 신청이 오픈되었는데, 혹시나 싶어 10~20초 단위로 <code>F5</code>를 누른 결과 1~2분 일찍 오픈이 되었다! 아, 이건 됐다 싶었다. 바로 신청했고, <strong><span style="text-decoration: underline;">2기 1차에 무사히 안착했다</span></strong>. 그때의 기쁨은 정말로 ... 형용할 수 없다. 기대감이 크긴 컸나보다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>코로나</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>2020년 초부터 코로나가 터지면서 모든 게 뒤로 밀렸다. 2020년 5월 1일부터 시작 예정이었던 La Piscine 은 2020년 6월 29일로 밀렸다. 뭐 불행중 다행일까, 나의 어머니가 작년 말부터 많이 아프시고 3월 말에 곁을 떠났는데, 코로나 덕분에 좀 더 평화롭게(?) 모신 것 같다. 42 SEOUL 도 계속 밀리니까 오히려 마음이 편해지더라. 아래는 밀린 메일들.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:image {"id":2022,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기1.jpg" alt="" class="wp-image-2022"/><figcaption>연기 1(이하생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2021,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기2.jpg" alt="" class="wp-image-2021"/><figcaption>연기 2(이하생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2020,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/연기3.jpg" alt="" class="wp-image-2020"/><figcaption>연기 3(이하생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>다행히 이게 마지막이었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>체크인 미팅</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>코로나 터지기 전에는 체크인 미팅을 하면서 1박2일 캠프를 했었는데, 코로나가 전 세계적으로 창궐하고 있는 지금, 지원자에 있어서 체크인 미팅은 아무것도 하지 않는 날이었다. 말 그대로 아무것도 하지 않았다. 온라인 오리엔테이션이 체크인 미팅 전 날에 유튜브 라이브로 있었으나, 아주 실속있는 오리엔테이션은 아니었다. Q&amp;A나 이전의 설명회 등에서 쉽게 확인할 수 있는 내용이 많았던 걸로 기억한다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>정말로 체크인 미팅때 지원자가 할 것이 따로 없는지를 메일로 문의해보았고, 정말로 없다는 확인을 받았다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>La Piscine(라피신)을 들어가기 위한 준비</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2019,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/프로필-입력.jpg" alt="" class="wp-image-2019"/><figcaption>프로필 입력 안내 이메일 (이하 생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2018,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/06/운영.jpg" alt="" class="wp-image-2018"/><figcaption>1차 라피신 운영 안내 이메일 (이하 생략)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>점차적으로 각종 메일이 오고, 해야 할 것, 챙겨야 할 서류 등등을 알려준다. <strong>안내는 전부 메일로 오고, 문자는 하나도 오지 않는다.</strong> <strong><span style="text-decoration: underline;">메일을 예의주시해야 한다. </span></strong>나는 이틀 동안 메일 안봤다가 프로필 등록 시기를 놓쳐서, 걱정스러운 마음에 문의 메일을 보냈고, 다행히 정상 처리되었다는 답변을 받았다. 나처럼 놓치는 사람이 많겠지... 일하기 힘들겠다... 나도 예전에 회사 다닐때 100명의 서류를 훑어본 적이 있었는데, 그것도 힘들었는데.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>지금, 이 글을 쓰는 시점은 2020년 6월 30일 화요일. 어제 라 피신을 시작했다. 사실 정말 멘붕이다. 힘들다... 우엑... 다음 글에 계속...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2008</wp:post_id>
		<wp:post_date><![CDATA[2020-06-30 20:45:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-30 11:45:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-30 22:08:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-30 13:08:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[42seoul-1-%ec%a0%91%ec%88%98%eb%b6%80%ed%84%b0-la-piscine-%ec%a7%81%ec%a0%84%ea%b9%8c%ec%a7%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="42-seoul"><![CDATA[42 SEOUL]]></category>
		<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5669</wp:comment_id>
			<wp:comment_author><![CDATA[신동현]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shindh0429@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.38.27.248]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-01-21 15:29:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-01-21 06:29:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요 이번에 온라인 체크인 미팅을 하게된 학생입니다!
온라인 체크인 미팅은 아직 잘 몰라서 하나 여쭤보고싶습니다.ㅎㅎ
혹시 온라인으로 체크인 미팅을 하면 지원자는 아무것도 안한다고 하셨는데 이번에는 시간도 정해지고 zoom링크도 보내준다고 하였는데 혹시 저번에는 그런것이 없었는지 혹시 있었다면 시간이 어느정도 걸렸는지 여쭤보고싶습니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1611663405.596068;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1611210579.57175;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>5724</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[222.96.60.47]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-01-26 21:18:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-01-26 12:18:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[네 제가 2긴데 이때는 아무것도 없었습니다.. 답변이 늦었네요 ㅠㅠ 이번에 막 사람들 많이 기다리게 했다고 건너 들었어요. 이노베이션 아카데미도 그렇고 생긴지 얼마 되지 않은 기관이라서 운영 측면에서 미숙한 부분들이 좀 느끼실 거에요.. 저희도 느꼈구요. 아무튼 같이 고생합시다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>5669</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1611663501.573831;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[[42 SEOUL] 2. La Piscine 후기]]></title>
		<link>https://elvanov.com/2031</link>
		<pubDate>Sat, 25 Jul 2020 14:54:22 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2031</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>시작하기 전 용어 정리</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://innoaca.kr/">이노베이션 아카데미</a> : 설명 생략 ㅎ</li><li><a href="https://42seoul.kr/"><strong>42 SEOUL</strong></a> : 이노베이션 아카데미 사업의 일환으로 진행되는 개발자 양성 교육 프로그램. 본래 <a href="https://www.42.fr/">프랑스의 에콜 42</a>라는 코딩 학교에서 시작되었는데, 이번 대한민국 정부의 지원을 받아 서울에서도 진행하게 되었다. 프랑스는 사교육기관(?)이라고 한다.</li><li><strong>라 피신</strong>(La Piscine)(이하 피신): 42 SEOUL 본 교육 과정을 들어오기 위한 평가 단계. 4주 간의 집중교육기간을 거쳐 합격생들을 최종 선발한다.</li><li><strong>클러스터</strong> : 교육 장소. 특히 맥 컴퓨터들이 있는 곳. 공식 문서에는 코딩스튜디오 라는 명칭과 혼용하고 있음.</li><li><strong>오아시스</strong> : 물을 마실 수 있는 작은 공간. 텀블러 등을 보관할 수 있고, 정수기가 있다. 클러스터에는 음식물 반입이 금지된다.</li><li><strong>피시너</strong> : 라 피신 단계에 있는 교육생들.</li><li><strong>카뎃</strong> : 본 교육과정에 있는 교육생들.</li><li>스태프 : 42 SEOUL을 운영하는 분들.</li><li>홀짝제 : 코로나로 인해 하루는 클러스터에 출석하고 하루는 원격 접속을 하는 제도. 1그룹은 월, 수, 토. 2그룹은 화, 목, 일. 금요일은 공통 EXAM.</li><li><a href="https://guacamole.apache.org/">과카몰레 </a>: 아파치 재단의 원격 프로그램. 이하 VNC.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>무엇을 기대했나?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>크게 기대한 바는 없다. 막연히 기존의 교육과는 전혀 다른 방식일 것 같은 느낌만 있었다. 그 교육 방식이 너무 급진적이거나, 혹은 기존에 진행하던 방식과 크게 다르지 않다고 해도, 그건 그렇게 중요한 요소가 아니라고 생각했다. <strong>얼마나 효과적으로 배울 수 있는가</strong>가 나에게는 중요했다. 경우에 따라서 동기 부여가 되는 비용이나 직접적인 교육을 해줄 수 있는 교재와 선생님이 더 효과적인 교육일 수도 있다고 생각한다. 그래서 직접 들어가서 체험하기 전 까지는, 아무것도 판단할 수 없고, 아무것도 결정지을 수 없었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>맥을 활용한다는 것, 홀짝제로 운영된다는 것 외에는 유용한 정보가 아무것도 없었다. (지금에서야 드는 생각이지만, 좀 더 자세하게 검색이라도 해볼 걸 그랬다.) 42 SEOUL에서는 <strong>슬랙</strong>이라는 메신저를 사용하고, 슬랙 그룹은 피신이 시작하기 며칠 전에 생성되었다. 인싸들은 벌써부터 활발하게 움직였다. 홀짝제로 운영된다는 소식에 다들 클러스터에 출석하지 않는 날에 모이기 위한 스터디를 만들고 가입했다. 나는 정보가 없었으므로 섣불리 판단하지 않기로 했다. 나는 아무런 행동도 하지 않고 혼돈의 상태로 첫 발걸음을 내딛었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>전반적인 생활</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>친한 형이 서울에서 지냈다가 계약 기간 남은 방을 놔둔 채로 부산으로 내려가야 하는 상황이었다. (나는 부산에서 올라왔다.) 그렇게 나는 신림에 있는 방에 들어가게 되었다. 나중에 찾아보아 알게된 사실은, 신림은 노량진과 함께 수험생이 많이 지내는 곳이었다. 그래서 방값이 다른 서울 지역에 비해서는 좀 저렴한 편이 아니었을까 싶다. 내가 지낸 방은 2호선 신림역에서 장군봉 방향으로 천천히 걸어가면 10분이 걸리는 거리였다. (오르막길이라서 천천히 걸어야 땀이 나지 않았다.) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>평균 수면 시간은 6시간 쯤이었다.</strong> 많이 자면 7시간, 적게 자면 5시간. 이 정도로 왔다갔다 했었던 것 같다. 첫날 밤은 긴장되어서 잠도 제대로 자지 못했다. 정말 피곤했지만, 다른 사람들도 다 열심히 하는 것 같아 나도 열심히 달려야 했다. 아침에 신림에서 출발하여 선릉을 거쳐 개포까지 가야 했는데, 지옥출근길 시간을 피하기 위해 6:30 ~ 7:00 즈음 집에서 나섰다. 그러고 나서 클러스터에서 밤 10시 반쯤 출발하면, 집에 도착하고 씻고 잘준비하면 이미 밤 12시가 되어있다. 서울에 지내는 친구는 물론이거니와 가족과 연락할 시간도 없었다. (핑계일 수도 있다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어떤 분들은 정말 멋지게 시간을 활용했다. 홀짝제로 인하여 클러스터 방문일이 제한되는데, 아무래도 원격 접속보다는 클러스터에서 공부하는 환경이 더 쾌적하다 보니, 조금이라도 클러스터에 더 오래 있겠다는 전략을 취한 것이다. 원격 접속일에 잠을 조금이라도 더 자고, 클러스터 접속일 전날 밤 늦게 개포동에 와서,<strong> 12시 땡 했을 때부터 클러스터 입장하여 그 날 밤을 새고</strong>, 낮에도 계속 공부하여 밤 늦게 막차 타고 비로소 퇴근하는 분들. 존경의 뜻을 전한다. 나는 체력적으로 밤을 새지 못한다. 정말 리스펙이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>식사 이야기를 하자. 부산에서는 안그래도 모아둔 돈을 자취하면서 까먹고 있었다. 아무리 식비를 아껴가며 최대한 가난하게 살려고 하지만, 나가는 돈은 꾸준하고 통장 잔고는 점점 비기 마련이다. 절약의 패턴이 몸에 배여있었지만, 42 SEOUL 할 때에는 그 패턴을 버리리라 결심했다. <strong>42 SEOUL 에서는 출석만 제대로 채운다면 지원금을 준다!</strong> 게다가 이왕 서울 올라온 거, 맛있는 거 제대로 먹자 싶었다. 맛있는 음식은 고된 삶에 위로가 되니. 많은 사람들이 스터디에 참여하듯이, 나도 첫날부터 옆사람이 속해 있던 스터디에 합류하게 되었는데, 마포 합정에서 모이는 스터디였다. 그리고 우리 스터디는 모일 때마다 합정의 각 맛집을 섭렵했다. 우스갯소리로 우리 스터디의 앵갤 지수는 매번 신기록을 갱신한다고도 했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>집에서 직접 요리할 생각은 전혀 할 수 없었다. </strong>어떻게 보면 사는 사람 없는 집에 들어가서 산 거라, 살림살이가 충분하지 않았다. 음식을 담을 만한 용기는 라면 하나 끓일 수 있는 작은 냄비가 전부였다. 삶을 계란을 먹겠다 하고 가까운 할인마트에서 계란 한 판을 사오고, 아침으로 먹으려고 쿠팡에서 냉동 볶음밥을 왕창 샀지만, 김치 같은 반찬이 없으니 금방 물렸다. 신림역 앞 24시간 버거킹이 있는데, 차라리 거기서 식사 해결을 많이 했었던 것 같다. 간편함이 최고시다. 볶음밥은 절반 정도 남은 것 같은데, 모든 과정을 마친 지금 어떻게 처리할지 고민이다. 고민이긴 뭐가 고민이야. 전부 쓰레기통행이지 ㅋㅋ</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>옷 이야기를 하자. (생활이니까 의식주 이야기를 단번에!) 나는 부산에서 올라온 몸이기 때문에 어떤 옷을 얼마나 챙겨갈지 선택해야 했다. 다행인 건진 잘 모르겠지만, 나는 며칠 동안 타인에게 보일 옷이 좀 비슷하고 반복된다 하더라도 별로 신경쓰지 않는 타입이다. 그래서 딱 반바지 세 개, 셔츠 두 개, 맨투맨 하나, 반팔 많이, 속옷 많이 챙겼다. 하지만 이는 잘못된 선택이었다. 서울의 7월은 아주 덥다는 인식이었다. 뉴스를 봐도 꼭 부산에서 본격적인 무더위가 시작되기 전에 서울은 찜통 더위였다. 위쪽 지방이 먼저 더위지고 그 다음 아래쪽 지방이 더워지는 게 국룰이라, 7월은 덥겠지 하고 긴 바지를 하나도 챙기지 않았다. 그러나 <strong>생각보다 덥지 않았다.</strong> 비는 잊을 만하면 오고, 바람도 불고 그랬다. 아주 어렸을 때에 비해 여름철 에어컨에 민감해진 나는 항상 가방에 맨투맨과 담요를 들고 다니려 했는데, 꼭 에어컨 때문이 아니라 그냥 날씨가 추워서 잘 활용했었던 것 같다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>교육환경</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>클러스터는 너무 좋다. 설치된 iMac의 가격이 얼마나 되는지는 모르겠지만, 대략 2~300 만원 짜리가 보급형 맥이라고 하니까 그정도가 아닐까 싶다. 일단 화면이 짱 커서 좋았다. 무려 27인치! 집으로 돌아와 나의 Full HD 노트북 화면을 보니, 좁은 방에 온갖 것들이 옹기종기 모여있는 듯한 기분이 들었다. <strong>해상도를 찾아보아 계산해보니 내 노트북 화면을 7.11111... 개 갖다 붙이면 맥 화면이었다.</strong> 오..</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>맥의 속도도 느리다고는 느끼지 못했다. 다만 맥을 처음 쓰다보니까 난항이 꽤 많았다.  한영 키부터 시작하여 기본적인 인터페이스도 잘 모르겠고, 스페이스나 독을 좀 효과적으로 활용하는 법도 막 찾아보았다. <strong>본래부터 맥 사용자였다면 훨씬 더 빨리 적응할 수 있겠다</strong> 라는 생각이 들었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>맥에서 작업하는 방식은 좀 신기했다. 사용자마다 현재 진행중이었던 작업이나 홈 디렉토리로부터 생성한 각종 폴더 파일들을 한꺼번에 저장하는 스토리지 서버가 따로 있는 모양이었다. <strong>로그인을 하면 어디에선가 데이터를 받아와서 로그아웃 했던 시점과 똑같은 환경을 만들어주었다.</strong> 로그아웃하면 다시 다 저장이 되겠지. 이는 후술할 VNC(과카몰레) 원격 접속도 똑같이 적용되었다. 다만 이러한 시스템을 적절하게 유지하려면 <strong>컴퓨터의 전원이 꺼지면 안 되는</strong> 모양이었다. 피시너들이 할 수 있는 건 로그인과 로그아웃, 그리고 화면 잠금 정도이지, 전원을 끄거나 다시 시작하거나 대기 모드로 들어가게 되면 컴퓨터가 이상해지는 것 같았다. 직접 경험해보진 못했지만 컴퓨터가 재부팅되면 크롬이 맛이 간다는 제보가 심심찮게 들렸다. 그런 상황일 때엔 어쩔 수 없이 스태프들에게 도움을 요청할 수 밖에 없고, 스태프는 원격으로 맥을 적절하게 리부트 시킨다. 컴퓨터가 재부팅되어도 시스템이 유지가 된다면 참 좋을텐데, 기술적으로 어려운 작업인 건지 아닌지는 잘 모르겠다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>기타 시설도 좋았다. 화장실도 항상 깨끗하게 유지되는 것 같았고, 경비아저씨도 자주 순찰을 다녔던 것 같다. 오아시스도 매일 아침 일회용 플라스틱 컵이나 종이컵도 청소된다. 24시간 운영되다보니 시설 관리에 어마어마한 비용이 들 것 같은데, 역시 이노베이션 아카데미는 돈이 많은 게 분명하다. 코로나 때문에 휴게시설 관련된 것들을 하나도 이용해보지 못한 것이 좀 가슴아팠다. 클러스터에서 잠을 자면 패널티가 주어지지만, 몰래 쪽잠 자는 분들도 꽤 있었고, 스태프들도 적정 선까지는 눈감아주는 느낌이었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>건물은 새롬관, 마루관 이렇게 두 개인데, 클러스터가 있는 새롬관만 왔다갔다 했다. (건물 하나만 계속 들락날락 하니, 건물 이름이 언급될 일이 없어서 이름을 전혀 모르다가, 검색해서 찾아봤다.) 하여튼 이 건물의 엘리베이터가 좀 말썽을 자주 일으켰다. 층수 숫자를 알려주는 칸에 갑자기 <code>--</code>라고 뜨더니 엘리베이터가 아주 천천히 지하까지 갔다가 다시 운행을 재개하는 기행을 보여주었다. 아무것도 모르는 사람이 <code>--</code>가 뜬 상태에서 엘리베이터를 탔다면 마치 지하실로 끌려가는 듯한 기분을 맛볼 수도 있다. 스태프나 경비 직원들도 별 신경쓰지 않는 눈치였다. 뇌피셜이긴 하지만, <code>--</code> 라고 뜨는 것은 아마 점검 모드인 듯 하다. 운행 중에 조금이라도 이상수치가 발견되면 즉시 운행을 멈추고 지하로 가서 자가체크 하는 게 아닌가 싶다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>홀짝제의 한계</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>포스트 코로나, 비포 코로나 라는 말이 등장할 정도로 올해 초에 코로나가 터진 이래 생활 자체가 완전히 뒤바뀌었다. 특히 어느 한 장소에 모이는 프로그램이나 행사가 직접적인 타격을 입었다. 42 SEOUL 도 예외가 아니었다. 라 피신 자체가 두 달이 밀렸고, 드디어 시작하나 싶었더니 홀짝제로 운영한다고 했다. <strong>클러스터 출석일을 절반으로 줄이는 것</strong>이다. 나는 1그룹에 해당하여, 월, 수, 토에 클러스터 입장이 가능했다. 2그룹은 화, 목, 일에 가능하였다. 모든 피시너들은 1, 2그룹 중 하나에 속했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>클러스터 입장이 불가능한 날은 원격 접속으로 진행할 수 있다. 입장 가능한 날과 불가능한 날의 경계는 정확히 밤 12시였다. 클러스터 입장이 가능한 날에 원격 접속을 하거나, 원격 접속만 해야 하는 날에 클러스터에 입장한다면 <strong>패널티</strong>가 주어진다고 했다. 금요일은 시험이 있는 날이었고, 형평성을 위해 시험 외 시간은 모두 원격 접속으로 진행하는 식으로 되었다. 클러스터에는 길다란 책상 양쪽에 맥이 모두 배치되어 있지만, 한 쪽 면에 사람을 앉히고, 한 쪽 면을 원격 컴퓨터용으로 이용되었다. 그래서 클러스터에 방문한 사람이 원격용 맥을 건드릴 일은 없었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>원격 접속의 늪</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 원격 접속은 문제가 많았다. 크게 VNC와 SSH 접속법이 있었다. VNC는 화면 공유를 함께 해주는 원격 접속이고, SSH는 해당 컴퓨터에 원격으로 조작가능한 터미널만 띄우는 식의 접속 방법이다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>두 가지 모두 문제가 많았는데, 우선 VNC는 속도가 너무 느려터졌다. 접속하는 데에도 시간이 오래 걸리고, 또 시스템이 아주 불안정했다. 도중에 끊기기 일쑤며, 심지어 잘 쓰고 있다가 다른 원격 접속자가 해당 맥을 가로채어 본의 아니게 관음하게 되는 일도 자주 있었다. 맥 로그아웃을 제대로 했다 하더라도 제대로 로그아웃되지 않는 상황도 빈번했다. 이는 새로 접속할 때 문제를 일으키는데, 이미 접속된 다른 세션을 끊겠냐는 창이 뜨는데, 반은 잘 되고 반은 안 된다. iSCSI 실패 오류가 뜨는 건 예사고 Mount Error 까지 뜨게 되면 맥에서 작업한 모든 데이터를 갈아 엎어야 하는 상황까지 올 수 있다. 실제로 나는 한번 갈아 엎었다. 스태프에게 질문을 날리는 슬랙 채널은 아마 8할이 로그아웃 시켜달라, 원격 접속이 안된다 등의 글이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SSH는 다소 쾌적한 환경이었긴 하지만, 도중에 아무런 예고 없이 끊기는 건 마찬가지였다.  그리고 여기에는 치명적인 단점이 하나 있는데, <strong>본인의 맥 스토리지와 연동이 안된다는 것이었다.</strong> 그러니까 SSH 로 접속해도 맥에서 작업했던 것들을 볼 수도 없고, SSH에서 작업한 것들을 안전하게 보관할 수도 없는 것이다. 깃을 이용할 때 ssh-genkey를 활용하는데, SSH는 접속할 때마다 새로운 키를 만들어 시스템에 등록시켜야 할 판이었다. 연동 시스템이 작동하지 않으니, 이전에 해당 맥에서 작업했던 사람들의 코드를 본의 아니게 훔쳐볼 수도 있다. 타파 방법이 비공식적으로 막 생겨났는데, 해당 맥을 VNC로 접속하여 데이터를 모두 동기화 시킨 뒤, 나와서 SSH로 이용하는 방법이다.  이러면 본인이 작업했던 것을 터미널 상에서 그대로 볼 수 있긴 하다. 이렇게 다사다난한 일들 모두, 코로나로 인한 <strong>원격 접속 시스템 구축이 아주 불완전하다</strong>는 사실을 상기시킨다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>나는 원격 <strong>고난</strong> 접속<strong>의 행군</strong>을 헤쳐나가기 위해 쓴 방법이 있다. 바로 <strong>Visual Studio Code 의 Live Share 기능</strong>을 활용한 방법이다. 느려터지고 불안정한 VNC에 겨우 접속하여, Integrated Software Management (용어가 정확하지 않음)에서 Visual Studio Code와 Live share 확장 기능을 설치하고, 콜라보레이션 세션을 새롭게 열어 그 링크를 슬랙으로 보내어, 윈도우인 내 컴퓨터에서 그 링크를 연다! 그렇게 되면 나의 로컬 컴퓨터에서 쓰는 것처럼 맥의 vscode를 쓸 수 있다! 터미널 쉐어도 가능! </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>아쉬운 팀플</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>홀짝제의 문제는 비단 원격 접속만 있는 것이 아니다. 교육 특성상 개인 과제 뿐만 아니라 팀플도 여럿 있다. 하지만 <strong>팀이 형성되는 방식은 그룹과 상관없이 진행된다.</strong> 그러니까 월요일 출석가능한 사람과 화요일 출석가능한 사람이 하나의 팀이 될 수도 있다. 팀플 특성상 한 자리에 모여서 함께 이야기하고 같이 코딩하는 것이 훨씬 수월한데, 이는 홀짝제와 완전히 대치되었다. 본래 출석일이 아닌 사람은 팀장의 출석일에 따라간다. 게다가 팀플 평가일에는 클러스터 출석이 무조건 요구되는데, <strong>본인의 출석일이 아닐 경우에는 잠깐 클러스터에서 평가만 받고 다시 나가야 한다.</strong> 집에서 클러스터까지 아주 오랜 시간 통학하는 사람 입장에서는 비합리적이라고 느껴질 수 밖에 없는 부분이었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>카더라 통신에 의하면, 코로나가 전세계적으로 발발한 이후 제한적이나마 오프라인으로 42를 진행하는 나라는 대한민국이 거의 최초가 아닐까 싶다. 애초에 팀플 자체가 홀짝제를 전혀 고려하지 않은 상태에서 설계되었으므로, 불협화음이 많은 건 어쩔 수 없다고 생각한다. 다만 피신 과정이 끝나고 교육생들의 피드백을 구글 설문으로 받았는데, 그 과정에서 원격 접속이나 홀짝제에 대한 의견을 묻는 항목은 발견할 수 없었다. 잠깐 홀짝제를 운영하는 게 아니라 이른바 뉴 노멀이라고, 홀짝제를 계속 유지해야 할 수도 있는데, 기관 입장에서 교육생들에게 관련된 피드백을 제대로 요구했으면 어떨까 하는 생각이 들었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>불친절함이 컨셉인 시스템</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어디부터 이야기를 시작해야 할 지 모르겠네. 클러스터에 최초 방문하여 등록할 때, 어떤 서약서를 적는데, 그 중에는 대충 기밀 누설 금지라는 것이 있다. 그 내용이 정확히 무엇인지 기억이 나지 않아 메일로 문의했는데, 서약서 내용은 알려드릴 수 없고 "<strong>라피신 학습과 관련된 정보</strong>"를 제외하여 작성해달라는 답변을 받았다. 오케이. (뭐가 오케이?)</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>42 SEOUL을 홍보할 때 3無 학습이라고들 이야기한다. 무교재, 무교수, 무학비라고 한다. 그럼 무엇이 있는가? 42 시스템이 있고, 주위 동료가 있고, 구글 검색이 있다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자체적인 인트라넷이 있다. 모든 건 여기서 시작한다. 개인 과제를 열람하거나 제출하고, 다른 동료를 평가하고, 다른 동료로부터 평가받으며, 팀플을 시작하고 끝맺으며, 점수와 진도를 확인할 수 있고, 규칙이나 문서를 읽을 수도 있다. 전 세계적으로 사용하는 인트라넷이라서, 전 세계의 교육생들의 정보를 찾아볼 수도 있다. 사실 인트라넷이라는 말은 의미가 퇴색된 듯 하다. 또 뇌피셜 시작. 코로나가 터지기 전에는 정말로 클러스터의 맥으로만 접속할 수 있었던 것 같지만, 지금은 외부 인터넷에 전부 공개되어 있다. 계정만 있으면 언제나 어디서든 접속가능하다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>웃긴 건, 이런 <strong>시스템에 대한 설명은 전혀 없다.</strong> 처음 접속하여 어떤 걸 해야 하는지 알려주는 건 프랑스어로 말하고 영어 자막이 나오는 짤막한 유튜브 링크가 끝이다. 마치 설명 없는 게임처럼, 다양한 시도를 해보고 그 중 가장 효율적인 방법을 택해야 한다. 더군다나 사람마다 적응력이 천차만별이기 때문에, 빨리 적응하는 사람은 주위에 방법을 알려야 하고, 적응이 느린 사람은 적응이 빠른 사람 옆에 붙어서 방법을 습득해야 한다. 모든 시스템이 그러하다. 친절한 설명은 존재하지 않는다. <strong>사람들과 많이 교류해야 정보가 빠르게 돌고, 시스템에 빠르게 적응할 수 있다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 시스템에 적응되었다 하더라도, 개인 과제나 팀플 과제로 주어지는 문서도 불친절하기 그지없다. 번역이 일단 거지같아서 영문판 문서를 교차검증해야 하는 일이 많을 것이다. 사실 영문 번역도 거지같다. 문제에서 요구하는 조건은 항상 해석의 여지가 충분하기 때문에, 제출 후 기계에게 채점을 받아봐야 이게 틀린 건지 맞는 건지 알 수 있는 일이 많다. 그런 와중에 정말 적응력이 뛰어나 눈에 띄게 앞으로 헤쳐나가는 사람이 있는데, 그런 사람에게 꿀팁을 많이 전수받아야 한다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>개인 과제는 재시도가 가능하다. 하지만 팀플 과제는 기회가 딱 한번 뿐이다. 그래서 더 거지같다. 지키라는 걸 다 지켜도, 충분하지 않은 예시와 애매한 조건 때문에 뒷통수를 제대로 맞게 되는 경우가 흔하다. 절대 자기 자신을 믿지 말라. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>불친절한 과제 문서를 보완해줄 수 있는 건, <strong>구글 검색</strong>이었다. 기밀 누설 금지라고 명시되어 있지만, 전 세계적으로 몇 년동안 진행되어 왔던 42 시리즈에 공개되어있지 않은 정보란 존재하지 않았다. 특히 코드 통째로 공개되어 있는 경우를 심심찮게 발견할 수 있다. 이런 코드를 분석하는 데에도 조금의 노력이 필요했다. 이런 사실은 아마 스태프나 카뎃도 모두 알고 있을 것이다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>카뎃의 정보를 인트라넷에서 검색할 수 있었던 것</strong>도 큰 도움이 되었다. 카뎃들이 과거에 어떤 방식으로 평가받았는지를 모두 확인할 수 있기 때문이다. 정보력은 중요하다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>여하튼 이런 불친절함이 컨셉인데, 나는 개인적으로 맘에 들어하지 않는다. 이런 불친절함은 프로그래밍이나 코딩 실력을 키우는 것과 아무런 상관이 없어 보였다. 나는 팀플 중 두 개를 억울하게 빵점 맞았다. 엄밀히 따져서 억울한 것은 아니지만, 억울한 기분이 들었다. 비겁하다는 생각이 들었다. 시킨 걸 다 했는데 별 것 아닌 것 가지고 트집잡는 기분이었다. 너무 대놓고 절망과 수치심을 주려고 하는 것 같아서 때려치우고 싶었지만, <strong>그러기에는 너무 많은 지원금이었습니다 </strong>따단~ 끝까지 열심히 해야지 별 수 있나..</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 외에 의외였던 건, 나는 학장님이나 좀 높으신 분들이 피시너들을 한데 모여놓고 인삿말을 하거나 할 줄 알았는데, 그런 건 하나도 없었다는 점. 학장님 얼굴은 한 번도 보지 못했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>개인적인 성취로 따지면 나에게도 나름 효과적이었던 것 같다. 다만 이것이 동료 평가에서 오는 건 아니었다. 누군가에게 가르쳐주는 상황이 더 많았고, 다른 이들로부터 가르침을 전수받는 경우는 흔치 않았다. 그리고 항상 그렇듯이, 정말 두뇌가 뛰어난 사람이 존재하는데, 일단 그런 사람들과 직접적으로 대화를 나눠보지는 못했지만, 내가 어떤 가르침을 받을 수 있을까 싶은 생각이 들었다. 나에게 있어 개인적인 성취란, 정직한 시간 투입에서 오는 개인 학습에서 오는데, 나는 이번 기회에 Makefile과 같은 빌드 툴이나 C 컴파일 관련 cli 에 훨씬 익숙해졌다고 생각한다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>좋은 사람들</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금껏 뭔가 시스템이나 홀짝제나 원격 접속에 대해 부정적인 이야기를 한 것 같은데, 사실 나도 굉장히 보람찬 4주였다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 스터디원들. 나는 첫날까지 어떤 스터디에도 가입하지 않았다. 첫 날, 옆자리 사람이 너무 익숙하지 않았나 보다. 나도 익숙하지 않기는 매한가지였지만 나에게 몇 번 질문을 하셨다. 나는 질문에 최대한 친절하게 답하려고 했다. 그리고 점심시간 쯤이 되었을 때 혹시 식사는 어떻게 하시냐 물어봤다. 그리고 자기가 속한 스터디가 있다고 했고, 같이 식사하러 가자고 제안을 받았다. 오케이. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇게 마포 합정 스터디에 꼽사리를 끼게 되었는데, 스터디원들 모두 열심히 하는 게 좋았고, 다양한 사람들이 모인 것도 좋았다. 잘하시는 분들도 있어서 함께 토의를 할 수도 있었고, 성장 잠재력이 뛰어나신 분들도 있어서 정말 놀라움의 연속이었다. 아마 나만큼 시간 투여를 했다면 나보다 훨씬 잘할 사람들... 그리고 나는 계속 독학만 해왔기 때문에 다른 개발하는 사람들을 만날 기회가 없었는데, 이번에는 그런 이야기를 많이 나눌 수 있어서 좋았다. 도중에 한 분이 포기하시긴 했지만, 파이널 테스트 끝까지 함께 했다. 코딩에 아무런 접점이 없었던, 나에게 처음 질문해주신 (연결고리가 되어주신) 분은 정말 놀랍도록 성장했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>스터디원 전부 다 합격을 기원했다. 혹시 내가 합격을 못한다 해도.. 서울 올라와서 제대로 된 뒤풀이를 하자고 했다! (마지막 날은 다들 너무 피곤해서 알코올이 들어갈 생각이 없었다.) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>팀플도 다들 열심히 했다. 첫번째, 두번째, 세번째 전부 다 좋았다. 다른 팀플 보면 열심히 안하는 사람들도 간혹 보여서 좀 불안했는데, 정작 팀플로 만난 분들은 다들 열심히 하는 분이라 나는 복받았다고 생각했다. 다들 열심히 하셔서 나도 더 열심히 할 힘이 난 것 같았다. 아주 보람찬 경험이었다. 모두 합격하고 서울에서 다시 보자고 약속했다. 제발..</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>보람찼다. 피신 과정 마치고 또 일해야 해서 일 하러 간다.. 쉴 수 없다.. 힘들다.. (빈약한 결론) 결과는 언제 나올지 몰라~</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2031</wp:post_id>
		<wp:post_date><![CDATA[2020-07-25 23:54:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-25 14:54:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-27 20:31:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-27 11:31:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[42-seoul-2-la-piscine-%ed%9b%84%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="42-seoul"><![CDATA[42 SEOUL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>4751</wp:comment_id>
			<wp:comment_author><![CDATA[a./out]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[a@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.148.97.92]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-11-09 14:08:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-11-09 05:08:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[좋은 정보 감사합니다. 전 3달에 700만원 내고도 똑같이 굉장히 불친절한 과정을 공부했어서 그나마 돈주면서 불친절하면 친절한 편이 아닌가 하는 생각이 들기도 하는데 물론 경험해보면 또 다르겠죠... 정성들여 작성하신 것 같아요~ 도움이 많이 되었습니다:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1604898530.161664;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608696890.028233;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>5354</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.123.112.79]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-12-23 13:35:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-12-23 04:35:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[도움이 되어서 좋네요~ 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>4751</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1608698117.844833;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[요약정뤼중~]]></title>
		<link>https://elvanov.com/2032</link>
		<pubDate>Wed, 15 Jul 2020 10:38:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2032</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>구조체(<code>struct</code>)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>여러가지 변수를 모아둔 것.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>선언하는 법</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 노미네뜨 검증 X */
struct Person
{
    char name&#91;20];
    int age;
    char address&#91;100];
};

struct Person p; /* 변수 만들때 .*/</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>예제</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>/* 노미네뜨 검증 X */
#include &lt;stdlib.h>
#include &lt;stdio.h>

struct Person
{
	char name&#91;20];
	int age;
	char address&#91;100];
};

int main()
{
	struct Person p; /* 실제 변수를 만듬*/
	p.age = 5;		 /* 변수의 멤버에 접근 */
	printf("%d\n", p.age);

	struct Person *pp;
	pp = &amp;p;
	pp->age = 10; /* (*pp).age = 10 과 동일 */
	printf("%d\n", pp->age);

	struct Person *malp;
	malp = (struct Person *)malloc(sizeof(struct Person) * 1); /* sizeof 를 이용하여 필요한 메모리 계산 */
	malp->age = 20;
	printf("%d\n", malp->age);
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>5
10
20</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Norminette</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>이름은 알파벳 소문자, 숫자, '_' (Unix 문자) 로만 이루어져야 합니다.</li><li><code>struct</code>의 이름은 <code>s_ </code>로 시작해야 합니다.</li><li><code>struct</code>, <code>union</code>, <code>enum</code>을 선언할 때에는 탭을 삽입하시기 바랍니다.</li><li><code>struct</code>, <code>union</code>, <code>enum</code> 타입의 변수를 만들 때에는 자료형에 스페이스가 하나 존재해야 합니다. (예: <code>struct스페이스바s_abc탭a;</code>)</li><li><code>.c</code> 파일에 선언하는 하지 마십시오.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><code>typedef</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>struct</code>, <code>union</code>, <code>enum</code>을 좀 더 간편하게 쓸 수 있도록 별칭을 만드는 것. 예를 들어 이미 만들어둔 <code>s_abc</code> 구조체에 대해 <code>typedef struct s_abc t_abc</code> 라고 하게 되면 앞으로 <code>struct s_abc</code> 라고 길게 쓰지 않고 <code>t_abc</code> 로 간편하게 쓸 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Norminette</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2055,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/07/type1.jpg" alt="" class="wp-image-2055"/><figcaption>norminette 안걸리게 하기. 내부 인자에 맞게 <code>t_bar</code>를 맞춘 다음, <code>s_abc</code>를 <code>t_bar</code>에 맞춘다. <code>t_abc</code>는 그냥 직전에 탭 하나만 있으면 되는 듯.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>정적 라이브러리 (.a 파일)</h2>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>뭔가 라이브러리 부분은 러쉬나 BSQ에서 이용하진 않을 것 같은 뇌피셜</p></blockquote>
<!-- /wp:quote -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code># 파일은 mysum.c, mysum.h 두 개의 파일이 존재한다고 가정
gcc -c mysum.c
ar rcv libmysum.a mysum.o</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>정적 라이브러리는 단순히 보통의 목적파일(object file)의 모음이다. 관례적으로, 정적 라이브러리는 ``.a''의 확장자로 끝난다. 이것은 ar(archiver)프로그램에 의해서 만들어진다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위의 프로그램을 컴파일 하기 위해서는 라이브러리의 위치와 어떤 라이브러리를 사용할것인지를 알려줘야 한다. 라이브러리의 위치는 '-L' 옵션을 이용해서 알려줄수 있으며, '-l' 옵션을 이용해서 어떤 라이브러리를 사용할것인지를 알려줄수 있다. -l 뒤에 사용될 라이브러리 이름은 라이브러리의 이름에서 "lib"와 확장자 "a"를 제외한 나머지 이름이다. 즉 libmysum.a 를 사용할 것이라면 "-lmysum" 이 될것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>gcc -o print_sum print_num.c -L./ -lmysum</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>동적 라이브러리를 배우지는 않지만 간략히 언급만 하고 넘어간다면, 동적 라이브러리는 정적 라이브러리처럼 컴파일 시 링크되는 개념이 아니라, 컴파일 때에는 본체 프로그램만 하고, 라이브러리는 프로그램을 실행할 때 가져온다는 차이가 있다. (.dll 파일)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>헤더 파일</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>헤더 파일과 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>헤더 파일과 라이브러리의 차이가 뭐냐고 묻는다면, 이는 사실 완전히 성격이 다른 것이다. 라이브러리란 유용하게 갖다 쓸 함수들이 컴파일된 채로 있는 걸 의미하며,  헤더 파일은 어떤 기능을 구현하고자 할 때 "구현부인 소스 파일과 선언부인 헤더 파일로 나누</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>컴파일 과정</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>전처리기</strong>: <code>#define</code>, <code>#include</code> 등의 매크로를 처리하여 매크로 없는 깔끔한 소스 파일을 제작함 <code>#include</code> 는 기능적으로는 복사 붙여넣기와 같음.</li><li><strong>컴파일</strong>. 소스코드를 실행가능한 파일로 변환하는 과정. 문법 에러 등 에러 발생시 실패. 성공하면 목적 파일(오브젝트 파일, <code>.o</code> 파일)이 생성됨.</li><li><strong>링크</strong>. 실행가능한 파일들을 묶고 조합하는 과정. 함수 등의 기능을 실제로 사용하려고 하지만, 그 내용을 찾는 데 실패했을 때(구현부를 컴파일할 때 포함시키지 않으면) 에러가 뜸. 구체적인 에러 위치를 알려주지 않음.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Makefile</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>gcc -o .. 소스파일.. 라이브러리..</code> 등등.. 너무 명령어가 길어지니까 이것들을 절차에 맞게 잘 컴파일할 수 있도록 <strong>컴파일 방법을 <code>Makefile</code> 이라는 파일에 적어두고</strong>, <strong><code>make</code> 명령어</strong>로 컴파일 및 빌드할 수 있음.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>파일 내부 구조</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2065,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/07/Makefile기본구조.jpg" alt="" class="wp-image-2065"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li>매크로 : 반복적으로 쓸 문자를 변수처럼 정의해줌. 매크로에 매크로를 정의할 수 있음. 매크로를 불러올 땐 <code>$(매크로이름)</code>로 함.</li><li>타겟절 : <strong>목표, 룰, 라벨</strong>이라고도 함. 목표! 기본적으로 만들어야 할 파일 이름이 옴. (예: <code>something.o</code>) 후술할 특수 목적 타겟도 있음. (<code>all</code>, <code>clean</code>, <code>re</code> 등)</li><li>의존성 : 해당 타겟이 완성되기 전에 미리 완성되어야 할 다른 타겟들을 적음.</li><li>명령어 : 해당 타겟을 완성시키기 위한 명령어를 적음. 앞에 탭 하나가 있어야 함. 해당 타겟을 완성하려고 할 때 실행되는 실제 명령어</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>특수 매크로</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>$@</code> : 해당 타겟을 의미. (타겟 정의시 <code>:</code> 왼쪽에 있는 문자들)</li><li><code>$^</code> : 해당 모든 의존성을 의미. (타겟 정의시 <code>:</code> 오른쪽에 있는 문자들)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>기초 실행법</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>Makefile</code>이 있는 폴더 (프로젝트 폴더)에 들어가서 <code>make</code> 명령어를 치면된다. 아무런 인수 없이 <code>make</code> 명령을 실행한다면 최상단에 있는 목표(룰, 타겟)가 실행된다. 그러므로 <code>all</code> 룰을 제일 위에 두자.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>예제</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-makefile"} -->
<pre class="wp-block-code language-makefile"><code>CC = gcc 
AR = ar
RANLIB = ranlib
CFLAGS = -Wall -Werror -Wextra  # TARGET을 만들 때 사용될 C 플래그
TARGET = power_exe # 최종 생성될 파일
OBJECTS = main.o # Target을 만들 때 사용될 오브젝트 파일

LIB_NAME = test# 라이브러리의 이름 지정
LIB_OBJS = test.o abcd.o # 라이브러리에 사용할 목적 파일들 지정
LIB_FILE_NAME = lib$(LIB_NAME).a # 실제 생성될 라이브러리 파일 (확장자는 .a)
LIBS += -ltest # GCC 라이브러리 지정 옵션 (-l이름 == lib이름.a)
LIB_DIR = -L. # GCC 라이브러리 경로 지정 옵션

INC_DIR = -I./inc # #include 할 헤더 파일이 있는 경로들. 여기 기반으로 헤더파일 검색함.

all : $(LIB_FILE_NAME) $(TARGET)

$(LIB_FILE_NAME) : $(LIB_OBJS)
	$(AR) rcv $@ $^
	$(RANLIB) $@

$(TARGET) : $(OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^ $(LIB_DIR) $(LIBS) $(INC_DIR)

%.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $^ $(INC_DIR)

clean:
	rm -f $(OBJECTS) $(LIB_FILE_NAME)

fclean: clean
	rm -f $(TARGET)

re: fclean all

.PHONY: all clean fclean re</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>.PHONY</code> : 만약 폴더에 이름이 <code>clean</code> 이라는 파일이 존재하면,  <code>make clean</code> 이라는 명령을 수행해도 이 타겟은 이미 완료되었다고 간주되어 아무런 일이 일어나지 않는다. 그래서 <code>make clean</code> 을 했을 때 이 <code>clean</code>은 가짜 타겟이라는 것을 명시하기 위해 <code>.PHONY</code>에 놓는다. <code>.PHONY</code>에 있는 타겟들은 <code>clean</code> 이라는 이름을 가진 파일이 있어도 무조건 명령을 수행한다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>특정 타겟 이름의 의미는?</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>all</code> : 최상단에 위치, 완전한 빌드(컴파일)을 의미함.</li><li><code>clean</code> : 최종 실행 파일을 제외한 나머지 생성된 파일(<code>.o</code> 등) 삭제</li><li><code>fclean</code> : 최종 파일 포함 생성한  삭제.</li><li><code>re</code> : <code>fclean</code>, <code>all</code> 순차적으로 실행. </li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>세부 사용법</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>특정 타겟을 실행하고 싶다면?</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>make 타겟이름</code></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>실행하는 모든 명령을 출력하는 방법</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 그대로 쓰면 된다. 명령어 제일 앞에 <code>@</code>를 넣어주면 (예: <code>@$(CC) $(CFLAGS) -o $@ $^ $(LIB_DIR) $(LIBS)</code> 해당 명령어는 화면에 보이지 않는다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>소스 파일의 디렉토리 설정법</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>소스 파일들을 설정할 때 일일히 폴더를 지정해주자. <code>gcc</code> 옵션으로는 존재하지 않는다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>헤더 파일의 디렉토리 설정법</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>위 예제에서 <code>INC_DIR</code> 참조. gcc 에서는 <code>-I</code> 옵션을 통해 <code>#include</code> 할 경로를 추가해줄 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>lib 파일의 출력 디렉토리 설정법</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>gcc 빌드할 때 -o 에 디렉토리 설정해주면 되지 않을까?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>메모리 할당과 해제</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>malloc</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>헤더: <code>&lt;stdlib.h></code></li><li>함수 정의: <code>void * malloc(size_t size);</code></li><li>리턴: 성공시 어떤 포인터, 실패시 0</li><li>예제: <code>char *p = (char *)malloc(sizeof(char) * 10);</code></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><code>free</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>함수 정의: <code>void free(void *ptr);</code></li><li><code>free</code>는 해당하는 포인터를 해제합니다. 아무것도 리턴하지 않습니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>올바르지 않은 <code>ptr</code>이 들어가는 상황에 대한 표준 규약은 없습니다. 메모리 할당을 어떻게 구현하는지는 플랫폼에 따라 달라지지만, 일반적으로 "시작 주소"와 "길이" 정보를 가지고 있는 내부 테이블이 존재합니다. 해제하고자 하는 포인터와 관련이 없이 아예 무관한 다른 데이터를 해제해버릴 가능성을 원천 차단하기 위해, <code>free</code>는 대부분의 경우 정확한 주소가 들어왔을 때에만 처리하고 올바르지 않은 주소가 들어왔을 때엔 에러로 간주하고 즉시 보고하는 식으로 설계되어 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>파일 읽고 쓰기</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>open</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>헤더: <code>&lt;fcntl.h&gt;</code></li><li>함수 정의: <code>int open(const char *path, int oflag, ...);</code></li><li>동작: 새 파일을 열면서 새 디스크립터를 할당</li><li>리턴값: 성공하면 양의 정수 (파일 디스크럽터 넘버)가 리턴되고, 실패하면 글로벌 변수인 <code>errno</code>를 설정하고 <code>-1</code>를 리턴한다.</li><li>매뉴얼 : <code>man 2 open</code></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>oflag</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 값들을 or 연산을 하여 넣으면 됨.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>       O_RDONLY        읽기 전용으로 열기
       O_WRONLY        쓰기 전용으로 열기
       O_RDWR          읽기/쓰기로 열기
       O_NONBLOCK      do not block on open or for data to become available
       O_APPEND        append on each write
       O_CREAT         파일이 있지 않으면 생성
       O_TRUNC         truncate size to 0
       O_EXCL          error if O_CREAT and the file exists
       O_SHLOCK        atomically obtain a shared lock
       O_EXLOCK        atomically obtain an exclusive lock
       O_NOFOLLOW      do not follow symlinks
       O_SYMLINK       allow open of symlinks</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>O_EXCL : 심볼릭 링크도 무조건 실패한다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>mode_t</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>헤더: &lt;sys/stat.h&gt;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>플래그를 <code>O_CREAT</code> 로 하면 세 번째 인수로 파일 권한 설정인 mode_t 를 설정해야 함.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>close</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>함수 정의: <code>int close(int fildes)</code></li><li>간략 설명: 파일 디스크립터를 넣어서 해당 연결을 해제시킨다.</li><li>Return Value: 성공적으로 마쳤으면 <code>0</code>을 리턴한다. 그 이외에는 <code>-1</code>를 리턴하며, 글로벌 변수인 <code>errno</code>가 설정된다.</li><li>매뉴얼 : <code>man 2 close</code></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>에러</h4>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code> The close() system call will fail if:

 &#91;EBADF]        유효하지 않거나 활성화되지 않은 파일 디스크립터임.
 &#91;EINTR]        시그널(강제 취소 등)에 의해 중단됨.
 &#91;EIO]          A previously-uncommitted write(2) 가 입출력 에러를 일으킴.

ssize_t read(int fildes, void *buf, size_t nbyte);
ssize_t write(int fildes, const void *buf, size_t nbyte);</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3><code>read</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>헤더: <code>&lt;unistd.h&gt;</code></li><li>선언: <code>ssize_t read(int fildes, void *buf, size_t nbyte);</code></li><li>동작: 파일 디스크럽터에 해당하는 파일을 <code>nbyte</code>만큼 읽고 <code>buf</code>에 복사함. 내부의 포인터가 읽은 만큼 자동으로 이동됨 (<code>read(fd, buffer, 10)</code>를 반복한다면, 10칸씩 순차적으로 read 됨.)</li><li>리턴: 성공적으로 읽을 시 읽은 바이트 수를 리턴함. 파일의 끝에 도달했다면 <code>0</code>을 리턴함. 에러일시 <code>-1</code>를 리턴하고 글로벌 변수인 <code>errno</code>를 설정함.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><code>write</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>헤더: <code>&lt;unistd.h&gt;</code></li><li>선언: <code>ssize_t write(int fildes, const void *buf, size_t nbyte);</code></li><li>동작: 해당 파일 디스크립터에 해당하는 IO에 <code>buf</code>의 <code>nbyte</code>만큼 써넣음.</li><li>리턴: 성공적으로 wirte 한 바이트 수를 리턴함. 에러일시 <code>-1</code>를 리턴하고 글로벌 변수인 <code>errno</code>를 설정함.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><code>strerror</code></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>헤더 : <code>&lt;string.h&gt;</code></li><li>선언 : <code>char* strerror(int errnum);</code></li><li>동작 및 리턴: <code>errnum</code>를 넣으면 이를 설명해주는 문자열 리터럴을 리턴해준다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><code>ssize_t</code>란?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사이트를 나타내는 변수에 대한 타입이긴 한데, 사실 사이즈는 양수만 있어도 되지만, (그래서 <code>size_t</code>라는 양수 전용 타입이 있지만) 입출력을 할 때 에러를 처리하기 위해 음수까지 열어놓은 사이즈라고 보면 됨. <code>ssize_t</code>를 리턴하는 함수들은 에러일 때 <code>-1</code>를 리턴하는 경향이 있음.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>ssize_t</code>를 이용하는 함수들이 있는 헤더파일을 불러올 때, 알아서 불러오므로 무엇을 include 해야 하는지에 대한 건 신경쓸 필요 없음.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>errno</code> 변수 이용법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>errno</code> 변수를 쓰기 위해서는 <code>&lt;errno.h&gt;</code>헤더를 선언해야 한다. <code>extern int errno;</code> 이렇게 선언되어 있다. 이 변수는 다른 함수를 호출할 때 값이 바뀌기 때문에 따로 저장해두는 게 좋을 수도 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>man errno</code> 하여 에러의 종류를 확인할 수 있음.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>man close, open, read, write, strerror, basename</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c10. Makefile 끝판왕. close, open, read, write, malloc, free, strerror, basename 에 대한 확실한 숙지 필요. ulimit 사용법(크기제한 확인하는 명령어),  hexdump 명령어 (-C 옵션), tail 명령어 ( -c 옵션)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c11. 함수포인터</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c12. 연결리스트.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c13. binary tree</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>기타</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>매뉴얼 숫자의 의미</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>MANUAL SECTIONS<br>The standard sections of the manual include:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>1      User Commands
2      System Calls
3      C Library Functions
4      Devices and Special Files
5      File Formats and Conventions
6      Games et. al.
7      Miscellanea
8      System Administration tools and Daemons</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3><code>exit(1)</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>정상적으로 종료한다는 뜻.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2032</wp:post_id>
		<wp:post_date><![CDATA[2020-07-15 19:38:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-15 10:38:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-17 12:02:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-17 03:02:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[exam02-%eb%8c%80%eb%b9%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OKKY 첫 질문 후기 - 성공적]]></title>
		<link>https://elvanov.com/2115</link>
		<pubDate>Thu, 06 Aug 2020 23:42:49 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2115</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>이 글은 그렇게 쓸모 있는 글은 아닙니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>용역 받아 진행하는 프로젝트가 있는데, 나 혼자 진행하는 상황이다. 게다가 지금까지 한번도 쓰지 않은 기술을 쓰느라 공부와 병행하여 힘겹게 진행하고 있다. 몽구스나 nginx 등의 기술의 사용 방법은 인터넷에 검색하면 (그나마) 쉽게 배울수 있다. 하지만 개발 그 자체에서 효율이 아주 떨어짐을 경험하고나니, 이 문제를 어떻게 해결할 수 있을지 정말 막막했다. 개발 방법론의 문제라고 이야기할 수 있겠다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>나에게 선배라고 할 만한 사람은 없다. 아직 뭐 회사에 취직한 것도 아니니까. 공부도 거의 독학으로 진행했다. 음. 얼마 전 42Seoul 라 피신에서 느낀 바가 있는데, 혼자서 딱 해보고 안되면 바로 도움을 최대한 구하는 게 장기적인 효율 측면에서 제일 좋구나 싶었다. (이놈의 효율중심주의..) 나에겐 스택 오버플로우에 적을 영어 실력이 없으니 그나마 우리나라에서 가장 활성화된 개발자 커뮤니티인 <a href="http://okky.kr">OKKY</a>에 질문을 올렸다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>질문 작성하는 데만 1시간 가량 걸린 것 같다. 최대한 나의 상황을 자세하게 적고자 했다. 첫 질문이라 두근두근.. 하지만 답변은 금방 달리지 않았다. 마음을 접고 다음날 확인했다. 오, 답글이 달려있었다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2116,"sizeSlug":"full"} -->
<div class="wp-block-image"><figure class="aligncenter size-full"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/08/screencapture-okky-kr-article-754998-2020-08-07-08_29_08-1.png" alt="" class="wp-image-2116"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>도움 받으니 기분이 좋구나. 더 열심히 해야겠드아...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2115</wp:post_id>
		<wp:post_date><![CDATA[2020-08-07 08:42:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-06 23:42:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-12 16:21:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-12 07:21:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[okky-%ec%b2%ab-%ec%a7%88%eb%ac%b8-%ed%9b%84%ea%b8%b0-%ec%84%b1%ea%b3%b5%ec%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[웹 접근성 인증 받는 방법과 후기]]></title>
		<link>https://elvanov.com/2123</link>
		<pubDate>Tue, 12 Jan 2021 13:34:47 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2123</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>일평생 처음이고, 또 마지막도 될 수 있는 웹 접근성 품질 인증 심사에 대한 포스팅입니다. 일개 힘없는 프리랜서라서 더 잘하는 분들의 힘을 얻고자 인터넷에 관련된 검색을 많이 했었는데, 인증 후기를 도저히 찾을 수 없었습니다! 왜! 힘을 주시지 않는 겁니까... 그래서 최대한 삽질하지 않기 위한 몸부림을 기록하고자 키보드를 두들기게 되었습니다. 둥당기둥당. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>웹 접근성은 무엇인가?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>웹 접근성이란 쉽게 말해 웹 환경을 이용하기 어려운 사용자들에 대해서도 사용성을 보장해달라고 하는 것입니다. 예를 들어 시각장애인은 글자를 볼 수 없기 때문에 글자를 읽어주는 프로그램인 스크린 리더기가 인식하는 방법으로 웹 페이지를 구성해야 합니다. 청각장애인은 소리를 들을 수 없기 때문에 소리로 전달되는 정보에 대해서 글자로도 볼 수 있도록 해야 하지요. 그런 느낌입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>웹 접근성에 대해서는 훨씬 잘 정리된 문서들이 많으니 그것을 참고해주시면 될 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://www.wah.or.kr:444/">웹 접근성 연구소</a>에서 이야기하는 <a href="https://www.wah.or.kr:444/Accessibility/define.asp">웹 접근성 개요</a><a href="https://www.wah.or.kr:444/Accessibility/define.asp"></a></li><li><a href="http://www.websoul.co.kr/">웹서울랩</a>에서 이야기하는<a href="http://www.websoul.co.kr/accessibility/define.asp"> 웹 접근성 개요</a></li><li><a href="http://styleguide.co.kr">리메인 스타일지침서</a>에서 이야기하는 <a href="http://styleguide.co.kr/content/color/color-wraning.php">웹 접근성 (특히 컬러부분)</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>어떻게 장애인들이 웹을 잘 쓰게 할 것인가는 어려운 질문입니다. 실제로 웹을 사용하는 장애인들 입장에서 어떤 것이 더 편하고 수월할지 그 기준을 잡기가 굉장히 난감합니다. 세상에 사람들이 얼마나 많은데요. 그래서 그러한 표준을 잡기 위한 세계적인 움직임이 있습니다. <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">웹 콘텐츠 접근성 가이드라인(영문)</a>을 확인해볼 수 있습니다. 또한 웹 접근성 연구소에서, 이 가이드라인을 한국 사정에 맞춰 기획한 <a href="https://www.wah.or.kr:444/Participation/guide.asp">한국형 웹 콘텐츠 접근성 지침</a>이 있습니다. 후술할 인증 심사는 전부 이 지침을 기반으로 운용됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {"className":"is-style-wide"} -->
<hr class="wp-block-separator is-style-wide"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>웹 접근성에 대해 알아봤던 과정</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 아무 웹 사이트에서, 우리 사이트는 접근성을 아주 잘 지원한다고 떠벌린다고 해서 그게 진실이 될 수는 없겠지요. 한국에는 그러한 웹 접근성을 잘 지원하는 웹사이트에 대해서 공인 인증 마크를 부여하는 제도가 있습니다. 웹 접근성 품질인증 공인기관에게 인증을 받으면 1여년 동안 품질 인증마크를 사이트에 박제할 수 있게 하여, "<strong>우리 사이트는 장애인 친화적이다!</strong>"라고, 아주 근거있는 주장을 할 수 있게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>한국에서는 3개의 심사 단체가 있습니다.  (정식 명칭으로는<strong> 웹 접근성 품질인증 공인기관</strong>)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="http://www.webwatch.or.kr">웹와치</a></li><li><a href="http://www.wa.or.kr">한국웹접근성인증평가원</a></li><li><a href="http://www.kwacc.or.kr/">한국웹접근성평가센터</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그리고 심의료는 비쌉니다. 아래 표는 한국웹접근성평가센터에서 가져온 표입니다. 가장 소규모의 페이지를 받는다고 해도 수수료를 120만원이나 받습니다. 억 소리 나옵니다. 그리고 업체별로 심의료가 얼마나 싼지 알 필요도 없습니다. 왜냐하면 <strong>심의료가 세 업체가 모두 똑같기</strong> 때문입니다! 아니, 이게 무슨 소릴까요. 업체들끼리 담합을 한 걸까요? 여기에 관한 이야기는 뒤에서 계속 하겠습니다..</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2127,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-164450-1024x566.png" alt="웹 접근성 인증 비용" class="wp-image-2127"/><figcaption>웹 접근성 인증 비용</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>더더욱 무서운 점은 만약 심사에 불합격한다 했을 때 <code><strong>부적합 사유가 경미한 접근성 위반으로 인한 경우에 한해 최초 1회의 보완기회를 제공</strong></code> 한다는 겁니다. 완전 불합격되면 환불 같은건 꿈도 꾸지 말고 그냥 심사비 날라가는 거라고 합니다. 너무 무시무시하지 않습니까? 100만원 이상을 태우는데 그 돈이 그냥 허망하게 없어질 수도 있다니... 그렇다면 사유가 경미하다고 할 때 그 경미하다는 기준은 무엇일까, 최초 1회의 보완기회를 어떻게 하면 잘 살려야 할까.. 별의 별 생각이 다 들었습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일단 <strong>한국웹접근성인증평가원</strong>을 선택하여 진행했습니다. 하여튼 진행이 수훨하게 잘 될지 걱정이 많았는데, 주된 이유는 두가지였습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>프리패스된 자가진단</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>첫째로는 자가진단과 관련된 이야기입니다. 접근성 인증을 받고자 하면 신청서를 제출하기 전에 자가진단을 하여, 그 진단 결과를 신청서에 첨부해야 합니다. 자가진단은 업체에서 명시한 방법으로 진행하는데,  <a href="http://www.wa.or.kr/board/view.asp?sn=10025&amp;page=1&amp;search=&amp;SearchString=&amp;BoardID=0004&amp;cate=">K-WAH 4.0</a> 프로그램을 이용하는 법, 혹은 <a href="https://accessibility.kr/nia/check.php">웹 접근성 자가진단 서비스를 이용하는 법</a> 두 가지를 제시받았습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하. 지. 만. 우리의 웹 사이트는 해당 툴을 지원하지 않는다는 겁니다! 이유를 전화로 물어봤습니다. 그랬더니 <strong>자바스크립트 기반으로 돌아가는 웹페이지는 지원하지 않을 가능성이 높다</strong>고 하는 겁니다. 프론트엔드를 vue.js 로 만들었어요. 근데 vue가 뭡니까? 기본적으로 단일페이지 웹 어플리케이션(SPA) 아닙니까? 이거는 지원되지 않는다는 겁니다. 그래서 어떻게 하면 좋냐고 물어보니, 그냥 업체 정보만 적어서 신청서 보내주시면, 자기네들이 알아서 지원되지 않는 페이지로 간주하고 자가진단 부분은 면제가 된다고 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2131,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-171443.png" alt="웹 접근성 자가진단 서비스에서의 결과" class="wp-image-2131"/><figcaption><a href="http://accessibility.kr/nia/check.php(새탭에서 열기)">웹 접근성 자가진단 서비스</a>에서의 결과. K-WAH 4.0 도 마찬가지로 결과가 0이 나온다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>자가진단이 면제가 된다고 해서 마냥 좋지만은 않았는데요, 이건, 자가진단 프로그램에서 수정이 필요하다고 판단되는 부분을 미리 수정할수 있는 기회가 날라간 것이나 마찬가지였기 때문입니다. 만약 자가진단 툴이 제대로 되었다면, 본 심사 과정도 통과할 확률이 조금이나마 올라가지 않을까요? 근데 그런 시도조차 할 수가 없으니 답답한 마음이 들었습니다. 후술하겠지만 나름대로 <a href="https://www.npmjs.com/package/vue-axe">vue-axe</a> 라는 툴을 통해서 접근성을 최대한 보장해보고자 했는데, 시도는 좋았지만 지금 생각해보면 더 꼼꼼할 필요가 있었다는 생각이 들었네요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>애매한 평가 기준</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>둘째로는, 애매한 전문가 심사 평가 기준입니다. 본 심사는 크게 두 가지로 이루어져 있는데, 전문가 심사와 사용자 심사입니다. 제 나름대로 느낀 바로 구분을 해보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>전문가 심사 : 웹 접근성 전문가가 평가 항목을 잘 수행했는지 보고, 이상이 없으면 OK.</li><li>사용자 심사 : 실제 장애인이 직접 특정 과업을 수행해보고 이상이 없으면 OK.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>사용자 심사는 특정 과업 선정 후 수행 성공만 하면 된다는 아주 간단해보이는 기준이 있지만, 전문가 심사는 저 <strong>평가 항목</strong> 부분이 굉장히 애매했습니다. 어떻게 되어있는지를 한번 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2133,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/12/평가기준.jpg" alt="" class="wp-image-2133"/><figcaption>전문가심사 평가 항목</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><s>저기 저 <code>세부평가항복</code>이라는 오타 보입니까? 별로 관심이 없다는 증거가 아닐까요? (아님 말고)</s></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>세부평가항목에서 <code>레이블 제공</code>. <code>표의 구성</code>. 이렇게 한두 단어로 띡 던져주면, 무엇이 오류이고 무엇이 괜찮은지 알 방도가 없습니다. 코딩적으로 어떻게 해야 한다는 지침도 전혀 없고요. <code>html</code> 태그를 어떻게 구성해야 하는지, 어떤 속성을 적절하게 넣어야 하는지에 대한 기준이 없으니까 정말 혼란스러웠습니다. 제 클라이언트와 아무래도 심사 넣기 전 불안한 부분들이 있다고 이야기를 하니까, 그러면 거기에 전화해서 기준을 물어보자고 했습니다. 왜 그 생각을 못했을까요!! 바로 전화하여 그 세부 평가 항목에 대해서, 어떻게 평가를 하는 건지 물어봤습니다. 그랬더니 친절하게도 자료를 보내주었습니다. 짜잔~ (대외비는 아닌 것 같아서 공개합니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:file {"id":2130,"href":"https://elvanov.com/elvanov/wp-content/uploads/2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf"} -->
<div class="wp-block-file"><a href="https://elvanov.com/elvanov/wp-content/uploads/2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf">최종버전-웹-접근성-품질인증-표준심사-지침151030</a><a href="https://elvanov.com/elvanov/wp-content/uploads/2020/12/최종버전-웹-접근성-품질인증-표준심사-지침151030.pdf" class="wp-block-file__button" download>다운로드</a></div>
<!-- /wp:file -->

<!-- wp:paragraph -->
<p>자료에는 각 평가 항목마다 어떻게 평가해야 하는지가 자세하게 적혀져 있습니다. 그리고 이 문서에서 살펴보면 알 수 있듯이, 심사 과정, 종류 뿐만 아니라 심사 비용까지 모두 세세하게 다 정해주고 있습니다! 그렇습니다. 심사 기관 세 개가 모두 같은 가격이고 평가 항목도 똑같은 이유는 <strong>정부로부터 공인받는 단체는 그렇게 해야 하기 때문</strong>이었습니다~</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>개발 전 고려사항</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>만약 이 글을 읽고 계신 분이 아직 웹 사이트 개발을 시작하시지 않은 분이라면, 그리고 정부와 관련된 사이트, 아주 많은 사람들이 사용하는 사이트를 개발하시는 거라서 인증 마크를 필수로 따야 하는 게 아니라면, 웹 접근성 인증에 대해서 다시 생각해보시기를 강력하게 권해드립니다. 단순히 웹사이트의 퀄리티를 보장받기 위해서 웹 접근성 인증을 따려는 시도는 하지 말아야 합니다. 정말 웹 사이트에 대해서 순수하게 접근성을 높이고자 한다면, 웹 접근성 체크 툴을 꼼꼼하게 사용하는 걸로도 충분하고, 접근성과 관련된 문서를 더 세밀하게 보거나 관련 컨퍼런스 혹은 세미나에 참석하는 게 더 도움이 될 것 같습니다. 사실, ui 관련 라이브러리를 쓴다면 접근성에 대해 그렇게 크게 신경쓰지 않으실 수도 있습니다. 라이브리에는 컴포넌트화된 ui 요소들이 많은데, 유명하고 많이 쓰는 라이브러리(예: <a href="https://getbootstrap.com/">부트스트랩</a>)에는 직접 만드는 것보다 더 치밀하게 웹 접근성이 보장되어 있는 경우가 많습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2144,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/accessibility.png" alt="" class="wp-image-2144"/><figcaption>bootstrap-vue 에서 접근성에 관해 설명하는 부분. 각 컴포넌트마다 대부분 저런 접근성 관련 안내가 있다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>그렇다면 이제 반드시 웹접근성 인증을 받아야 된다, 하시는 분들은 웹사이트 개발 초기부터 설계를 잘 잡아야 합니다.  필자는 접근성의 <em>접</em>도 잘 모르던 때부터, 웹사이트가 생소한 디자이너과 함께 사이트를 디자인했는데 막상 개발을 시작하고 보니 접근성에서 걸리는 부분들이 정말 많았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>색상과 관련된 디자인</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>사용가능한 색상</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사용할 수 있는 색상의 범위가 제한되므로 디자인할 때부터 신경을 써야 합니다. 크고 굵은 글씨는 명도 대비가 3:1 이상이어야 하고, 일반 텍스트는 4.5:1 이상이어야 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2136,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2020/12/화면-캡처-2020-12-23-194044.png" alt="" class="wp-image-2136"/><figcaption>겨우 맞춘 3:1.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>위 문구는 3:1 비율을 겨우 맞춘 색상입니다. 진해보이지만 놀랍게도 3:1에 근접한 색상입니다. 저 색상은 본문용으로는 사용할 수 없습니다. 글씨를 얇게 해서도 사용 못합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><span style="color:#767676" class="has-inline-color">와~ 이건 #767676 이에요~</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 문구는 본문용으로 사용할 수 있는 색상으로, 흰 바탕에서 접근성 색상(4.5:1)을 만족하는 최대 옅은 회색입니다. #777777 이 되어버리면 불합격 합니다. 회색이긴 하지만 아주 옅지는 않지요. 디자인적으로 잘 살릴 수도 있겠지만, 그래도 아주 옅은 색깔을 원한다면 좀 아쉬운 부분입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>사이트를 정말 이쁘게 만들고 싶어서 색상을 포기할 수 없다면, 두 가지 버전을 만드는 것이 방법이 될 수 있습니다. <strong>접근성을 전혀 고려하지 않은 예쁜 색상만을 쓴 버전과, 접근성을 고려하여 명도 차이가 확실한 버전</strong>으로요. 물론 시도는 안해봤는데, 개발에 착수하고 한참 뒤에 색 때문에 고통을 받았지만, 처음부터 개발한다고 생각하면 괜찮은 생각이라고 생각합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://webaim.org/resources/contrastchecker/">Webaim Contrast Checker (색상 명도 대비 확인하는 곳)</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>색상만으로 구분되는 콘텐츠를 넣지 말자.</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>디자인할 때 흔히 <strong>현재 활성화된 메뉴와 그렇지 않은 메뉴를 색상으로 구분하곤 하는데, 그렇게 하면 안 돼요.</strong> 색상만으로 한다면 완전히 다른 색상으로 구분을 주어야 합니다. "<em>패턴, 명암(7:1 이상) 등으로 색에 관계없이 직관적으로 인식되도록 제공해야 준수한 것으로 인정</em>" 한다고 하니깐요. </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>어떤 삽질을 해야 하는지 미리 알기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이건 사실 경험이 쌓여야 알 수 있는 것이지만 (그리고 경험이 쌓였다고 해서 그게 미래에 똑같이 적용되리라는 보장도 없긴 하지만) 후술할 필자의 삽질이 조금이나마 도움이 되기를 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>인증과 실제의 괴리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본격적으로 인증하는 과정과 삽질을 적기 전에, 인증하면서 느꼈던 여러가지 부조리함을 먼저 적고 싶네요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>최신화되지 않은 문서</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>앞서 살펴보았던 웹 접근성 품질인증 표준심사 지침 문서의 가장 최신에 갱신된 날짜는 2015년 10월입니다. 하루하루 변화하는 웹 기술과는 대조적으로, 이런 지침 문서는 과거에 머물러있습니다.  대한민국은 빠르게 변화하는 시대에 맞춰 이런 리소스들을 발전시켜야 나간다고 생각합니다. 제가 장애인들을 생각하는 마음이 깊은 건 아니지만, 여러모로 많은 생각이 들었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>문서가 갱신된 지 오래되었기 때문에 문서에서 나와있는 방법이 통하지 않을 때가 많습니다. 예를 들어 <code>지표별 전문가심사 기준</code>에서 모바일 명도대비평가는 <a href="http://troy.labs.daum.net">http://troy.labs.daum.net</a> 에서 보이는 화면을 CCA로 측정한다고 하는데, 저 서비스는 2020년 11월에 서비스가 종료되었습니다. 제가 처음 문서를 확인할 시점에는 접속이라도 가능했는데, 지금 이 글을 쓰고 있는 기준으로는 접속조차 되지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>세부 항목들도 지금은 표준에서 더이상 사용하지 말라고 권고하는 속성이나 태그들이 이따금씩 보입니다. 인증에 통과하려면 최신 접근성 기술보다는 낡은 기법으로 사이트를 만들어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>심사 기준 브라우저</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기가 찼던 부분은 심사 기준 브라우저가 Internet Explorer (이하 IE) 최신 버전인 겁니다. 위키백과에 따르면 IE 는 2013년 10월 17일에 윈도우 8.1과 함께 출시되었다고 합니다. 개발자에게는 IE 자체가 표준을 지키지 않는다고 악명이 높지요. 그래서 개발자 도구가 잘 되어 있는 크롬 브라우저로 확인할 뿐만 아니라 직접 IE로 사이트를 구동시켜서 제대로 동작하는지 일일히 체크해야 한다는 것입니다! IE 에서도 원활하게 잘 돌아가도록 해야 하는 삽질이 늘어났습니다. 이는 후술토록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2142,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/점유율.png" alt="" class="wp-image-2142"/><figcaption>2020년 12월 기준 웹 브라우저 이용률 - 출처: HTML5 기술지원센터</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>어찌보면 IE 로 심사 기준을 잡은 것은 굉장히 현실적이라고도 볼 수 있습니다. <a href="https://www.koreahtml5.kr/main.do">HTML5 기술지원센터</a>의 데이터에 따르면 아직까지 10.8%의 점유율을 차지하고 있다는 것을 알 수 있고, 오늘날 대부분의 젊은 층 혹은 기술에 대해 조금이라도 알고 있는 사람들이 IE를 잘 사용하지 않는다 라는 뇌피셜로 유추해보건대, 아직까지 정보에 취약한 계층이 IE를 많이 사용하고 있다고 생각할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>완성도가 떨어지는 센스리더</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2145,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/센스리더.png" alt="" class="wp-image-2145"/><figcaption>센스 리더 다운로드하는 곳. 업데이트 내역이 조그만 텍스트 창에 우겨넣어진 모습니다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>센스리더란, 심사에서 기준이 되는 윈도우용 스크린 리더 입니다. (참고 링크: <a href="https://www.xvtech.com/services">(주)엑스비전테크놀로지 센스리더</a>)스크린 리더란, 시각장애인들을 위해 화면에 나온 글자나 컨텍스트를 파악하여 소리로 읽어주는 프로그램입니다. 이 센스리더는 프로그램의 완성도가 일단 떨어집니다. 시각장애인들이 많이 사용하니까 심사에서도 기준이 되는 프로그램이겠지만, 프로그램을 직접 사용해보면 굉장히 옛날에 만들어진 프로그램이라는 것을 몸소 느낄 수 있습니다. 아래는 제가 겪었던 것들 중에 일부입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true,"start":1} -->
<ol start="1"><li>프로그램이 실행될 때 계정으로 로그인 하면 정식 버전으로 실행되고, 로그인 안하고 닫기 누르면 체험판으로 자동으로 넘어가는 방식에서, 아주 낡은 프로그램이구나 하는 인상을 받았습니다. </li><li>프로그램이 실행되는 중에 다른 프로그램의 단축키가 먹힐 때도 있고 안먹힐 때도 있는 등 버그가 많습니다. 특히 VSCode 랑 센스리더랑 동시 사용은 절대 못할 것 같았습니다. 아예 텍스트 입력도 잘 안되는 경우가 많았습니다.</li><li>문서화된 매뉴얼이 정말 옛날스럽습니다… 다소 불편하게 되어 있습니다. 지금은 프로그램을 삭제해서 캡처를 못했네요.</li><li>센스리더에서 지원하지 않는 WAI-ARIA 속성이 존재하는데, 만약 센스리더가 이러한 속성을 맞닥뜨리게 되었을 때의 동작이 정의되어있지도 않고, 엑스비전테크놀로지에서 이러한 부분에 대해 내부적으로 따로 문서화해두지 않는다고 합니다. 이는 인증평가원에서 답변받은 내용입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>장애인들 입장에서, 점점 울며 겨자먹는 것들이 많아지는 게 아닌가 싶은 생각이 들었지만, 그 분들이 실제로 이 프로그램을 잘 활용하고 있는가는 제가 알 길이 없기 때문에, 여기까지 하도록 하겠습니다. 2009년에 쓰여진, <a href="https://jangkunblog.com/wp/why-i-purchased-the-sense-reader/">내가 센스리더를 구매한 이유</a> 라는 블로그 글에서는 스크린 리더기가 최신 기술을 활용하기 어려운 현실에 대한 내용이 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>심사 절차</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>심사 절차는 그냥 제가 느낀 바에 따라 적겠습니다. 우선 위 <strong>심사 지침 문서를 참고하여 모든 항목을 완벽하게 충족</strong>시켰다고 가정하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>자가진단</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 자가진단을 합니다. 자가진단이 불가능하다면 패스해도 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>인증신청</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>신청서를 적습니다. 신청서를 적는 건 그다지 어렵지 않습니다. 신청서 날인은 사이트 운영자(클라이언트)의 대표자 것이 필요합니다. 개발과 관련된 내용은 전부 개발 담당자 혹은 유지보수 담당자에게 연락이 갈 것입니다. 인증 신청을 하면 인증 센터에서 인증 견적서와 앞으로의 일정 진행에 관한 메일이 옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>입금</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p> 메일로 날라온 견적서의 내용에 따라 입금합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>본격적인 심사 들어가기 전에 가볍게 수정하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본격적인 심사가 들어가기 전에 담당자가 연락이 옵니다. 언제쯤 심사가 들어갈 예정이고, 언제쯤 1차 결과가 보내질 것이라는 내용입니다. 또한 담당자가 간단한 수정사항을 요청합니다. 대개 색상과 관련된 문제입니다. 1차적으로 검수하는 건 자동화된 툴을 사용하는 것처럼 보였습니다. 분명 색상 기준을 지켰는데도 기준이 안맞다고 나온다는 겁니다. 그래서 한번 더 확인해봤더니, 서서히 나타나는 요소들이 그 중간에 색상이 기록되어서 기준이 맞지 않았던 겁니다. 그런 것 이외에도 자잘한, 진짜 수정해야 하는 사항들이 있었는데, 그것들을 수정하고 나서 다시 담당자에게 연락하고 하는 과정이 있었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>거금을 들이는데 걱정이 되어서 담당자한테, 혹시나 불통될 여지가 있는 부분은 없는지, 막 잘 부탁드린다고 이야기를 드렸었는데, 이정도면 1차 보고서 나가고 해당 내용 반영만 잘 되면 아무런 문제 없을 거라고 안심시켜주셨습니다. 이 자리를 빌어 감사의 인사 올립니다. 문서상으로는 칼같이 경미한 사항에 대해서만 재심사 요청이 가능하다고 되어 있지만, 왠만해서는 유연하게 잘 처리해주시는 것 같네요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>1차 보고서 수령 및 반영하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1차 보고서 수령까지는 대략 일주일이 걸렸던 것 같습니다. 메일로 날라옵니다. 내용은 꽤 자세하고 수정해야 하는 것들도 명시되어 있습니다. 하라는 대로 하기만 하면 됩니다. 보고서대로 진행했는 데도 실제 기능에 문제가 있는 경우에는 해당 심사 담당자가 따로 연락이 와서 다른 방식으로 다시 수정해달라고 요청을 해줍니다. 그러면 그대로 다시 수정하고 연락하는 과정을 반복하면 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2146,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/보고서예제.png" alt="" class="wp-image-2146"/><figcaption>이런 식으로 보고서가 온다.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>완료</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2147,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/완료.png" alt="" class="wp-image-2147"/><figcaption>앙증맞은 메일</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이렇게 앙증맞게 합격 메일이 날라와요. 아. 정말 기분이 좋았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>인증마크를 따기 위한 삽질 혹은 팁</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>항상 호환 브라우저를 확인하자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>모든 자바스크립트 함수에 꿰고 있다 하더라도, 해당 함수가 어느 브라우저에서 언제부터 얼마만큼 지원되는지까지 모두 알고 있는 사람은 아마 없을 것입니다. 브라우저마다 참 제각각이지요. IE 는 정말 화려한 복병입니다. 당연히 된다고 생각하는 기능도 안되었던 경우가 많았습니다. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">CSS Custom Properties </a>도 그 중에 하나였지요. (스크롤 아래로 내려가 호환 브라우저를 확인하면 IE 의 붉은 X 표시가 참 인상 깊네요.. 하하) 어떤 기능에 대해 IE 가 호환되는지 항상 확인하도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 그냥 IE 라는 이유만으로 안되는 경우도 많습니다. 예를 들어 <a href="https://webisfree.com/2019-12-17/ie-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-flex-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-vertical-%EC%A0%95%EB%A0%AC%EC%9D%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%8A%88">Flexbox 에서 세로 정렬이 안되는 문제</a>라든지... 하하</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3><code>svg</code> 요소는 탭을 먹는다</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>IE</strong> <strong>에서는 svg 요소에 탭 순서가 적용됩니다.</strong> 그러니까 예를 들어 A버튼과 B버튼 사이에 svg 요소가 들어가있다면, A 버튼에 포커싱이 가 있는 상태에서 두번 탭을 눌러야 B 버튼으로 포커싱이 옮겨갑니다. 기괴하죠? svg 요소가 포커싱되어 있는 상태에 대해서는 아무런 스타일이 적용되어 있지 않으므로 svg 에 포커싱이 있으면 화면상으로 아무런 티가 나지 않습니다. 즉 탭이 한 번 씹힌 것처럼 보일 수 있습니다. 이는 탭 순서가 유의미하게 옮겨갸아 하는 항목을 위배하므로, <strong>svg 요소에 대해 focusable 속성을 false로 두어야 합니다.</strong> <code>focusable="false"</code> 이렇게요. 그러면 아예 탭이 안갑니다. 다른 브라우저에서는 svg 요소도 여느 이미지로 인식하여 포커싱이 멈추지 않습니다. 아무런 신경을 쓸 필요가 없지요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2162,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/의미없는포커싱-1.png" alt="" class="wp-image-2162"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이 부분에 대해서는 1차 보고서에서는 단순히 허공이나 애꿎은 요소에 의미없는 포커싱이 잡힌다고 말해주는데, 문제는 짜잔~ <code>svg</code> 였습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>색으로만 구분되는 콘텐츠를 넣지 말자.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이는 디자인 단계에서부터 먼저 신경쓰면 됩니다. 필자 같은 경우는 이미 디자인이 확정된 상태에서 해당 문제에 부딪쳤기 때문에, 현재 상태를 알려주는 가로선 하나를 임의로 추가하는 수 밖에 없었습니다. sad..</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>모든 <code>button</code> 요소에 <code>title</code> 속성을 달자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>센스리더는 모든 <code>button</code> 요소에 <code>title</code> 이 있어야 한다고 합니다. (<code>aria-label</code> 속성은 언급조차 되지 않네요.. 하하) 추가시켜줍시다. bootstrap-vue 에서 기본적으로 제공하는 Modal, Sidebar 등의 컴포넌트에서 닫기 버튼은 <code>title</code> 속성이 없으므로 동적으로 추가시켜줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-vue"} -->
<pre class="wp-block-code language-vue"><code>(중략)
&lt;b-modal @shown="modalPrivacyShown"&gt; ... &lt;/b-modal&gt;
(중략)
methods: {
  modalPrivacyShown() {
    this.getFocusCloseButton("modal-privacy");
  },
  getFocusCloseButton(modalId) {
    this.$nextTick(() =&gt; {
      const buttonElement = document
        .getElementById(modalId)
        .getElementsByClassName("close")&#91;0];

      buttonElement.focus(); // 포커싱을 닫기에 맞춥니다.
      buttonElement.setAttribute("title", "닫기"); // 닫기 버튼에 title을 추가시킵니다.
    });
  },
},
(중략)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>모든 <code>input</code> 요소에 <code>title</code> 속성을 달자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>센스리더는 <code>input</code> 요소에 대한 정보를 불러올 때 두 가지 방법을 사용한다고 합니다. 해당 <code>input</code>의 <code>title</code> 속성을 읽는 방법과 연결된 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"><code>label</code> 태그</a>를 참조한다고 합니다. (<code>label</code> 태그는 <code>for</code> 속성에 해당 <code>input</code>의 id를 주면 연결시킬 수 있습니다.) <code>title</code> 속성은 사실 <a href="https://nuli.navercorp.com/community/article/1132934?email=true">지양해야 한다는 의견</a>이 많지만, 센스리더를 위해 어쩔 수 없지요. 기술적으로 두 가지 중 하나만 처리하면 되지만, 안전함을 위해 <code>title</code> 속성도 추가시켜 줍시다. 그렇게 어려운 것이 아니니깐요! </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>탭의 이동, 링크 클릭으로 이동하고 나서의 스크롤을 신경쓰자. (<code>fixed</code> 요소 주의)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>보통 한 페이지 안에서의 네비게이션은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#linking_to_an_element_on_the_same_page"><code>a</code> 태그의 <code>href</code> 속성에서 <code>#아이디</code>를 넣는 방법</a>을 활용할 수 있습니다. 이 링크의 기본 동작은 해당 요소가 화면의 최상단에 위치하도록 스크롤을 조정합니다. 그러나 화면에 고정된 메뉴 (예를 들어 <code>position: fixed;</code> 가 적용된 메뉴) 가 상단에 있을 때에는 링크를 클릭하면 해당 요소가 고정된 메뉴 뒤로 숨어버릴 수 있습니다! 대상 요소가 화면의 최상단에 위치하지만, 마침 그 자리에 고정된 메뉴가 이미 자리잡고 있기 때문입니다. 페이지 하나에서 목차 등을 통해 스크롤을 조정하거나, 특히 <strong>본문 바로가기</strong> 링크를 동작시킬 때에는 제대로 신경써야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>탭으로 요소를 전환할 때에도 마찬가지입니다. 길이가 긴 문서에서 항목들을 <code>Shift</code> + <code>Tab</code> 으로 거꾸로 거슬러올라가는 상황이라고 가정합시다. 그러면 화면 위쪽 바깥에 있는 요소에 포커싱이 가게 되면 해당 요소를 화면에 보이기 위해 스크롤이 위로 조정될텐데, 이 때에도 마찬가지로 고정된 메뉴가 해당 요소를 가릴 수 있습니다. 이 부분에 대해 필자는 특별한 처리를 하지 않았지만 다행히도 무사히 통과를 받았는데, 아마 심사할 때 충분히 걸고 넘어질 수 있는 사안이라고 생각해서 안전하게 하려면 이런 부분까지 모두 신경을 써야 할 듯 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>간단히 말하면 사용자가 조금 불편을 감수하더라도 <strong>고정된 메뉴는 만들지 않는 게</strong> 안전합니다. 사이드 바 정도는 괜찮을 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또 다른 문제로는, SPA 특성상 다른 주소로 라우팅된다고 해도 스크롤도 적절하게 조정된다는 보장이 없다는 것입니다. 특히 vue 에서 <code>router-view</code> 요소로 하위 라우터를 구성했다면 주소가 바뀔 때마다 스크롤 위치를 적절하게 변경시켜줘야 합니다. 왠만해서는 <code>router-view</code> 가 뷰를 전환하는 과정에서 스크롤이 가장 위로 가겠지만, 만약 가지 않는다면 조정해줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>aria 속성은 크게 신경쓰지 않아도 된다.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 심사 지침에서 aria 와 관련된 내용은 별로 많지 않습니다. <code>aria-hidden</code> 과 같이 정말정말 많이 쓰는 접근성 속성 정도만 신경쓰면 됩니다. 비교적 최신에 나오거나 생소한 aria는 마음 놓고 쓰지 않아도 됩니다. 단, 진정성있게 접근성에 신경쓰겠다면 올바른 role과 거기에 대한 적절한 aria 속성을 붙여줘야겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>복잡한 메커니즘을 가진 컴포넌트는 이왕이면 사용하지 말자 (센스리더의 한계)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>앞서 말했듯이 센스리더는 최신 기술을 제대로 반영하지 못하는 경우가 있습니다. 그래서 아무리 웹접근성 표준을 지킨 컴포넌트라고 하더라도, 센스리더로는 제대로 동작하지 않았던 vue-bootstrap 의 컴포넌트가 있었는데, 바로 <code><strong>b-form-datepicker</strong></code> 컴포넌트였습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2148,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/datepicker.png" alt="" class="wp-image-2148"/><figcaption>bootstrap-vue 의 datepicker 컴포넌트. 이 좋은 걸 왜 못쓰는가.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>본 컴포넌트를 사용자 심사 담당자가 센스리더로 조작하려니까 자꾸 의도치 않은 행동을 한다는 겁니다. 1차적인 답변은, 센스리더에서 지원하지 않는 aira 혹은 role 속성이 쓰여서 제대로 동작하지 않는다는 것이었습니다. 정말 삽질 많이 했습니다. 직접 컴포넌트의 aria 속성을 건들기 위해서는 해당 컴포넌트가 정상적으로 mount 된 다음 동적으로 해당 엘리먼트를 찾아 속성을 일일히 지워주는 작업이 필요했습니다. 해당 aria 속성은 컴포넌트의 props 로 수정할 수 없는 그런 것들이었지요. 하지만 여전히 센스리더는 오작동을 일으킨다고 했습니다. 하루 꼬박 이 조그마하지만 복잡한 컴포넌트에 목매달다가, 결국 포기하고 간단한 형태로 수정했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2149,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-12-182656.png" alt="" class="wp-image-2149"/><figcaption>센스리더의 철퇴를 맞고 수정한 날짜 선택 폼</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>custom input 은 일체 사용하지 말고, 그러니까 예를 들자면 <code>div</code> 요소에 <code>contentEditable</code> 속성을 둬서 수정할 수 있는 폼을 두는 시도는 하지 말고, 맘 편하게 <code>textarea</code> 요소를 사용합시다. 만약 직접 <code>select</code> 요소를 만든다고 가정한다면, focus 부분도 일일히 처리를 해주어야 하고, 방향키, 스페이스바, 엔터 키에 대한 적절한 동작이 이루어져야 하고, 신경쓸 것이 한두 가지가 아닙니다. 가능하다면 가장 기본적인 형태의 input 을 사용합시당.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>외부로부터 가져다 사용하는 Vue 플러그인이나 컴포넌트는 IE 에서 잘 동작하는지 매번 확인해야 한다.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>별로 유명하지 않은 플러그인이라면 십중팔구 IE 에 대한 대응이 없는데요, 고로 특정 플러그인이 IE 에서 제대로 동작하리라는 보장이 없습니다. 직접 실행시켜봐야 안다는 것입니다! 필자의 경우 <a href="https://www.npmjs.com/package/vue-page-title">vue-page-title</a> 이 IE 에서 에러를 일으킨다는 사실을 발견했습니다. 그것도 아주 힘들게 발견했습니다. 왜냐하면 IE 에서는 원체 느리기도 하고 에러가 떴을 때 로그는 절대 친절하지 않기 때문입니다. 심지어 로그가 뜨지 않을 때도 있습니다. 수많은 시도 중에 무엇이 IE 를 뻑가게 했는지 알 방법이 없으니 의심되는 기능부터 끄고 켜고를 반복할 수 밖에 없었는데, 그러면서 겨우 발견했지요. 답답한 점은 해당 플러그인이 <strong>"왜"</strong> IE에서 문제가 되는지도 알 수가 없으니 대체제를 찾거나 직접 코딩하여 구현할 수 밖에 없다는 점입니다. 필자는 <a href="https://elvanov.com/2164" data-type="post" data-id="2164">vue-page-title 의 코드를 직접 보면서 구현</a>했습니다. (나중에 코드를 더 뜯어고치면서 본래의 코드와는 동떨어진 모양이 되긴 했지만요.) </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>다른 사람과 함께 검수하자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리는 모두 사람입니다. 모든 input 태그, 버튼 태그, 모든 이미지의 alt, 뭐 이것저것 등등 하나하나 빠짐없이 다 챙겼다고 생각했지만 구멍은 항상 존재하기 마련입니다. 그러므로 다른 사람과 함께 검수하는 과정을 거치는 것이 훨씬 좋습니다. 필자는 클라이언트와 어느정도 친밀한 관계였기에, 클라이언트가 프로그래밍적인 지식이 전혀 없었음에도 불구하고 제가 하나하나 설명하면서 어떤 항목은 어떻게 처리했다고 점검해보는 과정을 함께 할 수 있었습니다. 정말 완벽하게 했다고 생각했는데도 거짓말처럼 미처 챙기지 못한 부분이 있었지요.  </p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>갈무리하며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>웹접근성 인증에 대한 기나긴 여정이었습니다. 제가 이런 삽질을 할 날이 다시 올지는 모르겠지만, 나름 귀중한 경험인 것 같습니다. 접근성을 보장하려고 노력하는 몬든 분들께 응원을 보냅니다. 그리고 조금이나마 도움이 되었으면 좋겠네요. 파이팅!!!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2123</wp:post_id>
		<wp:post_date><![CDATA[2021-01-12 22:34:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-12 13:34:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-13 20:52:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-13 11:52:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9b%b9-%ec%a0%91%ea%b7%bc%ec%84%b1-%ec%9d%b8%ec%a6%9d-%eb%b0%9b%eb%8a%94-%eb%b0%a9%eb%b2%95%ea%b3%bc-%ed%9b%84%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
		<category domain="category" nicename="%ec%9b%b9%ea%b0%9c%eb%b0%9c"><![CDATA[웹개발]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5880</wp:comment_id>
			<wp:comment_author><![CDATA[BUTLER]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[plok0607@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.222.61.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-08 13:09:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-08 04:09:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[웹접근성 파악에 매우 도움이 되었습니다.
감사합니다.
^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1613131979.639108;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1612757376.604419;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>6710</wp:comment_id>
			<wp:comment_author><![CDATA[한정기]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jhan@nia.or.kr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.254.51.128]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-04-01 13:55:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-04-01 04:55:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1617252936.583451;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1617338652.989036;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>6975</wp:comment_id>
			<wp:comment_author><![CDATA[OK]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jadeogi79@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.38.81.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-05-14 15:01:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-05-14 06:01:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[유용한 정보 감사합니다~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1620985883.049045;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1620972076.96386;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7163</wp:comment_id>
			<wp:comment_author><![CDATA[버틀러]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[plok0607@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.38.74.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-21 08:28:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-20 23:28:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[와 책을 하나 쓰셔도 될듯합니다^^]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1624231693.833054;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627553316.206182;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8336</wp:comment_id>
			<wp:comment_author><![CDATA[이기성]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mublues@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[116.123.148.230]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-05 17:36:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-05 08:36:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[모바일 쪽은 아직 인증요구되지 않은 거 같은데 맞는지요?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641371786.26286;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7851</wp:comment_id>
			<wp:comment_author><![CDATA[이맑]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yi.marker@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.33.31.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-10 18:08:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-10 09:08:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[정리해주신 글 잘 읽었습니다.
웹접근성인증을 필요로 하는 사이트를 
기획중인데 외주 개발을 의뢰도 받으시는지 궁금합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636535316.569135;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588816.95189;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7679</wp:comment_id>
			<wp:comment_author><![CDATA[디노]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sjh@bigmaum.kr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.148.159.62]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-10-05 16:45:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-10-05 07:45:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[그 고생을 하신것도 대단한데, 일일이 복기해서 남겨주셔서.. 심사를 준비하는 다른 사람들에게도 많은 도움이 될 것 같습니다. 여러가지 이슈들은 제가 짐작했던 부분이기도 하고 안타까운 부분이기도 하네요. 저는 태블로로 시각화 대시보드를 구축하는 일을 하고 있습니다만.. 각종 데이터로 그려논 그림들로 이루어진 태블로와 접근성인증.. 이건 정말 대책이 없네요. 하나의 대시보드에 있는 수 많은 시각적 요소들을 리더로 어떻게 읽게 할 수가 있을런지.. 걱정중입니다. 잘 읽고 도움 많이 받고 갑니다. 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1633514022.828436;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633419904.52134;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9716</wp:comment_id>
			<wp:comment_author><![CDATA[씨미]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dngkdl@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dngkdl@byus.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[175.223.14.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-05-09 18:00:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-05-09 09:00:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[디자이너로 일하다가 퍼블리싱을 독학으로 공부해서 겸하며 일하는 중입니다.
퍼블리싱 업무 중 마크업,스크립트 쪽은 찾고 파고 여러 매체를 통해 공부할 수 있었습니다. 
근데 웹접근성 인증은 접근성 마크를 따는 프로젝트에 들어가지 않는 이상 익히기 힘들었습니다. 찾아도 정보도 없었고요. 겸하는 포지션이라 인증 경험을 있는 퍼블리셔를 보기도 너무 어려워 그동안 내내 이 부분이 너무 궁금했습니다. 
근데 드디어 웹에서 이런 정보를 만나게 되어서 너무 반가웠습니다.  
도움이 많이 되었습니다. 경험을 나누어 주어서 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1652086841.891816;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489204.33297;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11495</wp:comment_id>
			<wp:comment_author><![CDATA[O2_Dean]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tunion00@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.134.96.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-09-15 19:26:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-09-15 10:26:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[귀한 경험 공유해주셔서 감사합니다.
접근성에 잠깐 발만 담가봤던 저에게도
공감가는게 많네요 ㅎㅎ

22년 2월 이후로 IE는 심사 기준에서 빠졌다고 하니
지금은 좀 더 수월 하겠죠 ㅎㅎ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489169.684289;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1663237595.396433;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[[Vue.js] 페이지 제목 바꾸기]]></title>
		<link>https://elvanov.com/2164</link>
		<pubDate>Wed, 13 Jan 2021 10:44:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2164</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>들어가기 전에</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 글의 vue 버전은 2.0 입니다. <a href="https://kr.vuejs.org/v2/guide/components.html">vue 컴포넌트</a>를 직접 만들 수 있고 <a href="https://router.vuejs.org/kr/">vue-router</a>와 <a href="https://vuex.vuejs.org/kr/">vuex</a>가 무엇인지 알고 기본적인 활용을 할 수 있는 분들께 적합한 내용입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>구상해보기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>페이지 제목을 바꾸는 코드는 <code>document.title = "제목";</code> 이렇게 쓰면 되기 때문에 아주 간단합니다. 하지만 우리가 원하는 것은 좀 더 일관성있고 효율적으로 페이지 제목을 관리하는 것입니다. 우선 페이지 제목이 바뀌는 시점을 한번 명백히 해봅시다. 아마 다음 세 가지 정도로 추려낼 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong><code>beforeRoute</code>, <code>afterEach</code> 등의 <a href="https://router.vuejs.org/guide/advanced/navigation-guards.html#the-full-navigation-resolution-flow">라우터 가드와 관련된 훅</a></strong></li><li><strong><code>mounted</code>, <code>beforeMount</code> 등 컴포넌트 <a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram">라이프사이클과 관련된 훅</a></strong></li><li><strong>서버로부터 페이지 데이터를 받아올 때</strong></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>페이지 제목이 컴포넌트에 따라 정적으로 고정되어 있다면 1번과 2번 중 아무거나 선택해도 문제가 없습니다. 다만 1번과 2번은 데이터가 어디에 저장되냐가 유일한 차이점입니다. 1번은 <a href="https://stackoverflow.com/questions/51639850/how-to-change-page-titles-when-using-vue-router">라우터를 구성할 때 meta 등에 제목 정보를 저장해둔 후, 훅에서 제목을 처리하는 방법</a>입니다. 2번은 <code>mounted</code> 될 때 그냥 제목을 수정하는 방법입니다. 1번과 2번 모두 <code>document.title = "제목";</code> 등으로 페이지 제목을 직접 변경할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 1번과 2번의 방법은 한 가지 맹점이 있습니다. 바로 3번과 같은 경우입니다. 위 방법으로는 동일한 컴포넌트라도 페이지의 실제 내용에 따라 제목이 바뀌는 경우 능동적으로 대처하기가 어렵게 됩니다. 예를 들어 게시글을 나타내는 <code>Post.vue</code> 싱글 컴포넌트를 상상해봅시다. 이 컴포넌트는 <code>mounted</code> 훅 뿐만 아니라 사용자의 동작에 의해서도 서버로부터 데이터를 불러오고, 해당 게시물의 이름을 페이지 제목으로 지정하고자 하겠지요. 그렇다면 이 경우를 어떻게 처리를 해줘야 할까요? 아예 라우터 훅이나 라이프사이클 훅이 아닌 상태를 관리하는 Vuex를 활용해보는 것도 한가지 방법이 될 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 생각만 해보고 실제로는 <strong>간단한 <code>watch</code> 를 갖는 <a href="https://vuejs.org/v2/guide/mixins.html">Mixin</a> 을 만들어 전역으로 등록해서 사용</strong>하였습니다. ㅋㅋㅋ</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>최종적으로 활용했던 코드</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>import Vue from 'vue';

const suffix = ' - 회사 이름'; 
const pageTitle = {
  watch: { 
    vuePageTitle(to) { 
      document.title = `${to}${suffix}`;
    },
  },
};

Vue.mixin(pageTitle);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 하고 나서 페이지를 나타내는 컴포넌트에서 <code>data</code> 에 <code>vuePageTitle</code> 을 추가하고 필요할 때마다 이를 수정하면 이 Mixin 이 페이지를 갱신합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>여러가지 시도들</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>처음 했던 구상은 실제 코드를 짜고 난 이후에 더 좋은 방법이 없을까 하고 혼자서 해본 구상이었기 때문에 해당 구상에 대한 코드는 존재하지 않습니다... 하하 위 코드도 깔끔하지는 않지만 간단하다는 장점이 있기에 그냥 이렇게 사용했습니다. 아래 코드는 실제로 해봤던 여러가지 코드입니다.  (아래 코드에서 <code>##숫자##</code>를 누르면 해당 코드에 대한 설명으로 넘어갑니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>import Vue from 'vue';

const suffix = ' - 회사 이름'; // ##a_1##
const pageTitle = {
  watch: { // ##a_2##
    $route(to) {
      const { title } = this.$options; // ##a_3##
      if (typeof title === 'string') {
        document.title = `${title}${suffix}`; // ##a_4##
      } else if (typeof title === 'function') {
        document.title = `${title.call(this, this)}${suffix}`; // ##a_5##
        // console.log('# vue-page-title watch $route title function');
        // console.log(document.title);
      } else {
        // document.title = '영화배급협동조합 씨네소파';
        // 이건 바뀌지 않아야 하는 상황에서 바뀔 수도 있으므로 폐기.
      }
    },
    vuePageTitle(to) { // ##a_6##
      // 이 방법을 제일 많이 쓴다.
      document.title = `${to}${suffix}`;
    },
  },
  mounted() { // ##a_7##
    const { title } = this.$options;
    if (typeof title === 'string') {
      document.title = `${title}${suffix}`;
    } else if (typeof title === 'function') {
      document.title = `${title.call(this, this)}${suffix}`;
      // console.log('# vue-page-title title function');
      // console.log(document.title);
    } else {
      // document.title = '영화배급협동조합 씨네소파';
    }
  },
};

Vue.mixin(pageTitle); // ##a_8##
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3><em>a_1</em>(1.) 제목의 꼬리말 설정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>제목의 꼬리말을 변수로 만들어 설정하는 부분입니다. 추후 제목을 변경할 때 이 꼬리말을 매번 뒤에 붙여주는 식으로 동작할 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_2</em>(2.) <code>watch</code> 활용</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>watch</code> 는 변수간 의존성을 손쉽게 만들어줍니다. 자세한 내용은 <a href="https://vuejs.org/v2/guide/computed.html#Watchers">공식 문서</a>를 참조해주세요. <code>watch</code> 의 사용을 지양하라고 하는 이유는, 의존성을 거꾸로 찾아나기가 굉장히 어렵다는 것입니다. 위 코드에서는 <code>$route</code> 와 <code>vuePageTitle</code>에 대해서 <code>watch</code> 를 걸었는데, 미래에 어떤 사람이 (내가 될 수도 있습니다.) <code>vuePageTitle</code> 변수를 변경했을 때 그로 인한 상태 변경이 어디서 어떻게 어느 코드에서 일어나는지 찾아내가 다소 껄끄러워집니다. 모든 Mixin 을 모두 뒤져서 <code>vuePageTitle</code>의 변경을 감지하는 부분을 모두 찾아야겠지요. 반면 <code>computed</code> 는 해당 <code>computed</code> 변수를 선언할 때 의존되는 것들이 전부 명시적으로 적혀져 있으므로 의존성을 관리하기가 한층 쉬워집니다. 하여튼 위 예제에서 <code>watch</code> 는 의존성의 연쇄 효과를 일으키지 않으므로 (<code>document.title</code> 를 변경하면 페이지의 제목만 변경되지, 다른 동작들이 연쇄적으로 일어날 가능성이 없으므로) 적당한 선에서 <code>watch</code> 를 활용했다고 볼 수 있습니다.  <strong><code>$route</code> 가 변경되는 시점 뿐만 아니라 <span style="text-decoration: underline;">데이터를 서버로부터 추가적으로 가져왔을 때</span>(앞서 언급했음)에도 제목이 변경되어야 하기에 이 <code>$route</code> 에 대한 <code>watch</code> 는 결국 전부 사용하지 않게 되었습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_3</em>(3.) <code>$options</code> 에서 데이터 가져오기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://vuejs.org/v2/api/index.html#vm-options">공식 문서</a>에 뭐 자세히 나와있는 건 아니지만, <code>$options</code> 에는 해당 컴포넌트를 선언할 때 공식적으로 지원하는 속성들 (<code>data</code>, <code>props</code>, <code>components</code>, <code>created</code> 와 같은 각종 Hook Functions 등)을 제외한 나머지 사용자가 그냥 추가한 속성들을 담습니다. 즉, 이 Mixin 은 사용자 정의 속성으로 <code>title</code>을 불러오라고 하는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_4</em>(4.) <code>title</code> 그대로 적용</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>title</code>이 <code>string</code> 이라면 제목으로 그대로 설정합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_5</em>(5.) 함수일 경우 호출하여 적용</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>title</code> 이 함수라면 <code>this</code> 가 실행하는 함수처럼 실행하여 그 리턴값을 제목으로 설정합니다. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call</code> 함수</a>의 인수에서 두 번째 <code>this</code> 는 해당 함수를 호출할 때 첫 번째 인수로 <code>this</code>를 넣겠다는 뜻입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_6</em>(6.) <code>vuePageTitle</code> 변수 감지</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>단순히 변수를 감지하여 제목으로 설정합니다. <strong>결국 이 방법을 사용하게 되었습니다.</strong> 다른 방법은 저마다의 문제점이 있고, 이 방법은 장기적인 관리 면에서 전혀 깔끔하지는 않지만 만들려고 하는 페이지의 <code>data</code>에 <code>vuePageTitle</code> 를 추가하여 수정만 해줘도 페이지 제목이 잘 수정되니 그냥 이렇게 사용했습니다.<a href="https://vuejs.org/v2/cookbook/adding-instance-properties.html"> $router 처럼 Observable 글로벌 인스턴스 변수를 추가하는 방법</a>을 알았다면, 그 편이 차라리 훨씬 깔끔하고 나은 방법일 것입니다. (생각보다 어려운 것 같지는 않은 것 같습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_7</em>(7.) <code>mounted</code> 훅 설정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>watch</code> 가 아닌 <code>mounted</code> 훅에서 페이지 제목을 갱신합니다. <strong>부모-자식 라우터를 구성할 때 어느 컴포넌트가 먼저 mounted 될지 확신할 수 없고, 마찬가지로 서버로부터 추후에 가져올 때를 대응할 수 없으므로 이 방법은 폐기했습니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><em>a_8</em>(8.) 전역 Mixin 등록</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>모든 컴포넌트에 해당 기능을 추가 삽입합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>시간이 남는다면 Observable 한 변수(정식 명칭도 뭔지 모르겠어요)를 활용하는 방법을 적겠지만.. to do 로 남겨두겠습니다. 파이팅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2164</wp:post_id>
		<wp:post_date><![CDATA[2021-01-13 19:44:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-13 10:44:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-24 14:26:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-24 05:26:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-js-%ed%8e%98%ec%9d%b4%ec%a7%80-%ec%a0%9c%eb%aa%a9-%eb%b0%94%ea%be%b8%eb%8a%94-%ea%b0%84%eb%8b%a8%ed%95%9c-%ed%94%8c%eb%9f%ac%ea%b7%b8%ec%9d%b8-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="vue"><![CDATA[vue]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Visual Studio Code] Live Share 클라이언트의 파일 탐색기에서 일부 파일이 보이지 않는 문제 해결하기]]></title>
		<link>https://elvanov.com/2191</link>
		<pubDate>Sat, 23 Jan 2021 05:13:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2191</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>동기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Live Share 로 작업하고 있었는데, <code>.gitignore</code> 에 특정 파일을 추가하니까 해당 파일들이 감쪽같이 File Explorer 에서 사라졌다. 이게 무슨 일인가! 검색해보니 수정할 수 있는 방법이 있었다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>원인과 해결법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/MicrosoftDocs/live-share/issues/1057">최초로 발견한 글</a>에서 같은 문제를 겪는 사람이 있었다. 답변에 의하면, 보안상의 문제 때문에 특정 파일을 보여주지 않거나 하는 동작들이 Live Share 의 기본 동작으로 적용되어 있는데, 이를 수정하기 위해서는 <strong><code>.vsls.json</code> </strong>파일을 만들어서 따로 세팅을 해줘야 한다. 이 파일은 <span style="text-decoration: underline;">File Explorer 상 루트 폴더가 아닌 각 프로젝트(<code>.git</code> 폴더가 위치해있는 곳)의 폴더에 위치해있어야 한다.</span> 참고로 당연하지만 참여자 쪽에서 <code>.vsls.json</code> 파일을 생성할 수 없다. 세션의 주인이 설정해야 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.gitignore</code> 에 적힌 파일/폴더들에 대해 Live Share 참여자의 접근 설정은 다음 3개 이다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>none</code> : 아무것도 숨기지도 않고 적용하지도 않음.</li><li><code>hide</code> : 기본 값임. Flie Explorer 에서 숨기지만 다른 방법으로 접근은 가능함.</li><li><code>exclude</code> : 숨겨질 뿐만 아니라 참여자가 아예 접근하지 못하도록 함.</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":2192,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/화면-캡처-2021-01-23-141001.png" alt="" class="wp-image-2192"/><figcaption><code>.vsls.json</code> 파일을 적용한 모습</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이 모든 내용은 <a href="https://docs.microsoft.com/en-us/visualstudio/liveshare/reference/security#controlling-file-access-and-visibility">관련 공식 문서</a>에서 확인할 수 있고, 이 기능에 더해서 파일/폴더를 명시적으로 접근을 제한하는 방법도 있으니까 한번 살펴보자. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2191</wp:post_id>
		<wp:post_date><![CDATA[2021-01-23 14:13:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-23 05:13:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-23 14:14:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-23 05:14:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visual-studio-code-live-share-%ed%81%b4%eb%9d%bc%ec%9d%b4%ec%96%b8%ed%8a%b8%ec%9d%98-%ed%8c%8c%ec%9d%bc-%ed%83%90%ec%83%89%ea%b8%b0%ec%97%90%ec%84%9c-%ec%9d%bc%eb%b6%80-%ed%8c%8c%ec%9d%bc%ec%9d%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="vscode"><![CDATA[vscode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[javascript] 스크롤에 따라 부드러운 애니메이션 구현하기]]></title>
		<link>https://elvanov.com/2195</link>
		<pubDate>Tue, 26 Jan 2021 12:44:15 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2195</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>들어가기 전에</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>영감을 받은 사이트는 <a href="https://www.apple.com/kr/iphone-se/">애플의 iPhone SE 를 소개하는 페이지</a>였습니다. 저 부드러운 텍스트를 꼭 구현해보고 싶다!! 그런 생각을 했습니다. 하지만 정확한 스크롤 위치에 따른 부드러운 애니메이션을 구현하는 라이브러리는 찾기가 힘들었지요. 스크롤 애니메이션과 관련된 것들은 <a href="https://michalsnik.github.io/aos/">스크롤 하면서 콘텐츠가 화면상에 나타날 때 부드럽게 서서히 나타나도록 하는 애니메이션(AOS)</a>이 주를 이루었지만 그게 원하는 것은 아니었지요. 그래서 직접 만들기로 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글은 vue 나 다른 라이브러리 등을 사용하기는 하지만, 깊게 이용하지는 않습니다. 그러므로 CSS와 자바스크립트에 대한 이해만 있다면 크게 어렵지 않으리라 생각합니다. 또한 본 글은 튜토리얼 성격이 아닙니다. 결과물은 최적화할 여지가 충분히 많은 코드입니다. 이 코드의 특징과 한계를 이 글 내내 계속해서 말씀드리니까 그냥 아, 이 사람은 이렇게 구현했구나 정도로 참고 삼아 봐주시면 감사하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>결과물</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>한국인의 특징은 빨리빨리 이므로 결과적으로 이게 뭐가 되냐? 라는 걸 먼저 보여드립니다. 코드도 함께 나와있습니다. 아마 컴퓨터로 보는 게 더 잘 보일거예요.</p>
<!-- /wp:paragraph -->

<!-- wp:cp/codepen-gutenberg-embed-block {"penURL":"https://codepen.io/ezkorry/pen/oNzRdJX","penID":"oNzRdJX","penHeight":500} -->
<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_oNzRdJX" src="//codepen.io/anon/embed/oNzRdJX?height=500&amp;theme-id=1&amp;slug-hash=oNzRdJX&amp;default-tab=result" height="500" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed oNzRdJX" title="CodePen Embed oNzRdJX" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>
<!-- /wp:cp/codepen-gutenberg-embed-block -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>설계</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>고려해야 할 것</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 고려해야 할 것들을 정리해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 요소들은 현재 배치된 상대적인 위치가 아니라 <strong>절대적으로 정해진 위치, 즉 스크롤 높이에 따라서</strong> 애니메이션이 시작되고 진행되고 멈춰야 했습니다. 특정 요소가 화면 상에 나타나는지의 여부는 전혀 중요하지 않았으므로 <a href="https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a> 와 같은 기술은 전혀 고려사항이 아니었습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또한 스크롤 위치가 바뀔 때마다 애니메이션이 진행되어야 했으므로 브라우저의<strong> scroll 이벤트</strong>를 활용해야 했습니다. scroll 이벤트는 짧은 시간에 아주 많이 발생되는 이벤트이므로 성능과 관련된 부분을 신경써야 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>애니메이션이 가능한 요소들은 기본적으로 <strong>화면의 가운데를 기준</strong>으로 두어 움직여야 했습니다. 절대적인 위치를 잡아버리면 기기마다 화면의 크기가 다름으로 인해서 애니메이션이 시작되고 끝날 때 의도된 위치에서 한참 벗어날 가능성이 있었습니다. 그래서 애니메이션을 정의할 때에는 정확한 x, y (<code>top</code>, <code>left</code>) 값이 아닌 중심으로부터 떨어진 거리(<code>translateY</code> 등)로 설정하도록 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>마지막으로 <strong>애니메이션은 부드럽게 보여야 했습니다. 사실 이를 위해 직접 코드를 짜겠다 발벗고 나선 거니까요.</strong>  어떤 요소가 나타나거나 없어질 때에는 빠르게 움직이다가 애니메이션의 중간 단계에서는 천천히 움직이는 등의 속도 조절이 필요했습니다. 이를 위해서 조금만 더 생각해봅시다. 어떤 애니메이션의 진행률은 그 스크롤 높이 변화에 따라 정비례하는 관계를 가지고 있을 겁니다. 즉 linear 하게 애니메이션이 진행될 수 밖에 없습니다. 이를 부드럽게 바뀌도록 하기 위한 장치가 필요합니다. 그 장치는 바로 easing function 이 될 겁니다. 아래 표는 완성된 애니메이션에서 실제로 적용한 <code>bezierEasing(0, 0.7, 1, 0.3);</code> 함수가 0(0%) ~ 1(100%) 사이에서 그 결과값이 어떻게 변하는지에 관한 표와 그림입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>진행률</th><th>변형된 진행률</th></tr></thead><tbody><tr><td>0%</td><td>0%</td></tr><tr><td>10%</td><td>30.1%</td></tr><tr><td>20%</td><td>38.3%</td></tr><tr><td>30%</td><td>43.3%</td></tr><tr><td>40%</td><td>47.0%</td></tr><tr><td>50%</td><td>50.0%</td></tr><tr><td>60%</td><td>53.0%</td></tr><tr><td>70%</td><td>56.7%</td></tr><tr><td>80%</td><td>61.7%</td></tr><tr><td>90%</td><td>70.0%</td></tr><tr><td>100%</td><td>100%</td></tr></tbody></table><figcaption>애니메이션을 부드럽게 만들기 위해 진행률을 변형시키기</figcaption></figure>
<!-- /wp:table -->

<!-- wp:image {"id":2207,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_21-51-23-791x1024.jpg" alt="" class="wp-image-2207"/><figcaption>linear 애니메이션 (파란색 빈 원)과 easing 이 적용된 애니메이션 ( 노란색 작은 원)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>뭐 표를 봐도 감이 잘 안오시죠? <a href="https://cubic-bezier.com/#0,.7,1,.3">실제 애니메이션</a>(Preview &amp; compare - <strong>Go</strong> 를 클릭하면 애니메이션을 확인할 수 있습니다)을 보면서 어떤지 감을 익히시면 좋을 것 같습니다. 대충 원래의 진행률과 달리 <strong>변형된 진행률에는 50%에서 부드럽게 움직이고, 0%와 100%에서 급격하게 움직인다</strong>는 것을 확인할 수 있습니다. 이렇게 이상하게 움직이는 Easing Function 이 있는가 하면, 우리가 css animation 에서 일상적으로 사용하는 ease, ease-in, ease-out 등으로 이름 붙여져 있는 것들도 모두 Easing Function 이 될 것입니다. 이에 관한 더 자세한 이야기는 <a href="https://medium.com/@Kjoon/%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9D%B4%EC%95%BC%EA%B8%B0-2-easing-functions-cf0f6cb213a2">K. Joon Cho 님의 Easing Function 글</a>을 보면 더 좋을 것 같네요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>성능 이슈</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>앞서 말했듯이 <code>scroll</code> 이벤트를 사용하려면 성능을 신경써야 합니다. 성능과 관련된 이슈는 다음과 같이 처리하려고 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://medium.com/better-programming/web-performance-dom-reflow-76ac7c4d2d4f">웹 퍼포먼스 - Reflow / Layout Shift 최소화하기 글(영문)</a>에 따르면, 변경이 자주 일어나는 요소에 <code>position: absolute</code> 적용을 고려해보라고 합니다. 그래서 그렇게 했습니다.</li><li>애니메이션이 활성화된 요소와 그렇지 않은 요소를 구별하여, 활성화되지 않은 요소에게는 <code>display: none</code> 처리를 하고 별도의 연산을 없애 성능 최적화를 꾀했습니다.</li><li>최소한의 성능을 신경쓰고자 jQuery 와 같은 DOM 라이브러리를 가급적 사용하지 않았습니다.</li><li><a href="https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa">쓰로틀링과 디바운싱</a>은 고려하지 않았습니다. 성능을 생각한다면 충분히 고려해볼만하나, 더 이상 머리가 돌아가지 않아 포기했습니다.</li><li>아무리 최적화해도 모바일에서는 부드러운 애니메이션을 위한 최소한의 연산 자체가 버거운 경우가 많습니다.</li><li>Map 을 쓰는 게 좋은 환경이라면 Map을 쓸 수 있도록 합시다. (<a href="https://medium.com/@wdjty326/javascript-es6-map-vs-object-performance-%EB%B9%84%EA%B5%90-7f98e30bf6c8">JavaScript ES6 Map vs Object Performance 비교</a> 글 참조)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>설계를 하지 않은 것</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선순위가 별로 중요하지 않거나 시간상 충분히 고려하지 못한 점은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>작성한 코드는 애니메이션의 수정이 편리하지 않습니다. </li><li>디바이스 화면의 크기에 따라 애니메이션이 다르게 보일 수 있습니다. 왜냐하면 애니메이션 기준점에 대한 생각을 깊이 못했기 때문입니다. 일단 작성된 코드는 기준이 화면의 가운데입니다. </li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>애니메이션 원리</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 애니메이션을 정리하기 전에 CSS 의 <code>position: sticky</code> 속성을 주목합시다. 여기서는 <code>sticky</code> 에 대한 자세한 설명은 하지 않을게요. 인터넷을 찾아보면 많이 나오니깐요. <a href="https://tech.lezhin.com/2019/03/20/css-sticky">레진 기술 블로그</a>를 참조해도 좋을 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2206,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-26_19-38-05-791x1024.jpg" alt="" class="wp-image-2206"/><figcaption>대략적인 HTML 구조</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p> 크게 4개의 요소가 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Sticky Container 요소입니다. 가장 바깥쪽에 위치합니다. 이 요소의 역할은 자식으로 가질 Sticky 요소가 자유롭게 뛰어 놀 공간을 부여해주는 겁니다. 위 그림에서는 <code>position</code> 속성이 <code>relative</code> 라고 했는데, 전혀 필요없는 부분입니다. 처음엔 <code>sticky</code> 요소가 작동이 될 때 offset 기준이 해당 요소와 가장 가까운 <code>relative</code> / <code>absolute</code> 부모인 줄 알았는데, 그게 아니라 가장 가까운 스크롤되는(scrollable) 부모였습니다. 두둥! 하여튼 이 요소에는 스크롤을 가장 아래로 내렸을 때에 모든 애니메이션이 딱 맞게 완료되도록 <code>height</code> 를 충분한 값으로 설정해줍니다. Sticky 요소를 끝내고 새로운 Sticky 요소가 시작되려고 하면 이 Sticky Container 를 여러 개 만들어 사용하면 됩니다.</li><li>Sticky 요소입니다. <code>position</code> 속성은 <code>sticky</code> 값을 갖습니다. 화면에 딱 맞게 하기 위해 <code>height</code>는 <code>100vh</code> 로 설정하고, <code>top</code> 오프셋을 <code>0</code>으로 설정합니다. <code>top</code> 과 같은 기준점이 없다면 sticky 요소는 올바르게 동작하지 않습니다.</li><li>Slide Container 요소입니다. 자식으로 가질 Slide 요소들의 정렬을 맡습니다. 여기서는 <code>display: flex</code> 를 통해서 자식들의 위치를 조정합니다.</li><li>Slide 요소입니다. <code>position</code> 속성은 <code>absolute</code> 값을 갖습니다. 애니메이션의 가장 핵심인 요소입니다. 활성화되거나 비활성화될 때마다 <code>enabled</code>, <code>disabled</code> 클래스 추가/제거를 통해 <code>display</code> 속성을 제어하며, 스크롤 위치에 따라 <code>transform: translate(...)</code> 속성이 변경되어 실제 애니메이션을 보여주는 역할을 가지고 있습니다. Sticky Container 하나에 Sticky 하나, Slide Contianer 하나로 구조를 잡아놨는데 이 Slide 는 <code>position</code> 이  <code>abslute</code> 이므로 여러 개를 두어도 모두 화면 가운데에 위치합니다. 보여주는 순서만 잘 설정하여 Slide 를 여러 개 만들어봅시다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그렇다면 자바스크립트에서 어떻게 애니메이션을 실시간으로 갱신하도록 할까요? </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>애니메이션에 필요한 초기 데이터를 세팅합니다. 데이터를 세팅하는 법은 전적으로 여러분에게 달려있습니다. 좀 더 고민을 하여 효율적인 구조를 꾀할 수도 있고, 시간이 부족해서 대충 빠르게 구조를 잡아야 했다면 필자처럼 구조가 나올 수도 있습니다. 어떤 데이터를 세팅하느냐는 아래에서 계속 이야기를 나눠보겠습니다.</li><li>먼저 Sticky Container 의 <code>height</code> 를 설정합니다. 모든 애니메이션이 담길 만큼 충분한 스크롤 높이가 필요하므로, 이는 애니메이션을 만들 때마다 수동으로 설정해줄 수도 있고 애니메이션의 양에 따라 동적으로 변화시킬 수도 있겠습니다.</li><li><strong>현재 높이를 계산하여 특정 요소(Element)가 활성화될지 말지를 판단합니다.</strong> 이를 위해서 특정 요소마다 상한선과 하한선이 필요합니다. 이는 초기 데이터를 세팅할 때 설정하도록 합니다. 활성화되어 있다가 이제 막 비활성화된 요소에게는 위쪽에서 벗어났다면 시작 상태로 되돌리고 아래쪽에서 벗어났다면 끝 상태로 정확하게 설정합니다.</li><li><strong>활성화된 요소에 한해</strong> 현재 높이에서 <strong>특정 애니메이션이 진행중인지 아닌지</strong>를 판단합니다. 하나의 요소 안에도 여러 가지의 애니메이션이 들어갈 수 있기 때문에 각 애니메이션마다 상/하한선도 따로 설정해줬습니다. 마찬가지로 초기 데이터를 세팅할 때 설정합니다. 위와 마찬가지로 특정 애니메이션이 진행중이다가 끝나야 하는 상황이라면, 그 위쪽으로 벗어났을 땐 시작점으로 되돌려주고 아래쪽에서 벗어났을 땐 끝나는 값으로 정확하게 설정합니다.</li><li>현재 진행중인 애니메이션의 진행률을 계산하고, 더 나아가 Easing Function 으로 변형된 진행률 값을 산출합니다. </li><li><code>element.style</code> 로 스타일 객체에 접근하여 변형된 진행률만큼 애니메이션을 적용합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>실제 코딩된 것 설명</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>HTML</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>HTML 파일을 먼저 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;main class="sticky-container" ref="sticky-container"&gt;
  &lt;div class="sticky"&gt;
    &lt;div class="slide-container"&gt;
      &lt;div class="slide" ref="sl1"&gt;
        &lt;div class="slide-big-text"&gt;
          &lt;p&gt;안녕하세요.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      ... 중략
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/main&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>앞서 HTML 구조에 대해 설명할 때 4개의 큰 요소로 나눈 것처럼 <code>sticky-container</code>, <code>sticky</code>, <code>slide-container</code>, <code>slide</code> 4개의 클래스로  요소로 나누었습니다. 가장 안쪽 <code>div</code> 는 스타일링을 위해 그냥 하나 추가한거니 가볍게 패스합시다. 동적으로 높이를 설정하기 위해 DOM 에 접근해야 하니,<code>.sticky-container</code> 요소에 <code>ref</code> 속성을 설정했습니다. 마찬가지로 애니메이션을 적용해야 하는 각 <code>.slice</code> 요소도 <code>ref</code> 속성을 추가했습니다. 이 <code>ref</code> 값을 요소의 id 값처럼 사용할 예정입니다. 만약 vue.js 를 사용하지 않는다면, 각 요소에 <code>ref</code> 속성 대신 <code>id</code> 속성을 넣은 후 추후에 사용하고자 할 때 <code>document.getElementById('아이디값');</code> 등으로 DOM 에 접근할 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>CSS</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 CSS를 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-scss"} -->
<pre class="wp-block-code language-scss"><code>.sticky {
  position: sticky;
  top: 0;
  width: 100%;
  height: 100vh;
}

.slide-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
}

.slide {
  position: absolute;
  display: none;
  z-index: 0;
}

.slide.enabled {
  display: block;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>.sticky-contianer</code> 는 특별히 적용할 스타일이 없습니다. 높이는 자바스크립트에서 동적으로 설정됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.sticky</code> 요소에 대해서 <code>position: sticky</code> 를 적용했습니다. <code>top</code>과 <code>height</code> 도 화면에 꽉차도록 설정했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.slide-container</code> 는 하위 항목들을 <code>absolute</code> 로 유지시킬 수 있도록 <code>position: relative</code> 로 설정했습니다. 그리고 <code>flex-box</code> 및 기본 정렬을 설정하여 하위 자식들이 좀 더 편하게 배치하도록 했습니다. 이 요소는 화면에 꽉차있어야 하므로 <code>width: 100%</code>, <code>height: 100%</code>, 로 설정했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.slide</code> 는 기본적으로 애니메이션의 기본 요소이며, 모든 <code>.slide</code> 는 서로의 영향을 무시한 채 정해진 높이와 오프셋만으로 움직이기 때문에 <code>position</code> 속성을 <code>absolute</code> 로 두었습니다. <code>.slide</code> 는 기본적으로 보이지 않으며 <code>.slide.enabled</code> 여야 화면에 나타납니다. (<code>display: none</code> → <code>display: block</code>) <code>.slide</code> 간 화면에 나타나는 순서를 조절하기 위해 <code>z-index</code> 속성을 활용할 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Javascript</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 가장 복잡한 자바스크립트 내용을 체크해봅시다. 우선 세팅 값에 관한 것입니다. 이 값을 담는 변수를 <code>def</code>로 정하고 작성해봤습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const def = {
  height: 7100, // 총 높이
  elements: { // 애니메이션이 적용될 요소들을 먼저 정리함. 
    sl1: { // ref 이름
      top: 500, // 시작점
      bottom: 1900, // 끝점
      topStyle: { // 해당 요소의 위쪽에서 시작하고자 할 때 초기화되는 스타일 
        opacity: 0,
        translateY: -60 // 기본 위치는 중앙이므로 중심에서 떨어진 거리를 뜻하게 됨.
        (기타 속성들)
      },
      bottomStyle: { // 해당 요소의 아래쪽에서 끝날 때 마무리되는 스타일
        opacity: 0,
        translateY: 60
      }
    },
    // 중략, 기타 다른 요소들
  },
  animations: {
    sl1: &#91; // 애니메이션을 적용할 요소. 애니메이션은 여러 개가 될 수 있기 때문에 배열로 처리함.
      {
        top: 500, // 이 애니메이션의 시작점
        bottom: 1900, // 이 애니메이션의 끝점
        easing: midSlow, // 가운데를 느려지게 하는 Easing Function
        styles: { // 적용할 스타일들
          translateY: { // 적용할 스타일
            topValue: 60, // 시작점일 때의 값
            bottomValue: -60 // 끝점일 때의 값
          }
        }
      },
      {
        top: 500, // 반복...
        bottom: 800,
        easing: ease,
        styles: {
          opacity: {
            topValue: 0,
            bottomValue: 1
          }
        }
      },
    ],
    // 중략, 애니메이션을 적용할 다른 요소들을 추가
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>height</code> : Sticky Contianer 의 높이를 결정해줍니다.</li><li><code>elements</code>: 애니메이션을 적용할 elements 에 관한 내용을 적어줍니다. 애니메이션을 적용할 요소의 ref 이름을 그리고 해당 요소의 상한선과 그에 해당하는 스타일을 설정하고, 하한선도 마찬가지로 설정했습니다.</li><li><code>aminations</code>: 해당 요소에 적용시킬 애니메이션을 정의합니다. 각 애니메이션에도 상한선과 하한선이 존재하는데, 이 범위가 요소의 상/하한선을 벗어난다면 그냥 자연스레 무시될 것입니다. 왜냐하면 애니메이션보다 요소(Element)에 대한 범위가 먼저 계산되고, 그에 따라 <code>enabled</code>, <code>disabled</code> 로 갈리게 되고, <code>disabled</code> 는 모든 스타일이 초기화된 채로 아무 행동도 하지 않기 때문입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 사전 세팅 변수의 특징으로는, 모든 높이를 절대 높이 기준으로 했다는 것입니다. 이는 명백한 설계 미스입니다. 왜냐하면 가운데 있는 요소의 높이를 수정하면 그 뒤에 있는 모든 요소의 높이를 그만큼 올리고 낮추고 해줘야 하기 때문입니다. 수가 많지 않은 애니메이션을 다룬다면 조금 수정하고 말고 할 테지만, 수가 점점 많아진다면 일일히 값을 수정하는 노동을 즐겨야 할 수 있습니다. <span style="text-decoration: underline;">사전 세팅을 relative 한 값으로 설정해놓고 나중에 실제로 이용할 때 absolute 한 값으로 계산한다면 좀 더 나은 설계가 될 수 있을 거예요.</span></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://medium.com/@wdjty326/javascript-es6-map-vs-object-performance-%EB%B9%84%EA%B5%90-7f98e30bf6c8">Map의 읽기 성능은 Object 보다 더 뛰어나다</a>는 평가가 있습니다. 그에 따라 모든 key-value 형태는 Map 으로 하면 좋을 것 같지만, 초기에 작업했던 코드는 모두 Object 기반이어서, 실제 애니메이션 계산 시 가장 먼저 접근하게 되는, 활성화된 요소와 비활성화된 요소를 저장하는 <code>enabled</code>, <code>disabled</code> 변수만 <code>new Map();</code> 으로 리팩토링 했습니다. 다음 코드를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>let enabled = new Map();
let disabled = new Map();</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>그 다음 쉬운 헬퍼 함수들을 먼저 만들어줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const applyStyle = (element, styleName, value, unit = "px") =&gt; {
  if (styleName === "translateY") {
    // eslint-disable-next-line no-param-reassign
    element.style.transform = `translateY(${value}${unit})`;
    return;
  }
  if (styleName === "translateX") {
    // eslint-disable-next-line no-param-reassign
    element.style.transform = `translateX(${value}${unit})`;
    return;
  }
  // eslint-disable-next-line no-param-reassign
  element.style&#91;styleName] = value;
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 <code>applyStyle</code> 함수는 스타일을 적용하기 쉽도록 도와주는 함수입니다. <code>element</code> 요소의 <code>styleName</code> 스타일에 대해 <code>value</code>를 적용시키는 간단한 함수입니다. 단위는 <code>unit</code>을 쓰구요. <code>translateX</code> 혹은 <code>translateY</code> 는 실제로는 스타일 속성의 이름이 아니라 <code>transform</code> 함수 안에 적절히 함수처럼 들어가야 하는 아이이지만, 좀 더 일관적으로 사용하게 하기 위해서 로직에 포함시켰습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본래 eslint 는 매개 변수의 요소에 대입을 하여 순수 함수의 특성을 해치는 행동을 금지합니다. 근데 <code>// eslint-disable-next-line no-param-reassign</code>와 같이 주석을 달면 해당 규칙을 무시해줍니다. 여기서는 뭐 순수 함수가 전혀 중요한 쟁점이 아니기 때문에 저렇게 eslint 기능 하나를 해제했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 이 <code>applyStyle</code> 함수를 호출하는 <code>applyStyles</code> 함수를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// .. 중략
export default = {
// .. 중략
  methods: {
    // .. 중략
    applyStyles(currentPos, refname, styles, r, unit = "px") {
      for (const style of Object.keys(styles)) {
        const { topValue, bottomValue } = styles&#91;style];
        const calc = (bottomValue - topValue) * r + topValue;
        applyStyle(this.$refs&#91;refname], style, calc, unit);
      }
    },
  },
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>applyStyles</code> 함수는 <code>methods</code> 안에 구현되어 있습니다. 각 스타일을 실제 요소에 적용해야 하므로 <code>$refs</code> 객체를 불러와야 하는데, 그래서 이 함수는 Vue Instance 내부에 구현되었습니다. 내용은 간단합니다. 모든 스타일마다 거기에 해당하는 진행률 등을 간단히 계산하고 <code>$refs</code> 객체와 <code>unit</code> 등을 전달하는 역할입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 <code>onScroll</code> 에서 실제로 호출하는 <code>applyAllAnimation</code> 함수를 살펴보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// .. 중략
export default = {
// .. 중략
  methods: {
    // .. 중략
    applyAllAnimation(currentPos, refname) {
      const animations = def.animations&#91;refname];
      if (!animations) return;
      for (const animation of animations) {
        const { top: a_top, bottom: a_bottom, easing, styles } = animation;
        const isIn = isAmong(currentPos, a_top, a_bottom);
        // 만약 애니메이션이 새롭게 들어갈 때 혹은 나갈때 enabled 설정
        if (isIn) {
          if (!animation.enabled) animation.enabled = true;
        } else if (!isIn &amp;&amp; animation.enabled) {
          if (currentPos &lt;= a_top) {
            this.applyStyles(currentPos, refname, styles, 0);
          } else if (currentPos &gt;= a_bottom) {
            this.applyStyles(currentPos, refname, styles, 1);
          }
          // eslint-disable-next-line no-param-reassign
          animation.enabled = false;
        }

        // 애니메이션이 enabled 라면, 애니메이션 적용.
        if (animation.enabled) {
          const r = easing((currentPos - a_top) / (a_bottom - a_top));
          // eslint-disable-next-line no-param-reassign
          this.applyStyles(currentPos, refname, styles, r);
        }
      }
    },
  },
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 해당 애니메이션이 실제로 적용할 애니메이션인지 아닌지를 판단합니다. 이는 해당 요소(Element)를 활성화할 것인가와는 다릅니다. 우선 요소가 활성화된 다음 거기에 연결되어 있는 하나하나의 애니메이션을 체크하는 것입니다. 이 또한 현재 스크롤의 위치가 담겨있는 <code>currentPos</code> 변수를 기준으로 합니다. 만약 애니메이션이 비활성 상태였는데 이제 막 활성 상태로 바뀐다면, 애니메이션이 시작점에서 시작하는지 (스크롤이 위에서 아래로 내려오고 있는지) 아니면 끝점에서 시작하는지 (스크롤이 아래에서 위로 올라오고 있는지)를 알아야 합니다. 거기에 맞춰서 애니메이션 값들을 초기화해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 초기화하는 함수를 알아봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>mounted() {
    this.init();
    // 이벤트 리스너 추가
    window.addEventListener("scroll", this.onScroll);
  },
  beforeDestroy() {
    // 이벤트 리스너 삭제
    window.removeEventListener("scroll", this.onScroll);
  },
  methods: {
    init() {
      this.initAnimation();
    },
    // 애니메이션 초기화
    initAnimation() {
      // Sticky Conainer 의 높이를 설정함.
      this.$refs&#91;"sticky-container"].style.height = `${def.height}px`;

      // disabled, enabled 를 비움.
      disabled.clear();
      enabled.clear();

      // 모든 요소를 disabled 에 넣음.
      for (const refname of Object.keys(def.elements)) {
        disabled.set(refname, def.elements&#91;refname]);
      }

      // 각 애니메이션을 enabled == false 로 만듬.
      for (const refname of Object.keys(def.animations)) {
        for (const animation of def.animations&#91;refname]) {
          animation.enabled = false;
        }
      }

      // 초기 스타일 적용
      disabled.forEach((obj, refname) =&gt; {
        Object.keys(obj.topStyle).forEach((styleName) =&gt; {
          const pushValue = obj.topStyle&#91;styleName];
          this.$refs&#91;refname].style&#91;styleName] = pushValue;
        });
      });

      // 이미 요소의 범위 및 애니메이션의 범위에 있는 것들을 렌더링하기 위해
      // 임의로 스크롤 이벤트 핸들러를 한 번 실행시킴.
      this.onScroll();
    },
    // (중략...) 다른 메소드들
  },</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>초기화는 처음에 해줍니다. <code>initAnimation</code> 함수는 초기화를 합니다. <code>this.$refs</code> 만 <code>vue.js</code>와 관련된 코드입니다. 앞서 이야기했듯 직접 스타일을 수정하기 위하여 DOM을 가져옵니다. 나머지는 이벤트 리스너를 추가하고 삭제하는 과정입니다. 이벤트 리스너를 추가할 이벤트는 <code>scroll</code> 이벤트 밖에 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>마지막으로 <code>onScroll</code> 을 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>    onScroll() {
      // 현재 스크롤 위치 파악
      const scrollTop = window.scrollY || window.pageYOffset;
      const currentPos = scrollTop + window.innerHeight / 2;

      // disabled 순회하며 활성화할 요소 찾기.
      disabled.forEach((obj, refname) =&gt; {
        // 만약 칸에 있다면 해당 요소 활성화
        if (
          isAmong(currentPos, obj.top, obj.bottom)
        ) {
          enabled.set(refname, obj);
          this.$refs&#91;refname].classList.remove("disabled");
          this.$refs&#91;refname].classList.add("enabled");
          disabled.delete(refname);
        }
      });

      // enabled 순회하면서 헤제할 요소를 체크
      enabled.forEach((obj, refname) =&gt; {
        const { top, bottom, topStyle, bottomStyle } = obj;
        // console.log(`${top}, ${bottom}, ${topStyle}, ${bottomStyle}`);
        // 범위 밖에 있다면
        if (!isAmong(currentPos, top, bottom)) {
          // 위로 나갔다면 시작하는 스타일 적용
          if (currentPos &lt;= top) {
            Object.keys(topStyle).forEach((styleName) =&gt; {
              applyStyle(this.$refs&#91;refname], styleName, topStyle&#91;styleName]);
            });
          }
          // 아래로 나갔다면 끝나는 스타일적용
          else if (currentPos &gt;= bottom) {
            Object.keys(bottomStyle).forEach((styleName) =&gt; {
              applyStyle(
                this.$refs&#91;refname],
                styleName,
                bottomStyle&#91;styleName]
              );
              // this.$refs&#91;refname].style&#91;styleName] = bottomStyle&#91;styleName];
            });
          }

          // 리스트에서 삭제하고 disabled로 옮김.
          disabled.set(refname, obj);
          this.$refs&#91;refname].classList.remove("enabled");
          this.$refs&#91;refname].classList.add("disabled");
          enabled.delete(refname);
        }
        
        // enable 순회중, 범위 내부에 제대로 있다면 각 애니메이션 적용시키기.
        else {
          this.applyAllAnimation(currentPos, refname);
        }
      });
    }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>여기서 <code>enabled</code> 와 <code>disabled</code> 는 어떤 요소(Element) 가 활성화된 상태인지를 판단하기 위해 있습니다. 현재 스크롤 높이에 따라서 <code>enabled</code> 인지 <code>disabled</code> 인지 구분해주고 해당 요소의 <code>classList</code>에 접근하여 클래스를 수정함으로써 현재 상태를 DOM 에 알려줍니다. (이로써 나중에 css 로 커스터마이징할 수도 있습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아마도 위 구현 내용이 최적의 구현은 절대 아닐 것입니다. 지금 보아도 구조가 상당히 난잡하고 이해하기 어렵게 되어 있는 것 같습니다. 위 코드를 하나하나 따져가며 어떻게 동작하는지를 알아내는 과정은 노력의 낭비일 수 있을 것 같습니다. 하지만 부드럽고 고급진 애니메이션을 만들고 싶으신 분들께 조금이나마의 영감과 도움이 되었으면 하는 마음에서 글을 작성하게 되었네요. 큰 줄기만 알아도 큰 도움이 되시리라 믿습니다. 모두 즐거운 코딩합시다!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2195</wp:post_id>
		<wp:post_date><![CDATA[2021-01-26 21:44:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-26 12:44:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-10-11 12:31:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-10-11 03:31:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-%ec%8a%a4%ed%81%ac%eb%a1%a4%ec%97%90-%eb%94%b0%eb%9d%bc-%eb%b6%80%eb%93%9c%eb%9f%ac%ec%9a%b4-%ec%95%a0%eb%8b%88%eb%a9%94%ec%9d%b4%ec%85%98-%ea%b5%ac%ed%98%84%ed%95%98%ea%b8%b0-%ec%9e%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6200</wp:comment_id>
			<wp:comment_author><![CDATA[ㅈㅈ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[123@v.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[122.39.97.46]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-03-07 11:22:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-03-07 02:22:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[좋좋좋...좋은글이다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1615083742.179071;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1615105802.360496;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7408</wp:comment_id>
			<wp:comment_author><![CDATA[Whiteknight]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chanhyukman@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://whiteknight3672.tistory.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.246.68.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-08-13 02:09:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-08-12 17:09:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[다른 내용 찾다가 들릅니다. 이 글은 무조건 성지가 됩니다!! 근데 제목을(애플 페이지처럼 스크롤을 구현해보자) 이런거면 더 유입이 많이 될 것 같습니다ㅎㅎ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628788189.397188;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631316298.950339;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7577</wp:comment_id>
			<wp:comment_author><![CDATA[ㅇㅇ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sososogoa@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.222.88.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-09 10:19:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-09 01:19:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[당신은 신이야]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631150368.604518;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1631316297.278536;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8316</wp:comment_id>
			<wp:comment_author><![CDATA[파파]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[6eunpa@hanmail.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.89.243.42]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-03 15:48:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-03 06:48:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요ㅠ 예제 그대로 안되네요ㅠ
쌩 자바스크립은 언제쯤 올라 오는지 궁금합니다..ㅠㅠ
게시글 or 메일로 공유 받아 보고 싶습니다ㅠ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641192490.15993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642848599.639586;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7743</wp:comment_id>
			<wp:comment_author><![CDATA[LESH]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[seokwonmin@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[116.127.42.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-10-19 20:36:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-10-19 11:36:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[제가 딱 찾는 정보였고 설명도 쏙쏙 이해가 되었습니다!! 좋은 글 감사합니닷 :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634643379.442972;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1636196665.84336;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7947</wp:comment_id>
			<wp:comment_author><![CDATA[eszqsc112]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eszqsc112@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.226.226.230]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-22 22:49:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-22 13:49:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[저 코드는 vue 등이 사용되어서 그렇습니다. ㅠㅜ 조만간 진짜 쌩 자바스크립트로 글을 리뉴얼하여 올릴 예정이니깐 좀만 기다려주세요...ㅋㅋ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>7842</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588961.423649;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7842</wp:comment_id>
			<wp:comment_author><![CDATA[luccy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[newdnehd@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.222.208.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-09 11:01:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-09 02:01:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[실행이 되지않아!!ㅠㅠ
예제 그대로 복붙해봤는데 실행이
스크롤 조차 없는 페이지입니다 ㅠㅠ
원인이 무엇일까요]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>7743</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588818.96673;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636423317.267534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10481</wp:comment_id>
			<wp:comment_author><![CDATA[리코더]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[xoals22421@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.138.213.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-06-17 17:03:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-06-17 08:03:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[우와오아ㅗ아ㅗ아와와 감사합니다 찾던 내용인데 제 머리에서는 도저히 생각이 안났는데 정말 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1655453000.555701;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489192.062756;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11771</wp:comment_id>
			<wp:comment_author><![CDATA[코요]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[coyoacan@kakao.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.192.162.97]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-10-06 11:53:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-10-06 02:53:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[와 천재세요.... 엉엉]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1665024786.886662;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1665190545.372291;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[cloc - Node.js 에서 모든 파일의 코드 줄 수를 확인하는 법]]></title>
		<link>https://elvanov.com/2222</link>
		<pubDate>Thu, 28 Jan 2021 06:16:53 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2222</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>개발을 하다 보면 내가 얼마나 코딩을 했는지, 혹은 프로젝트의 코드 줄 수가 얼마나 되는지 궁금하곤 합니다. 이 수로 나타낼 유의미한 지표는 크게 없지만, 그냥 호기심에 검색해보게 되었습니다. 그랬더니 Node.js 에는 <a rel="noreferrer noopener" href="https://www.npmjs.com/package/cloc" target="_blank">cloc</a> 이라는 패키지가 있다는 걸 발견했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>적용과 결과</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>리눅스와 맥은 perl 이 내장되어 있으므로 설치할 필요는 없지만 윈도우는 별도로 설치를 해야 cloc을 이용할 수 있습니다. 윈도우 유저의 경우 <a href="https://strawberryperl.com/">Strawberry Perl</a> 을 설치해주도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 cloc 을 global 하게 설치해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>npm install -g cloc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>설치가 완료되면 가장 기본 형태의 명령어를 써봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>cloc --vcs=git</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://www.npmjs.com/package/cloc#usage" target="_blank">공식 문서</a>를 확인하면 사용할 수 있는 옵션이 굉장히 많습니다.<strong> <code>package.json</code></strong> 에서 <code>script</code> 에 명령어를 추가해주면 다음 번에는 <code>npm run cloc</code> 으로 간단하게 이용할 수 있습니다. 저는 그 중에서 <code>--not-match</code> 옵션을 추가하여 <code>package.json</code>, <code>package-lock.json</code>, <code>yarn.lock</code> 파일을 제외하였습니다.   </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>{
  "name": "프로젝트 이름",
  "기타등등": "기타등등", 
  "scripts": {
    "cloc": "cloc --vcs=git --not-match-f=\"(yarn\\.lock|package\\.json|package\\-lock\\.json)\" ."
  },
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 <code>npm run cloc</code> 한 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>
     348 text files.
     342 unique files.
      56 files ignored.

3 errors:
Unable to read:  "sopaseom/(중략...).markdown"
Unable to read:  "sopaseom/(중략...).markdown"
Unable to read:  "sopaseom/(중략...).markdown"

github.com/AlDanial/cloc v 1.86  T=1.25 s (261.3 files/s, 45512.7 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Vuejs Component                127           2018           4867          26712
JavaScript                     139           1355           3972          15246
GraphQL                         14            151             76           1000
SVG                             14              4             29            337
Pug                              9             35             19            299
Sass                             4             59             91            235
JSON                             8              0              0            140
Markdown                         2             43              0            123
HTML                             7              0              5             49
YAML                             1              0             18             32
Dockerfile                       1             20              3             23
Bourne Shell                     1              0              0              5
-------------------------------------------------------------------------------
SUM:                           327           3685           9080          44201
-------------------------------------------------------------------------------</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>에러가 나는 걸 보면 아마 한글명 파일은 못읽나 봅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이렇게 스스로가 얼마나 코딩 노예인지를 알 수 있게 되었습니다! 축하합니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2222</wp:post_id>
		<wp:post_date><![CDATA[2021-01-28 15:16:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-28 06:16:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-28 15:51:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-28 06:51:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cloc-node-js-%ec%97%90%ec%84%9c-%eb%aa%a8%eb%93%a0-%ed%8c%8c%ec%9d%bc%ec%9d%98-%ec%bd%94%eb%93%9c-%ec%a4%84-%ec%88%98%eb%a5%bc-%ed%99%95%ec%9d%b8%ed%95%98%eb%8a%94-%eb%b2%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] mocha + superagent 로 웹서버 테스트하기]]></title>
		<link>https://elvanov.com/2233</link>
		<pubDate>Fri, 29 Jan 2021 05:23:25 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2233</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>들어가기 전에</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>테스팅에는 크게 두 가지 개념이 있습니다. 바로 <strong>단위 테스팅(Unit Testing)</strong>과 <strong>통합 테스팅((Integration Testing)</strong>가 그것입니다. 개념은 간단합니다. 단위 테스팅은 기능들을 최대한 잘게 쪼개어 그 기능이 주어진 파라미터나 상황 등에서 잘 동작하는지, 에러를 일으켜야 할 상황에서 에러를 잘 일으키는지에 대한 테스트입니다. 통합 테스팅은 단위 테스팅으로 테스트가 완료된 것들을 한꺼번에 모아 그 코드가 실제 프로덕션에서 돌아가는 것처럼 하여 테스트해보는 것입니다. 통합 테스팅도 얼마나 통합시킬지, 어디서부터 통합시킬지에 해서 방법론이 갈립니다만, 테스팅에 관한 이론은 여기서 자세히 들어갈 것은 아니기에 <a rel="noreferrer noopener" href="https://needjarvis.tistory.com/442" target="_blank">단위 테스트 블로그 글</a>, <a rel="noreferrer noopener" href="https://needjarvis.tistory.com/443" target="_blank">통합 테스트 블로그 글</a>에서 이론을 공부해보아요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>필자는 처음에 테스팅을 크게 고려하지 않았습니다. 왜냐하면 너무 어려울 것 같기 때문이었죠! 근데 어렵기는 커녕 이것이 반드시 필요한 과정이었음을 깨닫게 되었습니다. 직접 해보니 그렇게 어렵지도 않았고 장점이 굉장히 많았습니다. 테스팅을 해 놓으면 자기가 작성한 코드에 신뢰가 가며 앞으로의 코딩이 좀 더 예측 가능해진달까요. Node.js 에서 테스팅 프레임워크는 <a rel="noreferrer noopener" href="https://jestjs.io/" target="_blank">Jest</a>, <a rel="noreferrer noopener" href="https://mochajs.org/" target="_blank">Mocha</a>, <a rel="noreferrer noopener" href="https://jasmine.github.io/" target="_blank">Jasmine</a> 등이 있는데 저는 <strong>Mocha</strong>를 선택했습니다. 선택에는 크게 어떤 기준은 없습니다. 하나도 써보지 않은 상태에서 이것 저것 기능을 따지는 건 노력 낭비이지 않을까 싶어요.. 하하. <a href="https://ko.javascript.info/testing-mocha" target="_blank" rel="noreferrer noopener">Mocha 를 통한 전반적인 테스팅 글(모던 Javascript 튜토리얼)</a>을 참조하면 더 좋을 것 같습니다. (사실 지금 포스팅을 하는 과정에서 찾아본 건데 꽤 알찬 내용인 것 같아요.) Mocha 는 별도의 Assertion (조건에 따라 올바르다 틀리다 판단해주는) 라이브러리가 필요하여 <a href="https://www.chaijs.com/api/" target="_blank" rel="noreferrer noopener">Chai</a> 를 골랐습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>작성된 코드는 효율적이거나 프로덕션에 좋다거나 하는 것과 거리가 있을 수 있음을 미리 말씀드려요. 그리고 단위 테스팅에 대한 부분만 조금 커버했을 뿐, 통합 테스팅과 관련된 내용은 정말 없습니다! 말 그대로 맨 땅에 헤딩이기 때문에 아, 그냥 이렇게도 개발이 가능하구나 하고 가볍게 읽어주시면 감사하겠습니다. BDD와 TDD의 차이도 잘 모르는 얄팍한 지식이라는 점을 미리 알립니다 호호~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>테스팅도 생산성에 영향을 크게 미치지만, <a href="https://elvanov.com/2234">개발할 때 jsdoc 로 자바스크립트의 함수나 변수 타입을 명시</a>해주니, vscode 에디터가 멤버 변수 목록을 출력해준다든지 등의 편의 기능을 누릴 수 있어 아주 좋았습니다. 관심이 있으시다면 해당 포스팅도 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>실전 개발</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>eslint 세팅</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어떻게 쓰는 지 감이 안오니, 린팅으로라도 도움을 받자 싶어서 mocha 와 chai 관련 eslint 플러그인(<code>extends</code>)을 적용하였습니다. (사실 아직 <code>plugin</code>, <code>extends</code>, <code>env</code> 의 차이를 잘 모름..)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>{  
  extends: &#91;
    'eslint:recommended',
    'plugin:mocha/recommended',
    'plugin:chai-friendly/recommended',
  ],
  env: {
    mocha: true,
  },
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3><code>describe</code> 와 <code>it</code>의 쓰임새</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>describe 뜻은 묘사하다 이지요? 그러니 <strong>검사 대상</strong>을 명시하는 겁니다. 여기는 뭐 실제 객체가 들어간다거나 그런 게 아니라 단순히 문자열 텍스트로 무엇을 테스트하는지를 알려줍니다. <code>it</code>에는 <strong>해당 테스트 대상의 행동이나 상태가 이러이러해야 한다</strong> 라는 것을 명시해줍니다. ~~해야 한다는 뜻을 가진 영문장 "<em>it should be ~~~ when ~~~</em>" 에서 흔히 it 이 첫 번째 단어로 흔히 들어가기 때문에 <code>it</code>을 함수명으로 사용하는 듯 합니다. 저는 한국인이기 때문에 <code>it</code> 의 메시지로 한글을 넣었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>describe('order', function () {
  describe('db', function () {
    describe('getOrder', function () {
      // ...
    });
    describe('getOrders', function () {
      beforeEach('Order 미리 만들어놓기', async function () {
        // ...
      });
      it('기본 동작이 제대로 되어야 함', async function () {
        // ...
      });
      it('날짜가 제대로 동작되어야 함', async function () {
        // ...
      });
      it('페이지가 제대로 동작되어야 함', async function () {
        // ...
      });
      it('status 제대로 동작되어야 함', async function () {
        // ...
      });
    });
    describe('createOrder', function () {
      it('제대로 동작해야 함', async function () {
        // ...
      });
    });
    describe('updateOrder', function () {
      it('제대로 동작해야 함', async function () {
        // ...
      });
    });
    describe('removeOrder', function () {
      it('제대로 동작해야 함', async function () {
        // ...
      });
    });
  });
});</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>의존성 주입(Dependency Injection) 패턴을 활용하고 Mock 객체를 활용하자</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>
// payment.js
module.exports = {
  make: (db, bootpay) =&gt; {
    return new PaymentService(db, bootpay);
  },
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>유닛 테스팅을 할 때에는 테스트 대상이 의존성이 없으면 없을수록 더 편안합니다. 필자는 특정 자원이나 모듈을 이용하고자 하는 단계를 <strong>Manager </strong>로 두고, Manager 를 여러 개 섞어서 실질적인 Business Logic 에 해당하는 <strong>Service </strong>를 만들었습니다. 그리고 위 코드는 Payment 라는 Service 를 만들 때 필요한 DB Manager, Bootpay Manager 를 직접 내부에서 import 하여 불러오는 방식이 아니라, Payment Service 를 새롭게 만드는 입장에서 <code>make</code> 함수를 통해 Manager를 전달받는 형식입니다. 이렇게 하면 두 개의 Manager가 제대로 동작해야 한다는 책임으로부터 Service 가 해방된다는 것입니다. 이는 <strong>가짜(Mock) Manager</strong> 객체를 적당히 만들어 <code>PaymentService</code> 에 넘겨주고 테스팅하기 용이합니다. 아래 이미지를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2238,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/photo_2021-01-29_14-56-46-1014x1024.jpg" alt="" class="wp-image-2238"/><figcaption>의존성을 주입했을 때 편한 테스팅</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>DI(의존성 주입)과 관련된 내용은 <a rel="noreferrer noopener" href="https://velog.io/@wlsdud2194/what-is-di" target="_blank">다른 블로그의 글</a>을 참조해주세요. 필자는 깊이 설명할 능력이 없습니다... DI는 특히 자바에서 Spring 앱을 만들 때 흔히 사용하는 개념이라서 예제 코드가 거의 자바일 것입니다. 하하. 하여튼 Mock 객체를 직접 만드는 방법도 있겠지만, 세상은 넓고 편리한 라이브러리는 많습니다. 필자는 <strong><a rel="noreferrer noopener" href="https://sinonjs.org/" target="_blank">sinon</a> </strong>이라는, <em>test spies, stubs and mocks</em> 를 편리하게 제공해주는 프레임워크를 사용했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const sinon = require('sinon');
const filename = "abc.txt";
const fullpath = "upload/abc.txt";
const dbTest = {
  createFile: sinon.fake.returns({ filename, path: fullpath }),
  removeFile: sinon.fake(),
};
const fileMgr = {
  removeFile: sinon.fake((fn) =&gt; {
    if (fn !== filename) throw Error('파일이 존재하지 않습니다.');
  }),
};
// (중략)
const file = fileServiceFactory.make(dbTest, fileMgr);
file
  .removeFile('abcde')
  .then((/* result */) =&gt; {
    expect(dbTest.removeFile.firstCall.args&#91;0]).to.equal('abcde');
    expect(fileMgr.removeFile.firstCall.args&#91;0]).to.equal(fullpath);
    done();
  })
  .catch((err) =&gt; {
    done(err);
  });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드는 예제입니다. <code>sinon.fake()</code> 로 가짜 함수를 만들어내면, 어떻게 얼마나 호출되었는지를 기록하며, 어떤 임의의 값을 리턴하기도 할 수 있습니다. 그 외에도 문서를 확인하면 사용할 수 있는 기능이 방대하니까 강력한 기능을 다 활용할 수 있기를 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mock 객체를 활용할 때에 문제점이 없는 건 아닙니다. 만약 어떤 객체를 정의하는 방법이나 함수를 호출하는 방법이 추후에 달라진다면, 해당 객체/함수를 흉내냈던 가짜 객체들의 인터페이스를 모두 통째로 수정해야 하는데, 프로그램 규모가 크고 복잡해지면 좀 심각한 문제가 될 거 같습니다. <a href="https://engineering.talkdesk.com/double-trouble-why-we-decided-against-mocking-498c915bbe1c?gi=862587983279">Talkdesk 의 한 개발자의 글</a>에서는 <strong>mock 을 최대한 쓰지 말라</strong>고 하기는 하네요. 관리하기 힘들다고. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Mocha의 HookFunction 을 이용해 테스트 로직을 분리해보자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>여전히 이 방법이 좋은 건지 아닌지는 의문이 듭니다만, 적어도 중~소규모에서 효율적으로 테스트 로직을 분리할 수 있는 방법이라고 생각합니다. Mocha 에서 자주 쓰이는 HookFunction 은 <code>Before</code>, <code>BeforeEach</code>, <code>After</code>, <code>AfterEach </code>등이 있습니다. <code>describe</code>와 <code>it</code>로 정의되는 각 테스트의 시작과 끝에서 반복적으로 실행되는 코드를 HookFunction 로 중복 없이 관리할 수 있습니다. 하지만 이러한 HookFunction 을 반복해야 하는 상황이 생겼습니다. 테스트용 <code>MongoMemoryServer</code> 를 구동시키는 코드가 거의 모든 테스트에서 <code>before</code>, <code>beforeEach</code> 등으로 반복되는 상황이었지요! 이를 해결하기 위해서 다음과 같이 해결했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// util.js

const testDatabaseServer = (hookFunctions) =&gt; {
  const mongod = new MongoMemoryServer({ binary: { version: '4.2.9' } });

  hookFunctions.before('db 초기화', async function () {
    // 중략
  });

  hookFunctions.beforeEach('유저 세팅', async function () {
    // 중략
  });

  hookFunctions.afterEach('db 내용 초기화', async function () {
    // 중략
  });

  hookFunctions.after('서버 및 db 종료', async function () {
    // 중략
  });

  return mongod;
};
module.exports = {
  testDatabaseServer,
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// order.spec.js

const { testDatabaseServer } = require('./util');
describe('order', function () {
  // eslint-disable-next-line mocha/no-setup-in-describe
  const mongod = testDatabaseServer({ before, beforeEach, after, afterEach });
  describe('기타 등등', etc);
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Mocha 가 내부적으로 어떻게 HookFunction 호출의 주체를 관리하는지는 잘 모르겠지만, 이런 HookFunction 들을 통째로 납치해서 다른 곳에서 호출하는 코드를 만들어버리고, 이를 재사용하자는 아이디어였습니다. 이 코드는 필자의 큰 번거로움을 덜어주었습니다. <code>order.spec.js</code> 뿐만 아니라 다른 테스트에서도 비슷한 로직을 이용할 수 있게 되었거든요! </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>supertest agent 를 이용해 쿠키를 가지는 브라우저의 행동을 테스트하자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>쿠키-세션 테스트를 할 때 깊은 고민이 들었습니다. 왜냐하면 단순한 HTTP 요청 응답 테스트는 <a rel="noreferrer noopener" href="https://github.com/axios/axios" data-type="URL" data-id="https://github.com/axios/axios" target="_blank">axios</a> 로 진행하면 충분한데, 로그인 로그아웃 테스트를 할 때에는 해당 유저의 신원을 확인하기 위해서 쿠키에 저장된 세션 id 값을 유지시켜줄 장치가 필요했던 것이죠. 요청을 보낼 때는 요청 헤더에 <code>Cookie</code> 를 적절히 보내주어야 하고 받을 때에는 응답 헤더에서 <code>set-cookie</code> 를 적절히 읽어와 처리하는 과정이 필요하겠습니다. 그 과정이 너무 복잡하다 이겁니다. 실제 브라우저에서 일어나는 일을 흉내내기 위해 그렇게까지 Low Level 로다가 구현을 해야 할까, 분명 나랑 같은 고충을 가진 사람이 있을 것이다! 라고 인터넷을 뒤졌지요. 한편으론 가상 브라우저를 띄우는 방식으로 진행하면 어떨까 싶었는데 너무 복잡하여 포기했습니다. 마침 눈에 들어온 것이 <a rel="noreferrer noopener" href="https://www.npmjs.com/package/supertest" target="_blank">supertest</a> 에서 agent 의 기능이었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * supertest 의 agent 기반으로 graphql 요청을 보냅니다.
 * 요청주소는 /graphql 로 고정입니다.
 * @param {import("supertest").SuperAgentTest} agent
 * @param {string} query
 * @param {object} variables
 */
const graphqlSuper = async (agent, query, variables) =&gt;
  new Promise((resolve, reject) =&gt; {
    agent
      .post('/graphql')
      .set('Content-Type', 'application/json')
      .set('Accept', 'application/json')
      .withCredentials()
      .send(
        JSON.stringify({
          query,
          variables,
        }),
      )
      .expect(200)
      .end((err, res) =&gt; {
        // console.log(`status: ${res.status}`);
        const errors = res?.body?.errors;
        if (errors === null || errors === undefined) return resolve(res);
        return reject(errors);
      });
  });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>withCredentials</code> 함수가 정확히 어떻게 동작하는지 꼼꼼히 체크는 못했지만, 이렇게 하니 쿠키를 유지한 채로 테스트를 진행해볼 수 있었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>툴을 자세히 공부한 다음 실전에 적용하자... 저 코드를 실제로 사용할 때에는 나름 꿀팁이라고 생각했는데 글을 쓰고 나니까 그다지 영양가있지는 않았네요. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2233</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 14:23:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 05:23:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-18 21:14:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-18 12:14:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-%eb%8b%a8%ec%9c%84-%ed%85%8c%ec%8a%a4%ed%8c%85-%eb%a7%a8-%eb%95%85%ec%97%90-%ed%97%a4%eb%94%a9%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="testing"><![CDATA[testing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] JSdoc 으로 타입 명시하여 VSCode 에서 편하게 코딩하기]]></title>
		<link>https://elvanov.com/2234</link>
		<pubDate>Tue, 02 Feb 2021 05:22:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2234</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자바스크립트는 기본적으로 동적 타입 언어라서 어떤 변수에 대해 타입이 왔다리갔다리 합니다. 그래서 실제로 자바스크립트 코드를 실행시키는 시점에서는 해당 변수가 어떤 변수일지 확신할 수가 없으므로 실행 시점에 코드가 의도대로 진행할지에 대한 확신도 내리기 힘듭니다. 이는 프로젝트의 규모가 커질수록 큰 문제가 될 수 있어서 그런 점을 컴파일 타임에 보완해볼 수 있는 <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer noopener">Typescript</a> 가 등장하기도 했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 실제 코드 행동이 어떻냐는 건 이 글에서 다룰 주제는 아닙니다. 이 글에서는 자동 완성 기능에 집중합니다. 정적 타입 언어 계열인 C, C++ 등은 에디터 입장에서 어떤 변수가 어떤 행동을 할 수 있고 어떤 멤버 변수가 있는지를 유추해내기 쉽습니다. 왜냐하면 타입이 정해져있고, 그 타입에 대한 정보만 읽어오면 되기 때문이죠. 그래서 멤버 변수에 접근하고자 할 때, 해당 타입에 관한 문서를 직접 찾는 것이 아니라 에디터가 그냥 가능한(available) 목록을 출력해주니 개발 생산성이 올라갑니다. 이런 걸 자바스크립트에서도 하고 싶다 이 말입니다! 그래서 필자는 <a rel="noreferrer noopener" href="https://jsdoc.app/" target="_blank">JSDoc</a> 을 이용하기로 했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>JSDoc 3 is an API documentation generator for JavaScript, similar to Javadoc or phpDocumentor. You add documentation comments directly to your source code, right alongside the code itself. The JSDoc tool will scan your source code and generate an HTML documentation website for you.</p><p>(번역) JSDoc 3는 자바스크립트 API 문서 생성기이고 Javadoc, phpDocumentor 와 비슷합니다. 소스 코드, 코드 바로 앞에 주석으로 직접 문서를 추가할 수 있습니다. JSDoc 도구로 소스 코드를 스캔하고 HTML 문서 웹사이트를 생성할 수 있습니다.</p><cite>JSDOC 소개, <a href="https://jsdoc.app/about-getting-started.html" target="_blank" rel="noreferrer noopener">https://jsdoc.app/about-getting-started.html</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>물론 JSDoc 은 코드를 문서화하기 위한 도구이고, 그에 따른 이점은 아주 다양하게 있겠지만, 필자는 오로지 자동 완성 기능을 위해서 JSDoc 을 사용하고자 마음먹었습니다. 물론 이것도 에디터가 JSDoc 을 읽을 능력이 없다면 무용지물이겠지만, 아주 칭찬이 자자한 <a href="https://code.visualstudio.com/">Microsoft Visual Studio Code</a> 를 사용할 거니깐 괜찮습니다. JSDoc 말고 다른 툴은 없느냐? 어쩔 수 없이 Javascript 를 계속 직접 다루어야 한다면 JSDoc 이 차선책이 될 수 있겠지만, <strong>이제 새롭게 프로젝트를 시작한다면 시간을 좀 더 들여서 Typescript 공부하는 걸 강력하게 추천드립니다. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>기본적인 사용법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>굉장히 간략하게 설명하도록 하겠습니다. 어차피 공식 문서를 보면 다 나옵니다. 하하. 일단 기본적으로 <code>/**</code> 로 시작합니다. 주석은 대상 바로 앞에 등장합니다. (용도에 따라 위치가 상관없을 수 있습니다.) 내용은 기본적으로 설명을 의미합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * 내용
 */
function foo() {
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게요. 이제 어떤 맥락을 만들기 위해 JSDoc 에서 명시한 tag를 이용할 수 있습니다. tag는 <code>@</code>로 시작하며 한 줄에 하나씩 작성됩니다. tag는 종류가 다양하고, 저마다의 문법 규칙이 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * 설명
 * @constructor
 * @param {string} title - The title of the book.
 * @param {string} author - The author of the book.
 */
function Book(title, author) {
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>콜백 함수 또는 객체 정의하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 내용은 새로운 타입을 JSDoc 으로 정의하므로 실제 코드와 붙을 필요가 없는 것들입니다. 복잡한 객체는 아래와 같이 정의내린 다음에 사용할 수 있습니다. 일반 객체 타입은 <code>@typedef</code> 를 사용하고, 함수 타입은 <code>@callback</code> 을 사용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// PostSearch 라는 객체 타입을 정의합니다.

/**
 * 게시물 검색 정보를 담는 객체
 * @typedef {object} PostSearch
 * @property {number} page 0이 1페이지임.
 * @property {number} perpage
 * @property {Date} date_gte
 * @property {Date} date_lte
 * @property {string} search
 * @property {string&#91;]} board_permalinks
 * @property {string} board_belongs_to
 */



// Resolver 라는 함수 타입을 정의합니다.

/**
 * resolver의 기본 형태
 * @callback Resolver
 * @param {object} obj
 * @param {object} args
 * @param {PassportContext} context
 * @param {object} info
 * @returns {Promise&lt;any&gt;}
 */</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>다른 라이브러리에서 타입을 가져오기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이는 VSCode 에서만 작동되는 방법이라고 감히 추정합니다. 일단 상황을 가정합시다. <code>mongoose</code> 객체를 인수로 받는 함수를 만들어서, 적절하게 무언가를 만들어내는 팩토리 함수를 만든다고 가정합시다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * 모델을 만들어 반환합니다.

 */
function makeModel(mongoose) {
  // ...
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>왜 굳이 <code>mongoose</code> 를 인수로 받아오냐구요? 그냥 <code>const mongoose = require('mongoose')</code> 로 받아와서 바로 사용해도 되지 않느냐구요? 뭐 그것도 맞는 말이지만 다른 <code>mongoose</code> 여러 개가 쓰인다고 그냥 가정합시다. ㅎㅎ.. 아무튼 <code>mongoose</code> 는 우리가 만든 객체도 아니고 이미 잘 짜여진 객체이기 때문에 직접 <code>@typedef</code>로 만들고 <code>@param</code> 으로 <code>mongoose</code> 에 직접 갖다 붙이고 하는 작업은 너무너무 낭비입니다. 이럴 때 우리는 해당 타입을 <code>mongoose</code> 라이브러리부터 가져올 수 있습니다. 아래와 같이 하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * 모델을 만들어 반환합니다.
 * @param {import('mongoose')} mongoose 
 */
function makeModel(mongoose) {
  return mongoose.model(/* ... */); // 우리가 무엇을 쓸 수 있는지 VSCode 가 읽을 수 있습니다!
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 <code>mongoose.model</code> 위에 마우스를 올려보면 화려한 설명을 확인할 수 있습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2263,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-152027-1024x167.png" alt="" class="wp-image-2263"/><figcaption><code>mongoose.model</code> 함수에 마우스를 올렸을 때 나오는 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>위 함수에 맞춰 자동 완성 기능을 즐기시면 됩니다. 위 타입 설명은 Typescript 스럽게 설명하고 있으므로 관련된 내용, 특히 <a rel="noreferrer noopener" href="https://www.typescriptlang.org/docs/handbook/generics.html" target="_blank">제네릭</a> 부분을 알고 있다면 좀 더 타입을 해석하는 데 도움이 될 겁니다. 왜 Typescript 식으로 설명이 되느냐? 왜냐하면 Javascript 에는 애초에 타입과 관한 문법은 없고, 타입 설명은 그 방법을 선택하기 나름이고, Typescript 식으로 설명하는 건 나쁘지 않은 방법이고, 게다가 Typescript 도 마이크로소프트에서 개발한 것이기 때문입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>정의한 타입을 여러 파일에서 사용하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>타입 정의를 하나의 파일에서 관리합시다! <code>typedef.js</code> 파일을 만들어줍니다. 앞서 나왔던 예제와 거의 동일합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// typedef.js
// PostSearch 라는 객체 타입을 정의합니다.

/**
 * 게시물 검색 정보를 담는 객체
 * @typedef {object} PostSearch
 * @property {number} page 0이 1페이지임.
 * @property {number} perpage
 * @property {Date} date_gte
 * @property {Date} date_lte
 * @property {string} search
 * @property {string&#91;]} board_permalinks
 * @property {string} board_belongs_to
 */



// Resolver 라는 함수 타입을 정의합니다.

/**
 * resolver의 기본 형태
 * @callback Resolver
 * @param {object} obj
 * @param {object} args
 * @param {PassportContext} context
 * @param {object} info
 * @returns {Promise&lt;any&gt;}
 */</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 파일을 이제 이용해봅시다. 그냥 단순히 해당 타입을 이용하고자 하는 파일에서 아래와 같이 <code>require</code> 하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// test.js
require('./typedef.js');
/**
 * 게시글을 가져옵니다.
 * @param {PostSearch} condition 조건
 */
function getPosts(condition) {
  console.log(condition.search);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>condition. </code>를 입력하는 순간 아래와 같이 자동 완성 목록이 뜨는 것을 확인하실 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2264,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-02-160230.png" alt="" class="wp-image-2264"/><figcaption><code>condition.</code> 를 입력하는 순간 나오는 목록</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>직접 정의한 클래스를 여러 파일에서 사용하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>직접 정의한 클래스를 비슷한 방식으로 진행할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// /typedef.js

/** @typedef {import("./manager/db").DBManager} DBManager */</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// /manager/db.js

class DBManager {
  // 각종 메서드, 속성 등 정의
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// /test.js

require('./typedef.js');
/**
 * 설명
 * @param {DBManager} db DB매니저
 */
function SomeJobWithDB(db) {
  // 내용
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>직접 <code>test.js</code>에서 <code>DBManager</code> 를 <code>require</code>하지 않고 굳이 한 단계 더 거치는 이유는, <strong>타입 관련한 작업은 모두 <code>typedef.js</code> 에게 위임할 수 있기 때문입니다.</strong> 이렇게 되면 또 다른 파일에서 <code>DBManager</code>를 이용하고자 할 때 경로를 일일히 찾을 필요 없이 <code>typedef.js</code> 파일만 <code>require</code>하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Typescript 를 연습하고 사용하세요. JSDoc 은 깔끔하지 않은 기분입니다. 그럼 다들 파이팅입니다!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2234</wp:post_id>
		<wp:post_date><![CDATA[2021-02-02 14:22:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-02 05:22:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-02 16:18:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-02 07:18:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-jsdoc-%ec%9c%bc%eb%a1%9c-%ed%83%80%ec%9e%85-%eb%aa%85%ec%8b%9c%ed%95%98%ec%97%ac-vscode-%ec%97%90%ec%84%9c-%ed%8e%b8%ed%95%98%ea%b2%8c-%ec%bd%94%eb%94%a9%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="vscode"><![CDATA[vscode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-01-29]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[더블 트러블 - Mocking 으로부터 벗어난 이유 (Double trouble — why we decided against mocking 번역) (작업중)]]></title>
		<link>https://elvanov.com/2244</link>
		<pubDate>Fri, 29 Jan 2021 08:14:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2244</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>본글: <a rel="noreferrer noopener" href="https://engineering.talkdesk.com/double-trouble-why-we-decided-against-mocking-498c915bbe1c" target="_blank">https://engineering.talkdesk.com/double-trouble-why-we-decided-against-mocking-498c915bbe1c</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>저자:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2249,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.jpeg" alt="" class="wp-image-2249"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><a href="https://medium.com/@carefulitbytes?source=post_page-----498c915bbe1c--------------------------------">André Carvalho</a><a href="https://engineering.talkdesk.com/double-trouble-why-we-decided-against-mocking-498c915bbe1c?source=post_page-----498c915bbe1c--------------------------------">Feb 25, 2020</a> · 9 min read</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="3468">그래서 목 객체로 한다면?</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 id="3468">“So what if we mock?”</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2245,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.gif" alt="" class="wp-image-2245"/><figcaption>(Image retrieved from <a href="https://bit.ly/2P2jPHd">https://bit.ly/2P2jPHd</a>)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>잘 알려진 과학 조-크가 있다. 한 낙농업자가 우유 생산량이 저조했던 문제를 해결하기 위해 이론 물리학자에게 도움을 요쳥했다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7e0f">There’s a well-known science joke about a dairy farmer who asks a theoretical physicist to help him solve his farm’s low milk production problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>물리학자는 답을 줬지만, 경고를 덧붙였다.  "진공 속 구체 모양의 젖소에게만 해당되는 내용이예요."</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f4d3">The physicist returns with an answer that has a caveat: “it only works for spherical cows in a vacuum.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이는 물리학자나 프로그래머에게 필수 요소인 "추상화의 개념"을 시사한다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0d23">This illustrates an essential part of both physicists’ and programmers’ jobs: the concept of abstraction.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>세상의 모든 소프트웨어는 주어진 문제의 세부 사항을 추상화하면서 올바르고 지속 가능한 구현을 녹여낸다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d09e">All of the software building and the good practices that come with it hinge on correctly and progressively, abstracting from the details of a given problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러므로 테스트를 작성하기 위한 구현 세부 사항의 추상화는 아구가 맞다. 훌륭한 단위 테스트란 재사용성이 좋고 구현하기 쉬워야 하는데, 실제 현실의 온갖 디테일을 신경 쓸 필요가 있을까?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="8f88">And so it stands to reason that we should also abstract from the implementation details on our tests. A good unit test should be repeatable and easy to implement, so why should we care about the gritty details that reality casts upon us?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이럴 때 더블 테스트를 쓴다. 말 그대로 젖소 클래스를 테스트하고자 하는데 가능하다면 실제 젖소가 아닌 대안을 찾아서 그냥 우유를 짜낼 수 있는 능력을 가진 구체를 시뮬레이션 한다고 보자. 훨씬 상황이 간단해진다. 젖소가 난폭하게 발차기할 가능성도, 동물 실험을 묵과하는 사람도 없다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="28f3">That’s what <strong>test doubles</strong> are for: if we were, say, testing a class that milks cows, we could, instead of using an actual cow, just use a sphere that simulates the ability to be milked. It would be much simpler, with way fewer chances of the cow kicking you violently, and so no one would condone testing on animals.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇지만 당연하게도 배포 환경에서 젖소가 우유 통을 차버리지 않을 보장은 없다. 그 때 돼서야 엎질러진 우유를 두고 울고불고 해도 소용없는 셈이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="49fb">The flip side is, of course, you have no guarantee an actual cow won’t kick the milk bucket in production — and there’s no use crying over spilled milk.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>어떤 맥락(낙)농업</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 id="ed70">Some cowntext</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>오해시켰다면 양해를 바란다. 이 글은 가축이나 구체를 다루는 건 아니고, 소프트웨어 테스팅에 관한 이야기다. 특히 단위 테스팅과 과대 평가된 테스트 더블에 관해 알아보자. 이야기는 <a rel="noreferrer noopener" href="http://www.talkdesk.com/" target="_blank">Talkdesk</a> 의 <a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=LCv0mHkgzjs" target="_blank">Atlas team</a> 에서부터 시작되었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5211">We are sorry if we mislead anyone, but this is not an article about cattle, spherical or otherwise, but about software testing. Particularly about unit testing and the over-reliance on test doubles, topics that arose within the <a href="https://www.youtube.com/watch?v=LCv0mHkgzjs" target="_blank" rel="noreferrer noopener">Atlas team</a> at <a href="http://www.talkdesk.com" target="_blank" rel="noreferrer noopener">Talkdesk</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아틀라스는 현재 개발중인 플랫폼이고, <a rel="noreferrer noopener" href="https://www.martinfowler.com/articles/micro-frontends.html" target="_blank">Micro-Frontend Approach</a> 를 통해 좀 더 빠르고 유연하게 개발하고 있다. 이 방법으로 고객들에게 쉽게 확장 가능한 맞춤형 경험을 제공해준다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="3bf1">Atlas is a platform we’re building to make our development quicker and more flexible by using a <a href="https://www.martinfowler.com/articles/micro-frontends.html" target="_blank" rel="noreferrer noopener">micro-frontend approach</a>, as well as providing a more customizable and easily extensible experience to our end customer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일반적으로 <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noreferrer noopener">OO 다이어그램</a>이 사용되고 있고, 코드베이스의 대부분은 React 프론트엔드 기반의 Plain Javascript (ES6을 생각한다면) 으로 쓰여져있다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="af25">We generally use an <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noreferrer noopener">OO paradigm</a> and most of our codebase is written in plain (if you consider ES6 plain) JavaScript, atop a React frontend.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글에서 주된 근거들이 계속 유효하다고 강력하게 주장한다 하더라도, 다음 문장으로부터 시작해야 함을 잊지 말라. 자바스크립트는 동적 느슨한 타입을 쓰는 언어이고, 느슨하고 동적인 타입의 non-젖소는 관리하기 가장 어렵지만, 한번 시작해보자.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="8200">Even though we would strongly argue if the underlying rationale of the article remains valid, keep in mind our starting point: JavaScript is a <a href="https://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic</a> <a href="https://en.wikipedia.org/wiki/Strong_and_weak_typing">loosely typed</a> language. And dynamic, loosely typed non-cows are the hardest to manage. But let’s get to business.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>SUT 업 : 몇몇 단위 테스트 개념</h2>
<!-- /wp:heading -->

<!-- wp:heading {"fontSize":"medium"} -->
<h2 class="has-medium-font-size" id="94c2">SUT up: some Unit Test concepts</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그래서 단위(unit)이란 건 무엇인가? 보기보다 쉬운 질문은 아니지만, System Under Test (SUT) 에서 이야기하는 <em>테스트할 수 있는 가장 작은 조각</em>(<em>smallest testable piece</em>)이라고 정의한다면 조금 낫겠다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f2f4">So what <em>is</em> a unit? It’s not a simple answer as it may seem but, if it helps, you can define it as the <em>smallest testable piece</em> of software of the System Under Test (SUT).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OO 프로그래밍에서는 대개 테스트되는 클래스를 의미한다. 이 글의 취지로 보면 그 정도로 생각해도 충분하다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="713c">In the context of OO programming, it often refers to the class under test, and for the purposes of this post, it’s enough to think of it as such.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>테스트 더블은 테스트에서 실제 구현을 대신할 수 있는 코드로 구성된다. 영화 스턴트 대역(doubles) 배우가 대신 낙하하는 장면을 찍는 것처럼 말이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6a3d">Test doubles consist of any code that stands in for the real implementation in a test. Just like movie stunt doubles, they take the fall for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Mock</em> 이라는 단어는 종종 테스트 더블과 혼용되어 사용되곤 하는데, Mock의 용도는 사실 한 가지이다. <strong>Mock</strong>은 예상되는 범위 안에서 주어지는 행동을 제공한다. 하지만 테스트 더블은 대체제를 의미할 수도 있다. 함께 나오는 용어로 <strong>stubs</strong> 와 <strong>spies</strong> 등이 있다. stubs는 호출할 때의 값과 상관없이 고정된 결과가 나오는 함수이다. 우리의 영원한 Martin Fowler 님이 이야기하는, <a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs">이것과 Mock 의 차이점</a>에서 내용을 더 확인할 수 있다. spies 는 함수를 호출할 때 정보를 추가적으로 제공해주는 래퍼 함수라고 간단히 정의하자.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7c89">Though the word <em>Mock</em> is often used interchangeably with test doubles, they’re only one of several flavors. <strong>Mocks</strong> provide a given behavior depending on a set of expectations, but test doubles can also refer to alternatives. Just to name a couple, such as <strong>stubs</strong> (functions that provide a canned answer regardless of the call value — you can read <a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs">more on the difference between these and mocks by the inevitable Martin Fowler</a>), or <strong>spies</strong> (let’s define these simply as function wrappers that provide information on function calls).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0868">Many traits separate <a href="https://www.youtube.com/watch?v=dJUVNFxrK_4">the wheat from the chaff in unit tests</a>, and <a href="https://medium.com/chris-nielsen/so-whats-a-good-unit-test-look-like-71f750333ac0">many articles pinpointing them</a>, saying the same with different wording. We can sum it all up: unit tests need to be reliable, maintainable and readable. And while mocking and using test doubles may look helpful, they can also make it more difficult as your codebase, the number of unit tests and your tech debt grows.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="03bf">Their initial convenience made us over-dependent on them. We were building Atlas from scratch and while testing new code we gladly leaned on mocks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2d7b">Only when we decided to do a big refactor we realized that we had made such extensive use of test doubles that they became unreliable. When you refactor you alter the code, but the mocks are impervious to that change and keep deprecated interfaces. Our tests lost relevancy because they didn’t depend on the actual code, but on a test double version of it — they worked for spherical cows in a vacuum.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="49ca">That’s when we agreed to do something about it, and also when we found out we were embroiled in a long-standing battle, a centuries-old feud that makes the conflict between Lannisters and Starks look like child’s play. We can say it is the dispute between the Capulets and the Montagues of Test Driven Development (TDD).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="624d">The Classicists vs. The Mockists</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="4855">Ok, we may be overselling the rivalry a bit, but <a href="https://medium.com/@adrianbooth/test-driven-development-wars-detroit-vs-london-classicist-vs-mockist-9956c78ae95f">there are two schools of TDD</a>, usually known by the cities where they were supposedly created: London and Detroit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="cfec">The <strong>London style is top-down</strong>: you start building your software from the most generic component and then refine the abstractions you depend on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="acad">If you develop using the London TDD style, you have no choice but to mock your dependencies on your tests: what you’re testing depends on code that has not been written yet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ed0a">Meet the contender representing London, the Mockist Sandi “Ruby” Metz!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="21fc">In <a href="https://www.youtube.com/watch?v=URSWYvyc42M">a talk at 2013’s RubyConf</a>, Sandi gave several simple and straight pointers on how to write good unit tests.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d9e7">One such aphorism we particularly like is “be a minimalist.” We recommend watching the talk if you haven’t before, but in case you’re in a rush, it can be summarized by this table:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2246,"sizeSlug":"large","linkDestination":"custom"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.jpeg" alt="" class="wp-image-2246"/><figcaption>(Image retrieved from <a href="https://youtu.be/URSWYvyc42M">https://youtu.be/URSWYvyc42M</a>)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p id="ef97">What Sandi means by minimalism is: don’t test what you don’t need to be testing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d864">From an OO perspective, objects communicate with each other via messages. A Mockist would say: “only care for the messages! Test the message, not the messenger!”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f1ea">Sandi says you can ignore any of the messages that do not have an impact outside of your unit. Because remember, your unit is already the <em>smallest testable part of your code</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="595f">For everything else, you can replace your dependencies with mocks because all you care about are the messages they exchange, i.e. that they respect their defined interface.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5c05">But could we be minimalistic with our mocks? The <strong>Detroit style of TDD works bottom-up:</strong> you start building and testing the smallest components and then develop more complex components from those smaller parts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="08dc">Unlike the London style, your dependencies are already there when you start testing, so you don’t need to mock them. In fact, there’s no need to mock anything! Right? Riiiight?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="f154">More or less. Meet the contender representing Detroit, the Classicist Robert “Uncle Bob” Martin!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d388">What Uncle Bob <a href="https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html">suggests is to mock across “architecturally significant boundaries.”</a> This quote is the knockout move when it comes to the use of test doubles.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="96ff">Tests should be <strong>repeatable and quick to run</strong> so you should never depend on a faulty server connection or access to a database.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5efb">But you shouldn’t need to mock every class you depend on either, especially if you’re responsible for maintaining both and they are tightly coupled.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="85f9">Clean up your act</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="b82d">What we found out, as we rewrote our tests to make less extensive use of test doubles (and <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a">we’re hardly the first</a> ones <a href="http://codebetter.com/gregyoung/2008/02/13/mocks-are-a-code-smell/">to point this out</a>), is that <strong>the need for mocks is actually a code smell</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="aa90">Mocks represent the dependencies of your unit. So if the reason you want to write mocks is that your unit has a lot of dependencies, or your unit’s dependencies have a lot of dependencies, then mocking is not the way to go.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7213">If you want to simplify your tests, don’t use doubles — rewrite your code instead.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5bc9">Ever since we decided to adopt an “avoid mocks” mindset, we have been finding opportunities to make our code better.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e4a4">We’ll give you a recent example, in which we were adding a Menu class to an already messy bundle of interdependent units:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2247,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/image.png" alt="" class="wp-image-2247"/><figcaption>An arrow represents the dependency; in yellow the last class to be added (diagram by Talkdesk)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p id="4ac5">To test the Menu class in a mock-free way, we would have had to instantiate not only Navigation but all its dependencies.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6315">That is a hard test to build (the diagram is already a simplification of reality), and an easy solution would be just to mock Navigation — the mock can hide all the other dependencies, and the Menu itself only depended on Navigation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="9e76">However, that would be sweeping tech debt under the rug. Bad code is rarely the result of one day of bad programming by a single coder. More often it is the bastard child of small increments by a growing team of well-intentioned programmers that progressively lose track of the overall picture.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="8f04">It may be because they don’t feel confident rewriting the existing code or because the problem was not apparent.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4da2">But <strong>avoiding test doubles will make the problem visible <em>and</em> give you more confidence to refactor old code</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="817f">Instead of mocking Navigation, we decided to figure out what those classes had in common and use an independent state store to manage it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ed47">So, in the end, our dependency diagram looked like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2248,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/01/image-1.png" alt="" class="wp-image-2248"/><figcaption>Now, hello handsome (diagram by Talkdesk)</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p id="f260">Now the only class we had to mock, no matter which unit we were testing, was the Location State Store. It’s a pretty dumb class that has only one job: to be the source of truth of the common location state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7105">Immediately our tests became a lot simpler. Even without relying on mocks, in the long run, this code will become easier to extend, debug and maintain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="c415">Avoiding test doubles forces our units to have a single and well-defined responsibility — <strong>no test doubles means bad code will be twice as hard to test</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e0ef">It also makes us feel safer when refactoring it because when we change any given unit, the tests of the other units that depend on it will also break until we fix them as well.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="2647">It is an art</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="a197">And by art we mean, there’s no strict rule that can replace experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2e64">Here at the Atlas team, we are fans of the Kent C. Dodds’ <a href="https://testing-library.com/docs/react-testing-library/intro">React Testing Library</a>. He wrote: <a href="https://kentcdodds.com/blog/write-tests/">“write tests, not too many, mostly integration.”</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="322f">The sentiment that drove the decision to replace Enzyme with Kent C. Dodds’ library is the same that motivated this article. By avoiding mocks, we are indeed blurring, if ever so slightly, the line between integration and unit tests.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="39ee">With Enzyme you’re testing bits of React (<a href="https://kentcdodds.com/blog/why-i-never-use-shallow-rendering">using shallow rendering</a>), rather than testing the actual code React cobbles together, and your application runs on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="aea7">The same way, when using mocks, you’re making your tests hinge on a mere reflection of the actual code it depends on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e405">You can change the behavior or the interface of a class, but if you forget to keep all the mocks consistent, its dependencies will still pass the tests, because they are being tested against a mock. You get false positives.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="1388">We are not, however, about to dismiss all mocks: we’re striving for balance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="812f">With experience, meaning art, Classicists and Mockists will come to the same conclusion. Test doubles sometimes are necessary, sometimes they are a pain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="c29e">You can read <a href="https://kentcdodds.com/blog/the-merits-of-mocking">Kent C. Dodds advocating for mocks</a>, reminding us that “when you mock something, you’re making a trade-off”, and you can watch Sandi Metz (in the aforementioned talk) sharing how hard it is to maintain mocks and avoiding API drift. Whatever side you end up choosing, be smart about it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="2565">Keep this in mind</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="fafe">We prescribe <strong>reduced use of test doubles </strong>while recognizing <em>they are</em> important. We’ll stress again Uncle Bob’s suggestion of mocking across “architecturally significant boundaries.”</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="0779">Take this into account:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Use the full extent of existing test doubles. Not only mocks but stubs. And very often spies. <strong>Use the simplest and least compromising test double that does the trick.</strong></li><li>Mock network calls, database accesses, external libraries whose behavior you don’t want your SUT to depend strictly on. <strong>Mock anything that is unreliable or will make your tests run for too long.</strong></li><li>If your test is getting too complicated to write, it <strong>may be a code smell</strong>. Take a look at your code, check if there’s any fault to it, and demand a refactor — whether it is adhering to <a href="https://en.wikipedia.org/wiki/SOLID">SOLID</a> principles, for example. But then, <strong>if you’re convinced the problem is not architectural, use test doubles</strong>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="6898">The cost of writing tests should not dwarf what you get from them, and hopefully, unit tests are only a layer of the stack of tests you’re running. Just be wary of spherical cows.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2244</wp:post_id>
		<wp:post_date><![CDATA[2021-01-29 17:14:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-01-29 08:14:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-10 06:55:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-09 21:55:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8d%94%eb%b8%94-%ed%8a%b8%eb%9f%ac%eb%b8%94-mocking-%ec%9c%bc%eb%a1%9c%eb%b6%80%ed%84%b0-%eb%b2%97%ec%96%b4%eb%82%9c-%ec%9d%b4%ec%9c%a0-double-trouble-why-we-decided-against-mocking]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="testing"><![CDATA[testing]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Vue 3.0] Popper.js 로 우클릭 메뉴 (Context Menu) 구현하기 (작성중)]]></title>
		<link>https://elvanov.com/2277</link>
		<pubDate>Sat, 06 Feb 2021 12:20:42 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2277</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우클릭 메뉴(Context Menu)는 상황에 따라서 유용합니다. 모바일같은 경우 꾹 누르면 우클릭 메뉴가 뜨는 것처럼 할 수 있습니다.  </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2627,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/08/123.png" alt="" class="wp-image-2627"/><figcaption>우클릭 메뉴 예시 사진</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://popper.js.org/">popper.js</a> 는 가볍고 강력한, 특정 요소에 붙어 있는 팝업 요소(popover)를 만들기 좋은 라이브러리입니다. 이것을 이용해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>데모링크 : <a rel="noreferrer noopener" href="https://ezkorry.gitlab.io/simple-context-menu/" target="_blank">https://ezkorry.gitlab.io/simple-context-menu</a></li><li>소스코드: <a rel="noreferrer noopener" href="https://gitlab.com/EzKorry/simple-context-menu" target="_blank">https://gitlab.com/EzKorry/simple-context-menu</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>설계</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우클릭 메뉴를 설계할 때 고려해야 할 사항은 다음과 같습니다. UI 자체야 더 고급스럽고 사용성 좋게 만들려면 한도 끝도 없지만, 아래 기능은 무조건 충족시키도록 해보자구요.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>우클릭 메뉴가 활성화되는 지점(캔버스)이 정해져 있어야 합니다. 아무데서나 우클릭해서 전부 우클릭 메뉴가 뜬다면 UI 로써 기능이 좀 거시기하겠죠..?</li><li>다음과 같을 때 우클릭 메뉴가 사라져야 합니다.<ol><li>우클릭 메뉴가 활성화된 상태에서 <strong>메뉴의 바깥을 눌렀을 때</strong></li><li>우클릭 메뉴 <strong>안에 있는 링크(버튼)을 눌렀을 때</strong></li></ol></li><li>우클릭 메뉴의 항목을 클릭했을 때의 동작을 커스터마이징 하기 쉬워야 합니다.</li><li>단순히 우클릭 메뉴 (Container) 안에 또 다른 컴포넌트 (Item)를 넣기만 해도 자연스럽게 의존 관계가 생길 수 있도록 해봅시다. (예를 들어 Container의 props 를 통해 Item 용 <code>class</code> 를 일괄 적용시킬 수 있도록 하기)   </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>기능 적인 요소 외로 그냥 사용하기 편하도록 하려면 어떻게 해야 할까요? 자잘한 고려사항을 아래와 같이 정해보았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>메뉴를 가져다쓰는 입장에서 모든 스타일을 지정할 수 있도록, 처음에는 아무런 스타일을 지정하지 않습니다. 클래스 명이나 css 속성을 통해 스타일을 마음대로 주무를 수 있도록 했습니다.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>목표 코드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>실제로 해당 컴포넌트를 어떻게 사용할 건지 먼저 정하고, 컴포넌트를 만들어 가는 것도 괜찮은 방법입니다. 아래는 <code>App.vue</code> 입니다. 템플릿 부분, 스크립트 부분, CSS 부분을 나눠서 보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;template&gt;
  &lt;div&gt;
    &lt;div
      v-ec-contextmenu:my-context
      :style="{ width: '200px', height: '200px', backgroundColor: '#eee' }"
    &gt;
      이 칸에서 우클릭을 해보세요.
    &lt;/div&gt;
    &lt;ec-container
      class="context-menu-container"
      style="text-align: left"
      id="my-context"
      :itemStyle="{ display: 'block' }"
      itemClass="font-bold"
      v-slot="api"
    &gt;
      &lt;ec-item @click="log('첫 번째 메뉴가 눌렸습니다.')"&gt;첫 번째 메뉴&lt;/ec-item&gt;
      &lt;ec-item @click="log('두 번째 메뉴가 눌렸습니다.')"&gt;두 번째 메뉴&lt;/ec-item&gt;
      &lt;ec-item @click="log('세 번째 메뉴가 눌렸습니다.')"&gt;세 번째 메뉴&lt;/ec-item&gt;
      &lt;div&gt;안녕하십니까!!&lt;/div&gt;
      &lt;button @click="api.close"&gt;이 버튼을 클릭하면 닫습니다.&lt;/button&gt;
      &lt;pre&gt;state: {{ api.state }}&lt;/pre&gt;
    &lt;/ec-container&gt;
  &lt;/div&gt;
&lt;/template&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>import { defineComponent } from "vue";
import { EcContainer, EcItem, EcDirective } from "./components/MyContextMenu";

export default defineComponent({
  name: "App",

  directives: {
    EcContextmenu: EcDirective,
  },
  components: {
    EcContainer,
    EcItem,
  },
  setup() {
    return {
      log: console.log,
    };
  },
});</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-css"} -->
<pre class="wp-block-code language-css"><code>#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
.context-menu-container {
  background-color: #fff;
  border: 1px solid #ddd;
  padding: 15px;
}
.font-bold {
  font-weight: bold;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드에서 우리가 설계했던 부분이 어떤 부분인지 한번 짚겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>우클릭이 활성화되는 지점</strong>은 <code>v-ec-contextmenu:my-context</code> 로 지정했습니다. <code>my-context</code> 는 우클릭 메뉴의 <code>id</code> 값입니다. <code>v-ec-contextmenu</code> 는 vue에서 directive 라는 기능으로, App 컴포넌트 정의에서 <code>directives: { EcContextmenu: EcDirective, }</code> 로 지정해주고 있습니다. 정리하면 다음과 같습니다.<ol><li>우클릭이 활성화되는 지점은 <code>v-ec-contextmenu</code> directive 가 있는 HTML 엘리먼트이다.</li><li>우클릭을 눌렀을 때 <code>my-context</code> 를 찾아 우클릭 메뉴를 동작시키도록 한다.</li></ol></li><li>메뉴 항목을 클릭했을 때의 동작은 <code>@click="..."</code> 를 통해 지정해줍니다. <strong>동작을 커스터마이징하기</strong> 쉽습니다.</li><li><code>ec-container</code> 컴포넌트에서 <code>itemStyle</code> 과 <code>itemClass</code> props 를 통해 하위의 모든 <code>ec-item</code> 컴포넌트가 영향을 받고 있습니다. 이로부터 <strong>위치만 내부에 있는 컴포넌트가 의존성을 가질 수 있다는 걸</strong> 확인할 수 있습니다. </li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>구현</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>저장 공간 만들기</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>우클릭 했을 때 </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>각각의 컴포넌트마다 만들어진 이벤트를 수신하기 위해, 한 단계를 거쳐나가야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>한계</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>popper.js 는 객체의 나타나고 안나타나고를 css의 <code>inset(left, right, top, bottom 등)</code> 과 <code>transform</code> 을 이용합니다. 그래서 만약 부드러운 애니메이션을 만들고 싶지만 그러한 속성을 사용하기 어려울 수 있습니다. 그래서 상위 엘리먼트든 하위 앨리먼트든 만들어서 <code>transform</code> 과 <code>transition</code> 등을 적절히 적용해야 할 것으로 보입니다. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2277</wp:post_id>
		<wp:post_date><![CDATA[2021-02-06 21:20:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-06 12:20:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-03 18:20:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-03 09:20:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-js-popper-js-%eb%a1%9c-%ec%9a%b0%ed%81%b4%eb%a6%ad-%eb%a9%94%eb%89%b4-context-menu-%ea%b5%ac%ed%98%84%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="vue"><![CDATA[vue]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b59c766109861066b9dfeed4c31a7686]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_231ea7d52281301f7e706f8f6b251a86]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] mongoose-sequence 로 숫자가 자동으로 증가하는 필드 만들기]]></title>
		<link>https://elvanov.com/2282</link>
		<pubDate>Sun, 07 Feb 2021 09:33:42 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2282</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>2021년 현재까지도 아주 활발하고 많이 이용되는 NoSQL 계열인 MongoDB, 그리고 Node.js 에서 MongoDB 관련 작업을 담당해주는 mongoose. 좋습니다. 저도 앞으로도 계속 사용할 것 같습니다. 그에 따라 편리성을 더해주는 라이브러리도 굉장히 많은데요, 특히나 <strong>항목이 추가할 때마다 자동으로 증가하는 필드를 제공</strong>해주는 라이브러리도 물론 있습니다. mongoose 도 이제 나온지 꽤 된 녀석이라서, 종종 오래된 라이브러리가 보이는데, 영어로 자동 증가와 관련해서 검색하면 흔히 나오는 라이브러리 중에 하나가 <a href="https://www.npmjs.com/package/mongoose-auto-increment">mongoose-auto-increment</a> 인데, <span style="text-decoration: underline;">이 놈은 업데이트 된지 5년이 훌쩍 지났습니다. </span>(2021년 2월 기준) 그래서 <a href="https://www.npmjs.com/package/mongoose-sequence">mongoose-sequence</a> 라는 다른 라이브러리로 진행해보고자 합니다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자동으로 증가하는 필드가 왜 필요할까요? 뭐 다양한 이유가 있겠지만 필자같은 경우는 Rest API 를 구상할 때, 문서의 <code>_id</code> 값 (실제 MongoDB 에서 사용하는 길다란 문자열 값)을 그대로 이용하기는 뭔가 깔끔해보이지도 않고 보안적인 부분에서 한 단계를 더 추가해보고자 따로 id를 만들어서 사용합니다. (<code>_id</code> 를 실제로 막 사용한다고 해서 보안에 좋은지 안좋은지는 자세히 모르겠습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>mongoose-sequence 모듈은 대략적으로 다음의 과정을 자동으로 해준다고 보면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>콜렉션(테이블, 스키마 혹은 모델)마다, <strong>다음번에 생성했을 때 부여할 숫자</strong>를 저장하기 위해, 별도의 콜렉션을 만들고 관리함.</li><li>특정 콜렉션에서 새로운 항목이 만들어질 때, 앞서 얘기한 <strong>숫자</strong>를 이용하고, 다음번에 다시 사용하기 위해 숫자를 <code>1</code> 더해줌.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>실제 사용</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자, 이제 그렇다면 실제로 이용해보도록 합시다! 저는 별도의 함수를 만들어서 조금 더 간소화시켰습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// auto-id-setter.js

const { Schema, Mongoose } = require('mongoose');
const AutoIncrementFactory = require('mongoose-sequence');

/**
 * 해당 스키마에 자동 증가 필드를 추가시켜줍니다.
 * @param {Schema} schema
 * @param {Mongoose} mongoose
 * @param {string} name
 * @param {string} inc_field
 */
module.exports = (schema, mongoose, name, inc_field) => {
  const AutoIncrement = AutoIncrementFactory(mongoose);
  const option = { id: `${name}_${inc_field}`, inc_field };
  schema.plugin(AutoIncrement, option);
};</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// application.schema.js

const autoIdSetter = require('./auto-id-setter');
const mongoose = require('mongoose');
const schema = new mongoose.Schema({
  // 중략
});
autoIdSetter(schema, mongoose, 'application', 'id');
module.exports = schema;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>inc_field</code> 는 우리가 사용할 콜렉션에서 자동으로 증감하는 필드를 지정합니다. <strong>이 필드는 스키마 정의시 미리 정의할 필요가 없습니다</strong>!! <code>name</code>은 mongoose-sequence 에서 관리하기 위한 내부적인 id를 지정해주기 위해 사용합니다. 그래서, 대소문자도 특별히 상관없고 다른 콜렉션과 겹치지만 않으면 됩니다. 이렇게 진행하고 나면 실제 콜렉션에 <code>id</code> 필드가 제대로 생성되고 있음을 확인할 수 있습니다. 다른 다양한 옵션이 있는데, 이는 공식 문서를 참조해주시기 바랍니다~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2282</wp:post_id>
		<wp:post_date><![CDATA[2021-02-07 18:33:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-07 09:33:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-07 18:33:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-07 09:33:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-mongoose-sequence-%eb%a1%9c-%ec%88%ab%ec%9e%90%ea%b0%80-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%ec%a6%9d%ea%b0%80%ed%95%98%eb%8a%94-%ed%95%84%eb%93%9c-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>9225</wp:comment_id>
			<wp:comment_author><![CDATA[테스트]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[askdfj@gmail.askdfjla]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[125.177.18.229]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-04-04 02:46:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-04-03 17:46:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[댓글 달리는건가?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1649008011.403283;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Typescript + React + Tailwind + styled-components 맛보기 (작성중)]]></title>
		<link>https://elvanov.com/2284</link>
		<pubDate>Sun, 21 Feb 2021 13:53:34 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2284</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>극한의 효율적인 개발 환경을 만들기 위해 혼종을 만들어봅시다. 하하. 일단 실제로 프로젝트를 개발하고 나서 쓰는 포스팅은 아닙니다. 다만 다른 Vue 프로젝트를 진행해본 바 있고, 컴포넌트를 활용할 때 맞닥뜨리는 다양한 상황들을 미리 고려해보면서 작업 환경을 만들고자 했습니다. 실제로 개발했을 때 어느 부분에서는 실용적이지 않을 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>콘셉</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li>Typescript 로 타입 자동완성 및 타입 불일치와 같은 문제를 조기에 발견함으로써 버그&amp;오류 미연에 방지.</li><li>반복해서 나오는 요소들은 React 로 컴포넌트화 + Tailwind 로 스타일 지정.</li><li>Tailwind 로 css 코딩을 최소화하긴 했지만, 혹시나 조금이나마 있을 코드는, CSS-in-JS 느낌으로 styled-components 를 이용하여 스타일 요소도 모두 tsx 파일에 포함시키기.</li><li>Tailwind 를 사용할 때 겹치는 부분이 많지만 props 등으로 미연의 변화를 줘야 할 때 (예: 버튼의 모양은 똑같으나 색깔만 바꿔서 구성해야 할 때</li><li>정말 글로벌한 세팅 (code, button 등 태그에 따른 기본 스타일 등) 은 index.css 에서 <code>@apply</code> 활용하여 taliwind 의 기능 묶어서 재구성하기.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>세팅</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>create-react-app 으로 Typescript + React 세팅</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"bash"} -->
<pre class="wp-block-code bash"><code>npx create-react-app my-app --template typescript</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>너무너무 간단함.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2284</wp:post_id>
		<wp:post_date><![CDATA[2021-02-21 22:53:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-21 13:53:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-08 22:13:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-08 13:13:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[typescript-react-tailwind-styled-components-%eb%a7%9b%eb%b3%b4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="react"><![CDATA[react]]></category>
		<category domain="category" nicename="tailwind"><![CDATA[tailwind]]></category>
		<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021-02-09]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[javascript] 중첩된 객체에서 원하는 필드를 뽑아오기]]></title>
		<link>https://elvanov.com/2286</link>
		<pubDate>Fri, 12 Feb 2021 13:06:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2286</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 글에서는 중첩된 객체에서 어떤 값을 가져온다는 간단한 유틸리티 함수를 만듭니다. 하지만 이미 너무나도 유명한 유틸리티 라이브러리인 <code>Lodash</code> 등을 이용해보는 것이, 라이브러리 자체를 익히는 데 시간과 노력이 많이 들 수 있지만, 추후 생산성 측면에서 훨씬 좋아질 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>동기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>중첩된 객체에서 정보들을 한번에 손쉽게 가져오는 방법을 계속 재사용해야 했습니다. 예를 들어 obj 가 뭐가 올 지도 모르고 필요한 필드도 뭐가 될지는 모르는데, 거기다가 객체가 중첩되어 있을지도 모르는데 <strong>객체(중첩되어 있을 수 있음)와 필드 이름를 제공하면 거기에 대한 값을 가져온다</strong>는 로직을 간편하게 재사용하고 싶어서 함수를 만들어보고자 합니다. 예시 아래를 바로 참조해주세요. (코드도 바로 나와있습니다.) 이를 이용하면 <a href="/2287" data-type="URL" data-id="/2287">mongoose 에서 search 필드를 간단하게 만들어 간단한 검색 기능</a> 등을 구현해볼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>코드와 실행 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>오브젝트가 다음과 같이 주어졌을 때,</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const obj = {
  a: 1,
  b: "hi",
  c: {
    hello: "hi",
    d: &#91;{ name: "김씨" }, { name: "박씨" }, { name: "최씨", age: 24 }]
  }
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>다음과 같이 <code>getValueOfField</code> 함수를 수행한다면,</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>console.log(getValueOfField(obj, 'c.hello'));</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>다음과 같이 결과가 나오기를 기대합니다. 이는 <code>obj.c.hello</code> 의 값을 그대로 가져온 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>hi</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이를 코드로 더 많은 예제와 함께 구현해본다면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:cp/codepen-gutenberg-embed-block {"penURL":"https://codepen.io/ezkorry/pen/xxRRNxa","penID":"xxRRNxa","penType":"js,result","penHeight":400} -->
<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_xxRRNxa" src="//codepen.io/anon/embed/xxRRNxa?height=400&amp;theme-id=1&amp;slug-hash=xxRRNxa&amp;default-tab=js,result" height="400" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed xxRRNxa" title="CodePen Embed xxRRNxa" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>
<!-- /wp:cp/codepen-gutenberg-embed-block -->

<!-- wp:heading -->
<h2>원리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 field 를 해석해야 합니다. 가장 간단한 경우부터 봅시다. 필드에 <code>.</code>이 없을 경우에는 그냥 해당 값을 접근하여 리턴하면 끝입니다. <code>.</code>이 있는지 없는지의 판단은 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf"><code>String.prototype.indexOf</code> 함수</a>를 이용하면 됩니다. 이 함수는 어떤 substring 이 해당 string 에 존재한다면 해당 위치를 가져오고, 존재하지 않는다면 <code>-1</code>를 리턴합니다. 해당 string 이 복수로 존재한다면 <em>가장 먼저 등장하는 요소</em>의 위치를 가져옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre id="language-javascript" class="wp-block-code language-javascript"><code>  // .이 존재하는지를 체크하기 위해 pos 를 구함.
  const pos = field.indexOf(".");

  // '.'이 없다면 바로 리턴.
  if (pos === -1) {
    let value = obj&#91;field];
  }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하지만 만약에 <code>"c.hello"</code>와 같이 <code>.</code>이 들어가게 된다면 어떻게 해야 할까요? 그렇다면 비슷한 로직을 두 번 수행해야 합니다. 첫번째로 <code>c</code>에 먼저 접근한 다음 <code>hello</code> 필드에 접근해야 합니다. 이는 재귀적으로 구현할 수 있습니다! 이를 간단한 그림으로 표현하면 다음과 같습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2291,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_1955247171-1024x519.jpg" alt="" class="wp-image-2291"/><figcaption>첫번째 실행과 두번째 실행</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>여기서 이야기하는 첫번째 실행과 두번째 실행은 같은 단계에서 두 번 실행되는 것이 아니라, 재귀적으로 두 번 중첩된다는 뜻입니다. 이를 바로 코드로 하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>  // .이 있다면 다음 요소 탐색
  const nextObj = obj&#91;field.slice(0, pos)];
  const nextField = field.slice(pos + 1);

  // 배열이 아닐 경우에는 그냥 하위 필드를 재귀하여 리턴
  return getValueOfField(nextObj, nextField);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>pos</code> 는 앞서 구해놨었던 <code>.</code>의 위치이고, 이를 기준으로 오른쪽 부분(<code>field.slice(0, pos)</code>)으로 다음번 탐색할 객체를 지정해주고, 나머지 오른쪽 부분으로 다음 필드 디름을 지정해줍니다. 이렇게 되면 <code>'c.hello'</code>의 값을 구할 수 있게 되었습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>배열도 접근할 수 있도록 하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>배열 내 요소에 대해서도 접근할 수 있으면 좋을 것 같습니다. 위 예제에서 <code>'c.d.name'</code>을 하게 되면 <code>['김씨', '박씨', '최씨']</code>가 나오도록 말이죠. 그럼 배열이 나왔을 때 다르게 처리해주면 되겠습니다! 다음 코드로 각 요소에 대해서 <code>getValueOfField</code>를 적용하여 리턴해 내보낼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>  // nextObj가 배열일 경우 하나하나에 대한 하위 필드를 모아서 리턴하도록 함.
  if (Array.isArray(nextObj)) {
    return nextObj.map((item) => getValueOfField(item, nextField));
  }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2286</wp:post_id>
		<wp:post_date><![CDATA[2021-02-12 22:06:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-12 13:06:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-13 20:14:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-13 11:14:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-%ec%a4%91%ec%b2%a9%eb%90%9c-%ea%b0%9d%ec%b2%b4%ec%97%90%ec%84%9c-%ec%9b%90%ed%95%98%eb%8a%94-%ed%95%84%eb%93%9c%eb%a5%bc-%eb%bd%91%ec%95%84%ec%98%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[mongoose 에서 search 필드를 만들어 간단한 검색 지원하기]]></title>
		<link>https://elvanov.com/2287</link>
		<pubDate>Fri, 12 Feb 2021 13:01:09 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2287</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>MongoDB 에서 하나의 document 가 생성되거나 업데이트될 때마다, search 필드에 검색가능한 문자열을 저장하고, 추후 정규식을 이용하여 검색할 문자열이 포함되어 있는지 아닌지의 여부를 확인하는 방식을 통해 검색 기능을 구현해보도록 하겠습니다. 한글이 좀 더 원활하게 검색되게 하기 위해서 <a rel="noreferrer noopener" href="https://www.npmjs.com/package/hangul-js" target="_blank">hangul-js</a> 를 사용하여 한글을 낱낱히 흩어놓을 것입니다. 만약 검색해야 할 대상이 <code>html</code> 코드일 경우, HTML 태그와 같은 부분은 검색에 포함시킬 필요가 없으니까, html 에서 텍스트 내용만 가져오는 기능이 있는 <a href="https://www.npmjs.com/package/string-strip-html">string-strip-html </a>라이브러리도 사용해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>코드</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// tool.js

const Hangul = require('hangul-js');

/**
 * 문자열 배열을 한글해체된 문자열 하나로 만들어주는 함수
 * @param {string&#91;]} arr 문자열 배열
 * @returns {string} 한글.
 */
const searchArrToStr = (arr) =&gt;
  Hangul.disassembleToString(arr.join('#').replace(/ /g, ''));

/**
 * doc 에서 검색 대상에 포함시킬 문자열을 리턴하는 함수
 * @callback SearchStrGetter
 * @param {MongooseDocument} doc 대상 문서
 * @returns {string} 검색 문자열
 */

/**
 * 해당 스키마에게 getter 를 이용해 search 기능을 만드는 함수
 * @param {Schema} schema
 * @param {string} searchField
 * @param {SearchStrGetter} getter
 */
const makeSchemaHaveSearchByGetter = (schema, searchField, getter) =&gt; {
  schema.pre('save', function () {
    this&#91;searchField] = getter(this);
  });

  schema.post('updateOne', async function () {
    const docToUpdate = await this.model.findOne(this.getFilter());
    if (docToUpdate) await docToUpdate.save();
  });
}

module.exports = {
  searchArrToStr,
  makeSchemaHaveSearchByGetter
};</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// schema.js

const mongoose = require('mongoose');
const { searchArrToStr, makeSchemaHaveSearchByGetter } = require('./tool.js');
const stripHtml = require('string-strip-html');

const post = new mongoose.Schema({
  // 생략
});

makeSchemaHaveSearchByGetter(post, 'search', (postDoc) => {
  const strArray = &#91;];
  const { title = '', content = '' } = postDoc;
  strArray.push(title);
  strArray.push(stripHtml(content).result);
  return searchArrToStr(strArray);
});
</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// db.js

const postModel = require('생략');
module.exports = {
  getPosts(condition = {}) {
    const query = postModel.find();
    if (typeof condition.search === 'string' &amp;&amp; condition.search !== '') {
      query.find({ search: new RegExp(search) });
    }
  },
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>tool.js</code> 에서는 어떤 스키마에 대한 search 관련 string 을 만들어주는 헬퍼 함수를 제공하고, <code>schema.js</code> 에서는 스키마를 정의하면서 search 관련 기능을 추가하기 위해 <code>tool.js</code> 의 함수들을 호출하고, <code>db.js</code> 에서는 실제로 검색할 때 어떤 식으로 하는지를 보여줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>흐름과 원리</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2294,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/KakaoTalk_20210213_212842217-953x1024.jpg" alt="" class="wp-image-2294"/><figcaption>검색 문자열 만드는 과정과 검색 실시하는 과정</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Mongoose 미들웨어 활용하기</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>  schema.pre('save', function () {
    this&#91;searchField] = getter(this);
  });

  schema.post('updateOne', async function () {
    const docToUpdate = await this.model.findOne(this.getFilter());
    if (docToUpdate) await docToUpdate.save();
  });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>미들웨어에 대한 자세한 용법은 <a href="https://mongoosejs.com/docs/middleware.html">공식 문서</a>를 참조해주세요. 사실 mongoose 미들웨어는 활용하기가 좀 까다롭습니다. mongoose 가 정확히 어떤 순서로 데이터를 저장하고 불러오는 지를 잘 알아야 활용도 잘 할 수 있기 때문입니다. 필자도 잘 아는 건 아니지만, save 와 updateOne 을 활용해서 생성/업데이트 상황을 반영하도록 했습니다.  우선 save일 경우 미리 <code>searchField</code> 를 설정하여 저장되도록 했고, <code>updateOne</code> 의 경우에는, 해당 프로세스가 완료된 후에 <code>save()</code>로 한번 더 호출하여 앞서 등록했던 save pre 미들웨어가 동작하도록 했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mongoose 미들웨어에서는 <code>this</code>가 어떤 객체를 가리키고 있는지 확실히 알아야 잘 활용할 수 있습니다. 이 <code>this</code>를 활용해야 한다는 점 때문에 arrow function 을 쓰려고 하면 다소 골치아파집니다. (사실 필자는 시도해보지 않았습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2287</wp:post_id>
		<wp:post_date><![CDATA[2021-02-12 22:01:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-12 13:01:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-13 22:20:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-13 13:20:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mongoose-%ec%97%90%ec%84%9c-search-%ed%95%84%eb%93%9c%eb%a5%bc-%eb%a7%8c%eb%93%a4%ec%96%b4-%ea%b0%84%eb%8b%a8%ed%95%9c-%ea%b2%80%ec%83%89-%ec%a7%80%ec%9b%90%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mongoose"><![CDATA[mongoose]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Vue.js] Higher Order Component (고차 컴포넌트) 를 활용하여 로딩 버튼 만들기]]></title>
		<link>https://elvanov.com/2300</link>
		<pubDate>Sat, 13 Feb 2021 23:23:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2300</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 글은 <strong>vue 버전이 2</strong> 입니다! 대상 독자는 외부 컴포넌트를 불러올 수 있고, Single File 컴포넌트를 직접 만들어 사용할 줄 아는 분들입니다. 즉 props와 이벤트의 구조도 알고 있어야 글을 이해하실 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 종종 래퍼 컴포넌트가 필요할 때가 있습니다. 우리는 bootstrap-vue 라이브러리의 Button 의 기능을 확장하여, 만약 로딩이라면 로딩바가 돌아가는 버튼을 만들고자 합니다. 이게 왜 필요하냐구요? 예를 들어 "변경사항 적용" 버튼을 눌렀을 때 인터넷 속도에 따라 응답을 기다려야 할 필요가 있습니다. 이를 사용자에게 알리기 위해 버튼 자체에 로딩 애니메이션을 띄우면 직관적인 디자인이 되겠지요!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>코드와 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>선 코드&amp;예제 후 설명 ㄱㄱ</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<iframe src="https://codesandbox.io/embed/vue-loading-button-7885g?fontsize=14&amp;hidenavigation=1&amp;module=%2Fsrc%2FLoadingButton.vue&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="Vue Loading Button" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>
<!-- /wp:html -->

<!-- wp:heading -->
<h2>Higher Order Component (고차 컴포넌트) 데이터 전달하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>고차 컴포넌트, 및 래퍼 컴포넌트를 만들 때 가장 주의깊게 고려해야 할 것은 <strong>어떻게 데이터들을 그대로 전달할 것인가</strong> 입니다. 데이터라는 것은 맥락에 따라 다양하게 읽힐 수 있는데, 함수의 경우에는 인수(parameter)를 그대로 받아서 전달해야 하고, 거기에 따른 리턴값을 받아서 또 그대로 전달해야 합니다. vue 컴포넌트의 경우에는 컴포넌트를 만들면서 설정할 수 있는 props, 각종 속성, 그리고 이벤트 리스너를 그대로 전달할 수 있어야 합니다. 우리는 인스턴스 속성에 접근하여 이를 해결할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Vue Instance (<code>this</code>) 에는 <code>$</code> 접두사로 붙은 다양한 인스턴스 속성이 있습니다. 어떤 것들이 있는지는 <a href="https://vuejs.org/v2/api/index.html#Instance-Properties">공식 문서의 Instance Properties</a> 에서 확인할 수 있지만, 우리가 여기서 다룰 것은 <code>$attrs</code>, <code>$listners</code> 두 가지입니다. <code>$props</code> 는 직접적으로 다루지는 않지만, 헷갈리는 부분이 있어서 간단한 언급을 하도록 하겠습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>$props</code> 는 어떤 컴포넌트에서 <strong><code>props: { ... }</code> 로 정의한 것들만</strong> 들어갑니다. 그러니까 우리가 v-bind 로 props 로 연결하려는 시도를 하더라도 해당 컴포넌트가 정의해놓은 props에 없다면 props 로 들어가지 않습니다.  그래서 props는 아주 예측하기 쉽습니다. 우리가 정의해놓은 것만 따로 처리를 해주면 됩니다. 위 예제에서 LoadingButton 코드를 본다면, 내부에서 <code>disabled</code>, <code>loading</code>, <code>loadingLabel</code> 세 개가 props로 정의되어 있습니다. 그래서 이 컴포넌트는 무조건 이 3개 말고는 어떠한 값도 props로 들어오지 않습니다. 그렇다면 다른 값들은 어디에 남아있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>바로 <code>$attrs</code> 입니다. <code>$attrs</code>에는 <strong><code>$props</code> 를 제외한, 또 class와 style 속성을 제외한 모든 속성</strong>들이 들어갑니다. class 와 style 은 그 특성상 특수하게 처리되어야 하고 해당 HTML Tag 에 직접적으로 적용되야 하는 것이기 때문에 별도로 값을 처리할 수 없습니다. 자 그러면 이 <code>$attrs</code>를 그대로 전달하려면 그냥 <code>v-bind</code>에 이름을 주지 말고 전달하면 됩니다. 와!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- App.vue --&gt; 
&lt;LoadingButton
  :loading="loading"      
  :size="'sm'"
&gt;
  2초 동안 로딩이 됩니다.
&lt;/LoadingButton&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// LoadingButton.vue
{
  props: {
    disabled: {
      type: &#91;Boolean, String],
      default: false,
    },
    loading: {
      type: Boolean,
      default: false,
    },
    loadingLabel: {
      type: String,
      default: "로딩중입니다.",
    },
  },
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- LoadingButton.vue  --&gt;
  &lt;b-button
    :disabled="disabled || loading"
    <strong><em>v-bind="$attrs"</em></strong>
    class="loading-button"
    :aria-busy="loading"
    :class="{ loading }"
  &gt; ... &lt;/b-button&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위와 같이 <code>disabled</code>, <code>loading</code> 등은 자기가 직접 알아서 다루면 되고 나머지는 <code>$attrs</code>로 넘기면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자 그렇다면, <code>@click</code> 과 같이 이벤트로 들어오는 메소드도 그대로 전달되어야 할 것입니다. 불행히도 이 리스너는 <code>$attrs</code> 에 담기지 않습니다. 그렇다면 어디에 담기는 걸까요? 바로 <code>$listeners</code>에 담깁니다! 이를 <code>v-on</code> directive 에 그대로 넘기면 완료!!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- App.vue --&gt; 
&lt;LoadingButton
  :loading="loading"
  <strong><em>@click="buttonClicked"</em></strong>
  :size="'sm'"
&gt;
  2초 동안 로딩이 됩니다.
&lt;/LoadingButton&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- LoadingButton.vue  --&gt;
&lt;b-button
  :disabled="disabled || loading"
  v-bind="$attrs"
  <strong><em>v-on="$listeners"</em></strong>
  class="loading-button"
  :aria-busy="loading"
  :class="{ loading }"
&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>$listeners</code> 를 이용해서 <a href="https://vuejs.org/v2/guide/components-custom-events.html#Binding-Native-Events-to-Components">커스텀 이벤트를 적절하게 다루는 공식 문서</a>도 있으니까 참고해주시면 되겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>폭을 고정, 로딩 애니메이션 보이게 하기, 접근성 지원</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-html"} -->
<pre class="wp-block-code language-html"><code>&lt;!-- LoadingButton.vue  --&gt;
&lt;!-- 속성 생략 --&gt;
&lt;b-button :class="{ loading }"&gt;
  &lt;span class="text" :aria-hidden="loading"&gt;
    &lt;slot&gt; &lt;/slot&gt;
  &lt;/span&gt;
  &lt;div class="spinner-wrapper" v-if="loading"&gt;
    &lt;b-spinner class="spinner" size="sm"&gt;&lt;/b-spinner&gt;
    &lt;span class="sr-only"&gt;
      {{ loadingLabel }}
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/b-button&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-css"} -->
<pre class="wp-block-code language-css"><code>/* LoadingButton.vue  */
.loading .text {
  opacity: 0;
}

.spinner-wrapper {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

.spinner {
  width: 20px;
  height: 20px;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>b-button</code> 의 속성은 많이 감췄습니다. 정확한 예제는 가장 위 예제 코드를 참조해주세요. <code>b-spinner</code> 는 마찬가지로 <code>bootstrap-vue</code> 에서 제공하고 있는 컴포넌트로, 로딩 애니메이션을 보여줍니다. 로딩 애니메이션을 직접 구현하지는 않았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.loading .text</code> 에 단순히 <code>opacity: 0</code>을 설정한 이유는 로딩이 되는 상태에서도 가로 사이즈를 유지하기 위해서 입니다. <code>v-if</code> 또는 <code>display: none</code> 과 같이 설정하지 않은 이유는, 만약 그렇게 한다면 요소가 아예 없는 것처럼 동작하므로 텍스트의 가로 사이즈만큼 버튼이 쪼그라들 것이기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>.spinner-wrapper</code> 클래스는 스피너를 가운데 위치시키기 위함입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>코드에 접근성 관련 코드가 있으므로 간단하게 설명하겠습니다. <code>:aria-hidden</code> 속성은 스크린 리더 등의 보조 프로그램에게 해당 요소를 읽어야 하는지 아닌지를 설정해줍니다. <code>true</code> 라면 <em>감춰라</em> 라는 뜻이므로 스크린 리더가 읽지 않습니다. 맥락상 중요하지 않거나 숨겨야 하는 것을 true 로 설정합니다. 위 예제에서는 <code>loading</code> props가 <code>true</code> 라면  있는 상태라면 본래 텍스트를 숨기도록 되어 있습니다. <code>sr-only</code> 클래스는 bootstrap 에 포함되어 있는 것으로, 스크린 리더에게만 보이는 텍스트라는 뜻입니다. 공간을 하나도 차지하지 않고 위치도 화면에서 한참 벗어나 있기 때문에 일반 사용자는 볼 수 없지만, HTML 문서 구조상 존재하고 있으므로 스크린 리더만 읽을 수 있습니다. 보통 이미지나 아이콘으로만 전달되는 맥락을 글자로 설명하기 위해 넣습니다. 접근성에 관한 자세한 내용은 다른 글을 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2300</wp:post_id>
		<wp:post_date><![CDATA[2021-02-14 08:23:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-13 23:23:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-14 09:45:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-14 00:45:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-js-higher-order-component-%eb%9e%98%ed%8d%bc-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8-%eb%a5%bc-%ed%99%9c%ec%9a%a9%ed%95%98%ec%97%ac-%eb%a1%9c%eb%94%a9-%eb%b2%84%ed%8a%bc-%eb%a7%8c%eb%93%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="vue"><![CDATA[vue]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[실제로 사용 가능한 nginx 프록시 서버 만들기 (docker-compose)]]></title>
		<link>https://elvanov.com/2312</link>
		<pubDate>Wed, 17 Feb 2021 05:32:58 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2312</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>실제로 사용 가능한 nginx 프록시 서버를 만들기 위한 여정입니다. 필자는 보안에 대한 전문가도 아니고 nginx 전문가도 아닙니다만 그 과정을 최대한 종합적으로 정리해보고자 합니다. 본 글에서는 docker 를 활용하므로, docker 에 대한 기본적인 개념 및 docker-compose 를 간단하게 이용할 수 있는 정도의 지식만 있으면 됩니다. 또한 nginx 를 활용하므로 nginx 가 어떤 웹서버인지 간단하게나마 알면 좋습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>간단 개념 정리</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><strong>CA</strong> : 인증서를 발급해주는 기관</li><li><strong>OCSP Stapling</strong> : 인증서가 유효기간이 되기 전에 파기되었는지 아닌지 확인하는 한 가지 방법입니다. 파기되었는지의 여부는 CA에게 직접 물어보는 수 밖에 없습니다. 그래서 웹 서버에서 CA로 주기적으로 확인 요청을 보내고, CA는 웹 서버에게 "2015.11.11 확인됨" 이라는 메시지를 보내 놓습니다. 웹 서버는 이 메시지를 받은 날짜와 함께 잘 가지고 있다가 클라이언트가 웹 서버에게 요청을 한다면 그 때 인증서에 메시지를 스테이플러로 붙여서 (Stapling) 클라이언트에게 전달합니다. 자세한 내용은 <a href="https://rsec.kr/?p=386">https://rsec.kr/?p=386</a> 참조</li><li><strong>HSTS(HTTP Strict Transport Security)</strong> : 웹 사이트에 접속할 때, 강제적으로 HTTPS Protocol로만 접속하게 하는 기능</li><li><strong>SSL / TLS 인증서 (HTTPS) 동작 과정</strong> : 친절한 설명은 <a href="https://opentutorials.org/course/228/4894">생활코딩</a> 참조, 자세하고 기술적인 설명은 <a href="https://chp747.tistory.com/155">https://chp747.tistory.com/155</a> 참조 </li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Nginx 를 리버스 프록시 서버로 사용한다. (실제 서버가 뒤에 숨겨져서 위치한다.)</li><li>모든 www는 www가 아닌 걸로 리다이렉트한다. (예: www.example.com → example.com ) 서브도메인이 있을 경우 당연히 리다이렉트하지 않는다.</li><li>ssl / tls 인증서를 사용한다. (https 를 지원한다) 발급은 Let's Encrypt 인증서 활용 (+ certbot 활용)</li><li>모든 http 는 https 로 리다이렉트한다.</li><li>nginx 리버스 프록시 서버와 실제 서버는 단순한 http 로 통신한다.</li><li>docker-compose 로 프로그램들을 실행시킨다.</li><li>gzip 을 지원한다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>최종 configuration 파일 모습</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>모든 설정은 <code>/etc/nginx/nginx.conf</code> 파일에서 시작됩니다. 도커에서의 설정에 따라 이 conf 파일을 통째로 바꿔치기할 수 있고, 또는 <code>/etc/nginx/sites-enabled/</code> 경로 안에 있는 conf 파일만 새로 추가할 것인지를 선택할 수 있습니다. 저 경로가 어떻게 나오는 것이냐구요? 보통 기본적으로 주어지는 <code>nginx.conf</code> 파일의 http context 내부에는 다음과 같은 include 를 확인할 수 있습니다. 그러므로 기본 <code>nginx.conf</code> 파일을 수정하지 않는다면 저 경로 안에 설정이 기본적으로 로딩된다는 점도 유추할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code>include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 글에서 만들 conf 파일은 총 3개입니다. <code>nginx.conf</code> 파일과, 해당 파일에서 include 하는 <code>web.conf</code> 파일, 그리고 각 server context 에서 반복적으로 사용하는 <code>/etc/nginx/server-https-common.conf</code> 파일입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># nginx.conf
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
events {
    worker_connections 1024;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 웹 설정하는 부분
    include /etc/nginx/web.conf;

    # 로그 파일에 대한 포맷을 설정해주는 부분
    log_format main '$remote_addr - $remote_user &#91;$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # https://www.lesstif.com/system-admin/nginx-http-413-client-intended-to-send-too-large-body-86311189.html
    client_max_body_size 8M; 

    # gzip configuration
    gzip on;
    gzip_disable "msie6";
    gzip_min_length 10240;
    gzip_buffers 32 32k;
    gzip_comp_level 9;
    gzip_proxied any;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;
    gzip_vary on;

    sendfile on;
    keepalive_timeout 65;
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># web.conf

upstream example {
    server web:4000;
}

# force to https, not http.
server {
    listen 80 default_server;
    listen &#91;::]:80 default_server;

    return 301 https://$host$request_uri;
}

# force www to non-www examle.com
server {
    listen 443 ssl http2;
    listen &#91;::]:443 ssl http2;

    server_name www.example.com;
    
    include /etc/nginx/server-https-common.conf;

    return 301 https://example.com$request_uri; 
}

# example no subdomain
server {
    listen 443 ssl http2;
    listen &#91;::]:443 ssl http2;

    server_name example.com;

    include /etc/nginx/server-https-common.conf;
    
    location / {
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_set_header    Host                $host;
        proxy_set_header    X-Forwarded-Host    $host;
        proxy_set_header    X-Forwarded-Port    $server_port;
        proxy_set_header    X-NginX-Proxy       true;
        proxy_pass_header   Set-Cookie;
        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_pass http://example/;
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># server-https-common.conf

# ssl configuration
ssl_certificate         /etc/ssl/fullchian.pem;
ssl_certificate_key     /etc/ssl/privkey.pem;
ssl_trusted_certificate /etc/ssl/chain.pem;
ssl_session_timeout     1d;
ssl_session_cache       shared:MozSSL:10m;  # about 40000 sessions
ssl_session_tickets     off;

# modern configuration
ssl_protocols               TLSv1.3;
ssl_prefer_server_ciphers   off;

# HSTS (ngx_http_headers_module is required) (63072000 seconds)
add_header Strict-Transport-Security    "max-age=63072000" always;

# other security settings
add_header X-Frame-Options              SAMEORIGIN;
add_header X-Content-Type-Options       nosniff;
add_header X-XSS-Protection             "1; mode=block";

# OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;

# replace with the IP address of your resolver
# resolver 127.0.0.1;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 이 nginx 리버스 프록시 서버는 docker 컨테이너로 돌아가므로, 인증서 위치와 호스트 이름 등을 설정해주기 위한 <code>docker-compose.yml</code> 파일을 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-yml"} -->
<pre class="wp-block-code language-yml"><code>version: '3'
services:
  proxy:
    container_name: proxy
    hostname: proxy
    image: nginx:latest
    ports:
      - '80:80' # common web
      - '443:443' # https
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/web.conf:/etc/nginx/web.conf:ro
      - ./proxy/server-https-common.conf:/etc/nginx/server-https-common.conf:ro
      - /etc/letsencrypt/live/사이트이름:/etc/ssl:ro
    depends_on:
      - web
  web:
    image: 사용할-이미지-이름
    hostname: web
    ports:
      - '4000:4000'</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2><code>web.conf</code> 설정</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기본적인 서버의 설정은 <a href="https://ssl-config.mozilla.org/">https://ssl-config.mozilla.org/</a> 에서 가져왔습니다. 여기에는 아주 유용한 것들이 많습니다. 여러가지 버전 중에 위 내용은 <code>modern</code> 을 선택한 것에서 좀 수정을 거친 것인데, intermediate 를 선택하면 더 길고 복잡해져서 그냥 이걸로 했습니다. 차이점은 바로 아래에서 확인할 수 있는데, 큰 차이점은 아닙니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># modern configuration
ssl_protocols TLSv1.3;
ssl_prefer_server_ciphers off;

# 위에 거 대신
# 아래 게 쓰입니다.    

# curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam
ssl_dhparam /path/to/dhparam;

# intermediate configuration
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>upstream</code> 은 여러 개의 서버를 하나로 묶는 역할입니다. <code>upstream</code> 에서 서버를 정의할 때 <code>docker-compose.yml</code> 에서 <code>hostname</code>으로 지정한 이름을 써도 됩니다. 실제 서버에서 사용하는 포트도 붙이도록 합시다. (예: <code>web:4000</code>) 아래 코드를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code>upstream example {<br>    server web:4000;<br>}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>server 에서는 총 두 번의 리다이렉트가 있습니다. 강제로 https 로 연결하는 리다이렉트와 www를 없애는 리다이렉트입니다. 여기서 순서가 중요한데, 필자는 먼저 http 를 https 로 하는 리다이렉트를 먼저 수행하므로, www 도 https 로 연결될 수 있습니다. 그러므로 우리의 인증서에는 <strong>기본 도메인 뿐만 아니라 www 가 붙은 도메인도 포함되어 있어야 합니다</strong>! 인증서를 만들 때 주소를 한꺼번에 설정하여 하나의 파일에 몰아넣으면 되므로 주소에 따라 인증서를 다르게 설정해야 하거나 할 필요는 없습니다. 아래 코드를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># force to https, not http.
server {
    listen 80 default_server;
    listen &#91;::]:80 default_server;

    return 301 https://$host$request_uri;
}

# force www to non-www examle.com
server {
    listen 443 ssl http2;
    listen &#91;::]:443 ssl http2;

    server_name www.example.com;
    
    include /etc/nginx/server-https-common.conf;

    return 301 https://example.com$request_uri; 
}</code></pre>
<!-- /wp:code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>간단 설명</strong></p><p>- <code>listen</code> : 응답받을 ip 주소와 포트를 결정합니다.<br>- <code>server_name</code> : 응답받을 uri 를 결정합니다. listen 에는 해당하는데 server_name 을 찾을 수 없을 경우 해당 <code>listen</code> 의 <code>default_server</code> 설정이 되어 있는 <code>server</code> 블록으로 넘어갑니다. 위 예제에서는 모든 ip주소의 80 포트에 대해서 <code>default_server</code> 설정을 해놓았으므로, 80 포트에서 <code>server_name</code> 을 찾지 못한 모든 연결은 모두 해당 블록으로 넘어갑니다. 80 포트에 대해서 별다른 <code>server_name</code> 을 설정해놓은 것이 아무것도 없으므로 기본적으로 모두 해당 블록으로 넘어간다고 보면 됩니다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>자 그렇다면 이제 진짜 경로로 들어오게 되었을 때의 처리인데요, 이는 location context 안에 뭐가 많이 있습니다. 각각 설정이 겹치는 것도 있고 어떤 것이 필요하고 어떤 것이 필요하지 않은지에 대한 명확한 구분은 정말 하기 어렵더라구요. 인터넷에서는 아무리 찾아봐도 그 명확한 선이란 게 보이지 않아서 넣을 수 있는 건 다 넣었습니다. 아래를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code>    location / {
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_set_header    Host                $host;
        proxy_set_header    X-Forwarded-Host    $host;
        proxy_set_header    X-Forwarded-Port    $server_port;
        proxy_set_header    X-NginX-Proxy       true;
        proxy_pass_header   Set-Cookie;
        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_pass http://example/;
    }</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2><code>server-https-common.conf</code> 설정</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>인증서 경로 설정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 글에서는 Let's Encrypt 로 SSL 인증서를 발급합니다. 기본적으로 certbot 으로 인증서를 만든다면 <code>/etc/letsencrypt/live/사이트이름</code> 경로 내에 다음 4개의 pem 파일이 위치하게 됩니다. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>cert.pem</code></li><li><code>chain.pem</code></li><li><code>fullchain.pem</code></li><li><code>privkey.pem</code></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 파일들을 nginx ssl 세팅과 연결시키려면 다음과 같이 하면 됩니다. (<a href="https://community.letsencrypt.org/t/how-to-set-ssl-trusted-certificate-in-nginx-configuration-file/41898">Let's Encrypt Community 글 참조</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>ssl_certificate</code> should point to <code>fullchain.pem</code></li><li><code>ssl_certificate_key</code> should point to <code>privkey.pem</code></li><li><code>ssl_trusted_certificate</code> should point to <code>chain.pem</code></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그러므로 docker-compose.yml 에서 다음과 같이 경로 설정을 해두고,</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-yml"} -->
<pre class="wp-block-code language-yml"><code>version: '3'
services:
  proxy:
    # 중략
    <strong>volumes:</strong>
<strong>      - /etc/letsencrypt/live/사이트이름:/etc/ssl:ro</strong>
# 후략</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>conf 파일에 아래와 같이 설정하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre class="wp-block-code language-nginx"><code># ssl configuration
ssl_certificate         /etc/ssl/fullchian.pem;
ssl_certificate_key     /etc/ssl/privkey.pem;
ssl_trusted_certificate /etc/ssl/chain.pem;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>헤더를 설정하는 부분과 그에 대한 설명은 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-nginx"} -->
<pre id="block-159b624c-30e9-4773-b2ef-13646336d18a" class="wp-block-code language-nginx"><code># HSTS (ngx_http_headers_module is required) (63072000 seconds)
add_header Strict-Transport-Security    "max-age=63072000" always;

# other security settings
add_header X-Frame-Options              SAMEORIGIN;
add_header X-Content-Type-Options       nosniff;
add_header X-XSS-Protection             "1; mode=block";</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>Strict-Transport-Security</code> : HTTPS 강제 연결을 하라고 브라우저에게 알리는 역할입니다. 자세한 내용은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Strict-Transport-Security">Mozila 문서 참조</a>.</li><li><code>X-Frame-Options</code>: 해당 페이지를 외부의 어떤 사이트 내의 <code>iframe</code> 등에서 임베딩할 수 있는지에 대한 여부를 설정합니다. 자세한 내용은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-Frame-Options">Mozila 문서 참조</a>.</li><li><code>X-Content-Type-Options nosniff</code> : 브라우저로 하여금 웹서버가 보내는 MIME 형식 이외의 형식으로 해석을 확장하는 것을 제한하도록 합니다. 그러니까 text/css 형식으로 온 것만 css 로 사용하는 등 제한을 거는 것이죠. 자세한 내용은 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">Mozila 문서 참조</a>.</li><li><code>X-XSS-Protection</code>: 브라우저에게 xss 공격에 대한 대응을 설정할 수 있도록 합니다. 자세한 내용은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-XSS-Protection">Mozila 문서 참조</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>기타</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>resolver</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이걸 이해하는 데 좀 애를 먹었습니다. 그러니까 resolver 라는 것은 해당 context 에서 <strong>네임 서버</strong>를 설정해주는 기능입니다. <a href="https://distinctplace.com/2017/04/19/nginx-resolver-explained/">해당 블로그(영문)</a>에 따르면, 이것이 설정되어 있지 않다면 <code>proxy_pass</code> 등에서 전달되었던 uri 에서 유추된 실제 ip주소가 캐싱되어 계속 남아있어서, uri 가 가리키고 있는 ip 주소가 변경되었다 하더라도 이전에 있었던 ip주소에 계속 연결해준다고 합니다. 우리는 아마 사용할 일이 전혀 없을 것이에요... 왜냐하면 우리가 proxy_pass 로 전달하는 hostname 과 ip 주소 등은 내부적으로 사용되는 거라 절대로 변하지 않을 것이기 때문입니다. 그리고 uri 가 사용되는 다른 경우는 전혀 생각이 나지 않네요.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2312</wp:post_id>
		<wp:post_date><![CDATA[2021-02-17 14:32:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-17 05:32:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-21 22:15:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-21 13:15:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%8b%a4%ec%a0%9c%eb%a1%9c-%ec%82%ac%ec%9a%a9-%ea%b0%80%eb%8a%a5%ed%95%9c-nginx-proxy-server-%eb%a7%8c%eb%93%a4%ea%b8%b0-docker-compose]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%ec%9b%b9%ea%b0%9c%eb%b0%9c"><![CDATA[웹개발]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>11008</wp:comment_id>
			<wp:comment_author><![CDATA[홍철]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cobays@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.118.164.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-08-05 14:00:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-08-05 05:00:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[nginx를 도커로 띄우고 나서, $remote_addr 확인 해보셨나요? 실제 클라이언트의 IP주소가 찍히는지? 항상 docker0 내부네트워크의 ip주소(172.x.x.x)만 찍히네요. Nginx GeoIP 모듈로 체크해서 접속한 ip 확인하여 국가별로 서비스해야 하는데, 이거때문에 실서버로 사용을 못하고 있다는 ~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1659675643.088903;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489186.403014;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Google Workspace 에서 우리 회사의 고객센터 이메일을 만들어 운영하기 + node.js googleapis 활용하여 이메일 발송하기]]></title>
		<link>https://elvanov.com/2324</link>
		<pubDate>Sat, 20 Feb 2021 03:52:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2324</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>들어가기 전에</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자 일단 고객센터 이메일이란 것은 그냥 비유적인 표현일 뿐입니다. 우리의 목표는 Google Workspace 구성원들과 함께 쓸 수 있는 별도의 이메일 계정을 하나 만들어 관리하는 것입니다. 이 메일은 고객센터 이메일 될 수도 있고, 홍보 이메일 발송용이 될 수도 있고 여러가지 비즈니스 목적에 따라 다양해질 수 있겠지요. 여기서의 핵심은 새로운 사용자를 추가하는 것이 아니라 Groups for Business 를 통해 사용자의 구성으로부터 자유로운 별도의 이메일을 만드는 것입니다. 물론 과금도 추가되지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 그 동시에 Node.js 의 googleapis 를 활용해 해당 Groups 이메일로 프로그래밍틱하게 보내는 방법까지 정리해 볼 것입니다. 여기는 api의 영역이고, 참으로 힘듭니다. 기나긴 여정이 될 것임을 먼저 말씀드립니다...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 본 글은 Google Workspace 에 <a href="https://support.google.com/a/answer/54693">도메인을 먼저 연결해놓았다</a>고 가정했습니다. 별도의 도메인이 있지 않으면 이메일을 활용하기가 힘드니까요. 그리고 구글 api 관련 설정이나 Workspace 설정은, 다른 조직 관리 툴과 마찬가지로 굉장히 빠르게 많은 것들이 바뀌므로 글을 쓰는 시점을 명확히 전해드립니다. 2021년 2월입니다! 큰 맥락으로는 크게 바뀌는 점이 없겠지만, 금새(?) 본 방법이 유효해지지 않을 수도 있다는 점을 미리 알려드립니다. 필자 또한 열심히 구글링하여 찾은 정보를 바탕으로 하고 있으므로 확실하지 않은 정보가 있을 수 있고, 한계를 적극적으로 이야기할 것입니다. 그럼에도 불구하고 <strong>잘못된 정보는 댓글로 언제나 제보 환영</strong>입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://support.google.com/a/answer/33327?hl=ko">사용자의 이메일 별칭 (email alias) 을 설정하는 방법</a>도 있으나, 이 별칭은 해당 사용자에게 귀속되므로 해당 이메일을 공유하면서 사용할 수 없습니다. 실제로 해보면 같은 별칭을 여러 명이서 사용할 수 없도록 되어있음을 확인할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글에서는 사용자를 새롭게 만드는 것이 아니므로 메일박스도 새롭게 만들어지는 것이 없습니다. (Groups 는 메일박스 개념이 아닙니다.) 그러므로 api를 통해서 보낸 메일은, 그룹스 이메일로 표시해서 보냈다 하더라도, 해당 api에 연결되어있는 계정의 보낸 메일함에 차곡차곡 쌓이게 됩니다. 이러한 동작을 원하지 않는다면, 새로운 계정을 만들거나 다른 서비스를 찾아 이용하는 수 밖에요... 어떤 서비스가 있는지 잘 모르겠지만... 하하...</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Groups for Business 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 그룹을 만듭시다. 그룹을 만들면서 공용으로 관리할 고객센터 이메일을 지정할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>admin.google.com</code> 에 접속</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 관리자 콘솔에 접속합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>메뉴 - 디렉터리 - 그룹 들어가기</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2329,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기0.png" alt="" class="wp-image-2329"/><figcaption>그룹 들어가는 방법</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>그룹 만들기 - 정보 채워넣기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 상단에 <code>그룹 만들기</code>를 클릭합니다. 그럼 하단의 이미지처럼 창이 뜹니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2330,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기1.png" alt="" class="wp-image-2330"/><figcaption>그룹 정보 채워넣기 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>여기서 그룹 이메일을 설정할 수 있습니다. 고객센터를 운영할 것이라면 <code>support</code> 등으로 이메일을 설정해주도록 합시다. 그룹 소유자는 본 그룹을 관리할 계정으로 진행하면 되겠습니다. 추후 변경할 수 있으므로 크게 신경쓰지 않아도 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>권한 설정하기</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2331,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹만들기2.png" alt="" class="wp-image-2331"/><figcaption>그룹 설정 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>그룹 설정에서 게시물 게시를 외부에서도 허용하도록 수정합니다. 여기서 "<code>게시물을 외부에서 게시할 수 있다</code>"라는 말은, "<code>외부에서 이메일로 해당 그룹스에 메시지를 전달할 수 있다</code>"는 이야기입니다. 그래서 게시물 게시, 그룹 가입, 대화 보기 등등의 외부 권한이 모두 다르게 설정될 수 있지요. (그룹에 가입하지 않고 있더라도 그룹의 이메일만 알고 있다면 그룹에 메시지를 전달할 수 있으니까요.) 일반적인 사이트에서의 게시판/게시물을 생각하지 마세요. 구글의 단어 선택은 종종 우리를 혼란에 빠지도록 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"대화"라는 것도 저의 뇌피셜로는 그냥 그룹스에 올라온 글들을 이야기하는 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 설정에서 "소유자에게 문의"가 어떤 식으로 이루어지는지는 저도 아직 발견하지 못했습니다. 정말 물음표가 많이 필요한 시점이네요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글에서는 Worksapce 구성원이 그룹에 가입되어 있어도 이메일을 수신하지 않는 방법에 대해서는 다루지 않고, 필자도 다뤄본 적이 없습니다. 필요한 기능일 수 있겠지만 이 글의 주제에 좀 벗어난 것 같습니다. 그룹 관리자를 아예 이전하던가, 아니면 아예 Gmail 에서 별도의 메일함으로 관리하도록 하는 게 어떨지 생각만 해봅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>이메일 수신 테스트</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자 그렇다면 이제 그룹스 관련 설정은 끝이 났습니다. 외부 이메일에서 해당 그룹스 이메일로 메일을 한번 보내봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image {"id":2336,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트2.png" alt="" class="wp-image-2336"/><figcaption>그룹스로 날라온 메일</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image {"id":2335,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/이메일리시브테스트1.png" alt="" class="wp-image-2335"/><figcaption>관리자 개인 메일로 날라온 메일</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>메일이 두 군데에서 수신되고 있다는 점을 확인할 수 있습니다. 일단 <a href="https://groups.google.com/">그룹스</a>에서 메시지를 확인할 수 있고 <a href="https://mail.google.com">Gmail</a> 에서도 확인할 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>다른 주소에서 메일 보내기 추가후 이메일 작성</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 해당 메일로 다른 곳으로 메일을 보낼 수 있어야겠지요. 어떻게 하면 될까요~ 불행히도 그룹스 내부에서 어떤 메일이나 메시지를 보내는 방법을 찾지 못했습니다. 그렇다면 남은 방법은 바로 개인 Workspace 계정에서 특정한 방법으로 보내면 됩니다. (왜 그룹스 자체에서 보낼 때 그룹스의 이메일로 보내는 기능은 없을까요? 호호~ 모르겠다.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Gmail 접속 - 오른쪽 위 톱니바퀴(설정) - 모든 설정 보기 - 계정 - 다른 주소에서 메일 보내기 - 다른 이메일 주소 추가</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>https://mail.google.com 에 접속하여 해당 경로대로 들어갑니다. "다른 이메일 주소 추가"를 누르면 새로운 창이 뜨게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>새 이메일 설정</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2341,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더1.png" alt="" class="wp-image-2341"/><figcaption>다른 이메일 주소를 추가하세요 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이름은 보여지는 이름이고, 이메일은 그룹스 이메일을 넣습니다. 별칭은 그냥 체크로 둡니다. (<a href="https://support.google.com/a/answer/1710338">Gmail 별칭 처리 - 원하는 서비스 - 그룹 메일링 리스트에서 보내기 참조</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>확인 메일 보내기</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2342,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더2.png" alt="" class="wp-image-2342"/><figcaption>이메일 주소 확인 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>그냥 하라는 대로 하면 됩니다. 확인 이메일을 보내면 해당 groups 로 메일이 날라갈 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2343,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더3.png" alt="" class="wp-image-2343"/><figcaption>이메일 주소 확인 및 추가 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>날라온 이메일에 적힌 코드를 입력하거나 링크를 클릭하면 끝입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>이메일 작성</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2344,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/어나더4.png" alt="" class="wp-image-2344"/><figcaption>이메일 작성 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이제 이메일을 작성할 때 보낸 사람에서 해당 그룹스 이메일로 작성할 수 있게 되었습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Google Cloud 에서 서비스 계정 설정하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자 이제 서론은 끝났습니다. 이제부터 정말이거든요. 이미지는 귀찮으니까 이제 되도록 말로 설명하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>클라우드 플랫폼 접속 및 새 프로젝트 추가하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 단계는 이미 프로젝트가 만들어져 있는 상태라면 건너뛰어도 좋습니다. 본 단계는 그리 중요하지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 <a href="https://console.cloud.google.com/home/">https://console.cloud.google.com/home/</a> 에 접속합니다. 처음 접속했다면 아래와 같이 약관 동의 페이지가 뜹니다. 서비스 약관을 모두 동의하고 계속합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2347,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/약관동의.png" alt="" class="wp-image-2347"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>상단 메뉴바에서 Google Cloud Platform 우측에 "프로젝트 선택"을 클릭합니다. (프로젝트가 선택되어 있을 경우 프로젝트 명으로 나옵니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 프로젝트 선택 창에서 우측 상단의 <code>새 프로젝트</code>를 누릅니다. 그렇다면 아래와 같이 새로운 프로젝트를 생성하는 창으로 전환될 텐데요,</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2348,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/새-프로젝트.png" alt="" class="wp-image-2348"/><figcaption>새 프로젝트 창</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>프로젝트 이름을 적절히 하고 만듭니다. 조직에서 본인의 Workspace 로 잘 설정되었는지를 확인합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>서비스 계정 만들기 및 설정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 이미지와 같이 <code>메뉴</code> - <code>API 및 서비스</code> - <code>사용자 인증 정보</code>에 진입합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2349,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/api.png" alt="" class="wp-image-2349"/><figcaption>메뉴 - API 및 서비스 - 사용자 인증 정보</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>그 다음 상단에 <code>사용자 인증 정보 만들기</code> - <code>서비스 계정</code>을 선택합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2351,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/서비스-계정-만들기.png" alt="" class="wp-image-2351"/><figcaption>서비스 계정 만들기 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>위와 같은 화면이 뜹니다. 서비스 계정의 이름, ID, 설명을 설정합니다. 여기서의 ID는 아무런 상관이 없습니다! 이메일도 신경쓰지 마세요. 이 api 계정은 우리가 실제로 사용하는 Workspace 계정을 대신해서 이메일을 보내주는 권한 덩어리일 뿐입니다. 그 권한도 추후 설정할 것이니 아무런 설정하지 말고 바로 완료 버튼을 누릅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>만드는 것이 완료되었다면, 서비스 계정을 클릭하여 자세한 설정으로 들어가보도록 합시다. 그렇다면 아래 화면이 뜰 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2352,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/도메인-수준-위임-api-계정-설정.png" alt="" class="wp-image-2352"/><figcaption>서비스 계정 상태 설정</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><code>서비스 계정 상태 설정</code>에서 <code>도메인 수준 위임 표시</code> 를 클릭하여 해당 설정을 보이게 한 뒤, <code>G Suite 도메인 전체 위임 사용 설정</code>을 클릭합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 <code>키 추가</code> - <code>새 키</code>를 누릅니다. 그렇다면 아래 이미지와 같은 창이 뜰 것입니다. <code>JSON</code> - <code>만들기</code>로 갑니다. 키가 성공적으로 만들어졌다면 어떤 json 파일이 다운로드될 것입니다. 잘 가지고 있읍시다. 이것으로 우리가 추후 node.js 에서 이메일을 보낼 때 authentication 에 이용할 파일입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2354,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-131850.png" alt="" class="wp-image-2354"/><figcaption>비공개 키 만들기</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>그 다음 <code>저장</code>을 누릅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇게 된다면 자동으로 OAuth 2.0 클라이언트 ID 에 새로운 것이 생겨났다는 것을 확인할 수 있습니다. 바로 뒤 우리가 Workspace 의 API 관리에서 도메인 위임 설정을 할 때 클라이언트 ID가 필요한데, 바로 이 <strong>클라이언트 ID</strong>이므로 잘 복사해놓고 있읍시다. 아래 이미지에서 푸른색 사각형을 클릭하면 클라이언트 ID를 복사할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2355,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/클라이언트-ID-복사하기1.png" alt="" class="wp-image-2355"/><figcaption>OAuth 2.0 클라이언트 ID 목록</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>여기까지 했다면 <a href="https://console.cloud.google.com/home/">https://console.cloud.google.com/home/</a> 에서 설정할 수 있는 건 다 했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Workspace 에서 API 설정하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>다시 <a href="https://admin.google.com/">https://admin.google.com/</a> 으로 접속합니다. 상단 검색창에서 <code>api 관리</code>를 검색하여 <code>API 관리</code>에 들어갑니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>페이지 최하단에 <code>도메인 전체 위임 관리</code>로 들어갑니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 API 클라이언트를 새로 추가해줍니다. 아래와 같은 새로운 창이 뜰 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2356,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/화면-캡처-2021-02-20-133420.png" alt="" class="wp-image-2356"/><figcaption>새 클라이언트 ID 추가</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>금방 복사했던 클라이언트 ID를 붙여넣어줍니다. <code>OAuth 범위(쉼표로 분리)</code> 에는 아래 내용을 다 집어넣어줍니다. 여기에서는 API 의 권한 범위를 설정할 수 있는데, 어떤 권한이 어떤 역할이 있는지 일일히 찾아나가기가 너무 번거롭기 때문에 일단 전부 다 추가해주도록 합니다. 각 Scope 가 어떤 역할을 하는지에 대해서는 <a href="https://developers.google.com/gmail/api/auth/scopes">공식 문서</a>에 잘 나와있으니 참고해주시면 되겠습니다. 권한은 추후 조정해도 늦지 않아요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>https:&#47;&#47;mail.google.com/,
https://www.googleapis.com/auth/gmail.labels,
https://www.googleapis.com/auth/gmail.send,
https://www.googleapis.com/auth/gmail.readonly,
https://www.googleapis.com/auth/gmail.compose,
https://www.googleapis.com/auth/gmail.insert,
https://www.googleapis.com/auth/gmail.modify,
https://www.googleapis.com/auth/gmail.metadata,
https://www.googleapis.com/auth/gmail.settings.basic,
https://www.googleapis.com/auth/gmail.settings.sharing,</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>설정이 완료되면 <code>승인</code>을 누릅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Node.js 에서 메일 보내기</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>간단한 환경 세팅</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어차피 빠르게 테스트로 진행해볼 거니까 새로운 프로젝트를 파서 진행해보자구요. 원하는 폴더에 들어가 node.js 프로젝트 초기화를 해주고 필요한 패키지를 설치합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>npm init
# 엔터 계속 눌러요
npm install --save googleapis nodemailer</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>googleapis</code> : 구글 API 를 사용하기 위해 필요합니다.</li><li><code>nodemailer</code> : Gmail API 에 데이터를 전달할 때 그 형식은 (불편하게도) MIMEText(<a href="https://www.ietf.org/rfc/rfc2822.txt">RFC 2822</a>) 를 만족하는 base64 인코딩된 문자열입니다. 그 형식을 맞춰주기 위해 nodemailer의 서브 모듈인 MailComposer 를 사용할 계획입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그리고 아까 다운로드 받아놓았던 credentials json 파일을 해당 프로젝트 폴더 안에 넣습니다. 그리고 코딩을 위해 <code>index.js</code> 파일도 만듭니다. 그렇다면 이제 폴더의 구조도는 아래와 같이 되겠지요!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>node_modules
index.js
mailer-credentials.json
package-lock.json
package.json</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>코딩</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>코드 이해는 알아서 하길 빕니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>const path = require("path");
const { google } = require("googleapis");
const MailComposer = require("nodemailer/lib/mail-composer");

const SCOPES = &#91;
  "https://mail.google.com/",
  "https://www.googleapis.com/auth/gmail.labels",
  "https://www.googleapis.com/auth/gmail.send",
  "https://www.googleapis.com/auth/gmail.readonly",
  "https://www.googleapis.com/auth/gmail.compose",
  "https://www.googleapis.com/auth/gmail.insert",
  "https://www.googleapis.com/auth/gmail.modify",
  "https://www.googleapis.com/auth/gmail.metadata",
  "https://www.googleapis.com/auth/gmail.settings.basic",
  "https://www.googleapis.com/auth/gmail.settings.sharing",
];

const ACCOUNT = "관리자 및 api 발급한 계정 이메일";
const SUPPORT_ACCOUNT = "그룹스 이메일";

const sendMail = async () =&gt; {
  try {
    const auth = new google.auth.GoogleAuth({
      keyFile: path.resolve(__dirname, "mailer-credentials.json"),
      scopes: SCOPES,
      clientOptions: {
        subject: ACCOUNT,
      },
    });

    const gmail = google.gmail({
      auth,
      version: "v1",
    });

    const msg = new MailComposer({
      from: {
        name: "보내는사람 이름",
        address: SUPPORT_ACCOUNT,
      },
      to: {
        name: "받는사람이름",
        address: "eszqsc113@naver.com",
      },
      subject: "&#91;테스트 메시지42] 제목입니다.",
      html: "&lt;b&gt;이것은 굵게입2니4다.&lt;/b&gt;&lt;u&gt;&lt;/u&gt;",
    });

    const buf = await msg.compile().build();
    const encoded = buf.toString("base64");

    console.log('# CHECK Encoded');
    console.log(encoded);

    const sendRes = await gmail.users.messages.send({
      userId: ACCOUNT,
      requestBody: {
        raw: encoded,
      },
    });
    console.log('# res data');
    console.dir(sendRes.data);

  } catch (e) {
    console.log("# getMessgaeList Failed");
    console.error(e);
  }
};

sendMail();</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code># CHECK Encoded
Q29udGVu..Xh0L2h0bW..0/VVRGLTg/Q..lCN1ptVTY..WWo0OGRUNDhMM1UrDQo=
# res data
{
  id: '177be05397cfa5c8',
  threadId: '177be05397cfa5c8',
  labelIds: &#91; 'SENT' ]
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드에서 가장 핵심은 바로 GoogleAuth 를 만드는 부분입니다. 저기서 저 <code>clientOptions.subject</code> 까지 써줘야 완벽하게 동작합니다. 저게 없으면 자꾸 Precondition check failed 오류가 발생합니다. 아.. 정말 힘든 여정이었습니다. 저걸 왜 명시해야 하는지는 저도 잘 모릅니다. 겨우겨우 구글링해서 <a href="https://github.com/googleapis/google-api-nodejs-client/issues/2322">github 에 올라온 글</a>을 참조했으나, 여기서는 뜬금없이 <code>JWT</code> 가 쓰였습니다. 해당 코드도 잘 작동했습니다! 오예~ 그걸 살짝 수정해서 아래 코드로 하면 될 것 같았더니, 되었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>    const auth = new google.auth.GoogleAuth({
      keyFile: path.resolve(__dirname, "mailer-credentials.json"),
      scopes: SCOPES,
      clientOptions: {
        subject: ACCOUNT,
      },
    });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>유의해야 할 점은 앞서 설정했던 "다른 주소에서 메일 보내기" 설정이 완료되어 있어야 한다는 것입니다. 이를 확인하는 방법 또한 google apis 로 확인해볼 수 있습니다. 아래 예제를 실행해보세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>    const res = await gmail.users.settings.sendAs.list({
      userId: ACCOUNT,
    })
    console.log(res.data);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>오예~~ 첨부파일은 다음 기회에 ...</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>참조 문서</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Node.js Gmail 관련 api 레퍼런스: <a href="https://googleapis.dev/nodejs/googleapis/latest/gmail/classes/Gmail.html">https://googleapis.dev/nodejs/googleapis/latest/gmail/classes/Gmail.html</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>기타</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Groups for Business - 공유 설정 - "그룹 소유자는 조직 외부에서 보내는 이메일을 수신하도록 허용할 수 있음" 설정의 의미</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2332,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룹소유자외부이메일설정-e1613790349144-1024x533.png" alt="" class="wp-image-2332"/><figcaption>Googld Admin - 앱 - Google Workspace - Groups for Business 설정 - 공유 설정 - "그룹 소유자는 조직 외부에서 보내는 이메일을 수신하도록 허용할 수 있음"</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이해하는 데 애 먹었습니다. 저기 있는 설정은 일단 Groups 내부에서의 권한을 설정한다는 개념입니다. 특히 저 설정은 그러니까 <a href="https://groups.google.com/">https://groups.google.com/</a> 에 들어가서 좌측 <code>그룹 설정</code> - <code>기본 설정</code> - <code>게시할 수 있는 사용자</code>를 설정할 때 <code>웹의 모든 사용자</code>가 보일지 말지를 설정하는 개념입니다. <s>설정을 설정한다</s>! 정말 머리아프네요. 그러니까 위 그림에서 <code>그룹 소유자는 조직 외부에서 보내는 이메일을 수신하도록 허용할 수 있음</code>을 체크한다면 아래 우측 이미지처럼 보이고, 체크를 풀면 아래 좌측 이미지처럼 보입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image {"id":2340,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/hoho.png" alt="" class="wp-image-2340"/><figcaption>체크하지 않았을 때</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:image {"id":2339,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/그룸설정-기본설정-게시할-수-있는-사용자2.png" alt="" class="wp-image-2339"/><figcaption>체크했을 때</figcaption></figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>하지만 우리는 그룹스를 만드는 시점에서 이미 모든 사용자가 게시할 수 있도록 설정해놨고, 그런 설정도 Google Workspace 관리 콘솔에서 계속 관리할 수 있기 때문에 이 설정을 어떻게 해놨든 아무런 상관이 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>구글 이노무자식들.. 너무 뭔가 하고 싶은 걸 하기 불편하게 해놓았습니다. 자신이 얼마나 세세한 설정을 건드릴 수 있는지는 별로 궁금하지 않고, 그냥 내가 원하는 목표를 쉽고 빠르게 하기를 원하지만.. 그러기는 힘들 것 같네요. 저 처럼 구글 api 로 이리저리 해볼려는 사람은 많이 없나봅니다. google api 관련해서는 아무리 자료를 찾아도 참 마음에 드는 자료가 잘 나오지 않는다는 기분이 드네요.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2324</wp:post_id>
		<wp:post_date><![CDATA[2021-02-20 12:52:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-20 03:52:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-20 15:51:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-20 06:51:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-workspace-%ec%97%90%ec%84%9c-%ec%9a%b0%eb%a6%ac-%ed%9a%8c%ec%82%ac%ec%9d%98-%ea%b3%a0%ea%b0%9d%ec%84%bc%ed%84%b0-%ec%9d%b4%eb%a9%94%ec%9d%bc%ec%9d%84-%eb%a7%8c%eb%93%a4%ec%96%b4-%ec%9a%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_49f543fee64a544cfa6bcb23cd4ce5a4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8b21d417bf09fad3ed2abaa53c730ad0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5f6ca657dc8371396efb321a07c12d7b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1dbc18de7693b29256da45c6a1adac8a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_55a0e633a62b6b63a90e4ce9ace152d4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0cf7cdca269602057feb9b9c8b1d6624]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_564cc6a0cb89cdc94b52c561df9b555e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_aa2ba3048e0501fb8e5ce1bed99948a9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_12f58aa9b2e7db9694d86add0cb1f09f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4a40245c6dca2117ee30251dc2550ebb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_000bc59e8d2f4fc7affd4bd37a516b1b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0bec6796e7a04a66d0d0f88460ddecfb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a2df870751e9992cb839a13671882023]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9f928982cab9574fee1ccf6256d8f807]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a1dcb23b60c190b2184a8689be817254]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e696bbe1a057642f912db0c56bbc6799]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>12399</wp:comment_id>
			<wp:comment_author><![CDATA[kk]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kkk@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://kkk</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.74.145.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-12-01 11:15:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-12-01 02:15:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1669860926.298792;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[나의 POP!_OS 설치기 (+ 세팅)]]></title>
		<link>https://elvanov.com/2370</link>
		<pubDate>Sat, 27 Feb 2021 11:10:00 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2370</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>윈도우에서 wsl 로 리눅스 환경을 테스트 하다가 못해먹겠어서 그냥 스스디 하나 더 사고 리눅스를 깔았다. <a href="https://pop.system76.com/">POP!_OS</a> 란 System76 이라는 컴퓨터 만드는 회사에서 배포하고 있는 리눅스 운영체제이다. 우분투 베이스<s>일 것</s>이다. 그러므로 검색할 때 잘 모르겠으면 그냥 ubuntu 를 붙이면서 검색하면 됨. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어떻게 해서 POP!_OS 를 설치하게 되었는지에 대한 스토리가 있다. 처음엔 그래픽카드 때문에 리눅스에서 드라이버가 잘 뻑난다고 들었다. NVIDIA 가 뭔가 소스를 공개하지 않는다고 한다. 뭐 그게 나의 문제는 아니겠지 싶었는데 우분투를 설치하는데 엄청난 에러가 발생하여 결국 설치하지 못했다. 아마 그래픽카드 드라이버 문제가 맞았던 것 같다. 그래서 지인 추천을 받아 POP!_OS 를 설치하게 되었다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>새롭게 주문한 SSD 를 받은 시점에, USB 메모리가 당장 있었던 게 아니라서 여러 방법을 궁리했다. 본래 있던 디스크에서 어떻게 잘 파티션을 나눠서 Pop!_OS를 설치할 수 있지 않을까 싶었지만, 이래저래 복잡하여 포기했다. (이제 복잡한 거는 잘 포기하게 됨) 그래서 설치할 때 usb 가 필요하다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>컴퓨터 사양</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>노트북 모델명: GP63 Leopard 8RE (2018년 제조)</li><li>CPU: Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz</li><li>저장공간: Samsung SSD 970 EVO 1TB 하나, 250GB 하나 총 2개</li><li>메모리: DDR4 16GB</li><li>그래픽카드: GeForce® GTX 1060 with 6GB GDDR5</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>설치</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>하라는 대로 하면 됨.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>한글 입력</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>뭐니뭐니해도 리눅스는 한글 입력이 가장 말썽이다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Nimf</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기본 입력기가 아주 꾸지다고들 많이 이야기를 하시더라. 그래서 외부 프로그램을 열심히 잘 써보자. <a href="https://github.com/hamonikr/nimf">Nimf</a> 는 가볍고 빠르다는 것을 특징으로 내세우고 있다. 설치를 하려면 해당 링크로 들어가서 Ubuntu 방법을 따라하면 된다. 아래는 그 내용을 그대로 갖고 온 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code># nimf 패키지 저장소가 변경되었습니다. 예전에 사용하던 하모니카 APT 설정이 있는 경우 삭제합니다. 
sudo rm -f /etc/apt/sources.list.d/hamonikr.list

curl -sL https://pkg.hamonikr.org/add-hamonikr.apt | sudo -E bash -

sudo apt install nimf nimf-libhangul

# 만약 일본어, 중국어 등 다른언어를 사용하고 싶은경우에는 다음과 같이 추가 패키지를 설치해줍니다.
# Install additional packages as follows if you want to use other languages(Japanese, Chinese, etc.)
# sudo apt install libnimf1 nimf nimf-anthy nimf-dev nimf-libhangul nimf-m17n nimf-rime

im-config -n nimf</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>한영 키 확실하게 하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://linuxstory1.tistory.com/entry/%EB%85%B8%ED%8A%B8%EB%B6%81%EC%97%90%EC%84%9C-%ED%95%9C%EC%98%81%ED%82%A4%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%84%EC%8B%9C-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95">남윤민 님의 [Linux 세상속으로] 블로그에서 노트북에서 한영키가 동작하지 않을시 해결방법</a> 이라는 글을 참조했다. 본 글은 오른쪽 Alt 기능을 해제하고 온전한 Hangul 키의 역할을 넣는 기능이다. 만약 이걸 하지 않으면 vscode 등의 앱에서 한영키를 누르면 알트로 동작하여 포커스가 메뉴로 날라가버린다. 또한 다른 프로그램에도 자잘한 문제가 발생해서, 아예 alt 기능을 없애버리는 게 좋다. 아래 내용은 위 글에서 그대로 가지고 온 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다음 파일을 수정해보자.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>sudo vim /usr/share/X11/xkb/symbols/altwin</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래와 같이 <code>Alt_R, Meta_R</code> 부분을 찾아서 삭제하고 <code>Hangul</code> 을 추가해준다. vim 쓰는 법은 다들 아시죠?! <code>i</code> 로 편집 모드로 가서 편집한 다음 <code>Esc</code>,  <code>:wq</code> 엔터하여 저장 후 종료하도록 하자. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Meta is mapped to second level of Alt.
partial modifier_keys
xkb_symbols "meta_alt" {
    key &lt;LALT&gt; { &#91; Alt_L, Meta_L ] };
    key &lt;RALT&gt; { type&#91;Group1] = "TWO_LEVEL",
                 <strong>symbols&#91;Group1] = &#91; Hangul ] }; // 추가</strong>
<s>//               symbols&#91;Group1] = &#91; Alt_R, Meta_R ] };</s> // 삭제
    modifier_map Mod1 { Alt_L, Alt_R, Meta_L, Meta_R };
//  modifier_map Mod4 {};
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>저장하고 나간다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 초기화를 위해 아래와 같이 특정 폴더를 삭제하고 재부팅한다.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo rm /var/lib/xkb/*
sudo reboot</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Nimf 설정</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>한영 키를 확실히 했다면 Nimf 설정을 좀 만져주자. 구체적인 설정은 어떻게 맞췄는지 기억이 안나서 스샷 첨부로 대체한다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2379,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/1.png" alt="" class="wp-image-2379"/><figcaption>NImf 설정의 Nimf 탭</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2380,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/02/2.png" alt="" class="wp-image-2380"/><figcaption>Nimf 설정의 Korean (libhangul) 탭</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>XKB Options, System Keyboard 등의 다른 탭의 설정은 하나도 건드리지 않았다. 키보드를 설정하는 부분들에서 Alt 혹은 Meta가 보이지 않도록 설정하라.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Firefox 사용 지양</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>파이어폭스에서 제대로 동작하지 않는 문제가 발견되었는데, 구글 스프레드시트에서 한글 입력 도중에 Tab 을 눌러도 다음 셀로 이동을 하지 않는 것이었다! 그런 문제점이 많았다. 크롬이 뭐 리눅스에서는 메모리 먹는 괴물은 아니라고 하니까 크롬을 쓰자.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>GNOME 커스터마이징 (feat. tweaks)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Gnome Tweaks 에서 뭘 할 수 있을까?</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>정적 Workspace 구성 (<code>Workspaces</code> - <code>Static Workspaces</code>)</li><li>프로그램(앱)별 고정 Workspace 자리 지정 (<code>Extensions</code> - <code>Auto move windows</code> 설정 - 프로그램 선택 후 Workspace 숫자 지정 (위에서부터 1, 2, 3..))</li><li>윈도우의 제목 부분 없애기 (화면이 더 넓어지는 효과) (<code>Extentions</code> - <code>Pop Shell</code> 설정 - <code>Show Windows Titles</code> 해제)</li><li>각종 글꼴 바꾸기 (<code>Fonts</code>)</li><li>기타 등등</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo apt install gnome-tweaks gnome-shell-extentions</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하고 싶은 대로 하거라!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>유용한 프로그램</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>Disk Usage Analyzer (baobab)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>각종 폴더의 사용량을 시각적으로 잘 보여주는 프로그램. 설치되어 있지 않다면 아래 링크로 들어가서 확인하자.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://zoomadmin.com/HowToInstall/UbuntuPackage/baobab" target="_blank" rel="noreferrer noopener">https://zoomadmin.com/HowToInstall/UbuntuPackage/baobab</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>남은 과제</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>POP!_OS 와 윈도우 간 손쉬운 전환 (지금은 완전히 컴퓨터를 재시작해야 하는데, 이걸 어떻게 할 수 있는 방법이 없을지 궁금하다.)</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2370</wp:post_id>
		<wp:post_date><![CDATA[2021-02-27 20:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-27 11:10:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-07 22:31:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-07 13:31:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%82%98%ec%9d%98-pop_os-%ec%84%a4%ec%b9%98%ea%b8%b0-%ec%84%b8%ed%8c%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>9332</wp:comment_id>
			<wp:comment_author><![CDATA[정동섭]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kirino1103@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[175.125.18.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-04-13 19:30:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-04-13 10:30:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[덕분에 한글 설치했습니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1649845803.649944;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663504176.747052;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[[리뷰] 귀멸의 칼날 애니메이션 + 극장판 후기]]></title>
		<link>https://elvanov.com/2372</link>
		<pubDate>Fri, 26 Feb 2021 14:16:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2372</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>참고로 이 글은 이미지가 없다. 스포일러를 원하지 않으시는 분들은 뒤로가기를 권장합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이전부터 계속 보고 싶었던 작품이었다. 만화로는 완결까지 진작에 다 보았지만, 한 번에 몰아서 보면 뒤에 기억이 날 안난다는 단점이 있어서, 세부적인 스토리는 까먹은 채로 애니메이션을 보기 시작했다. 본인은 극장판을 먼저 보고 난 후 애니메이션을 보았다. 처음에 극장판은 하나의 스토리로 완전하게 이루어져 있는 줄 알았는데, 보고나니 아니었다. 주인공이 어떻게 귀살대에 들어가게 되었는지, 왜 네즈코를 들고 다니는지, 주인공의 동료들과 처음에 어떻게 만나게 되었는지는 극장판 안에서 전혀 소개되지 않았다. 그 이후에 애니메이션도 볼까 하여 넷플릭스에서 시즌 1(이하 TVA) 분량(2쿨)을 몰아서 본 뒤, 아, 극장판이 TVA 바로 뒤의 스토리였구나 하고 깨닫게 되었다. 귀멸의 칼날을 하나도 접하지 않았던 친구와 극장판을 같이 보았는데, 무한열차 편의 진 주인공은 쿄주로라서 그런 건지는 모르겠지만 스토리 적으로 그렇게 많이 거슬리는 건 없었다고 했다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>귀멸의 칼날. 전개가 시원시원하다. 구체적으로 다른 작품과 비교하면서 특징을 분석해보고자 하는 것은 아니지만 그래도 대략적으로 정리해보자. 우선 시원시원하고 정석적인 전개가 있다. 스토리가 크게 복잡하지 않다. 탄지로의 선한 성격도 가슴으로 이해되고, 탄지로가 왜 귀살대에 들어갔는지도 참 명확하다. 다른 캐릭터들도 명확하다. 탄지로가 첫 번째 임무에서 어떤 것을 새롭게 배울 수 있었는지도 명확하다. 소년 만화의 특징상 주인공에게 오는 적들이 점점 강해지면서, 그에 맞춰 주인공도 점점 강해져야 하는데, 그 근거가 명확해지지 않는다면 지루한 전개가 반복된다는 평가를 받을 수 있는데, 귀멸의 칼날은 그렇지 않다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 무엇보다 주인공이 암걸리지 않는다. 굉장히 합리적인 선택을 잘 하고 머리도 빠릿빠릿하게 잘 돌아가고 착하고 그냥 좋다. 크게 고집부리는 것도 많이 없고. 뭐 연출적으로 암걸리는 장면을 배제하는 것일 수도 있지만,  정말정말 좋다. 그냥 암걸리는 전개가 별로 없어서 좋다. 답답하지가 않고 뻥 뚤리는 아주 상쾌한 기분! 죽을 사람은 죽는 것도 좋다! 좀 슬프긴 하지만 극적이면 좋다! 단순해서 좋다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아쉬운 점이라면 그냥 몇 가지를 들 수 있을 것 같다. 우선 무잔의 매력이다. 무잔은 정말로 태양을 극복하기 위한 일념 하나로 똘똘 뭉쳐있는 쓰레기이고 찌질한 놈이다. 그것까지는 좋은데, 전술을 잘 못짜는 것 같다. 무잔 혹은 상현 오니들의 강함에 탄지로 일행을 비롯한 귀살대가 엄청난 압력을 받는 경우는 있어도, 적들이 전술적으로 잘 싸우거나 아군의 약점을 잘 찔러서 한방 먹는 경우가 없었던 느낌이다. 아니면 탄지로가 문제였던가? 인간의 어떤 약점이 드러났을 때 그것을 우리의 탄지로는 잘 극복하겠지 라는 믿음이 너무 강해서 긴장감이 다소 떨어졌던 느낌도 없잖아 있다. 현존하는 귀살대원중 한두 명 정도가 오니화가 되어서 대립하게 되는 스토리도 기대해볼만했지만, 그런 스토리는 나오지 않았다. 근데 뭐 그런 길을 밟은 오니가 없지는 않으니까 상관없을 수도 있겠다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>설정은 오밀조밀하고 세심하게 짜여져 있는 건 아니지만, 설정끼리 충돌하는 일도 그렇게 많지 않다. 예를 들어 무한열차 편에서는 탄지로 일행의 꿈 안에 아이들이 침투하여 마음의 핵을 파괴하고자 하는데, 이 마음의 핵이라든지 꿈과 무의식의 경계와 같은 설정은 추후 등장하지 않는다. (내 기억으론.) 그리고 탄지로는 종종 상대방의 감정이나 전체적인 분위기에 대한 냄새를 맡곤 하는데, 그렇게나 뛰어난 후각에 대한 자세한 근거나 묘사는 없다. 그냥 태생적으로 후각이 좋다 정도. 이런 설정들은 스토리 전개에 크게 영향을 주는 것들은 아니니까 가볍게 넘어갈 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>극장판의 내용은 앞서 이야기했듯, TVA을 전부 보고 극장판을 봐야 스토리를 온전히 이해할 수 있지만, TVA을 보지 않았다 하더라도 전개를 이해하는 데 큰 무리가 있는 건 아니다. 각 캐릭터들의 꿈을 보여주면서 이 캐릭터들이 어떤 정신상태를 가지고 있는지를 확인할 수도 있고, 어차피 무한열차 편의 주인공은 쿄쥬로니까... 그럼에도 불구하고 극장판의 완성도가 좀 떨어지는 게 아닌가 하는 생각이 들었다. 왜냐하면 TVA는 말 그대로 TV에서 방영되는 거고 극장판은 극장에서 방영되는 건데, 액션신이나 작화의 퀄리티가 극적으로 높아졌다고는 보기 힘들었다. TVA와 비슷한 느낌이었다. 극장판이라길래 원피스 TVA와 원피스 극장판의 간극을 상상했는데, 그건 아니었다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2372</wp:post_id>
		<wp:post_date><![CDATA[2021-02-26 23:16:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-26 14:16:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-02-27 11:28:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-02-27 02:28:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%a6%ac%eb%b7%b0-%ea%b7%80%eb%a9%b8%ec%9d%98-%ec%b9%bc%eb%82%a0-%ec%95%a0%eb%8b%88%eb%a9%94%ec%9d%b4%ec%85%98-%ea%b7%b9%ec%9e%a5%ed%8c%90-%ed%9b%84%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] pug + inline-css로 이메일 템플릿 만들어 보내기 (작성중)]]></title>
		<link>https://elvanov.com/2382</link>
		<pubDate>Sun, 28 Feb 2021 14:20:28 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2382</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>pug 란 html 을 좀 더 쉽게 생성하게 해주는 도구입니다. pug 는 자신만의 문법이 있으며, 이는 기존에 태그를 열고 닫는 html 보다 편한 건지는 사람마다 다르겠지만, 문서의 같은 양으로 보자면 실제로 타이핑하는 것들이 훨씬 적어지는 것도 사실입니다. 그리고 pug에는 상속 기능, mixin, interpolation, 변수 기능 등을 제공해주기 때문에 좀 더 원활하게 상황에 맞는 html 파일을 생성해내기 쉽습니다. 서버에서 렌더링하여 클라이언트로 내보내는 정적 웹서비스에서도 사용될 수 있지만 역시나 프론트엔드에는 짱짱한 react, vue 와 같은 프레임워크가 건재하기 때문에 요새는 많이 쓰이지는 않는 것 같습니다. 필자는 사용자에게 보낼 이메일을 html 로 생성해내기 위해서 pug 를 활용하고자 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>inline-css 는 그냥 간단한 라이브러리입니다. 주어진 html 파일의 내용을 가지고 오로지 모든 style 태그 혹은 다른 css 파일에 있는 스타일들을 모조리 인라인 스타일로 변환해주는 기능입니다. 이런 기능이 왜 필요하냐면, 이메일 클라이언트들은 그 종류가 굉장히 많기도 하고 낡은 기술을 사용하는 경우가 많습니다. 그래서 지원하지 않는 태그나 기술들이 클라이언트 모두 제각각이므로 그나마 최대한 많은 메일 클라이언트들에게 html 문서가 잘 지원되게 하는 방법 중 하나가 모든 스타일을 인라인화 하는 것입니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2382</wp:post_id>
		<wp:post_date><![CDATA[2021-02-28 23:20:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-02-28 14:20:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-12 10:03:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-12 01:03:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-pug-inline-css%eb%a1%9c-%ec%9d%b4%eb%a9%94%ec%9d%bc-%ed%85%9c%ed%94%8c%eb%a6%bf-%eb%a7%8c%eb%93%a4%ec%96%b4-%eb%b3%b4%eb%82%b4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[vscode] 정규표현식으로 변수의 case 를 변환해보기 (lookahead, lookbehind 활용)]]></title>
		<link>https://elvanov.com/2384</link>
		<pubDate>Sun, 07 Mar 2021 14:12:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2384</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리의 목표는 아래 코드에서 모든 #define 한 녀석들을 Upper Case Snake Case 로 변환해보는 작업을 할 것입니다. 일일히 손으로 타이핑하여 수정하기에는 너무 오랜 시간이 걸리지요? 그래서 정규표현식을 이용하여 깔쌈하게 바꿔 볼 예정입니다. 바로 아래 나오는 소스코드를 바꿔볼 텐데요, 예를 들어 <code>NoEventMask</code> 라는 문자를 <code>NO_EVENT_MASK</code> 로 바꿔볼 것입니다. case를 변환시키는 작업은 vscode 의 기능을 활용하기 때문에 정규표현식의 치환 기능을 사용하지는 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code># define NoEventMask				(0L)
# define KeyPressMask				(1L&lt;&lt;0)
# define KeyReleaseMask				(1L&lt;&lt;1)
# define ButtonPressMask			(1L&lt;&lt;2)  
# define ButtonReleaseMask			(1L&lt;&lt;3)  
# define EnterWindowMask			(1L&lt;&lt;4)  
# define LeaveWindowMask			(1L&lt;&lt;5)  
# define PointerMotionMask			(1L&lt;&lt;6)  
# define PointerMotionHintMask		(1L&lt;&lt;7)  
# define Button1MotionMask			(1L&lt;&lt;8)  
# define Button2MotionMask			(1L&lt;&lt;9)  
# define Button3MotionMask			(1L&lt;&lt;10) 
# define Button4MotionMask			(1L&lt;&lt;11) 
# define Button5MotionMask			(1L&lt;&lt;12) 
# define ButtonMotionMask			(1L&lt;&lt;13) 
# define KeymapStateMask			(1L&lt;&lt;14)
# define ExposureMask				(1L&lt;&lt;15) 
# define VisibilityChangeMask		(1L&lt;&lt;16) 
# define StructureNotifyMask		(1L&lt;&lt;17) 
# define ResizeRedirectMask			(1L&lt;&lt;18) 
# define SubstructureNotifyMask		(1L&lt;&lt;19) 
# define SubstructureRedirectMask	(1L&lt;&lt;20) 
# define FocusChangeMask			(1L&lt;&lt;21) 
# define PropertyChangeMask			(1L&lt;&lt;22) 
# define ColormapChangeMask			(1L&lt;&lt;23) 
# define OwnerGrabButtonMask		(1L&lt;&lt;24) </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 텍스트들을 아래로 바꿔보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code># define NO_EVENT_MASK				(0L)
# define KEY_PRESS_MASK				(1L&lt;&lt;0)
# define KEY_RELEASE_MASK				(1L&lt;&lt;1)
# define BUTTON_PRESS_MASK			(1L&lt;&lt;2)  
# define BUTTON_RELEASE_MASK			(1L&lt;&lt;3)  
# define ENTER_WINDOW_MASK			(1L&lt;&lt;4)  
# define LEAVE_WINDOW_MASK			(1L&lt;&lt;5)  
# define POINTER_MOTION_MASK			(1L&lt;&lt;6)  
# define POINTER_MOTION_HINT_MASK		(1L&lt;&lt;7)  
# define BUTTON1_MOTION_MASK			(1L&lt;&lt;8)  
# define BUTTON2_MOTION_MASK			(1L&lt;&lt;9)  
# define BUTTON3_MOTION_MASK			(1L&lt;&lt;10) 
# define BUTTON4_MOTION_MASK			(1L&lt;&lt;11) 
# define BUTTON5_MOTION_MASK			(1L&lt;&lt;12) 
# define BUTTON_MOTION_MASK			(1L&lt;&lt;13) 
# define KEYMAP_STATE_MASK			(1L&lt;&lt;14)
# define EXPOSURE_MASK				(1L&lt;&lt;15) 
# define VISIBILITY_CHANGE_MASK		(1L&lt;&lt;16) 
# define STRUCTURE_NOTIFY_MASK		(1L&lt;&lt;17) 
# define RESIZE_REDIRECT_MASK			(1L&lt;&lt;18) 
# define SUBSTRUCTURE_NOTIFY_MASK		(1L&lt;&lt;19) 
# define SUBSTRUCTURE_REDIRECT_MASK	(1L&lt;&lt;20) 
# define FOCUS_CHANGE_MASK			(1L&lt;&lt;21) 
# define PROPERTY_CHANGE_MASK			(1L&lt;&lt;22) 
# define COLORMAP_CHANGE_MASK			(1L&lt;&lt;23) 
# define OWNER_GRAB_BUTTON_MASK		(1L&lt;&lt;24) </code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>케이스 종류</h3>
<!-- /wp:heading -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>Case Type</th><th>Example</th></tr></thead><tbody><tr><td>Original Variable as String</td><td><code>some awesome var</code></td></tr><tr><td>Camel Case</td><td><code>someAwesomeVar</code></td></tr><tr><td>Snake Case</td><td><code>some_awesome_var</code></td></tr><tr><td>Kebab Case</td><td><code>some-awesome-var</code></td></tr><tr><td>Pascal Case</td><td><code>SomeAwesomeVar</code></td></tr><tr><td>Upper Case Snake Case</td><td><code>SOME_AWESOME_VAR</code></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>실제로 해보기 </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>정규표현식의 lookbehind 기능을 사용하므로, 이게 뭔지 모르겠다면, <a href="https://elvanov.com/2388">다음 글</a>을 참조해주세요. 이 기능을 활용하여 1차적으로 문자열을 검사할 것입니다. 키보드 단축키는 리눅스 Visual Studio Code 기준이므로 알맞는 단축키를 사용하시기 바랍니다. 우선 <code>Ctrl + F</code> 로 조그만 검색 창을 활성화시킵니다. 그 다음 Alt + C 로 Case Sensitive 하게 만들어주고, Alt + R 로 정규식 기능을 켜 줍니다. 단축키를 모르겠다면 마우스로 클릭하여 설정해도 됩니다. 그렇게 되면 아래 이미지처럼 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2404,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-07-22-38-18.png" alt="" class="wp-image-2404"/><figcaption>Match Case, Using Regular Expressions 가 활성화된 모습.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:list {"ordered":true} -->
<ol><li>자 이제 여기서 <code># define</code> 뒤에 있는 영단어를 선택해봅시다.<br><code>(?&lt;=# define )\w+</code></li><li>이제 Command Palette (<code>Ctrl + Shift + P</code>)를 열어서 <code>Select All Occurrences of Find Match (Ctrl + Shift + L)</code> 를 실행합니다.</li><li>그럼 이제 검색된 문자열들이 모두 선택되었을 것입니다.</li><li>이제 다시 Command Palette 를 열어서 Transform to Snake Case 를 먼저 실행하고,</li><li>그 다음 Transform to Upper Case 를 실행합니다. 그럼 짜잔~ 완성되었씁니다.</li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":2423,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/Peek-2021-03-07-22-56.gif" alt="" class="wp-image-2423"/><figcaption>바꾸는 과정</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>정말 간단하쥬?</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2384</wp:post_id>
		<wp:post_date><![CDATA[2021-03-07 23:12:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-07 14:12:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-13 13:12:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-13 04:12:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vscode-%ec%a0%95%ea%b7%9c%ed%91%9c%ed%98%84%ec%8b%9d%ec%9c%bc%eb%a1%9c-%ec%9d%b4%ec%9a%a9%ed%95%b4-%eb%b3%80%ec%88%98%ec%9d%98-case-%eb%a5%bc-%eb%b3%80%ed%99%98%ed%95%b4%eb%b3%b4%ea%b8%b0-lookahead]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="vscode"><![CDATA[vscode]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[정규표현식 Lookahead, Lookbehind 기능 이해하기]]></title>
		<link>https://elvanov.com/2388</link>
		<pubDate>Mon, 01 Mar 2021 04:43:37 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2388</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lookahead, Lookbehind 기능은 다소 고급 문법에 속합니다. 자 일단 선 요약하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>패턴</th><th>타입</th><th>matches</th></tr></thead><tbody><tr><td><code>X(?=Y)</code></td><td>Positive lookahead</td><td><code>X</code>&nbsp;if followed by&nbsp;<code>Y</code></td></tr><tr><td><code>X(?!Y)</code></td><td>Negative lookahead</td><td><code>X</code>&nbsp;if not followed by&nbsp;<code>Y</code></td></tr><tr><td><code>(?&lt;=Y)X</code></td><td>Positive lookbehind</td><td><code>X</code>&nbsp;if after&nbsp;<code>Y</code></td></tr><tr><td><code>(?&lt;!Y)X</code></td><td>Negative lookbehind</td><td><code>X</code>&nbsp;if not after&nbsp;<code>Y</code></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>이러한 기능을 모아서 <strong>Lookaround</strong> 라고 합니다. 본 기능이 동작하는 방식은, 이해하기 쉽게 설명을 하자면, 본래 패턴에 맞는 곳을 우선 찾고, 그 다음 추가적으로 해당 Lookaround 의 조건이 맞는지 아닌지를 체크합니다. 그 다음 Positive 이냐, Negative 이냐에 따라서 결과를 포함시키거나 제외시킵니다. Positive 는 조건 Y 가 만족한다면 매칭 결과에 그대로 포함시킨다는 것입니다. 즉 조건 Y가 충족하지 않는다면 매칭 결과에 포함이 되지 않겠죠. Negative 는 조건 Y 가 만족한다면 매칭 결과에서 제외시킵니다. 즉 조건 Y가 충족하지 않는다면 매칭 결과에 포함이 될 것입니다. Positive 와 Negative 는 정 반대로 동작합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lookahead와 Lookbehind 의 차이점은 간단합니다. Lookahead 는 꼬리말(suffix)을 확인하는 용도이고, Lookbehind는 머리말(prefix)를 확인하는 용도입니다. 말이 약간 거꾸로 되어 있지요? 실제 문법 상으로는 <code>&lt;</code>가 포함되어 있냐 그렇지 않냐로 구분할 수 있습니다. <code>&lt;</code> 방향이 왼쪽이니까 앞쪽이라고 기억하고 있으면 될 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일반적으로는 간단히 결과를 제외시키고 싶을 때 Negative Lookaround 로 하여 많이 사용합니다. (<a href="https://stackoverflow.com/questions/1240275/how-to-negate-specific-word-in-regex">참고, 스택 오버플로우</a>) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>한 가지 특징으로는, Lookaround 기능은 그 결과가 <strong>소모되지 않습니다.</strong> 즉 조건이 겹칠 필요가 있을 때 유용하게 사용될 수 있다는 것입니다. 이는 예제를 보면서 한번 같이 확인해보도록 합시다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>결과가 소모되지 않는 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 두 개의 이미지 결과 차이로 확인할 수 있습니다. 첫번째 예제는 <code>(?&lt;=마마마)</code> 를 <code>A</code> 로 바꾸는 예제입니다. 여기서 놀라운 점은 결과로 아무것도 잡히지 않는다는 것입니다. 결과로는 오로지 해당 위치를 가리키는 정보만 있을 뿐이지 (마마마가 연속해서 등장하는 바로 뒤자리) 실제로 찾는 값은 없습니다. 없는 걸 치환하니까, 결국엔 새롭게 <code>A</code>가 생깁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2389,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.52.24-1024x811.png" alt="" class="wp-image-2389"/><figcaption>조건은 결과에 포함되지 않으므로 모든 위치에 대해 "마마마"를 검사함.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>반면 <code>마마마</code>를 통째로 찾고 <code>마마마A</code>로 바꾼다면 우선 <code>마마마</code>가 소모됩니다. <code>마마마</code>가 사라지고 대신에 <code>마마마A</code>가 등장하니까, 이미 결과에 포함된 <code>마</code>는 찾지 못합니다. 아래 이미지를 참고해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2390,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/스크린샷-2021-03-01-오후-12.53.25-1024x964.png" alt="" class="wp-image-2390"/><figcaption>3개에 하나씩 차례대로 소모되는 예제</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>숫자를 comma 로 포맷팅하는 예제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>조금 더 복잡한 예제를 확인해봅시다. 만약 큰 숫자를 콤마로 포맷팅하고 싶다고 가정합시다. 예를 들어 <code>1234567</code>을 <code>1,234,567</code>로 만들고 싶습니다. 아이디어를 말로 설명하면 간단합니다. 각각의 숫자에 대해 그 위치가 끝에서 3n+1 에 위치하는 숫자를 뽑아내어 그 숫자 뒤에 <code>,</code>를 붙이는 것이죠. 즉 <code>1</code>과 <code>4</code> 를 뽑아내면 됩니다! 그럴려면 아래와 같이 하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-regex"} -->
<pre class="wp-block-code language-regex"><code>(\d)(?=(\d{3})+(?!\d))</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>무슨 뜻인지 봅시다. <code>\d</code>는 숫자를 의미합니다. <code>[0-9]</code>와 의미가 똑같습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>우선 <code>(\d)</code> 로 숫자 하나를 잡습니다. 우선 모든 숫자에 대응이 됩니다.</li><li>이제 조건을 봅시다. 바로 뒤에 따라오는 커다란 <code>(?= </code>묶음이 보이시죠? 저거는 Positive lookahead 에 의미하고, 추후 결과에서 제외됩니다. </li><li><code>(\d{3})+</code> 는 숫자 3개 묶음이 1개 이상 나와야 한다는 의미입니다. 이제 <code>1234</code> 가 결과에 포함이 되었습니다. </li><li>뒤에서 딱 나누어 떨어지는지를 체크하기 위해 <code>(?!\d)</code> 로 가장 뒤에 숫자가 없는 경우에만 결과에 포함되도록 제한했습니다. 이제 <code>1</code>, <code>4</code> 가 결과에 포함되었습니다.</li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":2397,"width":428,"height":446,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-03-09-06-41.png" alt="" class="wp-image-2397" width="428" height="446"/><figcaption>숫자에 콤마를 삽입하는 예제</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>가장 위의 <code>(\d)(?=(\d{3})+(?!\d))</code> 가 정규식이고, 우리가 테스트하고자 하는 텍스트는 <code>1234567</code>이며, 이 텍스트에 대해서 <code>$1,</code> 로 치환하겠다는 뜻입니다. <code>$1</code>이란 첫 번째 그룹을 의미하므로 위 정규식에서 <code>(/d)</code>에 해당합니다. 그렇게 되면 결과가 <code>1,234,567</code>이 되었다는 것을 확인할 수 있습니다. 어떤가요?!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2388</wp:post_id>
		<wp:post_date><![CDATA[2021-03-01 13:43:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-01 04:43:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-07 22:34:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-07 13:34:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%a0%95%ea%b7%9c%ed%91%9c%ed%98%84%ec%8b%9d-lookahead-lookbehind-%ea%b8%b0%eb%8a%a5-%ec%9d%b4%ed%95%b4%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%ec%a0%95%ea%b7%9c%ed%91%9c%ed%98%84%ec%8b%9d"><![CDATA[정규표현식]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8099</wp:comment_id>
			<wp:comment_author><![CDATA[ㅇㅇ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[asdsadf@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[219.248.167.231]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-12-10 19:48:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-12-10 10:48:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[님 뇌 해석이 부자연스러운거 같은데]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>7841</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639133288.482383;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1639496539.467396;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7841</wp:comment_id>
			<wp:comment_author><![CDATA[개발자]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[unknown@e.mail]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.36.213.183]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-09 09:54:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-09 00:54:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[번역본 같은데 해석이 너무 부자연스럽습니다...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588798.964745;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636419263.651656;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9732</wp:comment_id>
			<wp:comment_author><![CDATA[sonicrok93]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sonicrok93@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://github.com/SeungrokYoon</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.172.151.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-05-10 14:03:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-05-10 05:03:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[문자열 코딩문제를 풀다가, Positive Lookahead와 Negative Lookahead의 개념이 궁금해져 방문하게 되었습니다. 굉장히 도움이 많이 되었습니다. 감사합니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1652159010.980617;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489200.100814;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8669</wp:comment_id>
			<wp:comment_author><![CDATA[ㅇㅇㅋㅋ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[asdf@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[220.88.80.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-02-08 11:49:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-02-08 02:49:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[님 그 베베 꼬인 정신상태가 부자연스러움]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>8099</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644288573.078186;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[데이터 검증 (Data Validation)은 언제, 얼마나 해야 할까?]]></title>
		<link>https://elvanov.com/2414</link>
		<pubDate>Wed, 10 Mar 2021 15:33:52 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2414</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>필자는 처음 웹 프로젝트를 받았을 때 고생했습니다. 왜냐하면 아는 게 하나도 없었기 때문이지요 (물론 그렇다고 지금도 아는 게 많은 것 같지는 않아요..) 그래도 고생하고 경험하면서 직접적으로 느끼며 배우는 것들은 많은 것 같습니다. 그 많고 많은 주제 중에, <strong>데이터 검증 (Data Validation) 을 언제(when) 얼마나(how much) 해야 하는가</strong>에 대한 질문을 조금이나마 더 잘 대답할 수 있게 된 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>데이터 검증이 중요하다는 것은 이견이 없습니다. 왜냐하면 서버든 클라이언트든 의도되지 않은 행동을 했을 때에는 그것이 불가능하다고 단정지어야 하기 때문이지요. 의도되지 않았으니까요! 제가 그렇게 사용하라고 만든 게 아닌데, 그렇게 사용한다면, 당연히 금지시켜야겠죠? 휴대폰 번호를 입력하라고 만든 입력창에 사용자가 이메일을 입력했는데, 아무런 문제 없이 그대로 통과되었다고 가정합시다. 자, 이제 사용자에게 전화를 걸고 싶습니다. 그래서 해당 사용자의 휴대폰 번호를 확인하는데 이메일이 담겨있어요! 이메일로 전화는 못걸잖아요. 이렇듯 사용자가 의도하였든 의도하지 않았든 프로그램에 심각한 문제를 일으키리라는 것은 명백하니까요. 만약 데이터를 검증했을 때 아무런 이상이 없다면? 그냥 그대로 진행하면 되겠습니다. 하지만 문제가 있다면? 그 결과가 서버가 통째로 멈추는 것이든, 단순히 입력이 잘못되었다고 에러 메시지를 출력하든, 혹은 입력을 단순히 무시할 수도 있습니다. 이처럼 검증이 통과하지 못했을 때 적절한 조치까지 취해져야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글은 필자가 Node.js 앱을 만들면서 느꼈던 점을 서술하기도 합니다. 그래서 Node.js, GraphQL, Mongoose 에 대한 기본 지식이 없다면 문맥을 이해하는 데에 힘들 수 있습니다. 간단하게 설명하자면, Node.js 는 자바스크립트 기반 V8 엔진 런타임 환경이고, Node.js 위에 express 웹 앱 등 다양한 모듈이 서로 유기적으로 결합할 수 있습니다. GraphQL 은 페이스북에서 만든 API 에 대한 인터페이스로, (<s>인터페이스에 대한 인터페이스</s>) REST API 와 비슷한 역할이라고 보시면 됩니다. Mongoose 는 MongoDB를 Node.js 환경에서 손쉽게 사용할 수 있게 해주는 모듈입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>사람들의 토론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>사람들이 Validation 에 대해서 어떤 의견들을 가지고 있는지 궁금하여 한 번 검색해봤습니다. 그 중 가장 눈에 띄는 건 StackExchange 에서 <a rel="noreferrer noopener" href="https://softwareengineering.stackexchange.com/questions/81062/data-input-validation-where-how-much" target="_blank">Data input validation - Where? How much? </a>라는 글이었습니다. 대충 요약하자면, 우선 발제자의 의견은 다음과 같습니다. 영어가 된다면 찬찬히 읽어보시기를 권장합니다. (아래 간단히 번역한 내용은 다소 부정확합니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>클라이언트 단계 (브라우저) : 간단한 검증만 한다. (6자 이상 20자 이하 등)</li><li>웹 커뮤니케이션 제어 단계 (컨트롤러 혹은 라우팅) : 검증에 관해서는 별다른 규칙을 두고 있지 않다. 그렇지만 이 단계에서 데이터를 상황에 맞게 변형, 구조화 혹은 파싱할 수 있도록 한다.</li><li>비즈니스 레이어 단계: 견고한 검증을 하도록 한다. 데이터 포맷, 범위, 값, 내부상태 체크 (메소드를 항상 호출할 수는 없을 때), 사용자 역할 및 권한, 기타 등등을 검증해볼 수 있다. 값을 사용할 때에는 사용자가 입력한 건 최대한 사용하지 않도록 하고 가능한한 실제 데이터베이스에 있는 값들을 사용한다.</li><li>데이터 접근 단계 (DAL, DAO) : 이 단계는 데이터 접근(Access)이 가장 중요한 단계이므로 검증이 많이 필요하지는 않다고 본다.</li><li>데이터베이스 단계 : 데이터 자체의 일관성이 잘 유지되기 위해서 가능한 한 강력한 검증을 넣도록 한다. 견고한 기본키와 외래키, 제약, 데이터 타입, 길이, 크기, 정밀도, 기타 등등을 검증해볼 수 있다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>또 다른 의견</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>위 방법대로라면 모든 검증 단계가 일관성을 유지하고 있어야 한다. 예를 들어 클라이언트 사이드에서 검증이 완료된 것이 비즈니스 단계에서도 문제 없이 통과해야 한다. 만약 적어야 할 칸이 굉장히 많은데, 제출해보고 나서야 에러 메시지를 받게 된다면 사용자들은 굉장히 짜증이 날 것이다. 그래서 Validation 관련된 것들을 따로 모아두고 언제 어디서든지 필요할 때 호출하여 사용할 수 있는 단계를 만들어야 한다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>또또 다른 의견</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Presentation/UI<ul><li>입력 검증은 간단하게.</li><li>입력이 잘못된 포맷이라면 계속 진행하지 않음.</li><li>"gate" 클라이언트가 요청을 서버로 보냄으로써 Round-Trip 을 줄여서 사용성 개선과 대역폭 및 시간 감소 효과를 기대함.</li></ul></li><li>Logic<ul><li>비즈니스 로직과 인증</li><li>사용자가 허용되지 않은 행동을 할 수 있도록 내버려두지 말자.</li><li>파생된 속성과 상태를 이 단계에서 다룸. (데이터베이스에서 비정규화된 것들이 될 수 있음)</li></ul></li><li>Data<ul><li>핵심 데이터 레이어</li><li><strong>필요없는 값을 저장하는 건 무조건 거부</strong></li><li>DB 자체적으로 포맷 강제</li><li>관계를 적절하게 보장하기 위해 데이터베이스 제약을 사용함.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>데이터는 어디에서든지 검증될 수 있다.</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>데이터는 어디에서든지 검증될 수 있습니다. 말 그대로입니다. 코드를 입력할 수 있는 곳에는 데이터 검증이 가능하죠. 그냥 단순히 <code>if</code> 문으로도 검증 절차를 넣을 수 있습니다. <code>if (isValid(value)) doSomething();</code> 이렇게요. <code>isValid</code> 함수의 내용은 상상에 맡기겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>데이터 검증이 하도 중요하다보니 거의 모든 라이브러리, 모듈, 개발 환경에서는 검증(Validation) 관련 기능을 제공하거나 써드-파티 Validation 라이브러리가 활발하게 개발됩니다. vue 를 확인해볼까요? <a rel="noreferrer noopener" href="https://vee-validate.logaretm.com/v4/" target="_blank">VeeValidate</a> 등이 건재합니다. 필자가 별로 써보지 않은 React 를 보아도, 단순히 React Validation Library 만 구글에 검색해도 바로 상위에 <a rel="noreferrer noopener" href="https://react-hook-form.com/" target="_blank">React Hook Form</a> 이 등장하는 것을 확인할 수 있습니다. (star가 19,000개 이상입니다.) API 인터페이스 중 하나인 GraphQL 의 경우 그냥 Learn 의 한 꼭지로 커다랗게 <a rel="noreferrer noopener" href="https://graphql.org/learn/validation/" target="_blank">Validation</a> 이 차지하고 있네요. Node.js 의 Express 에서도 router 단에서 사용할 수 있는 <a href="https://www.npmjs.com/package/express-validator">express-validator</a> 가 있습니다. Node.js 에서 가장 대표적인 MongoDB 의 ODM 을 구현하고 있는 <a rel="noreferrer noopener" href="https://mongoosejs.com/" target="_blank">mongoose</a> 의 경우에도 대놓고 validation 기능을 첫 문장에서 소개하고 있으며 <a rel="noreferrer noopener" href="https://mongoosejs.com/docs/validation.html" target="_blank">Docs 에서 Validation</a> 이 한 꼭지를 당당하게 차지하고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이렇듯 데이터는 언제 어디서든지 검증될 수 있습니다. 하지만 우리의 시간과 노력은 제한되어 있는게 문제이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>목적과 대상 사용자에 따라서 구분하여 검증하자</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금까지 모든 단계에서 검증이 가능하고, 또 사람마다 검증을 어느 단계에서 힘주어서 해야 하는지에 대한 공통된 의견과 다른 의견들이 있음을 보았습니다. 어떤 상황에서든지 100% 통하는 방법론은 없을 것이라 확신하지만, 좀 더 검증의 목적과 대상 사용자를 명확히 하여 효율적으로 코드를 짜는 게 중요하다고 생각합니다. 앞서 말했듯이 우리의 체력과 시간은 무한하지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>브라우저</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>브라우저는 명확히 클라이언트의 영역입니다. 사용자의 경험이 중요한 부분이라서, 검증도 그에 따라서 부드럽게, 매끄럽게 잘 되어야 합니다. 그러니까 검증은 오로지 <strong>사용자의 경험을 더 낫게 하는 데에 의의</strong>를 두어야 합니다. 어떤 느낌이냐면, 어차피 추후 서버에서 Error 를 일으킬 것을, 적절한 메시지와 적절한 타이밍에 미리 사용자에게 알려주어 더 나은 경험을 제공한다는 것입니다. 그래서 서버쪽의 검증에 완전히 의존적입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또 한 가지 생각해야 할 점은, 브라우저 단계에서 어떤 값이 실제로 유효할지에 대한 의의는 전혀 필요가 없다는 점입니다. 왜냐하면 데이터를 받는 서버 입장에서 그 데이터가 적절한 클라이언트로부터 왔는지를 검증할 수 있는 방법이 없기 때문입니다. 패킷이야 서버로 오기 전까지는 언제든지 조작이 가능합니다. <strong>서버 입장에서는 요청으로부터의 데이터를 단 하나도 신뢰할 수 없기</strong> 때문에, 아무리 브라우저에서 신뢰할 수 있는 값을 사용자들로 하여금 입력할 수 있게 하더라도, 의미가 없습니다. 의미가 있을 때는, 사용자가 더 나은 경험을 할 때 입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>브라우저 단계에서는 검증 대상도 명확히 일반 사용자입니다. 아니, 검증 대상 사용자가 일반 사용자 말고 뭐가 있냐구요? 바로 개발자 우리 자신이요!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>API 인터페이스, 컨트롤러, 라우팅 단계</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>실제 비즈니스 로직을 호출하기 전입니다. GraphQL 같은 경우는 스키마에 맞지 않는 데이터가 입력된다면 자동으로 에러를 일으킵니다. 어느 정도 자체적으로 검증이 되는 셈입니다. 이 단계에서는 자체적인 검증 뿐만 아니라 <strong>사용자의 역할이나 권한</strong>에 문제가 없는지도 체크할 수 있습니다. 보통 요청에 사용자의 Session Id 등이 함께 딸려오는 경우가 많으므로, 권한을 검사한다면 이 단계가 가장 빠르다고 볼 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>마찬가지로 GrpahQL 이 어느정도 해주는 부분이지만, 요청으로부터 날라온 데이터가 서버사이드의 언어에 맞도록 타입이 잘 지정되어야 합니다. 우선 요청으로 들어온 값들은 모두 문자열이므로, 그것을 실제로 사용할 변수로 만들어줘야 합니다. 그래야 나중에 비즈니스 로직에 집중할 수 있습니다. 위 사람들의 토론에서 발제자가 이야기한, <strong>데이터를 상황에 맞게 변형, 구조화 혹은 파싱</strong>해야 한다는 이야기와 일맥상통합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 단계에서 검증 대상은 사실 더 확대됩니다. 일반 사용자 뿐만 아니라 악성 사용자도 고려해야 합니다. 이 사용자는 패킷을 얼마든지 조작할 수 있고, 얼마든지 요청을 무수히 많이 보내어 서버 과부하를 일으키고 싶어할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>비즈니스 로직 단계</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>실제 우리의 의도가 가장 많이 담기는 단계입니다. 여기서는 검증과 비즈니스 로직이 섞일 수 밖에 없습니다. 어떤 값이 유효한 이메일인지 아닌지 구분하는 방법은 너무나도 명확하고 전 세계적으로 보편적인 이야기입니다. 반면 돈벌기 게임에서 노동 시간을 초과하여 일을 했다고 가정했을 때에는 영향을 주는 것들도 많고 결과에 따른 선택지도 다양할 수 있습니다. 현재까지 일했던 시간, 회사의 권장 노동시간, 법적근로시간 등등이 모두 맞물리겠지요. 그러한 핵심 동작들이 모두 비즈니스 로직에 녹아있어야 할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 단계에서 검증 대상을 따지는 것은 크게 무의미합니다. 검증 대상은 모든 것들이 될 수 있습니다. 사용자가 입력한 값, 개발자가 계산하거나 제시하는 값, 이미 데이터베이스에 저장되어 있는 값들을 검증해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Database</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>mongoose 는 너무나도 유명하고 보편적이라, 어떻게 보면 MongoDB 에 정말 딱 달라붙어 있다고도 말할 수 있습니다. 이러한 데이터베이스 모델링을 객체화하여 읽고 편집하고 삭제할 수 있게 해주는 모듈들은 보통 Validation 도 구현이 되어있는 경우가 많습니다. 왜냐하면 그 모듈이 신뢰성 있게 동작을 할 수 있어야 하니까요! mongoose 같은 경우는 Model 을 정의할 때, Schema 에 validation 관련 내용들을 마구마구 집어넣을 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 단계에서 검증 대상은 거의 대부분 <strong>개발자가 입력한 값</strong>입니다. 그래서 타입 시스템이 빛을 충분히 볼 수 있습니다. Typescript 로 Node.js 앱을 만들었을 때의 이점을 톡톡히 볼 수 있지요. Typescript 는 실제로 코드가 동작하기 전에 검증을 수행할 수 있는 강력한 도구입니다. (그렇다고 검증이 완벽하지는 않습니다. 개발자의 실수를 크게 줄여줄 뿐입니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 단계에서의 검증 목적은 <strong>데이터베이스의 신뢰성 및 일관성 유지</strong>입니다. 결국 남는 건 데이터베이스고, 이 데이터베이스가 가장 잘 유지되어야 한다는 건 불변의 진리입니다. 그러므로 검증이 많으면 많을 수록 좋겠지만, 문제는 비즈니스 로직 단계 혹은 API 단계와 겹칠 수 있다는 것입니다. 예를 들어 사람의 나이를 입력한다고 했을 때, 우선 제일 먼저 클라이언트에서 검증을 해볼 수 있습니다. 하지만 서버 입장에서는 데이터가 어떻게 들어올지 모르니까 결국 API 단계 혹은 비즈니스 로직 단계에서 한번 더 검사를 해야 합니다. 문제는 mongoose 입장에서도 개발자가 이상한 음수 값을 넣어버릴 수 있잖아요! 에러는 언제 어떻게 터질지 모릅니다. 그러므로 mongoose 도 나이 필드가 음수가 아닌지를 일일히 체크해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 단계에서 여러가지 문제가 터집니다. 우선 필드를 중복해서 찾아야 한다는 점이지요. 위 토론 내용 중간에서 나오듯 저도 하나의 validation 관련 파일이나 폴더를 만들어두고 필요할 때마다 써먹어야 하나 싶습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>아이디어</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>하나의 파일에 어떤 객체의 (검증을 포함한) 모든 것을 정의내릴 수는 없을까? 이는 제가 언젠가 한번 도전해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Form Validation (브라우저)</li><li>GraphQL Schema</li><li>GraphQL Resolver</li><li>몽구스 함수를 사용하는 비즈니스 로직 (Mongoose Wrapper Functions)</li><li>몽구스 스키마 정의 (Mongoose Schema Definition)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>간단하게 Validation 에 관한 사견을 풀어보았습니다. 여러분의 코딩에 도움이 되길 바랍니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2414</wp:post_id>
		<wp:post_date><![CDATA[2021-03-11 00:33:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-10 15:33:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-11 01:01:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-10 16:01:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%8d%b0%ec%9d%b4%ed%84%b0-%ea%b2%80%ec%a6%9d-data-validation%ec%9d%80-%ec%96%b8%ec%a0%9c-%ec%96%bc%eb%a7%88%eb%82%98-%ed%95%b4%ec%95%bc-%ed%95%a0%ea%b9%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%eb%b0%a9%eb%b2%95%eb%a1%a0"><![CDATA[방법론]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6239</wp:comment_id>
			<wp:comment_author><![CDATA[ds]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[abc@42.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.36.150.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-03-11 20:46:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-03-11 11:46:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[늘 잘보고있습니다.감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1615463163.324279;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1615510866.037532;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>6754</wp:comment_id>
			<wp:comment_author><![CDATA[padosum]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[makalu171@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.177.98.246]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-04-08 18:27:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-04-08 09:27:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[잘 읽고 갑니다 ☺️ 감사해요]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1617939287.305412;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1617874063.175721;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[[Node.js] 안전한 암호화 기법인 scrypt 로 사용자 패스워드 암호화하기]]></title>
		<link>https://elvanov.com/2420</link>
		<pubDate>Fri, 12 Mar 2021 14:59:10 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2420</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>들어가기 전에</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>패스워드는 암호화되어 저장되어 있어야 합니다. 법적으로도 그렇고 보안적으로도 당연합니다. 당신의 데이터이스는 언제든지 털릴 수 있습니다 ... scrypt 함수를 이용하는데, 이게 콜백을 받는 함수라서 Promise 로 래핑했습니다. Promise 에 대한 기본 지식이 있어야 코드를 이해할 수 있습니다. mongoose 코드도 많이 사용하므로, 해당 라이브러리를 알고 있다면 읽으시는 데 크게 도움이 될 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>내가 이해한 암호화</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>필자는 암호화에 대해서 잘 모릅니다. 하지만 대략적으로라도 이해하고 있어야 왜 scrypt 를 쓰는지 스스로 납득을 할 수 있기 때문에, 최소한의 수준으로 설명하고자 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>암호화를 하는 이유는 해당 정보가 중요하기 때문입니다. 물론 기본적으로 데이터베이스가 털릴 일을 만들지 않는 것이 베스트이겠지만, 만에 하나 데이터베이스가 털렸다 하더라도 내용을 알 수 없게 암호화를 해놓는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>암호화에는 여러가지 방법이 있을 수 있습니다. 그 중 간단한 해쉬 함수를 이용하는 방법을 봅시다. 해쉬 함수란 간단히 이야기하여<strong> 같은 입력 값에 같은 출력값이 나오는 게 보장되지만, 출력 값으로 입력 값을 유추할 수 없는 것</strong>을 의미합니다. 아래는 단순한 예시입니다. 출력 값으로 입력 값을 알 수가 없겠죠?</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>입력값</th><th>출력값</th></tr></thead><tbody><tr><td><code>a</code></td><td><code>35cbefc0691a5ebd7337dec23414baeb75ab6ecc33e78354d3adaf1e4923f8aa</code></td></tr><tr><td><code>b</code></td><td><code>c47340d0011ba756c6264b2be5071fea99dc8f1213163ae7383b902811a60163</code></td></tr><tr><td><code>c</code></td><td><code>446474b819d6debddd55d0944e3912f33fe97bbcf6d1e5005130bb428dd1d36c</code></td></tr><tr><td><code>d</code></td><td><code>9d0f1dbef956ff0d418043acc57f6330fc4521c89053921f3668a7f805c2d39e</code></td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>이렇게 입력 값으로 사용자가 쓴 비밀번호를 넘겨서 나온 출력 값을 실제 데이터베이스에 저장해놓는다면, 실제로 데이터베이스가 노출되어도 본래 입력 값을 알 수 없으니 보안에 안전해 보입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 안전하지 않을 수 있다는 점... 보통의 해쉬 함수는 속도가 중요하기 때문에, 충분히 빠릅니다. 보안에서는 이 빠른 게 오히려 공격자에게 좋습니다. 왜냐하면 가능한 모든 입력 값에 대한 출력 값을 정리해놓고, 정리해 놓은 출력 값과 실제 데이터베이스에 저장되어 있는 값을 일일히 비교하는 작업이 가능하기 때문입니다. 해쉬 함수의 성능에 따라 1초에 몇억 번을 수행할 수 있다고 하니, 입력 값을 몇백 억, 몇 조 단위까지 정리해 놓을 수 있다면 비밀번호를 뚫는 게 불가능해보이지가 않지요. 이렇게 입력값-출력값을 저장해 놓는 것을 레인보우 테이블(Rainbow Table) 이라고 합니다. (레인보우 테이블은 공간 효율을 위해 실제로 입력 값과 출력 값이 1:1로 구성되어 있는 건 아닙니다. 자세한 정보를 알고 싶다면 <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Rainbow_table" target="_blank">위키백과(영어)</a>를 참조해주세요.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자 그렇다면 레인보우 테이블이 쓸모없게 만들어버리거나, 아예 레인보우 테이블을 만들기 불가능하도록 하면 되겠네요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>첫번째로 salt 라는 기법이 있습니다. 이는 입력으로 들어가는 비밀번호에 추가 문자열을 덧붙입니다. 그래서 A 유저와 B 유저의 비밀번호가 같다 하더라도 같은 해쉬 출력 값을 가지고 있지 않도록 합니다. 만약 A 유저의 비밀번호가 털렸다 하더라도 B는 아직 안전한 셈이죠. salt 값은 암호화 최초에 설정하되, 항상 비밀번호에 매번 같은 salt 가 추가되어야 출력 값도 같으므로 salt 값을 어디엔가 잘 가지고 있어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>솔트와 패스워드의 다이제스트를 데이터베이스에 저장하고, 사용자가 로그인할 때 입력한 패스워드를 해시하여 일치 여부를 확인할 수 있다. 이 방법을 사용할 때에는 모든 패스워드가 고유의 솔트를 갖고 솔트의 길이는 32바이트 이상이어야 솔트와 다이제스트를 추측하기 어렵다.</p><cite>Naver D2 Helloworld - <a rel="noreferrer noopener" href="https://d2.naver.com/helloworld/318732" target="_blank">안전한 패스워드 저장</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>유저</th><th>비밀번호</th><th>입력값(비밀번호 + salt)</th><th><strong>출력값</strong></th></tr></thead><tbody><tr><td>A</td><td>1234</td><td>1234_a_user_salt</td><td>9d0f1dbef956ff0d418043acc57f6330fc4521c89053921f3668a7f805c2d39e</td></tr><tr><td>B</td><td>1234</td><td>1234_b_hello_world</td><td>446474b819d6debddd55d0944e3912f33fe97bbcf6d1e5005130bb428dd1d36c</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>두번째로 출력 값을 아주 느리게 산출되도록 하는 방법입니다. 기껏해야 1초에 5번 출력값을 계산해야 할 만큼 <strong>계산량</strong>이 많다면 레인보우 테이블을 제작하는 데도 어마어마한 시간과 비용이 들어갈 것입니다. 여기까지 잘 구현된 게 bcrypt 입니다. 하지만 단순히 계산을 느리게 만들었다고 해서 레인보우 테이블을 만드는 것이 불가능해지는 건 아닙니다. 만약 그래픽카드를 쓴다면요? 코인도 잘근잘근 씹어먹는 엄청난 병렬 연산으로 단숨에 계산해버릴 수도 있습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 이러한 점도 보완한 세 번째를 알아봅시다. CPU 연산 뿐만 아니라 어느 정도 많은 <strong>메모리</strong>를 써야 해싱이 가능하도록 하는 것입니다. 그래픽카드는 메모리가 충분한 건 아니기 때문에 이제 그래픽카드로 할 수가 없게 됩니다.  여기까지 구현해놓은 것이 scrypt 입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>crypto.scrypt(password, salt, keylen[, options], callback)</code></h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul id="block-e75f442c-358f-414b-98ae-68c5a1345d72"><li><code>password</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">&lt;ArrayBuffer&gt;</a>&nbsp;|&nbsp;<a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">&lt;Buffer&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">&lt;TypedArray&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView">&lt;DataView&gt;</a></li><li><code>salt</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">&lt;ArrayBuffer&gt;</a>&nbsp;|&nbsp;<a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">&lt;Buffer&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">&lt;TypedArray&gt;</a>&nbsp;|&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView">&lt;DataView&gt;</a></li><li><code>keylen</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a></li><li><code>options</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object&gt;</a><ul><li><code>cost</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;CPU/memory cost parameter. Must be a power of two greater than one.&nbsp;<strong>Default:</strong>&nbsp;<code>16384</code>.</li><li><code>blockSize</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Block size parameter.&nbsp;<strong>Default:</strong>&nbsp;<code>8</code>.</li><li><code>parallelization</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Parallelization parameter.&nbsp;<strong>Default:</strong>&nbsp;<code>1</code>.</li><li><code>N</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Alias for&nbsp;<code>cost</code>. Only one of both may be specified.</li><li><code>r</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Alias for&nbsp;<code>blockSize</code>. Only one of both may be specified.</li><li><code>p</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Alias for&nbsp;<code>parallelization</code>. Only one of both may be specified.</li><li><code>maxmem</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type">&lt;number&gt;</a>&nbsp;Memory upper bound. It is an error when (approximately)&nbsp;<code>128 * N * r &gt; maxmem</code>.&nbsp;<strong>Default:</strong>&nbsp;<code>32 * 1024 * 1024</code>.</li></ul></li><li><code>callback</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">&lt;Function&gt;</a><ul><li><code>err</code>&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error">&lt;Error&gt;</a></li><li><code>derivedKey</code>&nbsp;<a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">&lt;Buffer&gt;</a></li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><a href="https://nodejs.org/api/crypto.html#crypto_crypto_scrypt_password_salt_keylen_options_callback">scrypt 함수의 정의</a>입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>구현</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>/**
 * 암호화된 비밀번호 객체
 * @typedef {Object} Encrypted
 * @property {String} pwd
 * @property {String} salt
 */

/**
 * 비밀번호 암호화 함수. 평문을 암호화하여 저장함.
 * @param {string} plain 평문
 * @returns {Promise&lt;Encrypted>} 암호화된 base64 기반 암호.
 */
const pwd_encrypt = async (plain) =>
  new Promise((resolve, reject) => {
    const salt = crypto.randomBytes(64).toString('base64');
    let result = '';
    crypto.scrypt(plain, salt, 64, (err, derivedKey) => {
      if (err) return reject(err);
      result = derivedKey.toString('base64');
      return resolve({ pwd: result, salt });
    });
  });

/**
 * 로그인 정보만 db에 기록합니다. 유저(User)는 일체 건드리지 않습니다.
 * 반드시 다른 기능과 조합되어야 합니다!
 * @param {string} email 해당 이메일
 * @param {string} plainPwd 암호화되기 전
 */
async upsertOnlyLogin(email, plainPwd) {
  if (typeof email !== 'string' || typeof plainPwd !== 'string') {
    throw Error('upsertOnlyLogin: 인수가 잘못되었습니다.');
  }
  // 패스워드 정보는 유일해야 하므로 관련된건 전부 삭제함.
  await model.Login.deleteMany({ email });

  const { pwd: pwdEncrypted, salt } = await pwd_encrypt(plainPwd);
  await model.Login.create({ email, pwd: pwdEncrypted, salt });
}

/**
 * 비밀번호가 맞는지 체크합니다.
 * @param {string} given
 * @param {Encrypted} encrypted
 * @returns {Promise&lt;boolean>} 맞으면 true, 틀리면 false
 */

const pwd_verify = async (given, encrypted) =>
  new Promise((resolve, reject) => {
    let result = '';
    crypto.scrypt(given, encrypted.salt, 64, (err, derivedKey) => {
      if (err) return reject(err);
      result = derivedKey.toString('base64');
      return resolve(result === encrypted.pwd);
    });
  });
</code></pre>
<!-- /wp:code -->

<!-- wp:list {"ordered":true} -->
<ol><li>누군가가 회원가입을 하려고 합니다.</li><li><code>upsertOnlyLogin</code> 함수를 호출합니다. 이 함수의 목표는 로그인 정보를 데이터베이스에 기입하는 것입니다.</li><li><code>pwd_encrypt</code> 함수를 호출합니다. 이 함수는 랜덤으로 <code>salt</code> 를 생성하고, 해당 <code>salt</code>로 평문 비밀번호(<code>plainPwd</code>)를 암호화된 비밀번호(<code>pwd: pwdEncrypted</code>)로 바꾸며, 해당 <code>salt</code> 와 암호화된 <code>pwd</code> 를 리턴하는 함수입니다. 앞서 말했듯 <code>salt</code> 는 따로 잘 저장하고 있어야 합니다.<ol><li><code>salt</code>는 랜덤 64바이트 데이터입니다. </li><li>암호화의 결과는 모두 Buffer (단순 바이트 정보의 나열) 이므로 이를 모두 적절한 문자열로 바꾸어줍니다. <code>.toString('base64')</code>로요. 바꾸어주지 않으면 사람이 읽기가 불가능해지는 매우 반항아적인 데이터가 될 것이고, 데이터베이스에 저장이 되지 않을 수도 있습니다. </li><li><code>crypto.scrypt</code> 는 용도에 따라 적절하게 호출합니다. </li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:list {"ordered":true} -->
<ol><li>추후 비번이 맞는지 체크할 때 <code>pwd_verify</code> 함수가 호출됩니다.</li><li>똑같은 과정으로 scrypt 를 실시하여, 그 결과값을 비교합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>보안 필수!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2420</wp:post_id>
		<wp:post_date><![CDATA[2021-03-12 23:59:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-12 14:59:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-12 23:59:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-12 14:59:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-%ec%95%88%ec%a0%84%ed%95%9c-%ec%95%94%ed%98%b8%ed%99%94-%ea%b8%b0%eb%b2%95%ec%9d%b8-scrypt-%eb%a1%9c-%ec%82%ac%ec%9a%a9%ec%9e%90-%ed%8c%a8%ec%8a%a4%ec%9b%8c%eb%93%9c-%ec%95%94%ed%98%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="%eb%b3%b4%ec%95%88"><![CDATA[보안]]></category>
		<category domain="category" nicename="%ec%95%94%ed%98%b8%ed%99%94"><![CDATA[암호화]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Pop!_OS] 부트로더 초기화]]></title>
		<link>https://elvanov.com/2425</link>
		<pubDate>Mon, 15 Mar 2021 17:14:32 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2425</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ssd 가 잘 인식이 안되서 잘 꼽혀있던 두 개의 자리를 바꿨습니다. 그랬더니 거짓말처럼 Pop!_OS 가 메뉴에서 사라졌습니다. 이게 무슨 일이죠.. 이제 리눅스를 부팅할 수가 없었습니다...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pop!_OS 부팅이 제대로 안되는 문제를 발벗고 해결하기 위해 나섰습니다. 본래 설치를 하면 Pop!_OS 는 systemd-boot 로 부팅된다고 합니다. (아래 인용문 참조) 그게 무슨 소리일까요? 저도 모릅니다. GRUB 도 뭔지 모릅니다. 버전이 GRUB2 와 아닌 것이 있는 것 같지만 차이점도 모릅니다. 이 문제를 어떻게 극복해나가야 할까요? 인터넷에 나온 흔한 방법으로는 도무지 해결이 되지 않는데 운영체제론에서 부팅 관련된 부분을 처음부터 공부해야 하는 운명인 걸까요?</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>On a fresh install of Pop!_OS 18.04,&nbsp;systemd-boot&nbsp;is used rather than the&nbsp;GRUB&nbsp;bootloader, and the following instructions do not apply please refer to the&nbsp;systemd-boot&nbsp;section on this page.</p><cite><a href="https://support.system76.com/articles/bootloader/" target="_blank" rel="noreferrer noopener">https://support.system76.com/articles/bootloader/</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>필자의 기기 환경은, AMD64 CPU 를 사용중이고, UEFI 부팅 환경입니다. UEFI 부팅 인지 고전적인 BIOS 부팅인지 확인하는 방법은 아래 명령어를 터미널에 쳐보면 됩니다. (리눅스 명령어입니다.) 그리고 ssd가 NVMe 인터페이스에 장착되어 있음에 따라 <code>/dev</code> 안에서 보이는 장치 이름은 <code>nvme</code> 와 관련되어 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>&#91; -d /sys/firmware/efi ] &amp;&amp; echo "Installed in UEFI mode" || echo "Installed in Legacy mode"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>현상</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2426,"width":1023,"height":767,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large is-resized"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-26-1024x768.jpg" alt="" class="wp-image-2426" width="1023" height="767"/><figcaption>부팅 화면</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>자 저는 위와 같은 화면이 떴습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>UEFI: SanDisk, Partition 2</code> : 부팅용 usb 입니다. Ventoy 를 이용해 부팅용으로 만들어두었던 것입니다. 추후에 언급하겠지만, 이 안에 Pop!_OS 라이브 디스크, Super Grub2 Disk, Boot Reapir Disk 등이 들어있습니다. 얘는 ssd에서 부팅을 못잡는 문제와는 전혀 관계가 없습니다.</li><li><code>Windows Boot Manager (250GB)</code>  윈도우 부팅됩니다. 잘 됩니다.</li><li><code>ubuntu (250GB)</code> : 왜인지는 모르겠지만 윈도우가 깔려있는 ssd 에 우분투 부트로더가 장착되어 있습니다. 실행시키면 아래에서 이야기할 GRUB terminal 이 나옵니다.</li><li><code>UEFI OS (1TB)</code> :  위와 마찬가지로 GRUB terminal 이 실행될 뿐입니다.</li><li><code>pop (1TB)</code> : 마찬가지로 grub terminal 이 그냥 실행되고 맙니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>자, GRUB terminal 이란?</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2427,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/Nocj4-1024x283.jpg" alt="" class="wp-image-2427"/><figcaption>grub terminal</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>이렇게 터미널로 나오고 뭐 아무것도 진행이 안됩니다. 직접 세팅을 해서 부팅을 해야 하는 것 같은데, 이건 누구도 원하는 결과가 아닙니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>여러가지 안됐던 시도들</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>GRUB Terminal 에서 직접 부팅 시도하기</h3>
<!-- /wp:heading -->

<!-- wp:embed {"url":"https://linuxhint.com/grub_rescue_ubuntu_1804/","type":"wp-embed","providerNameSlug":"linux-hint","className":""} -->
<figure class="wp-block-embed is-type-wp-embed is-provider-linux-hint wp-block-embed-linux-hint"><div class="wp-block-embed__wrapper">
https://linuxhint.com/grub_rescue_ubuntu_1804/
</div><figcaption>GRUB Rescue 를 쓰기</figcaption></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>근데 그냥 안돼... 필자 ssd 는 SATA 인터페이스가 아니라 <code>sda</code> 가 아닌 <code>nvme</code> 이런 식으로 표시가 되는데, root 로 <code>nvme0</code>, <code>nvme0n1</code>, <code>nvme1n1</code> 등을 시도해보았지만 모두 되지 않았습니다. 그냥 장치를 찾을 수가 없다네요. <code>sda</code> 도 장치를 찾을 수가 없었습니다.. 에러가 폭발!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Super Grub2 Disk</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://www.supergrubdisk.org/super-grub2-disk/">https://www.supergrubdisk.org/super-grub2-disk/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Super Grub2 Disk 는 부팅용 iso 디스크이며, 기능은 현재 연결되어있는 장치에서 모든 부팅가능한 요소를 끄집어내는 데 있습니다. 애초에 Super Grub2 Disk 는 해결을 위한 툴은 아닙니다. 그냥 부팅 가능한 파일을 나열하고 고저 실행시켜볼 뿐인데, 이걸로 잘 작동한다면 이제 해결의 여지가 있는 것입니다. 이것조차 없다면 아예 부팅가능한 파일이 없는 것이니까요.. 하지만 어쨌든 이것도 해결 과정에서 사용해봄직 하니까 단단히 기억해두도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Boot Repair Disk</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://sourceforge.net/projects/boot-repair-cd/">https://sourceforge.net/projects/boot-repair-cd/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이것도 크게 도움은 되지 않았습니다.시키는 대로 다 했더니 그냥 에러만 뜰 뿐이었습니다... 후...</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2428,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/photo_2021-03-16_01-15-30-768x1024.jpg" alt="" class="wp-image-2428"/><figcaption>boot repair disk 에러</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>해결법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 부트로더가 동작하지 않는다는 말은, 기존에 설치되어 있었던 Pop!_OS 가 제대로 실행되지 않는다는 것인데, 그래서 Pop!_OS에 억지로 접속하여 뭔가 조치를 취해야 한다는 뜻입니다. 그래서 일단 Pop!_OS 에 접근하는 방법을 크게 두 가지로 나눌 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><a href="https://support.system76.com/articles/bootloader/" target="_blank" rel="noreferrer noopener">Live Disk 를 만들어 해당 디스크를 mount한 뒤 chroot 로 접속하는 방법</a></li><li>Super Grub2 Disk 등으로 억지로 부팅시키는 방법</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>저는 결국 1. Live Disk 를 만들어서 접속했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 이 해결법에서 중요한 점은, grub 와 관련된 세팅을 초기화해줘야 한다는 건데, 단순히 <code>grub-efi-amd64</code> 를 삭제하고 다시 설치하는 걸로는 부족했습니다. 그래서 더 확실한 방법이 초기화 방법이 필요했고, 글 어디에서도 나오지 않았던 방법으로 시도해본 결과 결국 성공했습니다. 바로 <code>/boot/efi/EFI/</code> 안에 있는, 불필요해 보이는 내용을 삭제하는 것이었습니다! 하지만 <strong>삭제하는 방법이 정말로 효능이 있는지는 근거가 명확하지 않으므로 조심스레 접근해주세요.</strong> 우선 아래 명령어들은, 위 링크에 나와있는 UEFI NVMe SSD 해결방법을 축약하고, 또 제가 추가한 단계도 있습니다. 적절히 비교해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:list {"ordered":true} -->
<ol><li>Live Disk 를 만든다.</li><li>그 Disk 에 접속하여 다음 명령어를 작성한다.</li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>sudo mount /dev/nvme1n1p3 /mnt # /dev/nvme1n1p3 를 <strong>주 파티션</strong>으로 적절히 변경해주세요.
sudo mount /dev/nvme1n1p1 /mnt/boot/efi #/dev/nvme1n1p1 를 <strong>부팅용 파티션</strong>으로 적절히 변경해주세요.
for i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done
sudo cp -n /etc/resolv.conf /mnt/etc/ 

sudo chroot /mnt
sudo rm -r /boot/efi/EFI/BOOT &amp;&amp; rm -r /boot/efi/EFI/pop # 그 외에 <strong>systemd 를 제외한 모든 폴더를 일일히 삭제해주세요!</strong>
sudo apt install --reinstall grub-efi-amd64 linux-generic linux-headers-generic
sudo update-initramfs -c -k all
sudo update-grub 
sudo grub-install /dev/nvme1n1 # 주 파티션과 부팅용 파티션의 바로 상위 이름으로 지정해주세요.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>만약 Super Grub2 Disk 등으로 억지로 부팅하였다면 <code>sudo rm -r /boot/efi/EFI/BOOT &amp;&amp; rm -r /boot/efi/EFI/pop</code> 부터 진행해보시면 되겠습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래는 필자의 디스크 상태(<code>sudo parted -ls</code> 의 결과)입니다. nvme1n1p3 에 Pop!_OS 주 파티션이 있고 nvme1n1p1 이 부팅용 파티션입니다. nvme0 은 윈도우가 설치되어 있습니다. 기타 명령어는 이 글의 최하단 <code>유용한 명령어</code>를 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>Model: SanDisk Cruzer Blade (scsi)
Disk /dev/sda: 30.8GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  30.7GB  30.7GB  primary               boot
 2      30.7GB  30.8GB  33.6MB  primary  fat16        esp


Model: Linux device-mapper (crypt) (dm)
Disk /dev/mapper/cryptswap: 8589MB
Sector size (logical/physical): 512B/512B
Partition Table: loop
Disk Flags: 

Number  Start  End     Size    File system     Flags
 1      0.00B  8589MB  8589MB  linux-swap(v1)


Model: Samsung SSD 970 EVO 250GB (nvme)
Disk /dev/nvme0n1: 250GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End    Size    File system  Name                          Flags
 1      1049kB  524MB  523MB   ntfs         Basic data partition          hidden, diag
 2      524MB   628MB  104MB   fat32        EFI system partition          boot, esp
 3      628MB   645MB  16.8MB               Microsoft reserved partition  msftres
 4      645MB   224GB  224GB   ntfs         Basic data partition          msftdata
 5      224GB   225GB  581MB   ntfs                                       hidden, diag


Model: Samsung SSD 970 EVO 1TB (nvme)
Disk /dev/nvme1n1: 1000GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags: 

Number  Start   End     Size    File system     Name  Flags
 1      1049kB  578MB   577MB   fat32                 boot, esp
 2      578MB   9168MB  8590MB  linux-swap(v1)        swap
 3      9168MB  1000GB  991GB   ext4</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>유용한 명령어</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>sudo parted -ls</code> 또는 <code>sudo fdisk -l</code> : 디스크등 장치의 종류를 확인할 수 있습니다.</li><li><code>efibootmgr -v</code>: 현재 로딩되는 부트 로더들을 확인하실 수 있습니다. 처음 부팅 기기 설정할 때 볼 수 있는 화면과 동일합니다.</li><li><code>update-initramfs -c -k all</code> : <code>/boot</code> 경로에 있는 <code>initrd.img</code> 파일을 갱신시켜줍니다. 이 파일의 역할은 저도 잘 모릅니다. 대충 부팅 과정에 필요한 녀석입니다. <a href="https://richong.tistory.com/348">다른 블로그 글 참조</a></li><li><code>grub-update</code> : grub 설정 파일들을 갱신해줍니다. 아래 인용문 참조해주세요. </li><li><code>sudo install-grub</code> : <code>/boot/efi/EFI</code> 폴더 내에 적절하게 부트 로더를 설치합니다. 마찬가지로 아래 인용문을 참조해주세요.</li></ul>
<!-- /wp:list -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><code>update-grub</code>, at least in Debian and its relatives like Ubuntu, is basically just a wrapper around&nbsp;<code>grub-mkconfig</code>. So it creates/updates/regenerates the GRUB&nbsp;<em>configuration</em>, not the actual bootloader itself.</p><p>(중략)</p><p>With the UEFI GRUB, the main part of the GRUB bootloader will be located as a file in the EFI System Partition, typically as&nbsp;<code>/boot/efi/EFI/&lt;name of distribution&gt;/grubx64.efi</code>&nbsp;or similar. This bootloader pathname is stored in system NVRAM (= the place where BIOS settings are stored) in the UEFI boot variables. The main part of GRUB may be completely self-contained (and must be if Secure Boot is in use!) or it may load additional functionality as GRUB modules, typically from the&nbsp;<code>/boot/grub</code>&nbsp;directory of the Linux distribution it's part of.</p><cite>update-grub vs. grub-install? <a rel="noreferrer noopener" href="https://unix.stackexchange.com/questions/465189/update-grub-vs-grub-install/465207" target="_blank">https://unix.stackexchange.com/questions/465189/update-grub-vs-grub-install/465207</a></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>거 참 힘드네요.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2425</wp:post_id>
		<wp:post_date><![CDATA[2021-03-16 02:14:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-15 17:14:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-16 02:23:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-15 17:23:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pop_os-%eb%b6%80%ed%8a%b8%eb%a1%9c%eb%8d%94-%ec%b4%88%ea%b8%b0%ed%99%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_df9b3dbf54ea3c2e605d889678ac4a75]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="FLYbkfrup4"><a href="https://linuxhint.com/grub_rescue_ubuntu_1804/">How to Use GRUB Rescue on Ubuntu 18.04 LTS</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="&#8220;How to Use GRUB Rescue on Ubuntu 18.04 LTS&#8221; &#8212; Linux Hint" src="https://linuxhint.com/grub_rescue_ubuntu_1804/embed/#?secret=FLYbkfrup4" data-secret="FLYbkfrup4" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_df9b3dbf54ea3c2e605d889678ac4a75]]></wp:meta_key>
		<wp:meta_value><![CDATA[1615829018]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a0ec3d49e5c7be74442b345ee2deb102]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="jMxDyquD9I"><a href="https://linuxhint.com/grub_rescue_ubuntu_1804/">How to Use GRUB Rescue on Ubuntu 18.04 LTS</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="&#8220;How to Use GRUB Rescue on Ubuntu 18.04 LTS&#8221; &#8212; Linux Hint" src="https://linuxhint.com/grub_rescue_ubuntu_1804/embed/#?secret=jMxDyquD9I" data-secret="jMxDyquD9I" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_a0ec3d49e5c7be74442b345ee2deb102]]></wp:meta_key>
		<wp:meta_value><![CDATA[1615828566]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] pug + tailwind + Puppeteer + Docker 로 프린터 출력용 PDF 만들기]]></title>
		<link>https://elvanov.com/2433</link>
		<pubDate>Wed, 17 Mar 2021 15:32:30 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2433</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>인터넷 쇼핑몰에서 견적서 같은 걸 자동으로 생성해주는 것을 볼 수 있는데요, 우리도 한번 구현해 봅시다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>전체적으로 Node.js 바탕으로 돌아갑니다. 우선 node 를 설치해주세요. 필자의 버전 기준은 node 14 입니다. docker 를 사용하고자 한다면, docker 와 docker-compose 까지 설치해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>각 기술에 대한 간략한 설명</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><a rel="noreferrer noopener" href="https://pugjs.org/api/getting-started.html" target="_blank">pug</a>: HTML 템플릿 엔진입니다. 직접 html 파일을 작성하는 것보다 훨씬 간편하고, 반복적인 작업을 수월하게 해줍니다. 그리고 파라미터를 받아서 달라지는 값들을 손쉽게 바꿀 수 있습니다. 실제로 사용되는 페이지를 구성하고 설계하려면 vue 또는 React 같은 프론트엔드 라이브러리를 쓰는 게 편하겠지만, 우리는 인터렉션이 전혀 필요없는 문서를 Html 로 만들 뿐입니다. 실제 html 에서 돌아가는 자바스크립트는 하나도 없으므로 pug 같은 템플릿 툴을 사용하면 편리합니다!</li><li><a rel="noreferrer noopener" href="https://tailwindcss.com/" target="_blank">tailwind</a> : 개발자 친화적인 CSS 모음입니다. CDN 에서 기본적으로 제공해주는 css 만을 사용할 것입니다. 본래 Tailwind 는 각종 커스터마이징을 지원하기도 하고  <code>@apply</code> 와 같은 편리한 CSS 기능을 사용할 수도 있으나, 지금은 사용할 수 없습니다.</li><li><a rel="noreferrer noopener" href="https://github.com/puppeteer/puppeteer" target="_blank">Puppeteer</a>: 크롬을 다룰 수 있게 해주는 Node.js 라이브러리입니다. HTML 문서를 PDF 로 바꾸는 데에는 애로사항이 많습니다. PDF 가 구성되는 방식이 HTML 과 완전히 다르기 때문인데, 그래서 우리는 검증된 출력 시스템을 이용해야 합니다. 인터넷을 찾아보면 생각보다 제대로 된 변환기가 없다는 사실을 알 수 있을 것입니다. 돈이 많다면 애초에 서버에서 돌아가는 프로그램 목적으로 제작된 <a rel="noreferrer noopener" href="https://www.princexml.com/" target="_blank">Prince</a> 와 같은 전문 소프트웨어를 사용할 수도 있지만, 음.. 네.. 380만원을 바로 태우기는 쉽지가 않지요? 그래서 크롬의 PDF 출력 시스템을 이용해봅시다.</li><li><a rel="noreferrer noopener" href="https://www.docker.com/" target="_blank">Docker</a>: 개발 환경 및 배포 환경을 이미지화하여 각종 앱을 컨테이너로 관리할 수 있게 해주는 툴입니다. 로컬에서의 결과와 서버에서의 결과를 동일하게 수행할 수 있습니다. 실제로 Puppeteer 가 서버에서 돌아갈 때 어떤 앱 의존성에 의해 제대로 구동되지 않을 수 있으므로 그 부분을 보완해주기 위함입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>결과</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2434,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/03/Screenshot-from-2021-03-17-23-59-36-2-717x1024.png" alt="" class="wp-image-2434"/><figcaption>출력 결과</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>깔끔하게 나쁘지 않쥬?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>폴더 구조</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>프로젝트 루트 폴더
├── docker-compose.yml
├── Dockerfile
├── output
│   ├── print.html
│   └── test.pdf
├── package.json
├── package-lock.json
└── src
    ├── base-print.pug
    ├── index.js
    └── estimate.pug</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>pug</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-pug"} -->
<pre class="wp-block-code language-pug"><code>//- src/base-print.pug

doctype html

mixin printWrapper
  html(lang="ko")
    head
      meta(charset="UTF-8")
      meta(name="viewport" content="width=device-width, initial-scale=1.0")
      title PRINT HTML
      link(href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&amp;display=swap" rel="stylesheet")
      link(href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet")
      
    body
      style.
        @page {
          size: A4;
          margin: 70pt 60pt 70pt;
        }
        body {
          font-size: 10pt;
          font-family: 'Noto Sans KR', Arial, Helvetica, sans-serif;
          -webkit-print-color-adjust: exact;
          line-height: 1.5;
        }
        
      .main 
        block</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-pug"} -->
<pre class="wp-block-code language-pug"><code>//- src/estimate.pug
include base-print.pug

- 
  /** 
    * @typedef {Object} EstimateContentRow
    * @property {string} type 구분
    * @property {string} name 품명
    * @property {string} standard 규격
    * @property {string} count 수량
    * @property {string} unitCostCommaed 단가
    * @property {string} suppliedCostCommaed 공급가액
    * @property {string} etc 비고
    */

  /** 
    * @typedef {Object} EstimateContent
    * @property {EstimateContentRow} 1 1번째 행
    * @property {EstimateContentRow} 2 2번째 행
    * @property {EstimateContentRow} 3 3번째 행
    * @property {EstimateContentRow} 4 4번째 행
    * @property {EstimateContentRow} 5 5번째 행
    * @property {EstimateContentRow} 6 6번째 행
    * @property {EstimateContentRow} 7 7번째 행
    * @property {EstimateContentRow} 8 8번째 행
    * @property {EstimateContentRow} 9 9번째 행
    * @property {EstimateContentRow} 10 10번째 행
    * @property {EstimateContentRow} 11 11번째 행
    */
  
  /**
    * @typedef {Object} PrintEstimateArgs
    * @property {string} dateString 날짜 
    * @property {string} repicientCompanyName 날짜 
    * @property {string} companyPlace 사업장 소재지
    * @property {string} chiefName 대표자 성명
    * @property {string} chiefPhone 대표자 전화번호
    * @property {string} totalPriceHangul 총 금액 한글표기
    * @property {string} totalPriceCommaed 총 금액 쉼표포맷팅 (예: 20,000)
    * @property {EstimateContent} estimateContent 본문 내용
    * @property {string} suppliedCostSumCommaed 공급가액 합계 (예: 120,000)
    */

- 
  const sl = &#91;
    {
      title: '날짜',
      content: dateString,
    },
    {
      title: '수신',
      content: companyPlace
    },
    {
      title: '참조',
      content: ''
    },
  ]
  
  const estimateContentWrapper = {
    1: {},
    2: {},
    3: {},
    4: {},
    5: {},
    6: {},
    7: {},
    8: {},
    9: {},
    10: {},
    11: {},
    ...estimateContent
  }

- 
  const sr = &#91;
    {
      title: '사업장 소재지',
      content: companyPlace
    },
    {
      title: '상호',
      content: '가나다라 회사'
    },
    {
      title: '사업자등록번호',
      content: 'xxx-xx-xxxxx', 
    },
    {
      title: '대표자 성명',
      content: `${chiefName}     (인)`,
    },
    {
      title: '전화번호',
      content: chiefPhone,
    },
  ]


+printWrapper
  style.
    .-m-1px {
      margin-left: -1px;
      margin-top: -1px;
    }
    .table {
      display: grid;
      grid-template-columns: 5fr 10fr 18fr 5fr 5fr 10fr 10fr 10fr;
      grid-template-rows: repeat(17, 1fr) 4fr;
    }
    .table div {
      border: 1px solid #000;
      padding: 5px;
      margin-left: -1px;
      margin-top: -1px;
    }

  - centerClass = &#91;"flex", "items-center", "place-content-center"]

  mixin spans(text)
    - split = text.split('')
    each ch, index in split
      span #{ch}

  mixin center
    .flex.items-center.place-content-center&amp;attributes(attributes)
      block
  
  h1.text-3xl.text-center.mb-16 견 &amp;nbsp; &amp;nbsp; 적 &amp;nbsp; &amp;nbsp; 서
  .mb-5.flex.justify-between
    .flex-0.mr-20
      each val, index in sl
        .flex.border-b.border-gray-800.p-2
          .flex-0.w-14.flex.items-center #{val.title}
          .flex-0.w-40.text-right #{val.content}
    .flex-0
      each val, index in sr
        .flex
          .flex-0.w-32.-m-1px.border.border-gray-800.font-bold.px-2.py-1.flex.items-center #{val.title}
          .flex-0.w-60.-m-1px.border.border-gray-800.px-2.py-1 #{val.content}
  p.mb-10 아래와 같이 견적합니다.
  .table.ml-1
    .col-span-2.row-span-2.bg-gray-100.font-bold.text-center(class=&#91;...centerClass]) 합계금액&lt;br&gt;(공급가액 + 세액)
    .col-span-6.row-span-2.text-xl.font-bold(class=&#91;...centerClass]) #{totalPriceHangul || '오십오만원정'} (₩ #{totalPriceCommaed || '550,000'})
    .bg-gray-100.font-bold(class=&#91;...centerClass]) No.
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 구분
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 품 명
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 규격
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 수량
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 단가
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 공급가액
    .bg-gray-100.font-bold(class=&#91;...centerClass]) 비고
    each row, num in estimateContentWrapper
      div(class=&#91;...centerClass]) #{num}
      div(class=&#91;...centerClass]) #{row.type}
      div(class=&#91;...centerClass]) #{row.name}
      div(class=&#91;...centerClass]) #{row.standard}
      div(class=&#91;...centerClass]) #{row.count}
      .flex.justify-between 
        if row.unitCostCommaed
          span ₩
          span #{row.unitCostCommaed}
      .flex.justify-between 
        if row.suppliedCostCommaed
          span ₩
          span #{row.suppliedCostCommaed}
      div(class=&#91;...centerClass]) #{row.etc}
    .col-span-6.flex(class=&#91;...centerClass]) 
      p.w-24.flex.justify-between
        +spans('관리비')
    div
    div 
    .col-span-6.flex(class=&#91;...centerClass]) 
      p.w-24.flex.justify-between
        +spans('기업이윤')
    div
    div
    .col-span-6.bg-gray-100.font-bold(class=&#91;...centerClass])
      p.w-24.flex.justify-between
        +spans('합계')
    .flex.justify-between.bg-gray-100
      if suppliedCostSumCommaed
        span ₩
        span #{suppliedCostSumCommaed}
    .bg-gray-100(class=&#91;...centerClass]) 부가세 별도
    .col-span-8.row-span-4 &#91;MEMO]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 크게 두 파일로 나눴습니다. 바로 <code>base-print.pug</code> 파일과 <code>estimate.pug</code> 파일입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>base-print.pug</code> 파일은 일반적인 프린트 용도로 사용할 문서 설정을 해주는 곳입니다. 글꼴 설치, tailwind css 불러오기, css 범용 설정, 프린트할 때만 적용되는 css 설정을 할 수 있습니다. <code>@page</code> 규칙이 프린트될 때 설정되는 것들 입니다.  @page 규칙과 관련된 더 자세한 내용은 <a href="https://www.smashingmagazine.com/2018/05/print-stylesheets-in-2018/" target="_blank" rel="noreferrer noopener">A Guide To The State Of Print Stylesheets In 2018</a> 이런 걸 참고하면 좋습니다. 2018년이라고 해도 거의 내용은 비슷합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>estimate.pug</code> 파일은 견적서 용도로 사용할 문서를 설정해주며, 앞선 파일에서 생성된 <code>printWrapper</code> 믹스인을 불러옵니다. 스타일은 거의 모두 tailwind 를 사용하도록 하여 css 를 불필요하게 직접 코딩하지 않도록 했습니다. 반복되는 것들은 <code>for ... in</code> 문을 사용하였습니다. pug 의 문법은 <a rel="noreferrer noopener" href="https://pugjs.org/api/getting-started.html" target="_blank">공식 문서</a>를 계속 더더욱 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>pug 문서 내부에서는 실제로 자바스크립트가 작동될 수도 있지만, 좀 더 템플릿이라는 기능에 충실하기 위해 최대한 모든 지역 변수 arg를 string 으로 받고자 했습니다. 어떤 변수를 어떻게 받아들이는지에 대한 문서화를 검색해도 정보가 없어, 일단 <code>-</code> 로 자바스크립트 블록인 걸 알린 다음 jsdoc 스타일로 문서화했습니다. 뭐 나중에 복사 붙여넣든.. 사용하기 용이할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Javascript</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>// src/index.js
const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");
const pug = require("pug");
const fileurl = require("file-url");
const { exit } = require("process");

async function printPDF() {
  const browser = await puppeteer.launch({
    headless: true,
    args: &#91;
      // Required for Docker version of Puppeteer
      "--no-sandbox",
      "--disable-setuid-sandbox",
      // This will write shared memory files into /tmp instead of /dev/shm,
      // because Docker’s default for /dev/shm is 64MB
      "--disable-dev-shm-usage",
    ],
  });
  const compile = pug.compileFile(path.resolve(__dirname, "estimate.pug"));
  const html = compile({
    dateString: "2021-03-20",
    repicientCompanyName: "레고 주식회사",
    companyPlace: "부산시 서구 몰라리동 맨맨",
    chiefName: "홍길동",
    chiefPhone: "010-1234-5678",
    totalPriceHangul: "육십육만원정",
    totalPriceCommaed: "660,000",
    estimateContent: {
      2: {
        type: "상품",
        name: "슈퍼 울트라 좋은 것",
        standard: "-",
        count: "1EA",
        unitCostCommaed: "600,000",
        suppliedCostCommaed: "600,000",
        etc: "",
      },
    },
    suppliedCostSumCommaed: "",
  });

  const htmlPath = path.resolve(__dirname, "..", "output", "print.html");
  fs.promises.writeFile(htmlPath, html);
  const htmluri = fileurl(htmlPath);

  const page = await browser.newPage();
  await page.goto(htmluri, {
    waitUntil: "networkidle0",
  });

  const pdf = await page.pdf({ format: "a4" });

  await browser.close();
  return pdf;
}

printPDF()
  .then((buf) =&gt; {
    const writer = fs.createWriteStream(
      path.resolve(__dirname, "../output/test.pdf")
    );
    writer.write(buf);
    writer.end();
  })
  .catch((err) =&gt; {
    console.error(err);
    exit(2);
  });
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>puppetter.launch</code> 할 때 전달하는 args 에 대해서 한번 더 살펴보면, 다음과 같다는 걸 알 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>&#91;
  "--no-sandbox",
  "--disable-setuid-sandbox",
  "--disable-dev-shm-usage",
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>pug 는 <code>complie</code> (혹은 <code>compileFile</code>) 함수를 통해 일단 파일을 읽어들입니다. 그 다음 render 함수에서 실제 html 로 생성할 때 arg로 값들을 전달합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>file-url</code> 라이브러리는 단순히 로컬 파일을 uri 형태로 변환하기 위함입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 <code>node src/index.js</code> 명령을 실행시키면 아마 제대로 실행이 될 것입니다! (만약 <code>node .</code> 이런 식의 간단한 명령어로 실행하고 싶다면 <code>package.json</code> 에서 <code>main</code> 키의 내용을 <code>"src/index.js"</code> 이런 식으로 설정해주면 됩니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Docker</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Docker 부분에서 보안 조치는 별로 하지 않았습니다. 어차피 컨테이너 안에서 돌아갈 것이고, 실제 웹사이트에 접속하는 것이 아닌 직접 생성한 html 파일을 출력하고자 하기 때문에 알 수 없는 페이지에 접속하는 등의 보안이 불안한 부분은 크게 생기지 않으리라 생각됩니다. 그래서 node 앱 실행될 때 root 권한으로 실행되도록 했습니다. 그래서 puppeteer 에서도 <code>--no-sandbox</code> 인자를 추가해줘야 제대로 동작합니다. 실제 배포 환경에서 사용할 때에는 <a href="https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-puppeteer-in-docker" target="_blank" rel="noreferrer noopener">Puppeteer 문서에서 알려주듯이</a> USER 를 따로 설정해주어 보안을 강화하는 것이 나을 것 같습니다. 필자는 아래와 같이 <code>Dockerfile</code> 을 설정했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-dockerfile"} -->
<pre class="wp-block-code language-dockerfile"><code># Dockerfile

FROM node:14 as node-install

COPY ./package*.json ./

RUN npm install

FROM node:14

RUN apt-get update \
    &amp;&amp; apt-get install -y wget gnupg \
    &amp;&amp; wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    &amp;&amp; sh -c 'echo "deb &#91;arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    &amp;&amp; apt-get update \
    &amp;&amp; apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 fonts-noto-cjk \
      --no-install-recommends \
    &amp;&amp; rm -rf /var/lib/apt/lists/*

WORKDIR /app

RUN &#91;"mkdir", "output"]

COPY --from=node-install /node_modules ./node_modules
COPY --from=node-install package*.json ./
COPY ./src src


ENTRYPOINT &#91; "node", "."]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>apt-get</code> 등 앱 설치 단계 이후 <code>npm install</code> 를 넣게 되면 앱 설치 구성을 바꿀 때마다 사실은 전혀 영향이 없는 <code>npm install</code> 까지 다시 수행하기 때문에 <a rel="noreferrer noopener" href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank">multi-stage build</a> 기능을 간단하게 이용했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>한글 폰트를 설정해봅시다. 2021년 초 기준으로 범용적으로 많이 쓰이고 무난하게 예쁜 <strong>Noto Sans KR</strong> 를 설치하도록 합니다. 이는 <code>apt-get install -y</code> 에서 <code>fonts-noto-cjk</code> 로 설치하고 있는 것을 확인할 수 있습니다. 사실 글꼴을 별도로 설치할 필요가 없는데요, pug 에서 이미 웹폰트를 사용하고 있기 때문에 제대로 로딩이 됩니다. 다만 만일의 경우를 위해 시스템 기본 글꼴로써 동작할 수 있도록 해줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 docker-compose 로 실행을 시켜 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-yml"} -->
<pre class="wp-block-code language-yml"><code># docker-compose.yml
version: '3'

services: 
  test:
    build: .
    volumes:
      - ./output:/app/output</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>사실 docker-compose 는 정말 별 거 없습니다. 그냥 volume 설정조차 일일히 하는 걸 줄이고자 했습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 다음 명령어로 실행하면 앱이 구동되어 output 폴더에 원하는 결과가 등장합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-plaintext"} -->
<pre class="wp-block-code language-plaintext"><code>sudo docker-compose up --build</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>To do</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>저 템플릿에는 날인(도장)이 없습니다. 직접 잘 추가해주세요.. ㅎ.. 뭐.. 템플릿은 어차피 참고용이니까 하하.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2433</wp:post_id>
		<wp:post_date><![CDATA[2021-03-18 00:32:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-17 15:32:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-18 00:36:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-17 15:36:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-pug-tailwind-puppeteer-docker-%eb%a1%9c-%ed%94%84%eb%a6%b0%ed%84%b0-%ec%b6%9c%eb%a0%a5%ec%9a%a9-pdf-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="tailwind"><![CDATA[tailwind]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] multer 업로드 실패(에러) 핸들링하기 (작성중)]]></title>
		<link>https://elvanov.com/2448</link>
		<pubDate>Fri, 19 Mar 2021 15:37:42 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2448</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>업로드가 실패하는 원인은 두 가지가 있을 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li> 업로드 제대로 잘 되고 있었는데 뭔가 서버에서 문제가 터져서 작동을 멈췄을 때</li><li>업로드 제대로 되고 있다가 그냥 사용자가 브라우저를 꺼버렸을 때.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>생각보다 이 세상에는 인터넷이 느린 곳이 많습니다. 특히 모바일 환경이라면 인터넷이 느린 상황을 더더욱 고려해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Node.js 의 Multer 는 파일 업로드 모듈로 유명합니다. 근데 문제는 에러 핸들링이 어렵다는 것입니다.  </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2448</wp:post_id>
		<wp:post_date><![CDATA[2021-03-20 00:37:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-19 15:37:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-20 00:38:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-19 15:38:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-multer-%ec%97%85%eb%a1%9c%eb%93%9c-%ec%8b%a4%ed%8c%a8-%ed%95%b8%eb%93%a4%eb%a7%81%ed%95%98%ea%b8%b0-%ec%9e%91%ec%84%b1%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[C] 간단한 파서 (Parser) 직접 만들기 (작성중)]]></title>
		<link>https://elvanov.com/2452</link>
		<pubDate>Thu, 25 Mar 2021 18:28:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2452</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>극한의 환경이라고도 알려져 있는 C, 여기서 우리는 간단한 파싱 작업을 할 수 있는 프로그램을 만들고자 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리의 목표는 간단한 파서(Parser)를 만드는 것입니다. 다음 파일을 규칙에 맞게 잘 읽어들이는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>R   1920 1080
A   0.2                                    255,255,255

c   -50,0,20       0,0,0      70
l   -40,0,30                  0.7          255,255,255

pl  0,0,0          0,1.0,0                 255,0,225
sp  0,0,20                    20           255,0,0
sq  0,100,40       0,0,1.0    30           42,42,0
cy  50.0,0.0,20.6  0,0,1.0    14.2  21.42  10,0,255
tr  10,20,10       10,10,20   20,10,10     0,0,255</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>본 파일은 어떤 그래픽 렌더링 프로그램에 전달할 입력 파일입니다. 이 파일은 렌더링 프로그램의 각종 설정과 렌더링할 도형을 정의합니다. 정의하는 방법은 다음과 같이 정의되어 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>지시자</th><th>설명</th><th>입력할 값</th></tr></thead><tbody><tr><td><code>R</code></td><td>해상도 설정</td><td>정수(가로 해상도), 정수(세로 해상도)</td></tr><tr><td><code>A</code></td><td>주변광 설정</td><td>밝기(0.0~1.0), 색상(RGB)</td></tr><tr><td><code>c</code></td><td>카메라 설정</td><td>좌표값(x, y, z), 카메라 방향(x, y, z), 카메라 각도(0~180)</td></tr><tr><td><code>l</code></td><td>빛 설정</td><td>좌표값(x, y, z), 빛의 세기(0.0~1.0), 색상(RGB)</td></tr><tr><td><code>pl</code></td><td>평면 추가</td><td>좌표값(x, y, z), 방향(x, y, z)</td></tr><tr><td><code>sp</code></td><td>구 추가</td><td>좌표값(x, y, z), 반지름, 색상(RGB)</td></tr><tr><td><code>sq</code></td><td>정사각형 추가</td><td>좌표값(x, y, z), 방향(x, y, z), 한 변의 길이, 색상(RGB)</td></tr><tr><td><code>cy</code></td><td>원기둥 추가</td><td>좌표값(x, y, z), 방향(x, y, z), 반지름, 높이, 색상(RGB)</td></tr><tr><td><code>tr</code></td><td>삼각형 추가</td><td>좌표값1(x, y, z), 좌표값2(x, y, z), 좌표값3(x, y, z), 색상(RGB)</td></tr></tbody></table><figcaption>입력 파일 설명</figcaption></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>세부 목표는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>입력 파일을 읽어서 어떤 구조체 안에 데이터를 전부 담아 놓으십시오. 데이터는 외부에서 가져다 쓰기 편하도록 구조화되어 있어야 합니다.</li><li>입력 파일의 규칙이 잘못 되었을 때, 왜 잘못되었는지, 어디서 잘못되었는지 등의 에러 정보를 출력하고 프로그램을 즉시 종료하세요.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>해당 과제는 다음과 같은 조건 아래에 진행됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>주어진 함수 외의 함수는 사용이 불가합니다. 주어진 함수는 다음과 같습니다: <code>malloc</code>, <code>free</code>, <code>exit</code>, <code>write</code>, <code>open</code>, <code>read</code>, <code>close</code>. </li><li>전역 변수는 사용이 불가합니다.</li><li>아주 큰 파일이 들어올 수 있으므로, 버퍼사이즈가 지정되고, 버퍼사이즈만큼 파일을 읽어야 합니다.</li><li>컴파일은 gcc 또는 clang 으로 진행합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>누가 왜 저런 조건을 만들었는가는 알 수 없지만, 해당 조건을 만족시키기 위하여 몇 가지 기능들을 먼저 모듈화한 후 진행하도록 하겠습니다. 우선 무언가를 출력하려면 <code>&lt;unistd.h&gt;</code> 헤더에 있는 <code>write</code> 함수를 사용해야 합니다. <code>printf</code> 조차 사용할 수 없기에, 출력하는 부분을 모듈화하여 사용하기 (그나마) 편하도록 진행할 예정입니다. 그리고 전역 함수를 사용하지 못하므로 static 함수를 이용하여 전역 변수처럼 사용할 예정입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리가 지금 만드는 프로그램은 렌더링 프로그램이 아닙니다. 해당 파일을 잘 읽어들이는 파서 프로그램입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글에서는 헤더 파일에 프로토타입을 일일히 기록하지 않습니다. 만약 직접 따라하면서 실습한다면, 헤더 파일에 함수 프로토타입을 모두 넣어주시기 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>파싱과 토큰</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>파서를 본격적으로 만들어보기 전에 먼저 개념을 정리해봅시다. 파서를 한국어로 좀 더 부드럽게 옮긴다면 구문 분석기라고 말할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>파싱</strong>은 일련의 문자열을 의미있는&nbsp;<a href="https://ko.wikipedia.org/wiki/%ED%86%A0%ED%81%B0">토큰</a>(token)으로 분해하고 이들로 이루어진&nbsp;<a href="https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%8A%A4_%ED%8A%B8%EB%A6%AC">파스 트리</a>(parse tree)를 만드는 과정을 말한다.</p><cite>위키백과</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>토큰은&nbsp;<a href="https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%8B%B1">파싱</a>&nbsp;목적을 위해 분류화를 명시적으로 지시하는 어휘소를 표현하는 구조의 하나이다.</p><cite>역시 위키백과</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>대~충 개념적이므로 이 글에서는 파서(파싱)과 토큰을 다음과 같이 특수하게 정의내리도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>파싱: 입력된 문자열로부터 토큰을 뽑아내고, 문법에 맞게 토큰을 배열/결합/변형하여 의미있는 값과 사용하기 간편한 구조를 만들어내는 것.</li><li>토큰: 최소의 의미를 가지는 문자열(혹은 문자)의 묶음. 공백(=단순 토큰 구분용 문자)을 제외한 모든 문자 데이터가 살아있어야 함.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>예를 들어 아래 한 줄을 가지고 설명해보도록 하겠습니다. 이 한 줄을 토큰으로 바꿔보고자 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>l   -40,0,30                  0.7          255,255,255</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>토큰은 단순한 묶음이므로 그 순서도 입력 문자열의 순서와 같습니다. 해당 순서가 옳은 건지 아닌지는 파서가 판단할 일입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>&#91;type:name, value:l]
&#91;type:number, value:-40]
&#91;type:comma, value:,]
&#91;type:number, value:0]
&#91;type:comma, value:,]
&#91;type:number, value:30]
&#91;type:number, value:0.7]
&#91;type:integer, value:255]
&#91;type:comma, value:,]
&#91;type:integer, value:255]
&#91;type:comma, value:,]
&#91;type:integer, value:255]
&#91;type:newline, value:\n]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇다면 문자열에서 토큰을 생성하는 과정에서 일어나는 에러란 무엇일까요? 바로 <strong>지원하지 않는 문자가 있을 때 에러가 발생</strong>합니다. 예를 들어 위 입력 파일에서 우리는 <code>+</code> 혹은 <code>*</code> 과 같은 기호를 사용하지 않습니다. 사용할 일이 없습니다. 이 문자는 아무런 의미를 가질 수 없으므로 바로 에러를 내는 것이 합당합니다. 또한 <strong>토큰을 생성하는 과정에서 예상하지 못한 문자가 나왔을 때</strong>에도 에러가 발생할 수 있습니다. 예를 들어 <code>.</code>은 숫자 안에 포함이 됩니다. 그러나 <code>123.456.789</code> 와 같은 입력이 들어가게 되면 <code>123.456</code> 까지는 숫자로 인식할 수 있지만 그 뒤에 바로 <code>.</code>이 등장하므로 기대하지 않은 토큰 값이라고 처리할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 만약 파싱까지 완료한다면 어떤 구조가 생길까요? 의사 코드로 나타내보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>CreateLight {
  light: Coordinate {
    x: -40
    y: 0
    z: 30
  }
  strength: 0.7
  color: RGB {
    r: 255
    g: 255
    b: 255
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇다면 이제 <code>create_light.light.x</code> 등으로 값에 바로 접근해볼 수도 있겠습니다! 만약 파싱 과정에서 에러가 일어난다면, <strong>예상하는 토큰 타입이 어긋날 때 발생</strong>합니다. 예를 들어 색상 값을 받아와야 하는데 <code>255,255,</code> 와 같이 입력이 들어온다면, 마지막 숫자가 존재하지 않으므로 에러가 발생합니다. 토큰 단계에서는 에러가 나지 않습니다. 왜냐하면 지원하지 않는 문자열도 없고, 기대하지 않은 토큰 값도 없기 때문이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>역할을 나누어봅시다. 이 글에서 파서는 크게 세 가지 역할로 나눌 수 있으며, 서로의 역할을 다하기 위해 해당 기능을 구현하여야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><thead><tr><th>역할 이름</th><th>역할 설명</th><th>기능</th></tr></thead><tbody><tr><td>FileReader</td><td>파일을 읽습니다.</td><td>- <strong><code>fr_read</code></strong> : 파일로부터 하나의 글자를 읽습니다. 문자들을 읽을 때의 버퍼 관리를 모두 책임집니다. 만약 파일의 끝에 다다랐을 경우 FileReader 의 상태를 변경하거나 <code>'\0'</code>를 리턴합니다.<br>- <strong>위치값 저장</strong> : 마지막으로 읽은 문자의 위치를 저장합니다.</td></tr><tr><td>Tokenizer</td><td>토큰을 생성합니다.</td><td>- <code><strong>consume</strong></code> : 현재 가리키고 있는 토큰을 소모하고 다음 토큰을 구합니다. 토큰이 생성되는 규칙에 대한 것을 전담합니다.<br>- <strong><code>lookahead</code></strong> : 현재 가리키고 있는 토큰의 정보를 보여줍니다. 이 함수는 보여주기만 할 뿐입니다.<br>- <strong>FileReader 로부터 읽은 문자를 임시 저장</strong> : 한번 fr_read 하게 되면 되돌릴 수 없으므로, 계산하고자 하는 문자열이 어떠한 토큰으로 판명날 때까지 데이터를 모두 지니고 있어야 합니다.<br>- <strong>Token 의 위치 저장</strong> : 추후 문법적으로 예상치 못한 토큰일 때 해당 토큰의 위치를 알려주면서 에러 메시지를 띄워야 하므로 토큰의 시작 위치 등을 저장해놓습니다.</td></tr><tr><td>Parser</td><td>파싱을 수행합니다.</td><td>- <strong><code>parse</code></strong> : 파싱을 수행합니다. 성공적으로 파싱된다면 파싱된 구조체가 나올 것이고, 실패했다면 에러를 출력하고 프로그램이 종료됩니다.<br>- <strong>Tokenizer 로부터 얻은 token 을 임시 저장</strong>: 한번 consume 하게 되면 이전 토큰을 얻을 수 없으므로, 토큰들이 문법에 맞는지 판단할 수 있을 때까지 데이터를 모두 지니고 있어야 합니다.</td></tr></tbody></table><figcaption>역할들</figcaption></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<h2>프로젝트 세팅</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 프로젝트는 gcc 또는 clang 컴파일러를 사용하고, make 로 빌드 과정을 간소화합니다. mac이나 linux 라면 기본 컴파일러와 make 가 이미 설치되어 있지만, Windows 라면 아마 직접 설치하셔야 할 것입니다. 설치 법은 본 블로그에서는 소개드리지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>폴더 구조는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>.
├── input.txt
├── Makefile
├── src
│   ├── parser.h
│   └── 각종 소스파일들.c
└── test.c # main 함수</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>input.txt</code> 는 상단에 우리가 읽어야 할 입력 파일입니다. 우선 <code>Makefile</code> 먼저 간단하게 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-makefile"} -->
<pre class="wp-block-code language-makefile"><code># Makefile

SRCS = $(wildcard src/*.c)
OBJS = $(SRCS:.c=.o)
INC = -I./src
LIB = -lm
ARGS = -g

test : $(OBJS)
	gcc $(ARGS) $(INC) $^ test.c -o do_test $(LIB)
	./do_test

$(OBJS) : %.o: %.c
	gcc $(ARGS) $(INC) -c $^ -o $@

clean:
	rm -rf $(OBJS)

re:	clean test

valgrind: test
	valgrind --leak-check=full \
         --show-leak-kinds=all \
         --track-origins=yes \
         --verbose \
         ./do_test


.PHONY: test clean re valgrind
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>Makefile</code> 에 의해서, <code>make</code>, <code>make test</code>, <code>make re</code> 명령어를 쳐서 테스트를 수행할 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다음은 <code>test.c</code> 파일입니다. 여기에 <code>main</code> 함수가 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// test.c
#include &lt;stdio.h&gt;
#include "parser.h"

int main(void)
{
	// 내용
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>전역처럼 쓸 수 있는 static 구조체 만들기</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.h
typedef struct s_parser
{
	// something
}				t_parser;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.c
t_parser	*parser()
{
	static t_parser	p;
	return &amp;p;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 만들어두면 언제 어디에서든지 <code>parser()</code>를 호출하기만 해도 같은 <code>p</code>에 접근할 수 있게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>매크로 정의</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>미리 필요한 매크로를 아래와 같이 정의해 놓읍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.h

# define TOKEN_NOT_SPECIFIED	0
# define TOKEN_INT				1
# define TOKEN_DOUBLE			2
# define TOKEN_NAME				3
# define TOKEN_NEWLINE			5
# define TOKEN_COMMA			6
# define TOKEN_END				100

# define ERR_READ 					1
# define ERR_FILE_OPEN 				2
# define ERR_PARSE					3
# define ERR_STR_ALLOC				4
# define ERR_STR_PUSH_CHAR_ALLOC	5
# define ERR_TOKEN_CONSUME			6

# define BUF_SIZE 100</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>파일 읽기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>과제의 조건을 충족시키기 위해 우선 기능들을 모듈화 해놓도록 하겠습니다. 파일을 읽기 위해서는 버퍼를 활용해야 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.h<strong><em>
</em></strong> 
+typedef struct s_filereader
+{
+	const char	*path;
+	int			fd;
+	char		buf&#91;BUF_SIZE];
+	int			c_col;
+	int			c_row;
+}				t_filereader;

 typedef struct s_parser
 {
+	t_filereader	fr;
 }				t_parser;</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>path</code> : 파일 경로를 저장합니다.</li><li><code>fd</code> : 파일을 open 하고 난 후 파일 디스크립션을 저장합니다.</li><li><code>buf[BUF_SIZE]</code> : 버퍼입니다. </li><li><code>c_col</code>, <code>c_row</code> : 현재 읽고 있는 위치를 저장합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>자, 이제 파일을 열어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/file_reader.c
#include &lt;fcntl.h&gt;
#include "parser.h"

int			file_open(int *fd, const char *path)
{
	*fd = open(path, O_RDONLY);
	if (*fd == -1)
		return (0);
	return (1);
}

t_filereader	fr(const char *path)
{
	t_filereader	fr;
	int				fd;

	if(!file_open(&amp;fd, path))
		exit(ERR_FILE_OPEN);
	fr.fd = fd;
	fr.path = path;
	fr.c_row = 1;
	fr.c_col = 0;
	return (fr);
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.c
+void	init_parser(const char *path)
+{
+	t_parser *p;
+
+	p = parser();
+	p-&gt;fr = fr(path);
+}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // test.c
 #include &lt;stdio.h&gt;
 #include "parser.h"
 
 int main(void)
 {
+	init_parser("./input.txt");
	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 <code>fr</code> 함수를 통해서 <code>t_filereader</code> 구조체를 생성할 수 있게 되었습니다. 여기 내부에서는 <code>file_open</code> 함수를 부릅니다. 파일을 열 때는 읽기 전용 모드로 열고 있습니다. <code>fr</code> 함수를 <code>init_parser</code> 함수에서 호출하고 있고, 이 <code>init_parser</code> 함수는 <code>main</code> 에서 호출되고 있습니다. <code>init_parser</code> 를 호출할 때 읽을 파일 이름도 설정하고 있음을 보실 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 파일의 내용을 읽으려면 어떻게 해야 할까요? 우선 <code>read</code> 함수를 써서 <code>buf</code> 에 데이터들을 넣어놓은 다음, <code>buf</code> 에서 한 글자씩 읽어오면 되겠지요. 우리는 <strong>하나의 글자만 읽어서 보내주는 <code>char fr_read()</code> 함수를 구현하면 됩니다.</strong> 우선 한 가지 생각이 듭니다. <code>fr_read</code> 함수는 한번 호출할 때마다 한 글자씩 내보내지만, 우리가 실제로 <code>read</code> 함수를 쓸 때에는 내용을 왕창 읽어옵니다. 그렇다면, 호출 빈도로 따진다면 <code>fr_read</code>가 <code>read</code> 보다 훨씬 자주 호출될 것 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 일단 가정을 해 봅시다. <code>buf</code> 에 <code>read</code> 한 값들이 온전히 잘 들어가있다고 가정합시다. 그렇게 되었을 때, 우리는 한 글자씩 뽑아내야 하기 때문에 뽑아낼 위치 정보를 기억하고 있어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.h
 typedef struct s_filereader
 {
 	const char	*path;
 	int			fd;
+	<strong><em>int			pos;</em></strong>
 	char		buf&#91;BUF_SIZE];
 	int			c_col;
 	int			c_row;
 }				t_filereader;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/file_reader.c
char			fr_read()
{
	t_filereader	*fr;
	char			c;

	fr = &amp;parser()-&gt;fr;
	c = fr-&gt;buf&#91;fr-&gt;pos];
	fr-&gt;pos++;
	fr-&gt;c_col++;
	if (c == '\n')
	{
		fr-&gt;c_row ++;
		fr-&gt;c_col = 0;
	}
	return (c);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>c = fr-&gt;buf[fr-&gt;pos]</code> 에서 <code>pos</code> 의 값에 의거하여 문자를 <code>buf</code> 에서 뽑아내고 있고, 그 다음 <code>fr-&gt;pos++</code> 를 통해 <code>pos</code>의 값을 갱신시켜주고 있습니다. 뒤의 코드들은 위치 값을 갱신시켜주고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자, 그렇다면 이제 <code>pos</code> 가 유효한 값을 가리키도록 보장만 해주면 본 함수는 끝이 날 것 같습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.h
 typedef struct s_filereader
 {
 	const char	*path;
 	int			fd;
 	int			pos;
 	char		buf&#91;BUF_SIZE];
+	int			eof_reached;
+	int			eof_reached_len;
 	int			c_col;
 	int			c_row;
 }				t_filereader;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/file_reader.c
 t_filereader	fr(const char *path)
 {
 	t_filereader	fr;
 	int				fd;
 
 	if(!file_open(&amp;fd, path))
 		exit(ERR_FILE_OPEN);
 	fr.fd = fd;
 	fr.path = path;
+	fr.eof_reached = 0;
+	fr.eof_reached_len = 0;
 	fr.c_row = 1;
 	fr.c_col = 0;
 	return (fr);
 }
 
+int				make_frpos_safe(t_filereader *fr)
+{
+	int				border;
+
+	if (fr-&gt;eof_reached)
+		border = fr-&gt;eof_reached_len;
+	else
+		border = BUF_SIZE;
+	if (fr-&gt;eof_reached &amp;&amp; fr-&gt;pos &gt;= border)
+		return (0);
+	if (fr-&gt;pos &gt;= border)
+		// 여기서 뭔가를 해야 함!
+	return (1);
+}
 
 
 char			fr_read()
 {
 	t_filereader	*fr;
 	char			c;
 
 	fr = &amp;parser()-&gt;fr;
+	if (!make_frpos_safe(fr))
+		return ('\0');
 	c = fr-&gt;buf&#91;fr-&gt;pos];
 	fr-&gt;pos++;
 	fr-&gt;c_col++;
 	if (c == '\n')
 	{
 		fr-&gt;c_row ++;
 		fr-&gt;c_col = 0;
 	}
 	return (c);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 <code>eof_reached</code> 와 <code>eof_reached_len</code> 를 추가해줬습니다. eof 일 때와 그렇지 않을 때 <code>pos</code> 가 안전한 구간이 다르므로 그 구간까지 계산하기 위해 새로운 변수를 추가하였습니다. <code>eof_reached</code> 는 현재 eof 에 도달했는지의 여부를 알려주고 (eof 여도 여전히 버퍼에 읽을 것이 남아있다면 계속해서 읽어야 합니다.) <code>eof_reached_len</code> 은 eof에 다다른 시점에 읽었던 버퍼의 길이입니다. eof 가 아니라면 그 경계(<code>border</code>)는 단순히 <code>BUF_SIZE</code> 가 되겠지만, 이미 eof 에 도달했다면 그만큼 읽은 사이즈(<code>eof_reached_len</code>)가 경계가 됩니다. 만약 eof에 도달했고 <code>buf</code>에 남은 데이터도 모조리 읽었다면, 이제 <code>fr_read</code> 는 더이상 <code>read</code> 함수를 호출할 필요가 없어집니다. 그럴 때에는 단순히 <code>'\0'</code> 를 리턴합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>eof에 도달하지 않은 채로 그냥 경계(<code>border</code>) 를 넘었다면, 새롭게 버퍼에 데이터를 채워주면서 <code>pos</code> 를 초기화시켜주면 됩니다. 아래에서 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/file_reader.c
 
+void			read_to_buffer(t_filereader *fr)
+{
+	int				n_read;
+	int				i;
+
+	fr-&gt;pos = 0;
+	n_read = read(fr-&gt;fd, fr-&gt;buf, BUF_SIZE);
+	if (n_read == -1)
+		exit(ERR_READ);
+	if (n_read &lt; BUF_SIZE)
+	{
+		fr-&gt;eof_reached = 1;
+		fr-&gt;eof_reached_len = n_read;
+		i = n_read - 1;
+		while (++i &lt; BUF_SIZE)
+			fr-&gt;buf&#91;i] = '\0';
+	}
+}
 
 int				make_frpos_safe(t_filereader *fr)
 {
 	int				border;
 
 	if (fr-&gt;eof_reached)
 		border = fr-&gt;eof_reached_len;
 	else
 		border = BUF_SIZE;
 	if (fr-&gt;eof_reached &amp;&amp; fr-&gt;pos &gt;= border)
 		return (0);
 	if (fr-&gt;pos &gt;= border)
+		<strong><em>read_to_buffer(fr);</em></strong>
 	return (1);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>read_to_buffer</code> 함수에서 예외 처리, 초기화, eof 감지 등을 합니다. 만약 eof 일 시 <code>buf</code>에 남은 데이터를 재사용하지 않도록 나머지 값을 <code>while</code> 문을 활용해 <code>'\0'</code> 으로 초기화시킵니다. 이제 간단한 테스트를 수행해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // test.c
+void	test_filereader()
+{
+	char c;
+
+	init_parser("./input.txt");
+	c = 1;
+	while(c)
+	{
+		c = fr_read();
+		printf("%c", c);
+	}
+}
 
 int main(void)
 {
+	test_filereader();
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>테스트를 수행하면 아주 결과가 잘 나온다는 걸 확인하실 수 있습니다. 우리는 테스트를 하기 위한 목적으로만 <code>printf</code> 를 사용할 것입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>string 구조체</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>c 는 문자열 관련 기능이 빈약합니다. <code>&lt;string.h&gt;</code> 헤더에서 많은 것을 지원해주지만, 어차피 이 표준 라이브러리에는 길이가 정해지지 않은 문자열을 다루는 데 상당한 애로사항이 있습니다. 우리는 토큰 하나가 어느 정도의 길이로 들어올 지 모릅니다. 그러므로 충분한 길이의 문자열 (예: <code>char str[1000])</code> 등으로 처리하려고 해도 길이가 모자랄 지 모릅니다. 물론 평균적인 토큰의 길이를 생각한다면 1000 칸은 너무 과도한 것 같기도 합니다. 고정 길이는 이렇게 상황에 유연하게 대처하지 못하는 문제가 있으므로 가변적으로 크기를 할당하여 사용하는 <code>t_str</code> 구조체를 만들어서 활용해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아이디어는 이렇습니다. 처음에 조그맣게 공간을 할당해놓습니다. 그러고 문자열에 공간을 채워넣어갑니다. 만약 전체 할당된 공간(<code>max</code>)의 1/2 에 다다랐다면, <code>max</code> 를 두 배 확장하고 크기도 두 배로 다시 할당합니다. 항상 문자열의 길이를 즉시 알 수 있도록 길이 값(<code>len</code>)을 저장해놓습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.h
# define INITIAL_STR_LEN 10

typedef unsigned long t_ul;

typedef struct s_str
{
	t_ul	len;
	t_ul	max;
	char	*ptr;
}				t_str;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c
t_str	create_str()
{
	t_str	str;

	str.len = 0;
	str.max = INITIAL_STR_LEN;
	str.ptr = (char *)malloc(sizeof(char) * INITIAL_STR_LEN);
	if (!str.ptr)
		exit(ERR_STR_ALLOC);
	return (str);
}

void	destroy_str(t_str *str)
{
	free(str-&gt;ptr);
	str-&gt;ptr = 0;
	str-&gt;len = 0;
	str-&gt;max = 0;

}</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>len</code> : 항상 문자열의 길이를 나타냅니다.</li><li><code>max</code> : 문자열이 할당된 길이를 나타냅니다. </li><li><code>ptr</code> : 할당한 공간의 포인터입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>일단 문자열의 초기 최대치(<code>max</code>)는 10으로 설정해놓았습니다. 생성(<code>create_str</code>)하며 파괴(<code>destroy_str</code>)하는 함수도 만들었습니다. (<code>malloc</code> 하나에 <code>free</code> 하나가 대응되는 것처럼 create 하나와 destroy 하나가 대응되도록 설계합니다.) 그렇다면 이제 이 t_str 에 문자열을 추가할 수 있는 방법을 주어야겠지요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c
void	str_push_char(t_str *str, char c)
{
	str-&gt;ptr&#91;str-&gt;len] = c;
	str-&gt;len += 1;
	if (str-&gt;len &gt; str-&gt;max / 2)
	{
		// str-&gt;ptr 의 크기를 확장하자!
	}
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>len</code> 은 항상 문자열의 길이를 나타내므로, <code>ptr[len]</code> 은 항상 마지막 문자의 다음 위치를 가리킵니다. 즉 새롭게 추가할 문자가 들어갈 위치를 가리키고 있다고 말할 수 있습니다. 여기에 문자를 대입하고 <code>len</code> 을 1 증가시켜줍니다. 대입을 마친 뒤에 <code>len</code> 이 <code>max / 2</code> 보다 길어졌을 경우에는 문자열을 새롭게 할당하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/string.c
 void	str_push_char(t_str *str, char c)
 {
+	t_ul	i;
+	char	*new_ptr;
 
 	str-&gt;ptr&#91;str-&gt;len] = c;
 	str-&gt;len += 1;
 	if (str-&gt;len &gt; str-&gt;max / 2)
 	{
+		str-&gt;max *= 2;
+		new_ptr = (char *)malloc(sizeof(char) * str-&gt;max);
+		if (!new_ptr)
+			exit(ERR_STR_PUSH_CHAR_ALLOC);
+		i = 0;
+		while (i &lt; str-&gt;len)
+		{
+			new_ptr&#91;i] = str-&gt;ptr&#91;i];
+			i++;
+		}
+		free(str-&gt;ptr);
+		str-&gt;ptr = new_ptr;
 	}
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>새롭게 할당하는 방법은 간단합니다. 공간만 2배로 키워서 새롭게 할당한 다음, 모든 내용을 복사하고, <code>ptr</code> 를 교체합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 문자열에 접근하는 방법을 제공해주도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c
const char	*raw(t_str str)
{
	str.ptr&#91;str.len] = '\0';
	return (str.ptr);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그냥 직접 <code>str.ptr</code> 에 바로 접근하면 되지 않느냐고 생각하실 수 있지만, 그래도 상관없습니다. 하지만 좀 더 명확한 쓰임새를 보여줄 수 있습니다. raw 를 통해 불러오는 문자열 포인터는 c-style 문자열에 호환되도록 보장해줄 수 있습니다. 또한 <code>const char *</code> 로 리턴해줌으로써 직접 포인터로 수정할 수 없도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 기본적으로 <strong>문자열을 수정하는 방법을 제공하지 않을 것</strong>입니다. 왜냐하면 굳이 필요가 없기 때문이지요. 토큰을 읽어드리는 대로 그대로 받아들이면 될 뿐입니다. 만약 읽고 있었던 토큰이 잘못되어서 수정해야 한다면, 그냥 기존 것을 폐기한 다음 새롭게 만드는 것이 더 쉽습니다. 우리가 만드는 프로그램에서 <code>t_str</code> 의 기능은 이정도 기능만으로도 충분합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>앞으로 필요한 기능이 생긴다면 그때 그때 추가하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Tokenizer 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 토큰과 Tokenizer 를 먼저 정의해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.h

typedef int t_token_type;

typedef struct s_token
{
	int				file_row;
	int				file_col;
	t_str			str;
	t_token_type	type;
}				t_token;

typedef struct s_tokenizer
{
	t_token		current_token;
	t_str		reading;
}				t_tokenizer;</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><code>t_token::file_row</code>  : 해당 토큰의 줄 정보입니다.</li><li><code>t_token::file_col</code> : 해당 토큰의 행 정보입니다.</li><li><code>t_token::str</code> : 해당 토큰의 실제 문자열입니다.</li><li><code>t_token::type</code> : 해당 토큰의 종류입니다.</li><li><code>t_tokenizer::current_token</code> : 현재 가리키고 있는 토큰을 의미합니다.</li><li><code>t_tokenizer::reading</code> : 다음 토큰을 읽을 때 문자열들을 임시 저장할 문자열입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.h
 typedef struct s_parser
 {
 	t_filereader	fr;
+	t_tokenizer		tknzr;
 }				t_parser;</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.c
 void	init_parser(const char *path)
 {
 	t_parser *p;
 
 	p = parser();
+	p-&gt;tknzr = create_tokenizer();
 	p-&gt;fr = fr(path);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer.c

t_tokenizer		create_tokenizer()
{
	t_tokenizer tknzr;

	tknzr.current_token = create_token();
	tknzr.reading = create_str();
	return (tknzr);
}

t_token			create_token()
{
	t_token	tk;

	tk.str = create_str();
	tk.type = TOKEN_NOT_SPECIFIED;
	tk.file_col = 0;
	tk.file_row = 0;
	return (tk);
}

t_token			token_lookahead()
{
	t_tokenizer	*tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	if (tknzr-&gt;current_token.type == TOKEN_NOT_SPECIFIED)
		token_consume();
	return (tknzr-&gt;current_token);
}

void	token_consume()
{
	t_tokenizer *tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	if (tknzr-&gt;current_token.type == TOKEN_END)
		return ;
	// 뭔가 한다!
	// 만약 성공했을 시 return
	// 만약 실패했을 시 exit
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 토큰과 Tokenizer 를 생성할 수 있습니다.그리고 <code>token_lookahead</code> 함수와 <code>token_consume</code> 함수의 기본적인 형태를 만들었습니다. <code>token_lookahead</code> 함수는 간단히 현재 토큰을 리턴하는 함수입니다. 초기화 상태(<code>TOKEN_NOT_SPECIFIED</code>)일 때에만 <code>token_consume</code> 함수를 호출해서 토큰을 갱신합니다. <code>token_consume</code> 함수는 토큰을 읽어들이는 핵심 부분입니다. 지금부터 본격적으로 작성해볼 예정입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 간단하게 숫자만을 받아들이는 Tokenizer 를 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/is.c
int		is_digit(char c)
{
	return (c &gt;= '0' &amp;&amp; c &lt;= '9');
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
 void	token_consume()
 {
 	t_tokenizer *tknzr;
 
 	tknzr = &amp;parser()-&gt;tknzr;
 	if (tknzr-&gt;current_token.type == TOKEN_END)
 		return ;
+ 	if (try_token_int())
+		return ;
+	exit(ERR_TOKEN_CONSUME);	
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer_try.c
int	try_token_int()
{
	char		c;
	t_tokenizer	*tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	c = fr_read();
	str_push_char(&amp;tknzr-&gt;reading, c);
	if (is_digit(c))
	{
		while (1)
		{
			c = fr_read();
			if (!is_digit(c))
				break ;
			str_push_char(&amp;tknzr-&gt;reading, c);
		}
		tknzr-&gt;current_token.type = TOKEN_INT;
		tknzr-&gt;current_token.str = tknzr-&gt;reading;
		return (1);
	}
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>try_token_int</code> 함수를 새롭게 만들었습니다. 우리는 이제 앞으로 <code>try_token_...</code> 형태의 함수를 여러 개 만들텐데, 이 함수들의 목표는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>fr_read 를 적절하게 호출해서 다음 문자를 읽어옴</li><li>읽어온 문자들을 날리지 않도록 reading 에 차곡히 저장</li><li>만약 성공했으면 current_token 에 적절한 데이터를 저장한 후 <code>1</code>을 리턴함.</li><li>만약 실패했다면 <code>0</code>을 리턴함.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>우선 <code>fr_read</code> 로 첫 번째 문자를 불러온 후에 이것이 숫자라면 반복문을 시작합니다. 반복문에서는 숫자가 아닐 때까지 반복되며, 숫자라고 판명난 문자들은 모두 <code>reading</code> 에 저장됩니다. 반복문이 끝나고 데이터 정보를 <code>current_token.str</code>에 기록합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>try_token...</code> 에서 성공과 실패를 <code>1</code>과 <code>0</code>으로 리턴함으로써 <code>token_consume</code> 에서 분기를 조정할 수 있습니다. 하나라도 성공하게 되었을 때 즉시 <code>return</code> 하여 1회 <code>token_consume</code> 을 성공적으로 마무리시킬 수 있고, 모든 시도가 실패하게 되었을 때 이윽고 마지막 <code>exit</code> 함수가 호출되면서 프로그램이 강제로 종료되도록 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자 그럼 제대로 동작하는지 테스트해봅시다. <code>input.txt</code> 파일에는 그냥 단순히 <code>13245</code> 라는 숫자 하나만 넣어두도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // test.c
+void	test_first_token()
+{
+	t_token	token;
+	init_parser("./input.txt");
+	token_consume();
+	token = token_lookahead();
+	printf("%s, %d\n", raw(token.str), token.type);
+}

 int main(void)
 {
-	test_filereader();
+	// test_filereader();
+	test_first_token();

 	return (0);
 }
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>make re</code> 등으로 테스트를 수행시키면 다음과 같이 제대로 출력이 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>13245, 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>token.type</code> 부분에서 <code>1</code>이 출력된 이유는 우리가 <code>#define TOKEN_INT 1</code> 과 같이 설정했기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>assign_str</code> 구현</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금 읽은 데이터를 토큰에 저장하는 과정에서 단순한 대입문이 사용되고 있습니다. 우리는 <code>current_token.str</code> 에 진작에 할당해놓았던 문자열들을 잃을 생각도 없고, 또한 <code>current_token.str</code> 과 <code>reading</code> 이 같은 문자열을 가리키게 할 생각도 없으므로 <code>t_str</code>의 기능을 확장하여 코드를 잠깐 손을 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c

t_str	duplicate_str(t_str str)
{
	t_str	new_str;
	t_ul	i;

	new_str.max = str.max;
	new_str.len = str.len;
	new_str.ptr = (char *)malloc(sizeof(char) * str.max);
	i = 0;
	while (i &lt; str.len)
	{
		(new_str.ptr)&#91;i] = (str.ptr)&#91;i];
		i++;
	}
	return (new_str);
}

void	assign_str(t_str *str, t_str other)
{
	t_str	temp;

	temp = duplicate_str(other);
	destroy_str(str);
	*str = temp;
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer_try.c
 int	try_token_int()
 {
 	char		c;
 	t_tokenizer	*tknzr;
 
 	tknzr = &amp;parser()-&gt;tknzr;
 	c = fr_read();
 	str_push_char(&amp;tknzr-&gt;reading, c);
 	if (is_digit(c))
 	{
 		while (1)
 		{
 			c = fr_read();
 			if (!is_digit(c))
 				break ;
 			str_push_char(&amp;tknzr-&gt;reading, c);
 		}
 		tknzr-&gt;current_token.type = TOKEN_INT;
-		tknzr-&gt;current_token.str = tknzr-&gt;reading;
+		assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
 		return (1);
 	}
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 이렇게 하면, 일단 <code>reading</code> 의 복제본을 가지고 있다가, <code>current_token.str</code> 의 메모리를 해제한 후, 그 자리에 복제본을 집어넣습니다. 이 과정에서 <code>reading</code> 은 아무런 영향을 받지 않고, <code>current_token.str</code> 은 파괴되었다가 다시 할당된 것이 생깁니다. 결과적으로 할당된 <code>t_str</code> 의 개수는 변하지 않습니다. 어때요, <code>current_token.str</code> 을 직접 하나하나 수정하는 것 보다는 훨씬 간편하지 않나요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>매번 <code>reading</code> 갱신해놓기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 우리는 1회 토큰화시키기를 성공했습니다! 이제 반복적으로 동작하여야 합니다. 더 세부적인 구현을 하기 전에 한 가지 생각해봅시다. 우리가 프로그램의 중간부터 숫자 토큰을 읽고 있는 상황이라고 가정합니다. 우리는 한 번에 하나의 문자를 가져올 수 있는 <code>fr_read</code> 함수를 자유롭게 사용할 수 있습니다. 그렇다면 어디까지가 숫자인지 어떻게 판단할 수 있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>abc,def,1234????????
        ^  ^
        a  b</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우리는 <code>a</code> 지점부터 읽기 시작했습니다. <code>a</code> 지점은 <code>1</code>이니까 숫자가 맞고, <code>b</code> 지점까지도 숫자가 명확합니다. 하지만 <code>b</code> 지점이 숫자의 끝일까요? 그건 아무도 모릅니다. <code>b</code> 지점 이후를 읽어보아야 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>abc,def,1234567??????
        ^     ^
        a     b</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아직까지 숫자입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>abc,def,1234567,?????
        ^      ^
        a      b</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다!  쉼표가 등장했습니다. 이제 <code>1234567</code> 이 완전한 숫자임을 확신할 수 있습니다. 이제 다음 토큰으로 넘어가도록 합시다. 하지만 우리는 이미 <code>,</code>를 읽은 상태이므로, <code>fr_read</code> 를 수행하면 안 됩니다. 만약 수행하게 된다면 <code>,</code> 를 건너뛰게 될 것입니다. <strong>이미 읽은 문자이지만, 해당 문자가 어떤 토큰인지 아직 모르는 상태에 있는 문자열들을 우리는 <code>reading</code> 에 저장하고 있었습니다.</strong>  토크나이저가 <code>1234567</code> 에 대한 토큰 검사가 끝나는 즉시 <code>reading</code>은 <code>","</code> 여야 합니다. 그리고 다음 토큰을 검사할 때 무작정 <code>fr_read</code> 하는 것이 아니라 <code>reading</code> 에 담겨져있는 첫번째 문자인 <code>,</code> 부터 적절하게 처리해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer_try.c
 int	try_token_int()
 {
 	char		c;
 	t_tokenizer	*tknzr;
 
 	tknzr = &amp;parser()-&gt;tknzr;
-	c = fr_read();
-	str_push_char(&amp;tknzr-&gt;reading, c);
+	c = raw(tknzr-&gt;reading)&#91;0];
 	if (is_digit(c))
 	{
 		while (1)
 		{
 			c = fr_read();
 			if (!is_digit(c))
 				break ;
 			str_push_char(&amp;tknzr-&gt;reading, c);
 		}
 		tknzr-&gt;current_token.type = TOKEN_INT;
 		assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
+		destroy_str(&amp;tknzr-&gt;reading);
+		tknzr-&gt;reading = create_str();
+		str_push_char(&amp;tknzr-&gt;reading, c);
 		return (1);
 	}
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하지만 이 상태로 테스트를 그대로 실행시킨다면 에러가 발생합니다! </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>make: *** &#91;Makefile:10: test] Error 6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>왜일까요? 바로 제일 첫번째 <code>try_token_int</code> 시도에는 <code>raw(tknzr-&gt;reading)[0]</code> 는 <code>'\0'</code> 이기 때문입니다. 이전 단계에서 미리 읽어놓았던 문자가 단 하나도 없으므로 아무것도 가리킬 게 없습니다. 그러므로 제일 첫번째에는 <code>raw(tknzr-&gt;reading)[0]</code> 이 첫 번째 문자를 가리킬 수 있도록 초기화를 시켜줘야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.c
 void	init_parser(const char *path)
 {
 	t_parser *p;
 
 	p = parser();
 	p-&gt;fr = fr(path);
 	p-&gt;tknzr = create_tokenizer();
+	init_tokenizer();
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer.c
void			init_tokenizer()
{
	char	c;

	c = fr_read();
	str_push_char(&amp;parser()-&gt;tknzr.reading, c);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 하면 다시 결과는 잘 나온다는 걸 확인할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>공백 패스하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>위에서도 잠깐 이야기했지만, 정말로 아무런 뜻이 없는 (오직 토큰 구분자용으로만 사용되는) 토큰은 굳이 토큰화시키지 않아도 됩니다. 그래서 우리는 공백을 패스해보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer.c

void	skip_blank()
{
	char		c;
	t_tokenizer *tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (c == ' ')
	{
		while (1)
		{
			c = fr_read();
			if (c != ' ')
				break;
		}
	}
	destroy_str(&amp;tknzr-&gt;reading);
	tknzr-&gt;reading = create_str();
	str_push_char(&amp;tknzr-&gt;reading, c);
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
 void	token_consume()
 {
 	t_tokenizer *tknzr;
 
 	tknzr = &amp;parser()-&gt;tknzr;
 	if (tknzr-&gt;current_token.type == TOKEN_END)
 		return ;
+	skip_blank(); 
 	if (try_token_int())
 		return ;
 	exit(ERR_TOKEN_CONSUME);	
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>공백은 적당히 공백만큼 읽어들인 다음 공백이 아닌 문자가 등장했을 때 그것을 <code>reading</code> 에 채워넣어주면 됩니다. <code>try_token_int</code> 함수와 비슷한 점은 <code>reading</code> 에 마지막 글자를 채워넣는다는 행동이지만, 다른 점은 <code>current_token</code> 의 데이터를 전혀 만지지 않는다는 점입니다. 어찌보면 합당합니다. 공백은 토큰조차 되지 못하는 신세이니까요.. ㅠㅠ</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>편의성을 위해 다음 <code>next_token</code> 함수를 먼저 추가해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/parser.c
t_token		next_token()
{
	token_consume();
	return (token_lookahead());
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 아래 내용을 <code>input.txt</code> 에 집어 넣고</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>13245   12837 2232</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래 테스트 코드로 제대로 동작하는지 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // text.c
+void	test_several_int()
+{
+	t_token token;
+	init_parser("./input.txt");
+	token = next_token();
+	printf("%s, %d\n", raw(token.str), token.type);
+	token = next_token();
+	printf("%s, %d\n", raw(token.str), token.type);
+	token = next_token();
+	printf("%s, %d\n", raw(token.str), token.type);
+	token = next_token();
+	printf("%s, %d\n", raw(token.str), token.type);
+}

 int main(void)
 {
 	// test_filereader();
-	test_first_token();
+	// test_first_token();
+	test_several_int();

 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>13245, 1
12837, 1
2232, 1
make: *** &#91;Makefile:10: test] Error 6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>네 번째에서 에러가 일어난다는 것은 지극히 자연스럽습니다. 왜냐하면 <code>next_token()</code>은 4번 실행되었던 데에 반해 실제 숫자는 3개밖에 없기 때문입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>reading</code> 초기화하는 부분을 함수로 묶기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>skip_blank</code> 함수와 <code>try_token_int</code> 함수의 반복되는 부분을 없애보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
+int	init_reading(char c)
+{
+	t_tokenizer *tknzr;
+
+	tknzr = &amp;parser()-&gt;tknzr;
+	destroy_str(&amp;tknzr-&gt;reading);
+	tknzr-&gt;reading = create_str();
+	str_push_char(&amp;tknzr-&gt;reading, c);
+	return (1);
+}

 void	skip_blank()
 {
 	char		c;
 	t_tokenizer *tknzr;

  	tknzr = &amp;parser()-&gt;tknzr;
 	c = raw(parser()-&gt;tknzr.reading)&#91;0];
 	if (c == ' ')
 	{
 		while (1)
 		{
 			c = fr_read();
 			if (c != ' ')
 				break;
 		}
 	}
-	destroy_str(&amp;tknzr-&gt;reading);
-	tknzr-&gt;reading = create_str();
-	str_push_char(&amp;tknzr-&gt;reading, c);
+	init_reading(c);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer_try.c
 int	try_token_int()
 {
 	char		c;
 	t_tokenizer	*tknzr;

 	tknzr = &amp;parser()-&gt;tknzr;
	c = raw(tknzr-&gt;reading)&#91;0];
 	if (is_digit(c))
 	{
 		while (1)
 		{
 			c = fr_read();
 			if (!is_digit(c))
 				break ;
 			str_push_char(&amp;tknzr-&gt;reading, c);
 		}
 		tknzr-&gt;current_token.type = TOKEN_INT;
 		assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
-		destroy_str(&amp;tknzr-&gt;reading);
-		tknzr-&gt;reading = create_str();
-		str_push_char(&amp;tknzr-&gt;reading, c);
- 		return (1);
+		return (init_reading(c));
 	}
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>계속해서 비슷한 역할을 하는 코드들은 적극적으로 묶을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>try_token_end</code> 구현하고 반복문으로 모든 토큰 돌려보기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 토큰의 끝을 의미하는 <code>TOKEN_END</code> 도 구현해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer_try.c
int	try_token_end()
{
	char		c;
	t_tokenizer	*tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	c = raw(tknzr-&gt;reading)&#91;0];
	if (c == '\0')
	{
		tknzr-&gt;current_token.type = TOKEN_END;
		assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
		c = fr_read();
		return (init_reading(c));
	}
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>fr_read</code> 를 했을 적에 더이상 읽을 문자가 없다면 그냥 <code>'\0'</code> 이 리턴되었던 걸 기억하시나요? 그래서 그냥 <code>raw(tknzr-&gt;reading)[0]</code> 이 <code>'\0'</code> 라면 그냥 끝났다고 판단하면 됩니다. 여기서는 하나의 글자만 파악하면 되기 때문에 별 다른 반복문이 필요없습니다. 바로 <code>fr_read</code> 를 한 번만 호출하고 <code>init_reading</code> 을 수행합니다. (사실 다 끝난 마당에 <code>fr_read</code> 도 필요없고, <code>init_reading</code> 도 필요없지만, 문자 하나만을 받는 다른 <code>try_token_...</code> 과 비슷한 구조를 만들기 위함이라는 점을 알립니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
 void	token_consume()
 {
 	t_tokenizer *tknzr;

 	tknzr = &amp;parser()-&gt;tknzr;
 	if (tknzr-&gt;current_token.type == TOKEN_END)
 		return ;
 	skip_blank();
 	if (try_token_int())
 		return ;
+	if (try_token_end())
+		return ;
 	exit(ERR_TOKEN_CONSUME);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>try_token_end</code> 함수도 <code>token_consume</code> 함수에 추가시켜줍니다. 그리고 테스트를 좀 더 깔끔하게 만들어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // test.c
+void	test_until_end()
+{
+	t_token token;
+	init_parser("./input.txt");
+	token.type = TOKEN_NOT_SPECIFIED;
+	while (token.type != TOKEN_END)
+	{
+		token = next_token();
+		printf("%s, %d\n", raw(token.str), token.type);
+	}
+}

 int main(void)
 {
 	// test_filereader();
 	// test_first_token();
+	// test_several_int();
-	test_several_int();
+	test_until_end();
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>13245, 1
12837, 1
2232, 1
, 100</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>while</code> 문이 무사히 종료되었습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>가끔 에디터에 따라 파일을 저장할 때 파일의 가장 끝부분에 줄바꿈 문자(<code>\n</code>)를 삽입하는 경우가 있습니다. 아직 우리의 코드는 줄바꿈 문자를 인식할 수 없으므로 <code>input.txt</code> 파일의 마지막에 줄바꿈 문자가 포함되게 된다면 에러가 발생합니다. 추후 줄바꿈 문자도 인식하도록 할테지만, 테스트를 빠르게 해보고 싶다면 아래 명령어를 실행한 후 테스트를 시도해보세요.</p><p><code>echo -n "13245 12837 2232" &gt; input.txt</code> </p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3><code>current_token</code> 설정하는 부분을 묶기</h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer.c
int		confirm_trial(t_token_type type, char next)
{
	t_tokenizer	*tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	tknzr-&gt;current_token.type = type;
	assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
	return (init_reading(next));
}

int		confirm_trial_init_next(t_token_type type)
{
	return (confirm_trial(type, fr_read()));
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>current_token</code> 을 설정하고 <code>init_reading</code> 하는 부분이 동일하므로 최대한 묶어줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer_try.c

 int try_token_int()
 {
 	char c;
-	t_tokenizer *tknzr;

-	tknzr = &amp;parser()-&gt;tknzr;
-	c = raw(tknzr-&gt;reading)&#91;0];
+	c = raw(parser()-&gt;tknzr.reading)&#91;0];
 	if (is_digit(c))
 	{
 		while (1)
 		{
 			c = fr_read();
 			if (!is_digit(c))
 				break;
-			str_push_char(&amp;tknzr-&gt;reading, c);
+			str_push_char(&amp;parser()-&gt;tknzr.reading, c);
 		}
-		tknzr-&gt;current_token.type = TOKEN_INT;
-		tknzr-&gt;current_token.str = tknzr-&gt;reading;
-		return (1);
+		return (confirm_trial(TOKEN_INT, c));
 	}
 	return (0);
 }

 int	try_token_end()
 {
 	char		c;
-	t_tokenizer	*tknzr;

-	tknzr = &amp;parser()-&gt;tknzr;
-	c = raw(tknzr-&gt;reading)&#91;0];
+	c = raw(parser()-&gt;tknzr.reading)&#91;0];
 	if (c == '\0')
-	{
-		tknzr-&gt;current_token.type = TOKEN_END;
-		assign_str(&amp;tknzr-&gt;current_token.str, tknzr-&gt;reading);
-		c = fr_read();
-		return (init_reading(c));
-	}
+		return (confirm_trial_init_next(TOKEN_END));
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>자 이제 구조가 훨씬 단순해졌습니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>토큰에 위치 정보를 삽입하여 Unexpected Token 에러 출력시키기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그렇습니다. <code>fr_read</code> 할 때마다 위치를 갱신시키고,  예상치 못한 토큰이 있을 때 unexpected token 에러를 출력해보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/parser.h
 typedef struct s_tokenizer
 {
 	t_token		current_token;
 	t_str		reading;
+	t_ul		unresolved_row;
+	t_ul		unresolved_col;
+	char		unresolved_char;
 }				t_tokenizer;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 문자열을 분석하고 있는 Tokenizer 입장에서 아직까지 토큰화되지 않은 문자 정보를 저장할 수 있도록 공간을 만들어둡니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer.c
char	fr_read_track()
{
	char		result;
	t_tokenizer *tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	result = fr_read();
	tknzr-&gt;unresolved_row = parser()-&gt;fr.c_row;
	tknzr-&gt;unresolved_col = parser()-&gt;fr.c_col;
	tknzr-&gt;unresolved_char = result;
	return (result);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>기존의 <code>fr_read</code> 와 기능적으로 똑같이 동작하되, 위치 정보를 Tokenizer 에 기록하는 래퍼 함수 <code>fr_read_track</code> 함수를 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그래서 기존에 사용하고 있었던 <code>fr_read</code> 모두 대체하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer_try.c
 int try_token_int()
 {
 	char c;
 	c = raw(parser()-&gt;tknzr.reading)&#91;0];
 	if (is_digit(c))
 	{
 		while (1)
 		{
-			c = fr_read();
+			c = fr_read_track();
 			if (!is_digit(c))
 				break;
 			str_push_char(&amp;parser()-&gt;tknzr.reading, c);
 		}
 		return (confirm_trial(TOKEN_INT, c));
 	}
 	return (0);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
 
 void			init_tokenizer()
 {
 	char	c;
 
-	c = fr_read();
+	c = fr_read_track();
 	str_push_char(&amp;parser()-&gt;tknzr.reading, c);
 }

 int		confirm_trial_init_next(t_token_type type)
 {
-	return (confirm_trial(type, fr_read()));
+	return (confirm_trial(type, fr_read_track()));
 }

 void	skip_blank()
 {
 	char		c;
 	t_tokenizer *tknzr;

 	tknzr = &amp;parser()-&gt;tknzr;
 	c = raw(parser()-&gt;tknzr.reading)&#91;0];
 	if (c == ' ')
 	{
 		while (1)
 		{
-			c = fr_read();
+			c = fr_read_track();
 			if (c != ' ')
 				break;
 		}
 	}
	init_reading(c);
 }
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 에러 메시지를 만들기 위해 <code>t_str</code> 를 손 좀 보도록 합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c

#include &lt;unistd.h&gt;

void	str_push_chars(t_str *str, const char *s)
{
	t_ul	i;

	i = 0;
	while (s&#91;i])
	{
		str_push_char(str, s&#91;i]);
		i++;
	}
}

void	str_push_long(t_str *str, long num)
{
	if (num &lt; 0)
	{
		str_push_char(str, '-');
		num *= -1;
	}
	if (num &gt;= 10)
		str_push_long(str, num / 10);
	str_push_char(str, (num % 10) + '0');
}

void	write_str(t_str str)
{
	write(1, raw(str), str.len);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>총 3가지의 함수를 추가했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>str_push_chars</code> : 기존의 <code>t_str</code> 내용에 c-style 문자열 내용을 덧붙입니다.</li><li><code>str_push_long</code> : 기존의 <code>t_str</code> 내용에 숫자를 문자화하여 내용을 덧붙입니다. 재귀적으로 구성되었습니다. 간단하게 구현한 특성상 <code>num</code>이 <code>long</code> 의 최소값일 경우 이상하게 작동합니다.</li><li><code>write_str</code> : 표준 출력으로 <code>t_str</code> 의 내용을 출력합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그 다음 에러 메시지를 출력하고 종료하는 <code>abort_tokenizer</code> 함수를 만들어줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/abort.c

void	abort_tokenizer()
{
	t_str		str;
	t_tokenizer	tknzr;

	tknzr = parser()-&gt;tknzr;
	str = create_str();
	str_push_chars(&amp;str, "Unexpected Token '");
	str_push_char(&amp;str, tknzr.unresolved_char);
	str_push_chars(&amp;str, "' at ");
	str_push_chars(&amp;str, parser()-&gt;fr.path);
	str_push_char(&amp;str, ':');
	str_push_long(&amp;str, tknzr.unresolved_row);
	str_push_char(&amp;str, ':');
	str_push_long(&amp;str, tknzr.unresolved_col);
	str_push_char(&amp;str, '\n');
	write_str(str);
	destroy_str(&amp;str);
	exit(ERR_TOKEN_CONSUME);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 함수를 <code>consume</code> 에서 <code>exit</code> 대신 넣어줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> // src/tokenizer.c
 void	token_consume()
 {
 	t_tokenizer *tknzr;

 	tknzr = &amp;parser()-&gt;tknzr;
 	if (tknzr-&gt;current_token.type == TOKEN_END)
 		return ;
 	skip_blank();
 	if (try_token_int())
 		return ;
	if (try_token_end())
		return ;
-	exit(ERR_TOKEN_CONSUME);
+	abort_tokenizer();
 }
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 <code>123 456 7+9</code> 이렇게 <code>input.txt</code> 에 넣고 테스트를 해봅시다. 테스트 코드는 이전과 동일하게 <code>test_until_end</code> 함수로 진행합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>123, 1
456, 1
7, 1
Unexpected Token '+' at ./input.txt:1:10
make: *** &#91;Makefile:10: test] Error 6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>와 정말 멋잇지 않나요!!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>newline(줄바꿈), comma(쉼표), name(식별자)토큰 지원하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>줄바꿈 문자를 지원하는 건 파일의 끝을 인식하는 것과 거의 동일하게 진행하면 됩니다. 아래가 그 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer_try.c

int	try_token_newline()
{
	char	c;

	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (c == '\n')
		return (confirm_trial_init_next(TOKEN_NEWLINE));
	return (0);
}

int	try_token_comma()
{
	char	c;

	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (c == ',')
		return (confirm_trial_init_next(TOKEN_COMMA));
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>name(이름)을 불러오는 것도 쉬운데요, 여기서 말하는 이름이란 우리가 흔히 변수명으로 쓰는 것처럼 어떤 이름이라고 생각하면 됩니다. 이것도 꽤 쉽게 구현할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/is.c
int		is_alpha(char c)
{
	return ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= 'A' &amp;&amp; c &lt;= 'Z'));
}

int		one_of(char c, const char *s)
{
	int	i;

	i = 0;
	while (s&#91;i] != '\0')
	{
		if (s&#91;i] == c)
			return (1);
		i++;
	}
	return (0);
}

int		is_c_name(char c)
{
	return (is_alpha(c) || one_of(c, "_"));
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>is_alpha 함수는 <code>c</code> 라는 글자가 알파벳인지 아닌지 판단합니다. <code>one_of</code> 함수는 c 라는 문자 하나가 <code>s</code>라는 문자열에 포함되어 있는지 아닌지를 판단합니다. 이 두개를 조합하여 <code>is_c_name</code> 을 만듭니다. <code>is_c_name</code> 함수는 해당 글자가 알파벳이거나 <code>_</code> 라면 <code>TRUE</code>(1) 를 리턴하고, 그렇지 않다면 <code>FALSE</code>(0)를 리턴합니다. C 를 작성할 때 숫자도 변수명에 포함될 수 있지만, 일단 우리가 만드는 파서는 일단 지원하지 않는다고 가정합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그런 다음 <code>try_token_name</code> 함수를 작성합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>int	try_token_name()
{
	char	c;

	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (is_c_name(c))
	{
		while (1)
		{
			c = fr_read_track();
			if (!is_c_name(c))
				break ;
			reading_push_char(c);
		}
		return (confirm_trial(TOKEN_NAME, c));
	}
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우선 첫번째 글자를 읽어와서, name(이름) 에 해당하는 글자라면 계속 읽어나갑니다. 이윽고 name 에 해당하지 않는 글자가 나온다면, <code>break</code>로 <code>while</code> 문을 빠져간 후 함수를 종료합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>정수를 더 정확하게 읽어오기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리의 정수는 아직까지 미완성입니다. 왜냐하면 일단 음수를 받아들이지 못하고, 그 다음 <code>00001234</code> 와 같이 숫자 형식에 좀 벗어난 것도 일단 숫자라고 알아보기 때문입니다. 이러한 조건을 더 세세하게 들어가보겠습니다. 지금은 이면지나 아이패드를 준비해주세요. 여러가지 숫자일 가능성이 있는 문자의 나열을 끄적여봅시다. <code>0</code>, <code>-2</code>, <code>234</code>, <code>100</code>, <code>-235</code>, <code>--123</code>, <code>0042</code>, <code>-0</code>. 기타 등등등..</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 중에서 <code>--123</code>이나 <code>0042</code> 같은 건 틀리다고 가정하겠습니다. 다만 <code>-0</code> 같은 경우는 일단 옳다고 가정하겠습니다. 이 정수 판별기를 가지고 추후 소수점 읽을 때도 사용할 거라서 말입니다.. 엄밀한 규칙은 이제 숙제로 남겨놓도록 하겠습니다. 이럼 이제 분류가 되었으니 좀 정리를 해볼까요? </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>처음에 <code>-</code> 기호 하나가 나오거나 나오지 않아야 합니다. (선택) 여러 번 나올 수 없습니다.</li><li>그 다음 0이 나오거나, 0이 아닌 숫자가 나옵니다. <ol><li>0이 나온다면, 0으로, 정수로 처리해 버리고 바로 종료합니다. 0은 두 번 이상 연속으로 나올 수 없습니다. </li><li>0이 아닌 숫자가 나온다면, 그 다음부터 연속적으로 나오는 0~9의 모든 숫자까지 정수로 처리합니다.</li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>위 논리에 따르면 <code>--123</code> 같은 경우는 두 번째 <code>-</code>에서 2번 규칙에 걸리게 되므로 올바른 토큰이 될 수 없습니다. <code>0042</code> 같은 경우는 0을 만나면 바로 종료하는 조건때문에 토큰이 3개가 생깁니다. <code>0</code>, <code>0</code>, <code>42</code> 이렇게요. 논리적인 결함이 있는 듯 하지만, 앞으로 만들 파서에 큰 걸림돌이 되는 것은 아니므로 가볍게 넘어가도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 바로 코딩해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/is.c
int		is_no_zero_digit(char c)
{
	return (c &gt;= '1' &amp;&amp; c &lt;= '9');
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer_try.c
int	try_token_int()
{
	char	c;

	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (c == '-')
	{
		c = fr_read_track();
		reading_push_char(c);
	}
	if (c == '0')
		return (confirm_trial_init_next(TOKEN_INT));
	if (is_no_zero_digit(c))
	{
		while (1)
		{
			c = fr_read_track();
			if (!is_digit(c))
				break ;
			reading_push_char(c);
		}
		return (confirm_trial(TOKEN_INT, c));
	}
	return (0);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 아래 내용을 입력으로 설정하고 테스트를 수행해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>123 456 79 -123 -0 0 05</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇다면 이제 아래와 같은 결과가 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>123, 1
456, 1
79, 1
-123, 1
-0, 1
0, 1
0, 1
5, 1
234, 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다. 적당히 잘 동작합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>소수점이 있는 숫자 읽어오기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>앞서 만든 정수 <code>try</code> 함수를 이용하여 소수점이 있는 숫자(이하 실수)까지 불러와보도록 하겠습니다. 실수은 알고보면 정수를 포함합니다. 그러니까 <code>1</code>, <code>2</code>, <code>3</code>과 같은 정수는 number 이 될 수 있지만, <code>1.2</code>, <code>2.5</code>와 같은 number 은 정수가 될 수 없지요. 그리고 실수와 정수를 가르는 가장 큰 기준점은 점(<code>.</code>) 입니다. 그렇다면 순서를 한번 또 정리해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>일단 실수의 앞에는 정수가 나와야 합니다.</li><li>그 다음 점이 올 수도 있고, 안 올수도 있습니다. 온다면 실수부 검색을 들어갈 준비를 해야 하고, 안온다면 앞에까지를 그냥 정수로 성공 처리합니다. </li><li>점 다음에 숫자들이 온다면, 숫자들을 기존 정수 검사 결과에 덧붙입니다.</li><li>점 다음에 숫자가 오지 않는다면, 잘못된 </li></ol>
<!-- /wp:list -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/tokenizer_try.c

int	try_token_real()
{
	char	c;

	if (!try_token_int())
		return (0);
	c = raw(parser()-&gt;tknzr.reading)&#91;0];
	if (c != '.')
		return (init_reading(c));
	c = fr_read_track();
	if (is_digit(c))
		return (iterate_dot_right(c));
	else
		return (0);
}

int iterate_dot_right(char c)
{
	t_str		temp;
	t_tokenizer	*tknzr;

	tknzr = &amp;parser()-&gt;tknzr;
	reading_push_char(c);
	while (1)
	{
		c = fr_read_track();
		if (!is_digit(c))
			break;
		reading_push_char(c);
	}
	temp = duplicate_str(tknzr-&gt;current_token.str);
	concat_str(&amp;temp, tknzr-&gt;reading);
	confirm_trial_value(TOKEN_DOUBLE, c, temp);
	destroy_str(&amp;temp);
	return (1);
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// src/string.c

void	concat_str(t_str *target, t_ststr source)
{
	t_ul		i;
	const char	*raw_str;

	raw_str = raw(source);
	i = 0;
	while (i &lt; source.len)
	{
		str_push_char(target, raw_str&#91;i]);
		i++;
	}
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Parser 만들기</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>// test.c
#include &lt;stdio.h&gt;
#include "parser.h"

int main(void)
{
	init_parser("./input");
	parse();
	return (0);
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2452</wp:post_id>
		<wp:post_date><![CDATA[2021-03-26 03:28:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-25 18:28:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-30 02:09:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-29 17:09:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-%ea%b0%84%eb%8b%a8%ed%95%9c-%ed%8c%8c%ec%84%9c-parser-%ec%a7%81%ec%a0%91-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c"><![CDATA[c]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>12218</wp:comment_id>
			<wp:comment_author><![CDATA[ㅇㅇ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ju@djangun.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[222.109.40.45]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-11-08 23:31:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-11-08 14:31:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[설치 법은 본 블로그에서는 소개드리지 않습니다. -&gt; 설치법은
그 다음 점이 올 수도 있고, 안 올수도 있습니다.  -&gt; 안 올 수도
기타 등등등.. | 말입니다.. -&gt; 말줄임표(...)
토큰을 읽어드리는 대로 그대로 받아들이면 될 뿐입니다. -&gt; 읽어들이는 대로

좋은 글입니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1667917863.229244;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[타입스크립트(typescript) 프로젝트 세팅하기]]></title>
		<link>https://elvanov.com/2524</link>
		<pubDate>Fri, 02 Apr 2021 05:58:51 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2524</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 글을 읽기 전에 타입스크립트에 대한 기본적인 개념이 잡혀있어야 합니다. 타입스크립트에 대한 필요성, 기능, 문법 등은 다른 글을 참조해주세요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>트랜스파일링이란 코드를 코드로 변환한다는 뜻입니다. 실제로 node.js 에서 실행할 때에는 js 파일만 해석할 수 있는데, 그래서 ts 파일을 모두 js 파일로 변경해야 합니다. 타입스크립트 컴파일러인 tsc 가 그 역할을 합니다. typescript 를 설치하면 함께 설치되는 컴파일러인 <code>tsc</code> 는 문법 검사 및 코드 변환에 대한 책임만 있고 추가적인 작업을 하지 않습니다. 예를 들어 pug 파일이나 graphql 파일이 소스 폴더에 포함되어 있어도, 이것들을 전혀 건드리지 않기 때문에 <code>copyfiles</code> 등을 이용해 빌드가 완료된 폴더에 따로 복사를 해주어야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>ts-node</code> 는 node 명령어를 사용하는 것처럼 typescript 를 쓸 수 있도록 하는 모듈입니다. 기존에 <code>node</code> 명령어로 실행하던 것을 그대로 <code>ts-node</code> 로 바꿔주기만 하면 됩니다. 아주 편리합니다! 그런데, 아까 타입스크립트는 파일을 변환한 뒤에 실행해야 한다고 하였죠? 이 <code>ts-node</code> 는 변환되는 <code>js</code> 파일의 디렉터리 경로를 그냥 임시 폴더 경로로 해둡니다. 그러므로 어디에 변환되는지는 사용자 입장에서 전혀 신경쓸 필요가 없어집니다. 이 <code>ts-node</code> 는 <code>tsconfig.json</code> 의 설정을 읽어서 수행합니다. 다만, <code>node</code> 와 동작 방법이 유사하기 때문에 (<code>index.js</code> 로부터 <code>require</code> 로 필요한 소스 파일들을 검색해나감) <code>tsconfig.json</code> 파일 내의 <code>include</code>, <code>exclude</code>, <code>files</code> 옵션을 무시하는 게 기본 세팅입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어쨌거나 저쨌거나 생각보다 타입스크립트 세팅이 쉽지 않았습니다. 네... 차라리 <a rel="noreferrer noopener" href="https://nestjs.com/" target="_blank">NestJs</a> 와 같이 처음부터 typescript 를 지원하는 프레임워크를 쓰시기 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>조건</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol><li><strong>Incremental Build (점진적인 빌드), 혹은 watch 기능, 혹은 둘 다 지원되어야 한다</strong> : Incremental Build 기능이란 컴파일과 관련한 기록파일을 남겨둠으로써 <code>tsc</code> 가 필요한 것만 효율적으로 컴파일할 수 있도록 하는 기능입니다. watch 기능이란 파일의 변경을 감지하여 자동으로 새로고침 해주는 기능입니다. 타입스크립트 문법 체크는 변경사항이 생길 때마다 필요합니다. 하지만 프로젝트의 규모가 작지 않기 때문에 변경사항이 생길 때마다 모든 파일의 문법 검사를 한다면 한 글자를 고쳐도 몇 초를 기다려야 할 수 있습니다. 이는 다소 생산성이 떨어지게 되겠지요.</li><li><strong>js, ts 파일 외의 파일도 복사되어야 한다</strong> : 소스코드 내에는 <code>pug</code> 템플릿 파일이나 <code>.graphql</code> 정의 파일 등이 존재했습니다. 이 파일을 개발/프로덕션 환경에서 잘 읽어와야 했습니다. </li><li><strong>절대경로 축약(Path Alias)이 제대로 동작해야 한다</strong> : 마찬가지로 생산성을 위해 <code>../../</code> 와 같은 경로 설정을 줄여보고자 절대 경로 Alias 를 만들어서 코딩을 진행했습니다. (예: <code>import abc from '../../loader';</code> --> <code>import abc from '@/loader';</code> )</li><li><strong>Babel 을 사용하지 않는다</strong> : 왜냐하면 필자가 잘 모르기 때문이지요. 경로 등을 변환하기 위해서 사용해볼 수도 있으나 너무 중간 과정이 많아지는 걸 바라지는 않았습니다.  </li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>조건을 충족시키기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>1번의 조건에 의해서 <code>nodemon</code>은 후보에서 제외됩니다. nodemon 은 변경사항이 생길 때마다 프로그램을 재시작시킵니다. 정확하게 테스트를 해본 건 아니지만 <code>tsc</code> 혹은 <code>ts-node</code> 의 <code>incremental build</code> 기능과 협업하리라 기대하기 힘들었습니다. <code>tsc</code> 자체에는 <code>--watch</code> 옵션이 있고, <code>ts-node</code> 는 watch 기능과 관련하여 더 잘되어있을 것 같은 <code>ts-node-dev</code> 가 이미 존재하기에 그것을 사용하기로 했습니다. <code>ts-node-dev</code> 는 <code>ts-node</code> 와 <code>node-dev</code> 를 합친 거라고 합니다. <code>node-dev</code> 는 <code>nodemon</code> 과 같이 watch 와 관련된 모듈입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2번, 3번 조건에 의해서 tsc 는 오로지 문법 체크 용도로 사용하고자 합니다. 왜냐하면 tsc 에는 절대경로를 상대경로로 바꿔주는 기능도 없고 소스파일이 아닌 다른 파일을 복사해주는 기능도 없기 때문입니다. 프로덕션 환경에서도 실행은 <code>ts-node</code> 로 하되, 조금이라도 실행 속도를 보장하기 위해 <code>--transpile-only</code> 플래그를 붙여줄 예정입니다. 이 플래그를 붙이면 문법 검사 등은 하지 않고 변환만 척척 수행합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>실제로 해보기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Typescript Path Alias 를 지원하기 위해 <code>tsconfig-paths</code> 를 미리 해둡니다. 물론 <code>typescript</code>, <code>ts-node</code>, <code>ts-node-dev</code> 도 미리 설치해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>npm install typescript ts-node ts-node-dev -g
npm init
tsc --init
npm install --save-dev tsconfig-paths</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>tsconfig.json</code> 파일은 아래와 같이 설정했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>{
  "compilerOptions": {
    "incremental": true,
    "checkJs": true,
    "baseUrl": ".",
    "module": "CommonJS",
    "target": "esnext",
    "moduleResolution": "node",
    "sourceMap": true,
    "paths": {
      "@/*": &#91;"src/*"],
      "@config/*": &#91;"config/*"]
    },
    "outDir": "ts-build",
    "diagnostics": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "listEmittedFiles": true
  },
  "include": &#91;"src/**/*", "config/**/*"],
  "exclude": &#91;"node_modules", "**/*.spec.ts", "**/*.spec.js"]
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>tsconfig.json</code> 파일의 세부 설정은 레퍼런스를 참조해주시기 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래는 <code>package.json</code> 파일입니다. 여기에 3개의 스크립트를 만들었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>{
  ...
  "scripts": {
    "start-dev": "NODE_ENV=development ts-node-dev --transpile-only --respawn -r tsconfig-paths/register --watch ./src/**/*.pug,./src/**/*.graphql --trace-warnings --trace-uncaught -- ./src/index.js",
    "start": "NODE_ENV=production ts-node --transpile-only -r tsconfig-paths/register src/index.js",
    "watch": "tsc --watch",
  },
  ...
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>개발할 때에는 2개의 터미널을 켜놓고 <code>npm run start-dev</code> 와 <code>npm run watch</code> 를 따로 수행합니다. <code>start-dev</code> 는 개발 모드 서버를 실행시키는 용도이고 <code>watch</code> 는 문법 검사 용도입니다. 프로덕션은 <code>npm run start</code> 를 실행시킵니다. 속도는 꽤 괜찮게 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>NODE_ENV=production</code> 혹은 <code>NODE_ENV=development</code> 로 환경 변수를 설정해두면 코드 내에서 <code>process.env.NODE_ENV</code> 에 접근해서 개발/프로덕션 환경에 대한 코드를 분리시킬 수 있습니다. 윈도우 사용자는 <a href="https://www.npmjs.com/package/cross-env">cross-env</a> 등을 사용하여 환경 변수를 설정하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>남은 미션</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아직 test 관련되어 한번도 실행해보지 않았다는 게 함정... mocha.. 너는 정령 테스트를 제대로 수행해낼 수 있을 것인가!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2524</wp:post_id>
		<wp:post_date><![CDATA[2021-04-02 14:58:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-02 05:58:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-02 15:02:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-02 06:02:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%83%80%ec%9e%85%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8typescript-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%ec%84%b8%ed%8c%85%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[typescript] readonly 배열의 includes 인수 범위를 확장하기 (Type Predicates)]]></title>
		<link>https://elvanov.com/2535</link>
		<pubDate>Fri, 09 Apr 2021 05:15:50 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2535</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 글의 제목을 정하는 데 좀 고민이 많이 들었습니다.. 뭔가 복합적인 문제인 듯 한데, 좀 길게 풀어서 설명하자면, <code>const array = ['a', 'b', 'c'] as const</code> 와 같은 readonly 배열에서 <code>'a' | 'b' | 'c'</code> 타입이 아닌 <code>const needle: string = 'needle'</code> 와 같은 <code>string</code> 타입을 이용해 <code>array.includes(needle)</code> 과 같이 사용하고 싶은데, 타입 문제 때문에 그렇지 못해서 수정하고자 쓰는 글입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글에서는 타입을 설명할 때 '좁다', '넓다'와 같은 말을 쓸 것입니다. 포함된다, 확장된다 라고도 표현할 수 있겠지만, 제 머릿속에서 딱 떠오르지가 않아서요. 헤헤. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글은 독자분들이 어느정도 타입스크립트의 기본 개념을 알고 있다는 전제하에 작성되었습니다. <a href="https://www.typescriptlang.org/docs/handbook/type-inference.html">타입을 추론(Inference) 하는 과정</a>을 몸에 좀 익히고 있다면 문제없이 글을 읽으실 수 있을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자 일단, 용어를 어떻게 해야 하는지 좀 고민스러운데, const array, readonly array 등 일맥상통하는 용어들이 있지만, 일단은 <strong>readonly 배열</strong>이라고 명명하겠습니다. 좀 더 정확히 이야기하면 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#const-assertions" target="_blank" rel="noreferrer noopener"><code>const</code> assertions</a> 를 통해서 만든 배열이 readonly 배열이 됩니다. 이 배열은 변경되지 않는 부분을 확실히 함으로써 그 자체로 타입이 됩니다! 바로 아래에서 그 타입을 확인해보세요. vscode 에서 작성하고 변수명에 마우스를 올린다면 실제로 계산된 타입이 보입니다. (주석)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const colors = &#91;'red', 'green', 'blue'] as const; // readonly &#91;"red", "green", "blue"]
type ColorType = typeof colors&#91;number] // "red" | "green" | "blue"
function doWithColor(color: ColorType): void {
  // do something
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>ColorType</code> 타입을 이용해서 우리는 각종 함수에 <code>enum</code> 처럼 사용할 수 있습니다. 아주 편리하지요! 하지만 이제 다음과 같은 문제가 생깁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>만약 사용자가 어떤 값(<code>userInput</code>)을 입력해왔다고 합시다. 이 값은 뭐일지 모릅니다. 일단 <code>string</code> 인 건 확실하다고 가정합시다. 하지만 그렇다고 해도 <code>colors</code> 에서의 <code>includes</code> 를 사용할 수는 없습니다. 왜냐하면 <code>colors</code> 에는 애초에 <code>'red'</code>, <code>'green'</code>, <code>'blue'</code> 만 들어갈 수가 있어서 <strong>이것들로만 있는지 없는지 검사할 수 있기</strong> 때문입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const userInput: string = getUserInput();
if (colors.includes(userInput)) { // 에러!
  // 올바른 userInput 이다!
  doWithColor(userInput);
} else {
  // 올바르지 않은 userInput 이다!
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>Argument of type 'string' is not assignable to parameter of type '"red" | "green" | "blue"'. ts(2345)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇다면, 값은 똑같되 타입만 다른 <code>string</code> 배열을 만들어서 포함되는지 확인하면 되잖아요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const userInput: string = getUserInput();
const typeCheck: string&#91;] = &#91;...colors];
if (colors.includes(userInput)) {
  // 올바른 userInput 이다!
  doWithColor(userInput); // 에러!
} else {
  // 올바르지 않은 userInput 이다!
}</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>Argument of type 'string' is not assignable to parameter of type '"red" | "green" | "blue"'.ts(2345)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하지만 어림도 없죠. 에러가 발생합니다. 왜냐하면 여전히 <code>userInput</code> 은 <code>string</code> 이기 때문에, <code>doWithColor(userInput)</code> 입장에서 <code>userInput</code> 은 <code>"red" | "green" | "blue"</code> 뿐 아니라 <code>"purple"</code> 과 같은 이상한 값이 들어올 가능성이 있다고 판단합니다. 저 <code>if</code> 문을 통과했다고 하더라도 말입니다!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이런 문제를 Type Predicates (타입 서술?)를 활용하여 해결하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Type Predicates</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" target="_blank">레퍼런스</a>를 먼저 보는 게 더 마음이 편할 것입니다. 우리는 Type Predicates 를 통해 타입을 <strong>좁혀줄 수 있습니다</strong>! 자, 타입을 좁힌다는 것이 무슨 뜻일까요? 아래 이미지를 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2536,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/04/photo_2021-04-09_13-42-312.jpg" alt="" class="wp-image-2536"/><figcaption>타입의 범위</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><code>string</code> 과 <code>"red" | "green" | "blue"</code> 를 비교해봅시다. string 은 아주 다양한 것들을 포함할 수 있습니다. 다만 <code>"red" | "green" | "blue"</code> 는 3개 밖에 없습니다. <code>"purple"</code> 은 <code>ColorType</code> 이 될 수 없고, 오직 <code>string</code> 만 가능합니다. 반면 모든 <code>ColorType</code> 은 <code>string</code> 입니다.  직관적으로 표현하자면 <code>string</code> 은 망망대해와 같은 넓고 큰 타입이고, 반면 <code>ColorType</code> 은 가능한 것이 3개 밖에 없는 좁은 타입입니다. 우리가 <strong>Type Predicates 를 한다는 뜻은, 본래 <code>string</code> 이었던 <code>userInput</code> 값을, 우리가 직접 검사를 해서 그 값의 타입을 <code>ColorType</code>으로 간주하게 한다는 것입니다!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>타입 Predicates 를 사용하려면 우선 함수를 만들어야 합니다. 그 함수를 <strong>user-defined type guard(사용자정의 타입 가드)</strong> 라고 명명하겠습니다. 이 함수는 리턴 타입이 <code>boolean</code> 이어야 하는데, <code>boolean</code> 대신 <code>: input is ColorType</code> 과 같이 <code>is</code> 키워드를 넣어서 정의해야 합니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export function contains&lt;T extends string>(
  list: ReadonlyArray&lt;T>,
  value: string,
): <strong>value is T</strong> {
  return list.some((item) => item === value);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 함수는 우선 두 가지의 값을 받습니다. <code>list</code> 는 readonly 배열이고, <code>value</code> 는 검사하고자 하는 값입니다. <code>ColorType</code> 은 <code>string</code> 안에 있는 좁은 타입이므로 <code>string</code> 을 <code>extends</code> 한다고 볼 수 있습니다. 그래서 문제가 없습니다. 그래서 <code>list</code> 안에 하나라도 <code>value</code> 와 일치하는 것이 있다면, <code>true</code> 를 반환하고, 그렇지 않다면 <code>false</code> 를 반환하는 간단한 함수입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 함수에서 <strong><code>value is T</code></strong> 의 의미는, 이 <code>contains</code> 함수의 결과가 참이라면 <code>value</code> 를 <code>T</code> 타입으로 간주해도 좋다는 뜻입니다. 우리가 실제로 실행할 때에는 <code>T</code> 가 ColorType 으로 inference 되므로, 결과적으로 타입이 좁혀지면서 아래 코드는 문제없이 동작하게 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const userInput: string = getUserInput();
const typeCheck: string&#91;] = &#91;...colors];
if (contains(colors, userInput)) {
  // 올바른 userInput 이다!
  doWithColor(userInput);
} else {
  // 올바르지 않은 userInput 이다!
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>활용</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>필자는 콤마(<code>,</code>)로 구분된 길다란 문자열을 나눠서 어떤 readonly 배열에 있는 유효한 값들만 모으는 함수를 만들기 위해 이 고생을 했습니다. (매번 선형 탐색을 하기 때문에 커다란 자료를  다룬다면 Set 등의 자료구조를 고려해야 합니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export function contains&lt;T extends string>(
  list: ReadonlyArray&lt;T>,
  value: string,
): value is T {
  return list.some((item) => item === value);
}

export function parseRestrictedArray&lt;T extends string>(
  value: string,
  list: ReadonlyArray&lt;T>,
): T&#91;] {
  const arr = value.split(',');
  const result: T&#91;] = &#91;];
  arr.forEach((item) => {
    if (contains(list, item)) {
      result.push(item);
    }
  });
  return result;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>한계</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 Type Predicates 에서 유의해야 할 점은, 타입을 좁히는 것 밖에 되지 않는다는 점입니다. 타입을 넓히는 것은 as 를 활용한 <a rel="noreferrer noopener" href="https://hyunseob.github.io/2017/12/12/typescript-type-inteference-and-type-assertion/" target="_blank">Type Assertion</a> 을 고려해야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>마이크로소프트 타입스크립트 레퍼런스들은 뭔가 빈약한 기분이에요... 있을 거 다 있는 것 같으면서도...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2535</wp:post_id>
		<wp:post_date><![CDATA[2021-04-09 14:15:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-09 05:15:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-09 14:15:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-09 05:15:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[typescript-readonly-%eb%b0%b0%ec%97%b4%ec%9d%98-includes-%ec%9d%b8%ec%88%98-%eb%b2%94%ec%9c%84%eb%a5%bc-%ed%99%95%ec%9e%a5%ed%95%98%ea%b8%b0-type-predicates]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Axios 이상하게 동작할 때 해결법]]></title>
		<link>https://elvanov.com/2540</link>
		<pubDate>Sun, 11 Apr 2021 10:10:08 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2540</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>axios 의 버그인지, 아니면 라이브러리끼리의 충돌인지 하여튼, <strong>axios 리턴 객체가 문서상의 객체와 다른 원인 불명의 문제</strong>를 해결하는 글입니다. axios 그 자체에 대한 설명은 <a href="https://xn--xy1bk56a.run/axios/guide/" target="_blank" rel="noreferrer noopener">다른 글</a>에도 많으니 참고해주시기 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>문제</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>갑자기 axios가 이상하게 동작했습니다. 원래 요청을 받으면 <a href="https://xn--xy1bk56a.run/axios/guide/response-schema.html"><code>AxiosResponse</code></a> 로 받게 됩니다. Typescript 타입 정의를 보니 아래와 같이 되어 있었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export interface AxiosResponse&lt;T = any>  {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: AxiosRequestConfig;
  request?: any;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그런데 말입니다, node.js 에서 axios 를 사용하려고 하니까 저 객체가 튀어나오지 않고 곧바로 data 값이 튀어나오는 겁니다. 그러니까 본래는 다음과 같이 접근했어야 했던 것들이</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const res = await axios.get('https://something.com');
const data = res.data;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래와 같이 접근해야 정상적으로 동작했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const data = await axios.get('https://something.com');
console.log(data); // 본래 res.data 로 접근해야 하는 것들이 들어가있음.
const res = await axios.get('https://something.com');
const what = res.data; // undefined</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이게 도대체 무슨 일이란 말입니까 !! ㅠㅠ.. 코드의 일관성을 유지하기 위해 이 프로그램에서만 특이한 방법으로 사용할 수도 없는 노릇이었습니다. 왜 이런 문제가 터지는지 전혀 모르겠지만 하여튼 문제를 해결해봅시다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>해결법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 axios 인스턴스를 새롭게 만들어서 그 인스턴스로 요청을 보내면 됩니다. 참 쉽죠? 여전히 찜짐한 구석은 있지만 추후 문제를 전혀 일으키지 않을 코드일 것 같아 우선 이렇게 사용하고자 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const customAxios = axios.create({});
const res = await customAxios.get('https://something.com');
const data = res.data;
console.log(data); // OK!</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>실패한 시도 목록</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3>요청 시 <code>transformResponse</code> 옵션에 <code>null</code>, <code>undefined</code> 넣기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>뭔가 자동으로 변형되는 게 어디선가 들어가서 되는 게 아닌가 싶었지만 아무런 영향이 없었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>요청 시 <code>http</code>, <code>https</code> 옵션에 새로운 Agent 넣어주기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Agent 와는 관계가 없었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>요청 시 <code>decompress</code> 옵션 <code>false</code> 로 두기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>요청 압축과 관련된 옵션인 것 같은데 아무런 관계가 없었습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2540</wp:post_id>
		<wp:post_date><![CDATA[2021-04-11 19:10:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-11 10:10:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-11 19:10:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-11 10:10:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[axios-%ec%9d%b4%ec%83%81%ed%95%98%ea%b2%8c-%eb%8f%99%ec%9e%91%ed%95%a0-%eb%95%8c-%ed%95%b4%ea%b2%b0%eb%b2%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[C] 다형성(Polymorphism) 구현하기]]></title>
		<link>https://elvanov.com/2546</link>
		<pubDate>Wed, 21 Apr 2021 12:52:32 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2546</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>객체지향 패러다임에서 다형성을 정의하는 법도 여러가지겠지요. <a rel="noreferrer noopener" href="https://ko.wikipedia.org/wiki/%EB%8B%A4%ED%98%95%EC%84%B1_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)" target="_blank">위키백과</a>에서는 프로그램 언어의 각 요소들이 다양한 자료형(type)에 속하는 것이 허가되는 성질을 가리킨다고 되어있습니다. 모두 아시다시피, C에서는 객체지향의 패러다임을 언어 차원에서 설계를 해놓지 않았으므로 그러한 개념을 구현하기가 굉장히 까다롭습니다. 이론적인 부분을 크게 다루지는 않을 것이므로, 간단하게 정의하는 것으로 시작하겠습니다. 이 글에서 다형성을 구현한다는 의미는, <strong>소스코드 상에서 동일한 함수 호출이 다른 행동을 할 수 있게끔</strong> 하는 것입니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>C에서는 메서드라는 개념이 없습니다. 그래서 어떤 객체에 연결된 함수를 구현하려면, 어떤 함수에다가 어떤 구조체를 직접 넣어주어야 합니다. 만약 <code>t_person</code> 이라는 구조체와 <code>t_dog</code> 라는 구조체가 있다고 가정하고, 각각 걷는다는 행동을 만든다고 가정합시다. 그러면 아마도 다음과 같이 될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>#include &lt;stdio.h&gt;

typedef struct s_person
{
	char *name;
	int age;
	char *company;
	char *address;
} t_person;

typedef struct s_dog
{
	char *name;
	int age;
	char *owner_name;
} t_dog;

void walk_person(t_person *self) {
	printf("%s 은 자신의 집인 %s에서 출발해 %s로 터벅터벅 걸어간다...\n", self-&gt;name, self-&gt;address, self-&gt;company);
}

void walk_dog(t_dog *self) {
	printf("%s 은 주인인 %s와 함께 산책한다...\n", self-&gt;name, self-&gt;owner_name);
}

int main(void) {
	t_person person;
	person.address = "사당동 8번출구";
	person.age = 26;
	person.company = "이노베이션아카데미";
	person.name = "김철수";

	t_dog dog;
	dog.age = 5;
	dog.name = "뭉치";
	dog.owner_name = "김철수";

	walk_person(&amp;person);
	walk_dog(&amp;dog);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>꽤 심플한 코드입니다. <code>t_person</code> 과 <code>t_dog</code> 두 개의 구조체를 우선 정의한 다음, 각각의 구조체에 대한 <code>walk</code> 함수를 만들었습니다. 이 함수는 구조체를 포인터로 받아와서, 구조체의 정보를 활용하여 <code>printf</code> 함수만 호출합니다. <code>t_person</code> 의 경우 <code>walk_person</code> 함수를 호출하면 되고, <code>t_dog</code> 의 경우 <code>walk_dog</code> 함수를 호출하면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 말입니다, 이제는 어떤 <strong>배열</strong>을 가정합시다. <strong>이 배열에는 <code>walk</code> 기능이 구현된 구조체 변수만 들어갈 수 있다는 전제조건</strong> 하에, <strong>이 배열에서 각 구조체에 대해서 <code>walk</code> 기능을 수행하고자 하려면</strong> 어떤 코드를 써야 할까요? 다음과 같은 모양이 될텐데, 저기의 물음표에는 어떤 것이 들어가야 할까요? 애초에, 저런 코드가 가능하기나 할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code> /* 중략 */
 
 int main(void) {
 	t_person person;
 	person.address = "사당동 8번출구";
 	person.age = 26;
 	person.company = "이노베이션아카데미";
 	person.name = "김철수";
 
 	t_dog dog;
 	dog.age = 5;
 	dog.name = "뭉치";
 	dog.owner_name = "김철수";
 
-	walk_person(&amp;person);
-	walk_dog(&amp;dog);

+	t_dog another_dog;
+	another_dog.age = 3;
+	another_dog.name = "삐삐";
+	another_dog.owner_name = "김영희";
+
+	void *walkable_things&#91;3];
+	walkable_things&#91;0] = &amp;person;
+	walkable_things&#91;1] = &amp;dog;
+	walkable_things&#91;2] = &amp;another_dog;
+
+	for (int i = 0; i &lt; 3; i++)
+		walk_??(walkable_things&#91;i]); // 도대체 어떤 코드를 넣을 수 있을까요?
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>i</code>는 <code>0</code>부터 <code>2</code>까지 순회합니다. 그러면서 <strong>어떤 같은 함수</strong>를 호출할 것입니다. 저기의 저 물음표는 변하지 않고 어쨌든 고정이기는 할테니까요. 하지만 그 함수는 구조체에 맞게 <strong>각기 다르게 동작</strong>해야 합니다. 이런 느낌의 다형성을 구현하고자 하는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다형성을 구현하고자 하는 코드는 <a rel="noreferrer noopener" href="https://stackoverflow.com/questions/8194250/polymorphism-in-c" target="_blank">스택 오버플로우</a>에서 영감을 받았습니다. 하지만 이 코드에는 <code>CAT</code> 과 <code>DOG</code> 가 무조건 <code>animal</code> 이라는 구조체여야 하는 제한사항이 있었습니다. 만약 <code>CAT</code> 과 <code>DOG</code> 각각 다른 정보를 저장하고 싶어서 (위에서 보시다시피 <code>t_person</code> 과 <code>t_dog</code> 가 다른 정보를 저장하고 있는 것처럼) 다른 구조체를 사용하고자 한다면 이 코드를 그대로 활용하기는 무리가 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글에서 구현하는 다형성은 실제 C를 사용하는 환경에서는 충분히 무의미할 것입니다. 애초에 C를 이렇게 사용하라고 만든 게 아닌데, 그렇게 사용할려고 발악을 하고 있으니까요. 이 글은 C라는 극한의 환경에서 객체지향의 개념을 조금이나마 흉내내는 것에 의의를 두고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또한 C 에서 다형성을 구현하는 방법은 좀 더 다양할 수 있습니다. 이 글에서 나온 방법보다 더 직관적이고 쉬운 방법이 있을 수 있지만, 일단 제 선에서 실제로 구현한 것들을 정리해보았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>본 글에서는 <code><a rel="noreferrer noopener" href="https://dojang.io/mod/page/view.php?id=278" target="_blank">void *</a></code> 와  <a rel="noreferrer noopener" href="https://dojang.io/mod/page/view.php?id=592" target="_blank">함수 포인터</a>를 지지고 볶고 있습니다. 아직 그러한 개념이 잘 서있지 않다면, 먼저 개념을 익히고 오면 더 수월하게 이해가 잘 될 것입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>t_bag</code> 간단하게 구현하기 </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단, 위에서는 어떤 배열이라고 가정했는데, 좀 더 기능이 있는 배열을 만들어보고자 합니다. 날 것의 배열을 그대로 가져다 쓰기에는 불편한 점이 한두 가지가 아니므로 간단한 컨테이너를 만들고 본격적으로 다형성을 알아보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 배열은 <code>t_bag</code> 라는 이름을 가지고 있고, 내부의 요소가 어느정도 차게 되면 자동으로 확장하는 구조체입니다. 내부에는 어떤 것도 저장할 수 있어야 하기 때문에 <code>void *</code> 배열, 즉 <code>void **</code> 인 <code>arr</code>, 이 배열의 유효한 길이를 나타내는 <code>len</code>, 이 배열이 실제로 할당되어 있는 최대 범위를 나타내는 <code>max</code> 변수로 이루어져 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>typedef struct s_bag
{
	void **arr;
	int len;
	int max;
} t_bag;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>arr</code> 배열은 동적으로 크기가 변하므로,  동적으로 메모리를 할당하는 함수인 <code>malloc</code> 을 내부적으로 사용할 예정이며, 처음 초기화를 담당하는 <code>create_bag</code> 함수를 작성합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래에 있는 <code>m</code> 함수는 단순히 <code>malloc</code> 을 수행해주는 래퍼 함수입니다. <code>malloc</code> 의 결과는 <code>target</code> 에 저장됩니다. <code>malloc</code> 이 성공했다면 TRUE 를, 실패했다면 FALSE 를 반환합니다. 하지만 추후 작성할 모든 코드는 <code>malloc</code> 에러 상황에 대한 대처를 하지 않았으므로, <code>m</code> 의 결과가 <code>TRUE</code> 인지 <code>FALSE</code> 인지에 대해서는 아무런 상관이 없습니다. <code>create_bag</code> 함수를 살펴보면 알겠지만, 일단 최초의 최대 크기를 <code>10</code>으로 잡아놓습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;

typedef int t_bool;
#define TRUE 1
#define FALSE 0

t_bool	m(void *target, size_t size)
{
	void	**pt;

	pt = (void **)target;
	*pt = malloc(size);
	if (*pt == 0)
		return (FALSE);
	return (TRUE);
}

t_bag create_bag()
{
	t_bag bag;

	bag.len = 0;
	bag.max = 10;
	if (!m(&amp;bag.arr, sizeof(void *) * 10))
		exit(0);
	return (bag);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p> 일단 <code>create_bag</code> 로 <code>t_bag</code> 를 만들고 나면, 거기에 <code>bag_add</code> 함수로 항목을 추가해줄 수 있습니다. 이 함수는 아래와 같이 구현됩니다. 이 함수는 호출될 때마다 마지막 자리에 항목을 추가시키며, 현재 길이가 최대 크기의 1/2 보다 커질 경우 최대 크기를 두 배 확장합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>void bag_add(t_bag *bag, void *item)
{
	void **new_arr;

	bag-&gt;arr&#91;bag-&gt;len] = (void *)item;
	bag-&gt;len += 1;
	if (bag-&gt;len &gt; bag-&gt;max / 2)
	{
		bag-&gt;max *= 2;
		m(&amp;new_arr, sizeof(void *) * bag-&gt;max);
		for (int i = 0; i &lt; bag-&gt;len; i++)
			new_arr&#91;i] = bag-&gt;arr&#91;i];
		free(bag-&gt;arr);
		bag-&gt;arr = new_arr;
	}
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 이 구조체의 항목들을 순회하기 쉽도록 <code>bag_foreach</code> 함수를 만듭니다. 이 함수는 다른 함수포인터를 인수로 받아와서, 각 항목을 해당 함수로 실행시키는 함수입니다. 아래에서 확인하실 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>void bag_foreach(t_bag *bag, void (*func)(void *))
{
	for (int i = 0; i &lt; bag-&gt;len; i++)
		func(bag-&gt;arr&#91;i]);
}</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":2549,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0307-2-1024x648.jpg" alt="" class="wp-image-2549"/><figcaption><code>t_bag</code> 의 구조</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2><code>walk</code> 기능을 구현했다는 맥락을 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이게 도대체 무슨 말일까요? <code>walk</code> 기능을 구현했다는 맥락을 만든다는 게 무슨 말일까요? 저도 모르겠습니다. 적당한 말이 떠오르지 않습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리가 앞서 어떤 배열을 가정하고 그 배열에는 <strong><code>walk</code> 기능이 구현된 구조체 변수만 들어갈 수 있다는 전제조건</strong>을 붙인다고 이야기를 했습니다. 그러니까 우리가 새롭게 만들 <code>t_bag</code> 구조체에 들어가는 것들은 <code>walk</code> 기능이 구현되어 있다는 약속이 필요합니다. 불행히도 C에는 프로그래밍 문법 차원에서 이러한 전제 조건을 붙일 수 없습니다. <code>t_bag</code> 가 <code>void *</code> 를 저장하고 있다고 해서 각 항목을 검사하여 <code>walk_person</code> 함수와 <code>walk_dog</code> 함수로 분배해줄 수 있는 능력은 전무한 것이죠. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>t_bag</code> 에는 <strong><code>walk</code> 기능을 구현하고 있음을 보증하는 별도의 구조체, 즉 <code>t_walkable</code>를 저장</strong>해야 하며, 이 <code>t_bag</code> 에 저장되는 것들은 모두 <code>t_walkable</code> 를 저장하고 있다고 스스로 머릿속에 기억해놓고 있어야 합니다. (어디 주석에다가 적어 놓읍시다) </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>typedef struct s_walkable
{
	void (*walk)(void *raw_self);
	void *object;
} t_walkable;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>t_walkable</code> 구조체는 지금으로썬 두 가지 멤버 변수를 지니고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>walk</code>: 함수 포인터입니다. <code>void *</code> 을 인수로 받고 있는 함수입니다. 나중에 실제로 실행하는 시점에서, <strong>실행할 함수</strong>를 저장합니다. </li><li><code>object</code>: <code>void *</code> 입니다. 나중에 실제로 실행하는 시점에서, 그 <strong>주체</strong>를 저장합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 무수한 <code>void *</code> 의 향연은 무엇이며, 이것들이 나중에 어떻게 동작하는지 도저히 감이 안와도 괜찮습니다. 추후에 모든 코드를 작성한 후 설명할 예정입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 지금은 편의상 지금껏 언급해왔던 <code>t_bag</code> 를 담고있는 구조체를 만들어 추후 접근하기 쉽게 만들겠습니다. 아래에서 <code>t_vtables</code> 를 정의합니다. (<a rel="noreferrer noopener" href="https://musket-ade.tistory.com/entry/C-%EA%B0%80%EC%83%81%ED%95%A8%EC%88%98-%ED%85%8C%EC%9D%B4%EB%B8%94-V-Table" target="_blank">가상함수 테이블</a>의 실제 역할과는 많이 다릅니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>typedef struct s_vtables
{
	/* contains t_walkable* */
	t_bag walkables;
} t_vtables;

t_vtables *get_vtables()
{
	static t_vtables t;

	if (!t.walkables.arr)
		t.walkables = create_bag();
	return &amp;t;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>get_vtables</code> 함수 안에 <a rel="noreferrer noopener" href="https://dojang.io/mod/page/view.php?id=690" target="_blank">정적 변수</a>를 선언하여 전역 변수처럼 사용할 예정입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>준비 단계: t_bag 에 적절한 데이터를 만들어 넣기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 코드의 향연입니다. <code>create_walkable</code>, <code>create_person</code>, <code>create_dog</code> 함수를 만듭니다. 이 각각의 함수들은 각각의 구조체를 만들면서, 동시에 적절하게 <code>get_vtables()->walkables</code> 에 앞서 말한 보증 구조체를 집어넣어야 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>t_walkable *create_walkable(void *obj, void (*walk_handler)(void *)) {
	t_walkable *walkable;

	m(&amp;walkable, sizeof(t_walkable));
	walkable->object = obj;
	walkable->walk = walk_handler;
	bag_add(&amp;get_vtables()->walkables, walkable);
	return walkable;
}

void create_person(t_person def) {
	t_person *person;

	m(&amp;person, sizeof(t_person));
	person->address = def.address;
	person->age = def.age;
	person->company = def.company;
	person->name = def.name;
	create_walkable(person, walk_person);
}

void create_dog(t_dog def) {
	t_dog *dog;

	m(&amp;dog, sizeof(t_dog));
	dog->age = def.age;
	dog->name = def.name;
	dog->owner_name = def.owner_name;
	create_walkable(dog, walk_dog);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>create_person</code>  과 <code>create_dog</code> 함수는 우선 단순한 구조체를 입력용으로 받아서 새로운 구조체를 동적으로 할당하여 만들고, <code>create_walkable</code> 함수를 호출하면서 끝이 납니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>create_walkable</code> 함수는 첫 번째 인수로 <code>void *obj</code> 를 받아오고, 두번째 인수로 <code>void (*walk_handler)(void *)</code>를 받아옵니다. 앗, 우리가 만들었던 <code>walk_person</code> 함수와 <code>walk_dog</code> 함수는 각각 <code>t_person *</code> 과 <code>t_dog *</code> 를 인수로 받았기 때문에 함수 포인터의 타입과 일치하지 않게 됩니다. (함수 포인터의 경우는 모든 요소가 전부 일치해야 합니다.) 그래서 두 함수를 조금 수정해야 위 코드가 정상적으로 돌아갑니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code>-void walk_person(t_person *self) {
+void walk_person(void *raw_self) {
+	t_person *self;
+
+	self = (t_person *)raw_self;
 	printf("%s 은 자신의 집인 %s에서 출발해 %s로 터벅터벅 걸어간다...\n", self-&gt;name, self-&gt;address, self-&gt;company);
 }

-void walk_dog(t_dog *self) {
+void walk_dog(void *raw_self) {
+	t_dog *self;
+
+	self = (t_dog *)raw_self;
 	printf("%s 은 주인인 %s와 함께 산책한다...\n", self-&gt;name, self-&gt;owner_name);
 }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아직까지 전혀 감이 오지 않으리라 생각합니다. 실제로 호출하면서 어떻게 진행되는지 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>실행 단계: 함수 호출하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>코드를 조금만 더 작성해 보도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>void do_walk(void *ptr) {
	t_walkable *walkable;

	walkable = (t_walkable *)ptr;
	walkable->walk(walkable->object);
}

void all_walk() {
	bag_foreach(&amp;get_vtables()->walkables, do_walk);
};

void test_all_walk()
{
	t_person person_def;
	person_def.address = "사당동 8번출구";
	person_def.age = 26;
	person_def.company = "이노베이션아카데미";
	person_def.name = "김철수";

	t_dog dog_def;
	dog_def.age = 5;
	dog_def.name = "뭉치";
	dog_def.owner_name = "김철수";

	create_person(person_def);
	create_dog(dog_def);
	all_walk();
}

int main(void)
{
	test_all_walk();
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>일단 <code>get_vtables()->walkables</code> 의 요소는 실제로 우리가 <code>t_walkable *</code> 만을 저장했지만, 타입은 <code>void *</code> 이므로 <code>do_walk</code> 함수 내부에서 캐스팅을 해준다음, <code>walkable->walk(walkable->object);</code> 로 실제 호출을 해줍니다! 이 호출을 통해서 <strong>이미 저장된 <code>walk_person</code> 혹은 <code>walk_dog</code> 함수가 적절하게 호출</strong>됩니다. 그것도 이 함수 호출의 <strong>주체(<code>object</code>)</strong>와 함께요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러면 이제 아래 결과가 나올 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>김철수 은 자신의 집인 사당동 8번출구에서 출발해 이노베이션아카데미로 터벅터벅 걸어간다...
뭉치 은 주인인 김철수와 함께 산책한다...</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>어떻게 이런 결과가?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>어떻게 이런 결과가 나왔을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2550,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/04/IMG_0308-2-1024x876.jpg" alt="" class="wp-image-2550"/><figcaption>실행되는 과정</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>준비하고 실행되는 과정은 간단합니다. 위 그림과 같이 준비 단계에서 특정 <code>t_bag</code> 에 잘 저장시켜 놓은 다음 실행 단계에서 차례로 잘 실행하면 끝납니다. 다만, 각각의 항목이 언제 어떻게 들어올 지 몰라서 <code>void *</code> 를 걸어두고, 또 그것을 실제로 사용할 수 있도록 캐스팅하는 과정이 있어 좀 더 복잡하게 느껴질 뿐입니다. 찬찬히 코드가 흘러가는 흐름을 본다면 흐름이 보일 것입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-c"} -->
<pre class="wp-block-code language-c"><code>typedef struct s_walkable
{
	void (*walk)(void *raw_self);
	void *object;
} t_walkable;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드는 앞서 선언하였던 <code>t_walkable</code> 입니다. 여기서 <code>object</code> 가 <code>void *</code> 인 이유는, 실제로 이 함수를 사용할 주체가 어떤 구조체일지 예상할 수 없기 때문입니다. 당장에 우리가 <code>t_person</code> 과 <code>t_dog</code> 을 만들었었지요. 근데 우리가 구조체를 더 추가하고 싶다면요? <code>t_cat</code> 을 추가했다 하더라도, <code>t_cat</code>을 생성하는 시점에서 올바르게 <code>walkable</code>를 만들고 <code>get_vtables()-&gt;walkables</code> 에 잘 저장만 해놨다면 순회하는 데 아무런 문제가 없습니다. <code>walk</code> 의 타입인 <code>void(*)(void *)</code> 에서, 첫번째 파라미터의 타입이 <code>void *</code> 인 것도 같은 이유입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 <code>walk</code> 함수의 나머지 부분은 필요에 따라 변형해나갈 수 있습니다. 예를 들어 걸을 때마다 현재 시각에 따라서 행동을 다르게 구현하기 위해 <code>int time</code> 매개변수를 추가하고 싶다고 가정합시다. 그러면 아래와 같이 walk 의 타입을 수정한 후 각각의 <code>walk_...</code> 함수의 구조를 맞춰서 구현하면 됩니다. 또한 <code>t_walkable</code> 에 <code>walk</code> 라는 함수 하나만 존재하리란 법도 없고 이 구조체에 다른 멤버 변수를 넣지 못하리란 법도 없습니다. 예를 들어 걸을려면 다리가 필요하니, 다리의 갯수를 나타내는 변수를 추가한다고 가정합시다. 그럼 아래와 같이 만들면 되지 않을까요? 그 다음 각각의 <code>create_...</code> 함수에서 <code>leg_count</code> 값을 같이 집어넣어 주는 것이지요. (이 코드는 패스)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-c diff-highlight"} -->
<pre class="wp-block-code language-diff-c diff-highlight"><code>  typedef struct s_walkable
  {
- 	void (*walk)(void *raw_self);
+ 	void (*walk)(void *raw_self, int time);
+	int leg_count;
  	void *object;
  } t_walkable;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>어쨌든 우리는 하나의 <code>walkable-&gt;walk(walkable-&gt;object);</code> 라는 코드로 <code>walk_person(&amp;person)</code> 혹은 <code>walk_dog(&amp;dog)</code> 함수가 적절하게 실행되도록 만들었습니다! 이로써 다형성이 충족되었습니다. 고생하셨습니다. 본 코드는 아래 깃허브에 올라가 있습니다. 참조해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/echoja/polymorphism-c">https://github.com/echoja/polymorphism-c</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2546</wp:post_id>
		<wp:post_date><![CDATA[2021-04-21 21:52:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-21 12:52:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-22 09:38:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-22 00:38:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-%eb%8b%a4%ed%98%95%ec%84%b1polymorphism-%ea%b5%ac%ed%98%84%ed%95%98%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c"><![CDATA[c]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[알고리즘]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Typescript] 인터페이스의 키 목록을 string 배열과 일치하도록 강제하기]]></title>
		<link>https://elvanov.com/2562</link>
		<pubDate>Sat, 24 Apr 2021 18:09:06 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2562</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이런 걸 만들고 싶다고 가정합시다. 어떤 액션의 타입을 <code>string</code> 으로 받아온다고 합시다. 액션의 종류에 대해서 순회할 일도 있으므로 (값으로써 직접 가지고 있어야 하므로) 다음과 같이 배열로 만든다고 가정합시다. (<code>'go' | 'sleep' | 'dance'</code> 이런 식으로 직접 타입을 선언해봤자 이 타입을 기반으로 새 배열을 우리가 만들수는 없으므로.. 일단 배열을 직접 만들어야 합니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const actions = &#91;'go', 'sleep', 'dance'];</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 각각의 액션을 처리할 함수가 있다고 가정합시다. 또한 이 함수는 추가적인 데이터를 필요로 하기 때문에 총 인자는 2개 입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>function handleAction(action, data) { ... }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 각각의 타입에 대한 데이터를 별도로 타입으로 정의해두고 싶다고 가정해요. (가정이 좀 많지요?) 어떤 액션에 대한 타입을 레코드 형식으로 정의한다고 가정해요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>interface ActionDataMap {
  go: boolean;
  sleep: string;
  dance: string&#91;];
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위와 같이 만들어 보는 거죠. 하지만 <code>actions</code> 와 <code>ActionDataMap</code> 은 서로 영향을 주고 받을 수 없습니다. 그러니까 액션에는 <code>'go'</code>, <code>'sleep'</code>, <code>'dance'</code> 세 가지가 있는데, <code>ActionDataMap</code> 내부에서 이 세가지가 각각 존재하는지 아닌지 확인할 방법은 지금 당장엔 없습니다. 그 방법을 지금 당장 찾아봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>keyof</code> 와 lookup types 을 활용한 방법</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>actions</code>의 값들을 <code>ActionDataMap</code> 에 포함시키기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 키들은 고정되어 있고, 해당 키를 수정하려면 그냥 코드를 수정하면 되므로 <code>as const</code> 를 이용하여 <a rel="noreferrer noopener" href="https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#const-assertions" target="_blank">const assertion</a> 해줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-ts diff-highlight"} -->
<pre class="wp-block-code language-diff-ts diff-highlight"><code>- const actions = &#91;'go', 'sleep', 'dance'];
+ const actions = &#91;'go', 'sleep', 'dance'] as const;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 일단 actions 의 값 타입들을 extends 하는 타입 T 에 대해 <code>ActionDataMap[T]</code> 를 정의하도록 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>type Check&lt;T extends typeof actions&#91;number]&gt; = ActionDataMap&#91;T];</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>ActionDataMap[T]</code> 와 같이 인터페이스의 항목에 인덱스 접근하여 (<code>[key]</code>로 접근하여 ) 얻는 타입을 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#keyof-and-lookup-types">lookup types</a> 라고 합니다. 세부적인 타입을 활용하고 싶을 때 아주 편리한 방법이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>typeof actions[number]</code> 는 <code>'go' | 'sleep' | 'dance'</code> 가 됩니다. 그리고 <code>ActionDataMap[T]</code> 를 하게 되면 해당 키를 찾아서 타입을 정의해줄 것입니다. 예를 들어 어떤 사용자가 <code>let example: Check&lt;'go'&gt;;</code> 이렇게 선언하게 되면, <code>example</code>의 타입은 <code>boolean</code> 이 됩니다! 지금 상황에서는 <code>T</code>가 <code>ActionDataMap</code> 의 범위에 벗어나는 값이 절대로 들어올 일이 없습니다. 왜냐하면 <code>T</code>로 들어올 수 있는 <strong><code>'go'</code>, <code>'sleep'</code>, <code>'dance'</code>는 모두 <code>ActionDataMap</code> 의 키로 포함되어 있기 때문</strong>이죠. 에러가 일어날 가능성이 없기 때문에 에러가 나지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그런데 만약에 <strong><code>T</code>로 들어올 수 있는 값이 <code>ActionDataMap</code> 에 존재하지 않으면 어떻게 될까요</strong>? 그런 상황이 된다면 우리의 타입스크립트는 <strong>에러</strong>를 내뿜습니다! 아래를 시험해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-ts diff-highlight"} -->
<pre class="wp-block-code language-diff-ts diff-highlight"><code>- const actions = &#91;'go', 'sleep', 'dance'] as const;
+ const actions = &#91;'go', 'sleep', 'dance', 'play'] as const;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그럼 이제 아래와 같은 에러가 발생할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export type Check&lt;T extends typeof actions&#91;number]&gt; = <span style="text-decoration: underline;">ActionDataMap&#91;T]</span>;
// Type 'T' cannot be used to index type 'ActionDataMap'. ts(2536)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>좋습니다. 우리가 원하는 에러를 발생시켰습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>지금 상태로는 <code>actions</code>에 없는 값들이 <code>ActionDataMap</code> 에 있어도 에러를 일으키지 않습니다. 즉 다음과 같은 코드여도 문제없이 잘 동작합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-ts diff-highlight"} -->
<pre class="wp-block-code language-diff-ts diff-highlight"><code>  const actions = &#91;'go', 'sleep', 'dance', 'play'] as const;
  
  interface ActionDataMap {
    go: boolean;
    sleep: string;
    dance: string&#91;];
+   play: number;
+   exercise: number&#91;];
  }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>'exercise'</code> 는 <code>actions</code> 에 없는데도 에러가 발생하지 않습니다. 왜 그럴까요? 왜냐하면 <code>actions</code> 에 있는 모든 키는 <code>ActionDataMap</code> 에 포함되어 있기 때문에 에러가 일어날 일이 없기 때문입니다. 즉 <code>exercise</code> 는 애초에 아웃 오브 안중이란 뜻이죠. 그렇다면 지금까지 해왔던 과정을 반대로 하기만 한다면? 서로가 서로를 포함되어야 한다, 즉 일치되어야 한다가 성립하겠군요!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>ActionDataMap</code>의 키 값을 <code>actions</code>에 포함시키기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>lookup types 는 object literal 처럼 생긴 인터페이스 혹은 타입에 모두 가능합니다. 그러므로 일단 <code>actions</code> 를 타입으로 변환해줍니다. 이 타입은 오로지 타입 검사용으로만 사용할 예정이므로, 이름과 타입으로 실제로 사용하지 않는 용도라고 알려줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>type _ActionsDumbType = {
  &#91;P in typeof actions&#91;number]]: never;
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p> 그런 다음 똑같은 과정을 반복하되, <code>Check</code> 도 사용하지 않는다는 뜻으로 이름을 <code>_Check</code> 으로 바꾸고, 몸집을 키워봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-ts diff-highlight"} -->
<pre class="wp-block-code language-diff-ts diff-highlight"><code>- export type Check&lt;T extends typeof actions&#91;number]&gt; = ActionDataMap&#91;T];
+ type _Check&lt;T extends typeof actions&#91;number], U extends keyof ActionDataMap&gt; = {
+   mapContainsLiteral: ActionDataMap&#91;T];
+   literalContainsMapKeys: _ActionsDumbType&#91;U];
+ } &amp; never;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>뭔가가 많이 길어졌다 생각하면 착각입니다. (착각 아닙니다). <code>T</code> 같은 경우는 <code>actions</code> 의 것들이 <code>ActionDataMap</code> 에 반드시 포함되어야 한다는 맥락을 보여주고, <code>U</code> 는 <code>ActionDataMap</code> 에 있는 것들이 반드시 <code>actions</code> 에 포함되어 있어야 한다는 맥락을 보여주고 있습니다. <code>_Check</code> 타입을 정의할 때 <code>{}</code> 로 묶는 이유는 <strong>없습니다.</strong> 그냥 <code>mapContainsLiteral</code> 이거랑 <code>literalContainsMapKeys</code> 이거 이름 붙이려고 한 겁니다. 어떤 에러가 일어나는지 더 자세히 보여주려구요. 어차피 저 <code>_Check</code> 제네릭 타입은 실제 사용하지 않기 때문에 <code>&amp; never</code> 로 처리해놓았습니다.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아까전과 같은 코드라면 이제는 <code>_ActionsDumbType[U]</code> 에서 에러가 발생한다는 것을 발견하실 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const actions = &#91;'go', 'sleep', 'dance', 'play'] as const;

interface ActionDataMap {
  go: boolean;
  sleep: string;
  dance: string&#91;];
  play: number;
  exercise: number&#91;];
}

type _ActionsDumbType = {
  &#91;P in typeof actions&#91;number]]: never;
};

type _Check&lt;T extends typeof actions&#91;number], U extends keyof ActionDataMap&gt; = {
  mapContainsLiteral: ActionDataMap&#91;T];
  literalContainsMapKeys: <span style="text-decoration: underline;">_ActionsDumbType&#91;U]</span>;
  // Type 'U' cannot be used to index type '_ActionsDumbType'. ts(2536)
} &amp; never;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>exercise</code> 를 삭제하면 이제 에러가 나지 않는다는 걸 확인할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-diff-ts diff-highlight"} -->
<pre class="wp-block-code language-diff-ts diff-highlight"><code>  const actions = &#91;'go', 'sleep', 'dance', 'play'] as const;
  
  interface ActionDataMap {
    go: boolean;
    sleep: string;
    dance: string&#91;];
    play: number;
-   exercise: number&#91;];
  }
  
  type _ActionsDumbType = {
    &#91;P in typeof actions&#91;number]]: never;
  };

  type _Check&lt;T extends typeof actions&#91;number], U extends keyof ActionDataMap&gt; = {
    mapContainsLiteral: ActionDataMap&#91;T];
    literalContainsMapKeys: _ActionsDumbType&#91;U];
-   // Type 'U' cannot be used to index type '_ActionsDumbType'. ts(2536)
  } &amp; never;</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 방법은 사실 그렇게 필요한 건 아닐수도 있습니다. 실제로 데이터를 사용할 제네릭 함수를 아래와 같이 만들면, 그에 따른 타입 검사를 해주기 때문에 위와 같이 일부러 에러를 일으키는 로직을 굳이 만들지 않아도 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>function handleAction&lt;T extends typeof actions&#91;number]&gt;(action: T, data: ActionDataMap&#91;T]) {
  // ... 내용
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하지만 <code>actions</code> 에 포함되지 않는 <code>ActionDataMap</code> 이 작성되지 않도록 강제함으로써 코드가 1% 더 깔끔해지는 효과를 볼 수 있겠지요... 아무래도 작성하시면서 느끼셨을테지만, 에러 메시지도 그렇고, 우리가 원하는 바를 구현하는 방법도 그리 직관적이지 못합니다. 타입스크립트에서 타입을 확장시키거나 좁히는 방법이 정말 한정되어 있으므로, 이것들만을 활용해 별 기괴한 짓을 다 해야 한다는 걸 점점 깨닫고 있는 요즘입니다. 타입스크립트가 어렵다는 것을 계속해서 느끼게 되네요.. 갈 길은 먼 것 같습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2562</wp:post_id>
		<wp:post_date><![CDATA[2021-04-25 03:09:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-24 18:09:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-02 18:53:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-02 09:53:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[typescript-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4%ec%9d%98-%ed%82%a4-%eb%aa%a9%eb%a1%9d%ec%9d%84-string-%eb%b0%b0%ec%97%b4%ea%b3%bc-%ec%9d%bc%ec%b9%98%ed%95%98%eb%8f%84%eb%a1%9d-%ea%b0%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Rust] 배열 셔플해보기]]></title>
		<link>https://elvanov.com/2575</link>
		<pubDate>Sun, 09 May 2021 06:25:18 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2575</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Rust 에서 vec! 으로 만든 배열의 값들을 셔플하는 간단한 예제를 만들어보아요. rust 가 너무 헷갈려서 이 쉬워보이는 연습도 힘겹게 했네요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>미리 알고 있으면 좋은 것들</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>let</code> vs <code>let mut</code> : 변수를 선언할 때에는 기본적으로 불변형(immutable) 입니다. <code>mut</code> 키워드를 뒤에 붙이면 변형을 할 수 있습니다.</li><li>슬라이스: 그냥 배열같은 것의 일부분의 레퍼런스 같은 것이라고 이해하고 있습니다. </li><li><a rel="noreferrer noopener" href="https://doc.rust-lang.org/std/ops/struct.Range.html" target="_blank">Range</a>: 반복적인 동작을 정형화한 어떤 것이라고 이해하고 있습니다. 이터레이터랑 비슷한 것. <code>(0..5)</code> 라면 <strong>0이상 5미만의 어떤 반복적인 행동을 하겠다</strong>는 맥락을 만드는 것입니다.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>랜덤 수 만들기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://docs.rs/rand" target="_blank">rand</a> 라는 크레이트를 사용합니다. 필요한 개념은 많지 않습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>코드 및 결과</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-rust"} -->
<pre class="wp-block-code language-rust"><code>use rand::Rng;

fn main() {
    let mut rng = rand::thread_rng();
    const LEN: usize = 30;
    let mut arr: Vec&lt;_> = (0..LEN).collect();
    println!("before: {:?}", arr); // 
    (0..LEN - 1).for_each(|index| {
        let change = rng.gen_range(index + 1..LEN);
        arr.swap(index, change);
    });
    println!("after: {:?}", arr);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>before: &#91;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
after: &#91;21, 27, 24, 15, 29, 9, 26, 6, 0, 11, 4, 2, 8, 10, 25, 23, 14, 7, 20, 17, 16, 3, 12, 19, 13, 22, 5, 28, 18, 1]</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>코드 설명</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 <code>thread_rng</code>를 통해 랜덤 숫자 생성기를 만듭니다. 랜덤 숫자도 사실 어떤 계산된 값인데 무작위로 보이는 것처럼 할 뿐이고, 그 계산을 담당하는 객체입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>길이는 <code>30</code>으로 그냥 두었습니다. <code>Range</code> 의 <code>collect</code> 를 이용하여 배열을 생성해줍니다. 그 다음 <code>index</code>를 <code>0</code> 부터 <code>LEN - 1</code> 미만까지 반복하며 해당 인덱스 이후의 나머지 부분의 랜덤한 위치와 <code>swap</code> 해줍니다. 원리는 간단하고 코드도 그렇게 길지는 않지만 여전히 불변성이 몸에 익지 않네요. 허허..</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>후기</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>immutable let</code> 과 <code>const</code> 의 기능상 유사점 때문에 헷갈림</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><code>const</code> 는 컴파일-타임에 값으로써 모조리 변환됩니다. 마치 C 에서의 <code>#define</code> 과 같은 효과라고 보면 될 것 같습니다. <code>let</code> 은 실제 런타임 때 메모리에 값이 저장됩니다.</li><li><code>let</code>은 <code>mut</code> 키워드와 함께 있어야 변수 수정이 가능합니다. <code>mut</code> 키워드가 없더라도 쉐도잉(Shadowing)을 통해 변수의 값을 변경할 수 있습니다. 그 외 쓰임새에서 <a rel="noreferrer noopener" href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants" target="_blank">이런저런 차이</a>가 있습니다.</li><li>그래서 드는 의문점: 컴파일러가 <code>let mut</code> 이 아닌 <code>let</code> 으로 선언된 immutable 변수의 쉐도잉 여부를 판단하여, 만약 쉐도잉이 되지 않았다면 모조리 const 처럼 컴파일타임에 상수로 변경해버릴 수 있는 건 아닌가요? 하여튼 기능상의 유사점 때문에 어느 상황에서 <code>immutable let</code> 변수를 쓸지, 아니면 <code>const</code> 상수를 쓸지 감이 잘 안옵니다.</li><li>아하.. 만약 <strong>런타임 중에 새로운 값을 생성할 필요가 있는데, </strong>(예를 들어 표준 입력으로 값을 받는다던가)<strong> 그 값이 생성 이후 바뀌지 않아야 한다</strong>는 맥락을 만들기 위해서 immutable let 이 필요한 것이군요! 이제 깨달음을 얻었습니다.</li><li>참고: <a rel="noreferrer noopener" href="https://stackoverflow.com/questions/37877381/what-is-the-difference-between-immutable-and-const-variables-in-rust/37877665" target="_blank">그나마 궁금증이 해소된 StackOverflow</a> - What is the difference between immutable and const variables in Rust?</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>뭔가 반복해야 하는 것은 이터레이터를 적극적으로 활용하자</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자바스크립트에서 <code>map</code>, <code>filter</code>, <code>foreach</code> 등을 적극적으로 활용했었는데, rust에서도 비슷한 개념이 있습니다. 어떤 컨테이너에서 <code>iter()</code> 를 통해서 반복자를 얻을 수 있고, 이것을 이용해 <code><a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.for_each" target="_blank" rel="noreferrer noopener">for_each</a></code> 등의 반복되는 동작을 지정해줄 수 있습니다. 자바스크립트와 다른 점은 반복자의 종류에 따라서 내부의 값을 바꿀 수도 있고, 바꿀 수도 없다는 점입니다. 값을 변형하고 싶다면 <code><a href="https://doc.rust-lang.org/std/slice/struct.IterMut.html" target="_blank" rel="noreferrer noopener">iter_mut()</a></code> 을 활용해야 합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>rand 크레이트에 shuffle 기능이 존재함.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이건 꿈에도 몰랐습니다. 하기는 없을 리가 없지요... 내부 소스를 보니까 위와 거의 비슷하게 동작하네요. 아래는 그 내부 소스입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-rust"} -->
<pre class="wp-block-code language-rust"><code>pub trait SliceRandom {
    // ...
    fn shuffle&lt;R>(&amp;mut self, rng: &amp;mut R)
    where R: Rng + ?Sized {
        for i in (1..self.len()).rev() {
            // invariant: elements with index > i have been locked in place.
            self.swap(i, gen_index(rng, i + 1));
        }
    }
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2575</wp:post_id>
		<wp:post_date><![CDATA[2021-05-09 15:25:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-09 06:25:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-09 15:25:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-09 06:25:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rust-%eb%b0%b0%ec%97%b4-%ec%85%94%ed%94%8c%ed%95%b4%eb%b3%b4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="rust"><![CDATA[rust]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[리뷰] 모순 - 양귀자 장편소설]]></title>
		<link>https://elvanov.com/2587</link>
		<pubDate>Thu, 17 Jun 2021 13:34:19 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2587</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>소설을 굉~장히 오랜만에 읽었다. 그것도 국내 소설을. 최근 들어 읽는 문학이라곤 인터넷 커뮤니티에서 돌아다니는 각종 썰 밖에 없었는데, 이번에 제대로 책으로 된 문학을 읽게 되었다. 책을 읽게 된 경위는 우선 백만년 만에 새로운 독서 모임을 가지게 되었는데, 거기서 첫 번째로 읽어오라는 책이 이 &lt;모순&gt; 이라는 책이다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>강력한 흡인력</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>&lt;모순&gt;은 1998년에 쓰여진 소설이다. 양귀자 라는 이름은 꽤 유명해 보이지만, 원체 소설에 관심이 없던 나는 처음 듣는 이름이었다. 독서 모임이 아니었다면 꽤 예전에 발표된, 알지도 못하는 작가의 작품을 접할 일이 없었을 터. 하지만 이 책의 첫 구절을 읽기 시작했을 때부터 나는 뭔가에 홀려 독서 모임이고 뭐고 그냥 재밌어서 이틀 만에 책을 다 읽어버렸다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이렇게 살아서는 안 돼! 라고 외치는 진진이 눈물을 흘리는 스스로를 보고서는, 명명백백하게 스스로를 설명해보라는 본인의 요구에 맞닥뜨렸다 하는데, 어떻게 이런 표현을 할 수가 있지? 싶었다. 진진이 장우에 대한 자신의 마음을 깨달았을 때 마음자리에 커다란 구멍이 뚫려 거기로 찬 바람이 쉭쉭 드나들고 있었다는 기가 막힌 묘사를 어떻게 하나 싶었다. 당연히 지금 내가 쓰는 말들은 빌린 말들 뿐이니 이 작가의 표현력이 얼마나 뛰어난지는 나의 밑천이 드러나는 표현력으로밖에 설명할 수 없는 게 아쉽다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>전체적으로 표현이 풍부하고 흡인력이 있었던 이유 중 하나를 작가 노트에서 찾아볼 수 있었다. 나는 책의 중반부 쯤에 이르렀을 때 작가가 이런 이야기를 어떻게 쓰게 되었나 궁금하여 책의 앞뒤로 작가 노트가 있는지 찾았다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>&lt;모순&gt;에서 나는 장편의 이익을 많은 부분 포기했다. 할 수 있는 한 '절대 몰입'의 단편 정신으로 가고자 애를 썼다. (중략) 한 권의 책을 알뜰살뜰하게 읽는 법에 대해 궁리를 하다가, 그래서 나는 이렇게 메모하지 않을 수 없었을 것이다. "이 소설은 천천히, 아주 천천히 읽어주었으면 좋겠다...</p><cite>작가 노트 - 3</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>다만, 그 표현력이 오히려 몰입을 방해할 때도 있었던 것 같다. 화자가 진진이긴 한데, 어떻게 이런 비유를 25살 청년이 할 수 있을까, 라는. 잠시 동안이지만, 이런 찰떡같은 표현은 평생 글쓰기만 해온 작가만이 할 수 있는 업적이다, 라는 생각이 잠시 머리를 스치고, 다시 몰입을 시작하는 나.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>왜 이렇게 흡인력이 있는가에 대한 분석은 나의 깊이가 얕기에 하지 않겠다. 다시 책을 훑어보며 발견한 것 한 가지는, 진진이 그렇게는 자주 울지 않았던 것... 또 책을 읽으면서 잠시 소망이 있었다면, 진진이 말고 다른 화자가 하나의 에피소드를 맡았다면 어땠을까 하는 정도이다. 작가가 다른 인물을 통해 하는 말들이 또 궁금했으니까.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼, 인상 깊었던 구절들이 나는 너무 많아서 일일히 적을 수도 없다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>모순이라는 것에 대해</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>나는 평소에도 모순이라는 개념을 많이 상상한다. 누군가는 이 책의 제목을 보고 왜 이렇게 추상적인 말을 제목으로 해놓았는지 의아했겠지만, 나는 삶 자체가 모순이라는 말이 너무 뻔해서 오히려 눈에 띄지 않아 그냥 무덤덤한 느낌이었다. 또한 무수한 인생 각자가 맞이하는 모순의 색과 형태가 모조리 다르다는 것도 잘 안다. 나는 어쩔 수 없는 상황 때문에 지리멸렬을 맞이하게 된 사람들을 봐왔다. 나 또한 안정적으로 커왔던 것 치곤 외로움을 잘 느낀다. 진진이 느끼는, 담담한 말투로 그려낸 삶의 모순도 길다란 다리 위에서 흘러가는 강물을 보는 것처럼 자연스럽게 느껴졌다. 앞서 이야기했듯 작가의 표현력이 많은 일을 했겠지만, 하여튼 삶은 모순이라고 해서 그게 막 경외스럽거나 대단한 것도 아니고, 또 사소하거나 터부시될 만한 일도 아닌 것이다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그래서 책을 읽을 때에는 마음이 편안했다. 정답이 없으니 어느 방향으로 나아가도 이상할 것이 없었다. 진진이 나영규를 선택하든, 김장우를 선택하든 둘 다 설명이 가능한 흐름이고, 결정이 일어났다면 그때서야 이유를 찾아도 된다. 이렇게 보니 진진의 마지막 한 마디와도 좀 비슷한 것 같다. 인생은 살아가면서 탐구하는 것이라고. (다만 진진이 초반에 김장우에게 이모를 자기 어머니라고 거짓말하는 장면에서는, 혹시 저것 때문에 나중에 무슨 일이 벌어지는 게 아니야 라면서 걱정스러운 마음이 들긴 했다. 그렇지만 그 이후로도 소설은 담담하게 흘러가서 좋았다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>내가 읽고 있는 또 다른 책인 사회심리학에서, 사람들은 이미 저지른 행동에 대해 본인의 성격을 수정하는 경향이 있다고 한다. 왜냐하면 사람들은 본능적으로 일관성을 유지하고자 하는 욕구가 있기 때문이다. 결국 닭이 먼저냐, 알이 먼저냐 하는 문제에 항상 봉착하게 된다. 최근에 어떤 사람에게 행복하냐고 물어본 적이 있는데, 그 사람은 "행복하지 않을 이유가 없다"고 했다. 그렇다면 행복해서 사건들이 좋게 받아들여지는 것일까, 아니면 행복한 사건이 일어나서 행복해지는 것일까? 이러한 무한 굴레 속에서 도대체 행복해지려면 어떻게 해야 하는 걸까?</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2587</wp:post_id>
		<wp:post_date><![CDATA[2021-06-17 22:34:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-17 13:34:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-17 22:39:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-17 13:39:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%a6%ac%eb%b7%b0-%eb%aa%a8%ec%88%9c-%ec%96%91%ea%b7%80%ec%9e%90-%ec%9e%a5%ed%8e%b8%ec%86%8c%ec%84%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="review"><![CDATA[리뷰]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Javascript] 비동기, Promise, async, await 확실하게 이해하기]]></title>
		<link>https://elvanov.com/2597</link>
		<pubDate>Fri, 30 Jul 2021 08:02:44 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2597</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>🐶 2022년 11월 2일 부로 <a rel="noreferrer noopener" href="https://springfall.cc/post/7" target="_blank">글을 새롭게 리뉴얼</a>했습니다!</strong> 많은 관심 바랍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>본 글은 자바스크립트에서 <strong>Promise</strong> 에 대한 개념을 잡기 위해 작성한 글입니다. 자바스크립트의 기본 문법을 먼저 알아야 이 글을 조금 더 수월하게 보실 수 있습니다. 필자는 <a rel="noreferrer noopener" href="https://nodejs.org/en/" target="_blank">Node.js</a> 기반에서 실행시키고 있습니다. 이 글에서는 어떻게 자바스크립트 실행 환경을 만드는지에 대해서는 다루지 않습니다. 최대한 차근차근 설명하려고 했기 때문에 예제 코드는 실제 현업에서 쓰이는 것과는 다소 차이가 있을 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>함수 - 코드를 원할 때 갖다 쓰겠다.</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일단 함수라는 것부터 먼저 살펴봅시다. 우리가 코드를 작성할 때 함수를 종종 작성하고는 합니다. 그 의의를 조금 더 깊게 파보자구요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>코드는 한줄한줄 순차적으로 실행됩니다. 위에서 아래까지 하나하나 차례대로요. 이는 불변의 진리 같습니다. 아래 코드를 실행시켜 볼까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>console.log(1);
console.log(2);
console.log(3);
console.log(4);
console.log(5);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>결과는 아래와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>1
2
3
4
5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 결과가 너무 뻔한 결과인 것 같지요? 이제 함수라는 것을 도입해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function a() {
  console.log("a called!");
}
console.log(1);
console.log(2);
a();
console.log(3);
console.log(4);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>1
2
a called!
3
4</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>a called!</code> 가 <code>2</code>, <code>3</code> 사이에 등장했습니다. <code>console.log("a called!");</code> 라는 코드가 가장 위쪽에 있지만, 실제로 함수를 <strong>호출</strong>하는 때에는 <code>2</code> 를 출력한 직후입니다. 이로써 우리는 소스 코드상의 순서와 상관없이 코드의 실행 순서를 우리 마음대로 주무를 수 있게 되었습니다. 그렇습니다. <strong>함수는 정의한다고 실행되지 않습니다.</strong> <strong>함수가 호출되어야 그 함수의 내용이 실행됩니다.</strong> 이것만 잘 기억하고 있다면 함수의 순서가 상당히 꼬여있는 것 같아도 차근차근 따라가서 실제 순서를 파악할 수 있을 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>좀 더 복잡한 예시를 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-javascript"} -->
<pre class="wp-block-code language-javascript"><code>function b() {
  console.log("b called!");
}

function a(another) {
  console.log("a started!");
  another();
  console.log("a ended!");
}
console.log(1);
console.log(2);
a(b);
console.log(3);
console.log(4);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 실행 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>1
2
1
2
a started!
b called!
a ended!
3
4</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>자바스크립트에서는 <strong>함수를 변수처럼 이용할 수 있습니다</strong>. 즉 함수를 함수의 인자로 넘기는 것도 가능하죠! <code>a</code> 함수는 <code>another</code> 이라는 인자를 받아서 호출하고 있습니다. 일단 <code>another</code> 이 함수인지 아닌지 어떻게 판단하는 거지? 라고 생각하실 수 있는데, 이는 자바스크립트가 <a rel="noreferrer noopener" href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84#%EB%8F%99%EC%A0%81_%EC%A0%95%ED%98%95" target="_blank">동적 타입 언어</a>이기 때문입니다. 이 글과는 크게 관계가 없어서 자세한 설명은 <a rel="noreferrer noopener" href="https://www.google.com/search?q=%EB%8F%99%EC%A0%81+%ED%83%80%EC%9E%85+%EC%96%B8%EC%96%B4" target="_blank">패스</a>합니다. 일단 식별자 바로 뒤에 괄호<code>()</code> 가 등장하게 되면 이건 함수라 가정하고 일단 호출해보자! 하고 시도를 합니다. 만약 <code>another</code> 가 함수가 아니라면 호출을 시도할 때 에러가 나게 되겠지요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼 <code>a</code>의 내용 또한 <code>a</code>가 실제로 호출될 때 실행될 텐데, 그 때는 이전과 마찬가지로 <code>2</code> 와 <code>3</code> 사이 입니다. <code>a</code>를 호출할 때 인자로 우리는 <code>b</code> 를 전달했고, <code>b</code> 는 <code>another</code> 이 되어 <code>a started!</code> 와 <code>a ended!</code> 사이에서 호출됩니다. 이윽고 <code>console.log("b called!")</code> 도 호출이 됩니다 여기에서 유의해야 할 점은 <code>b</code>가 <code>a</code>의 인자로 전달될 시점에도 <code>b</code>는 호출(실행)되지 않는다는 점입니다. <code>b</code>가 동에 번쩍 서에 번쩍 한다 하더라도 실제로 호출되기 전까지는 실행되지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>a</code> 함수를 호출할 때 <code>b</code> 함수를 전달하는 것. 이를 우리는 <em>콜백 함수를 전달한다</em> 라고 종종 이야기합니다. callback.. 뒤로 돌리는 호출? 대충 나중에 호출된다는 뜻일까요? 아무튼 지금 당장에 호출되는 것이 아니라 <code>a</code> 함수 내에서 나중에 <code>b</code> 함수를 호출할 것이다! 라고 지레짐작할 수 있습니다. 대충 그런 느낌으로 알면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>자, 그렇다면 완전히 다른 예시로 시작하겠습니다. 우리는 이제 정보 전문가가 되었습니다. 암호화된 특수요원 정보를 해독하는 <code>decryptData</code> 함수를 만들어봅시다. 이 함수는 고도의 암호화된 데이터를 해독해야 하기 때문에 <strong>CPU 를 풀로 땡겨 써도 1초 정도 좀 시간이 걸린다</strong>는 건 감안합시다. 이 함수는 작업을 완료한 이후 <code>callback</code> 함수를 호출합니다. (혹여나 자바스크립트의 <code>``</code>로 둘러싸여진 문자열에 대해 처음 본다면 <a rel="noreferrer noopener" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals" target="_blank">공식 문서</a>를 참조해주세요.)</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>let i = 0;
function decryptData(callback, wait, age) {
  let start = new Date().getTime();
  while (new Date().getTime() &lt; start + wait); 
  callback(`${age}세 은행원`);
}

fetchData(console.log, 1000, 20);
fetchData(console.log, 1000, 37);
fetchData(console.log, 1000, 59);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>20세 은행원
37세 은행원
59세 은행원</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우리가 <code>console.log</code> 그 자체를 함수의 인수로 넘긴다는 점을 눈여겨봐주세요. <code>decryptData</code> 입장에서는 <code>console.log</code> 이 <code>callback</code> 으로 이름만 바꿔서 호출한다는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>차례차례 실행되는 건 이제 좀 익숙하지요? 1초를 기다릴 때 <code>Date</code> 객체를 활용해서 마치 엄청난 연산을 하는 것처럼 꾸며보았구요, <code>getTime</code> 관련된 함수는 <a rel="noreferrer noopener" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime" target="_blank">문서</a>를 참조해주세요. 위 예제에서는 CPU를 풀로 땡겨 쓰기 때문에 하나의 작업을 하면서 다른 작업을 할 틈이 없습니다! 즉<strong> </strong>어떤 짓을 해도 <strong>3명의 정보를 받아오는 데 3초가 걸린다는 건 자명한 사실</strong>이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만, 이제 시대는 바뀌었고 복잡한 해독 과정은 이제 내 컴퓨터가 아닌 미국 국방부 컴퓨터에서 수행하게 되었습니다. 즉 내 컴퓨터에서는 할 일이 없어졌습니다. 그냥 기다리는 것만 하면 됩니다. 또 좋은 점이 생겼습니다. 미국 컴퓨터는 내 컴퓨터랑 성능이 비슷해서 1초가 걸리기는 하지만, 여러 대이기 때문에 <strong>해독 작업을 동시에 수행할 수 있습니다</strong>! 즉 이론상으로 3명 분의 요청을 <strong>한 번에 보내고</strong>, 세 개의 요청이 동시에 수행되며, 1초가 지나면 모든 요원의 정보를 받아볼 수 있단 말입니다. 기존에 걸리던 3초에서 1초로 줄어드는 마법!!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만, 그것을 어떻게 코딩해볼 수 있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>비동기 - 동시에 여러 작업을 해볼 수 있어!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자바스크립트에서는 아무 일도 안하고 단순히 기다리기만 하는 함수가 있습니다. 바로 <code>setTimeout</code> 함수입니다. 이 함수의 첫번째 인자는<strong> 기다린 후에 실행시킬 함수, 그 다음은 기다릴 밀리초 입니다.</strong> 그 다음은 실행시킬 함수, 즉 콜백 함수에 넣을 인자를 추가적으로 써넣을 수 있습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 코드는 소요 시간을 조금 수정했습니다. 2000ms, 1500ms, 1000ms 이렇게요. 한번 어떻게 실행되는지 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function finishJob(num) {
  console.log(`${num}번 요원의 정보를 받아왔습니다.`);
}

setTimeout(finishJob, 2000, 1);
setTimeout(finishJob, 1500, 2);
setTimeout(finishJob, 1000, 3);
console.log("정보 요청을 모두 보냈습니다.");</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>정보 요청을 모두 보냈습니다.
3번 요원의 정보를 받아왔습니다.
2번 요원의 정보를 받아왔습니다.
1번 요원의 정보를 받아왔습니다.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우리는 여기서 기존에 쓰던 동기 방식과는 다르게 동작한다는 걸 알 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><code>setTimeout</code> 함수 자체의 실행은 즉시 실행되고 리턴됩니다</strong>. 위 프로그램을 실행하자마자 <code>정보 요청을 모두 보냈습니다.</code> 메시지가 출력되었음을 우리는 확인할 수 있습니다. <code>setTimeout</code> 함수가 즉시 종료되는 이유는 작업을 예약하는 일이 전부이기 때문입니다. 예약하는 것 자체는 단숨에 끝납니다. 그렇다면 작업을 도대체 어디에 저장해놓고 있을까요? 그것에 관한 자세한 설명은 <a href="https://medium.com/sjk5766/javascript-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%B5%EC%8B%AC-event-loop-%EC%A0%95%EB%A6%AC-422eb29231a8">이벤트 루프</a>를 설명하는 글에서 더 자세히 알아보실 수 있을 겁니다. 우리는 구체적인 작동 원리보다는 대략 어떻게 진행하겠구나를 먼저 감을 익히자구요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2600,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0368-1024x662.jpeg" alt="" class="wp-image-2600"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>우리는 <code>setTimeout</code> 의 동작이 비동기로 동작한다고 볼 수 있습니다. 왜냐하면 1000, 1500, 2000 ms 를 기다리기 시작할 때에는 기다리는 것 자체가 다른 흐름에 영향을 미치지 않고 독립적으로 동작하기 때문입니다. 위 그림처럼요. 이제 비동기와 동기의 차이를 어느 정도 아시겠나요?</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>동기의 (대략적인) 특징<ul><li>동시에 여러 작업을 수행할 수 없다.</li></ul><ul><li>흐름을 예측하기 쉽다. 먼저 수행되고 나중에 수행되는 것들이 명확하다.</li></ul></li><li> 비동기의 (대략적인) 특징<ul><li>동시에 여러 작업을 수행할 수 <strong>있다</strong>.</li><li>흐름을 예측하기 어렵다. (무엇이 먼저 완료될 지 보장할 수 없다.)</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>우리는 지금까지 <code>setTimeout</code> 이라는 함수를 통해 <strong>시간이 좀 걸리지만 기다리기만 하면 되는 작업</strong>을 흉내내 보았습니다. 앞서 우스갯소리로 이야기해본 것처럼 미국 국방부으로 데이터를 요청하는 일을 생각해봅시다. 인터넷을 통해 웹사이트에 요청을 보낸 다음 응답이 올 때까지 우리는 마냥 기다려야 합니다. 이런 작업들이 비동기로 하기가 좋은 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>다시 정리해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>setTimeout 은 인자로 들어온 콜백 함수를 예약하기만 하고 바로 끝난다.</li><li>setTimeout 에 의해 기다리는 동작은 본래의 코드 흐름과는 상관 없이 따로따로 독립적으로 돌아간다. (위 그림처럼 세 개 동시에 기다리는 모습이다.)</li><li>이렇게 따로따로 독립적으로 돌아가는 작업을 비동기 작업이라고 한다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그렇다면 어떤 작업들이 비동기로 진행될까요? 브라우저에서는 이른바 ajax라 불리웠던 <a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests" target="_blank">XMLHttpRequest 객체</a>를 활용하여 비동기적으로 요청을 보내고 받을 수 있을테고, 최근에는 (인터넷 익스플로러에서는 영원히 지원하지 않을) <a rel="noreferrer noopener" href="https://developer.mozilla.org/ko/docs/Web/API/Fetch_API" target="_blank">Fetch API</a> 를 사용하는 방법들이 늘고 있습니다. Node.js 에서는, 예를 들자면, <a rel="noreferrer noopener" href="https://nodejs.org/api/fs.html" target="_blank">파일을 다룰 때 쓰는 모든 함수</a>들이 비동기로 구성되어 있습니다. 파일을 읽으려먼 우리의 하드디스크나 SSD를 동작시켜야 하는데 이 때 CPU 입장에서는 SSD가 너무 느려터져서 속이 답답할 지경일 겁니다. 한 번에 여러 개의 파일을 읽을 수 있다면 좋겠지요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>비동기 작업의 사용성 문제</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>비동기 작업은 여러 작업을 동시에 수행할 수 있는 장점이 있지만, 의존성이 길게 이어져 있는 비동기 작업들을 처리할 때 곤혹에 치를 수 있습니다. 왜냐하면 비동기 작업이 시작되는 시점은 함수 호출이며, 또한 이 함수 호출 시점에 다음 작업(콜백 함수)도 넘겨줘야 하기 때문입니다. 이런 행태를 이른바 <a rel="noreferrer noopener" href="https://velog.io/@yujo/JS%EC%BD%9C%EB%B0%B1-%EC%A7%80%EC%98%A5%EA%B3%BC-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%A0%9C%EC%96%B4" target="_blank">콜백 지옥</a>이라고 합니다. 콜백 지옥에 관련해서는 크게 다루지 않도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>종종 콜백 지옥에 의해서 Promise 가 등장했다고 설명하시는 분들도 있는데, 제 견해는 좀 다릅니다. callback 방식보다 Promise 방식이 비동기 작업에 대해 훨씬 쉽고 직관적으로 코딩할 수 있다고 생각합니다. 뭐 사실 그게 그거일 수도 있네요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Promise</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><code>Promise</code> 는 비동기 작업의 단위</strong> 입니다. 지금까지 이야기했던 것들은 자바스크립트에서 동시에 여러 가지 작업을 할 수 있다는 개념을 비동기로 은근슬쩍 설명했고, 지금부터는 <strong><code>Promise</code> 를 통해 어떻게 비동기 작업들을 쉽게 관리할 수 있는지</strong>를 본격적으로 알아보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>기본 사용법</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 <code>Promise</code> 로 관리할 비동기 작업을 만들 때에는, <code>Promise</code> 에서 요구하는 방법대로 만들어야 합니다. 여러가지 방법이 있지만 제일 정석적인 방법은 <code>new Promise(...</code>) 하는 것입니다. 아래 예제 코드를 봐주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const promise1 = new Promise((resolve, reject) =&gt; {
  // 비동기 작업
});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>문법적으로 보충 설명해보겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>변수의 이름은 <code>promise1</code> 이며, <code>const</code> 로 선언했기 때문에 재할당이 되지 않습니다. 하나의 변수로 끝까지 해당 <code>Promise</code> 를 관리하는 것이 가독성도 좋고 유지보수도 하기 좋습니다.</li><li><code>new Promise(...)</code> 로 <code>Promise</code> 객체를 새롭게 만들었습니다. 생성자는 함수이므로 괄호<code>()</code> 를 써서 함수를 호출하는 것과 동일한 모습입니다.</li><li><strong>생성자는 특별한 함수 하나를 인자로 받습니다.</strong> (여기서 인자로 들어가는 함수의 형태는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions">화살표 함수</a>입니다.)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 <strong>특별한 함수</strong>를 공식 문서에서는 <strong><code>executor</code></strong> 라는 이름으로 부릅니다. 이 함수에 대해 더 자세히 설명하면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>executor</code>는 첫번째 인수로 <code>resolve</code> 이며, 두번째 인수로 <code>reject</code> 를 받습니다. (이름은 우리가 정의하는 거라서 아무렇게나 해도 사실 상관은 없지만, 국룰을 따르도록 합시다.)</li><li><code>resolve</code> 는 <code>executor</code> 내에서 호출할 수 있는 또 다른 함수입니다. <code>resolve</code> 를 호출하게 된다면 "<strong>이 비동기 작업이 성공했어!</strong>" 라는 뜻입니다.</li><li><code>reject</code> 또한 <code>executor</code> 내에서 호출할 수 있는 또 다른 함수입니다. <code>reject</code> 를 호출하게 된다면 "<strong>이 비동기 작업이 실패했어...</strong>" 라는 뜻입니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>으악! 생성자 내에 함수 내에 또 다른 함수를 호출한다니 이게 무슨 말입니까! 이게 콜백보다 훨씬 복잡하면 복잡했지 결코 간단해보이지는 않는데요? 아니에요.. 편하다구요... 진짜 믿어주세요. async-await 까지 가야 Promise의 진면모가 드러난답니다. 하여튼 우리는 <code>promise1</code> 이라는 <code>Promise</code> 객체를 얻게 되었습니다! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Promise 의 특징은 <code>new Promise(...)</code> 하는 순간 여기에 할당된 비동기 작업은 바로 시작됩니다. 비동기 작업의 특징은 작업이 언제 끝날지 모르기 때문에 일단 배를 떠나보낸다고 이야기했습니다. 그럼 그 이후에 이 작업이 성공하거나 실패하는 순간에 우리가 또 뒷처리를 해줘야겠죠? Promise 가 끝나고 난 다음의 동작을 우리가 설정해줄 수 있는데, 그것이 바로 <strong><code>then</code> 메소드</strong>와 <strong><code>catch</code> 메소드</strong>입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>then</code> 메소드는 해당 Promise 가 성공했을 때의 동작을 지정합니다. 인자로 함수를 받습니다.</li><li><code>catch</code> 메소드는 해당 Promise 가 실패했을 때의 동작을 지정합니다. 인자로 함수를 받습니다.</li><li>위 함수들은 체인 형태로 활용할 수 있습니다. (연속적으로 호출할 수 있습니다. 아래 예제에서 확인하도록 합니다.)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><code>executor</code> 로 새로운 <code>Promise</code> 를 만든 다음 <code>then</code> 과 <code>catch</code> 를 이용하여 후속 동작까지 지정해줘야 어느정도 제대로 돌아가는 <code>Promise</code>를 만나보실 수 있습니다. 그래서 우선 설명을 엄청 나열했구요, 이제 드디어 예시 코드를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const promise1 = new Promise((resolve, reject) =&gt; {
  resolve();
});
promise1
  .then(() =&gt; {
    console.log("then!");
  })
  .catch(() =&gt; {
    console.log("catch!");
  });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이것의 실행 결과는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>then!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>then</code> 에 함수를 넣어주었고, 연속적으로 <code>catch</code> 에도 함수를 넣어줬습니다. 이 Promise 에서는 바로 <code>resolve</code> 가 호출되었기 때문에 성공으로 간주하여 <code>then</code> 에 있는 동작만 실행됩니다. 이제 아래와 같은 코드를 쓴다면 어떻게 될까요? <code>resolve</code> 부분을 <code>reject</code> 로 수정했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const promise1 = new Promise((resolve, reject) =&gt; {
  reject();
});
promise1
  .then(() =&gt; {
    console.log("then!");
  })
  .catch(() =&gt; {
    console.log("catch!");
  });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이것의 실행 결과는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>catch!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>예상대로 <code>catch!</code> 만 출력됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 예제에서는 비동기 작업이라고 해도 뭔가 기다리는 작업은 하나도 하지 않았습니다. 기다리는 작업은 아까 얘기했듯이 인터넷으로부터 데이터를 가져오는 작업이라든지, 파일을 읽고 쓰는 작업을 의미합니다. 기다리는 작업이 하나도 없다면 비동기를 쓸 이유는 없습니다. 위 예제들은 어디까지나 Promise 의 동작 방식을 설명하기 위한 예제임을 반드시 기억해주세요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>재사용하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>new Promise(...)</code> 를 하는 순간 비동기 작업이 시작되는데, 비슷한 비동기 작업을 수행할 때마다 매번 <code>new Promise(...)</code> 를 해줘야 할까요? 그렇지 않습니다. 그럴 때는 그냥 <code>new Promise(...)</code> 한 것을 그대로 리턴하는 함수를 만들어 사용하면 됩니다. 아래 함수는 <code>age</code> 인자를 받아서 그 값에 따라 <code>resolve</code> 또는 <code>reject</code>를 호출합니다. </p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function startAsync(age) {
  return new Promise((resolve, reject) =&gt; {
    if (age &gt; 20) resolve();
    else reject();
  });
}

setTimeout(() =&gt; {
  const promise1 = startAsync(25);
  promise1
    .then(() =&gt; {
      console.log("1 then!");
    })
    .catch(() =&gt; {
      console.log("1 catch!");
    });
  const promise2 = startAsync(15);
  promise2
    .then(() =&gt; {
      console.log("2 then!");
    })
    .catch(() =&gt; {
      console.log("2 catch!");
    });
}, 1000);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이것의 실행 결과는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>1 then!
2 catch!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 <code>startAsync</code> 함수를 호출하는 순간 <code>new Promise(...)</code> 가 실행하게 되어 비동기 작업이 시작됩니다. 비동기 작업이 성공할지 실패할지는 장담할 수 없으므로 이전 예제와 동일하게 <code>then</code> 과 <code>catch</code> 로 후속 동작을 지정해 두었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>promise1</code> 은 성공하고, <code>promise2</code> 는 실패하도록 만들었는데요, 그래서 <code>promise1</code> 에서는 <code>catch</code> 으로 등록했던 함수는 실행되지 않고 <code>then</code> 으로 지정한 동작만 수행합니다. <code>promise2</code> 는 반대로 <code>then</code> 동작은 수행하지 않고 <code>catch</code> 동작만 수행합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>작업 결과를 전달하기</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>우리는 <code>resolve</code>, <code>reject</code> 함수에 인자를 전달함으로써 <code>then</code> 및 <code>catch</code> 함수에서 비동기 작업으로부터 정보를 얻을 수 있습니다.</strong> 바로 아래 예제를 보시죠.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function startAsync(age) {
  return new Promise((resolve, reject) =&gt; {
    if (age &gt; 20) resolve(`${age} success<span style="font-size: inherit; background-color: inherit;">`);</span>    
    else reject(new Error(`${age} is not over 20`));
  });
}

setTimeout(() =&gt; {
  const promise1 = startAsync(25);
  promise1
    .then((value) =&gt; {
      console.log(value);
    })
    .catch((error) =&gt; {
      console.error(error);
    });
  const promise2 = startAsync(15);
  promise2
    .then((value) =&gt; {
      console.log(value);
    })
    .catch((error) =&gt; {
      console.error(error);
    });
}, 1000);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이것의 실행 결과는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>25 success
Error: 15 is not over 20
    at /home/taehoon/Desktop/playground-nodejs/index.js:4:17
    at new Promise (&lt;anonymous&gt;)
    at startAsync (/home/taehoon/Desktop/playground-nodejs/index.js:2:10)
    at Timeout._onTimeout (/home/taehoon/Desktop/playground-nodejs/index.js:17:20)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>기타 고려사항</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이외 <code>executor</code> 를 만들때 조금 고려해야 할 부분은 다음과 같습니다. 이는 좀 더 자세한 내용이므로 빨리 async - await 의 매력을 느끼고 싶다면 넘어가도 좋습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>executor</code> 내부에서 에러가 <code>throw</code> 된다면 해당 에러로 <code>reject</code> 가 수행됩니다.</li><li><code>executor</code> 의 리턴 값은 무시됩니다.</li><li>첫 번째 <code>reject</code> 혹은 <code>resolve</code> 만 유효합니다. (두 번째부터는 무시됩니다. 이미 해당 함수가 호출되었다면 <code>throw</code> 또한 무시됩니다.)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>아래 간단한 예시들로 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>// catch 로 연결됩니다.
const throwError = new Promise((resolve, reject) =&gt; {
  throw Error("error");
});
throwError
  .then(() =&gt; console.log("throwError success"))
  .catch(() =&gt; console.log("throwError catched"));

// 아무런 영향이 없습니다.
const ret = new Promise((resolve, reject) =&gt; {
  return "returned";
});
ret
  .then(() =&gt; console.log("ret success"))
  .catch(() =&gt; console.log("ret catched"));

// resolve 만 됩니다.
const several1 = new Promise((resolve, reject) =&gt; {
  resolve();
  reject();
});
several1
  .then(() =&gt; console.log("several1 success"))
  .catch(() =&gt; console.log("several1 catched"));

// reject 만 됩니다.
const several2 = new Promise((resolve, reject) =&gt; {
  reject();
  resolve();
});
several2
  .then(() =&gt; console.log("several2 success"))
  .catch(() =&gt; console.log("several2 catched"));

// resolve 만 됩니다.
const several3 = new Promise((resolve, reject) =&gt; {
  resolve();
  throw new Error("error");
});
several3
  .then(() =&gt; console.log("several3 success"))
  .catch(() =&gt; console.log("several3 catched"));</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>several1 success
several3 success
throwError catched
several2 catched</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>어차피 첫 번째 <code>resolve</code>, <code>reject</code> 만 영향을 주기 때문에, 한 번 해당 함수가 호출되면 바로 <code>return</code> 을 하여 비동기 작업을 빠져나가는 것이 여러모로 정신 건강에 도움이 됩니다. 아래는 이전에 작성했던 <code>startAsync</code> 함수를 살짝 손을 본 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function startAsync(age) {
  return new Promise((resolve, reject) =&gt; {
    if (age &gt; 20) {
      // 뭔가를 합니다.
      return resolve(`${age} success`);
    }
    // 또 뭔가를 합니다.
    return reject(new Error(`${age} is not over 20`));
    // 여기 있는 코드는 "명확하게" 실행되지 않습니다.
  });
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>간단한 동작 원리와 의의</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금까지의 설명을 (이해하기 쉬운 형태로 왜곡하여) 그림으로 표현하자면 아래와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2601,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/07/IMG_0369-1024x528.jpeg" alt="" class="wp-image-2601"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>왼쪽은 단순한 비동기 작업을 나타내었고 오른쪽은 <code>Promise</code> 가 어떤 구조를 가지고 있는지를 나타내었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Promise</code>는 세 가지 상태를 지닙니다. 바로 대기(pending), 이행(fulfilled), 거부(rejected) 이며 이행 상태일 때 <code>then</code>, 거부 상태일 때 <code>catch</code> 로 등록한 동작들이 실행됩니다. 지금까지 "<em>성공</em>" 이라고 이야기한 것들은 사실 "<em>이행 상태</em>"와 연계된 것이고, "<em>실패</em>"는 "<em>거부</em>"와 동일한 상태인 것입니다. 이러한 상태들이 실제로 어떤지 우리가 직접 확인할 수 있을까요? 아쉽게도 그런 방법은 없습니다. 자바스크립트를 실행하는 브라우저 혹은 Node.js 에서 알아서 관리하는 녀석들이라 베일에 싸여 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Promise 의 의의를 한마디로 이야기해보죠. <code>Promise</code> 는 <strong>비동기 작업을 생성/시작하는 부분(<code>new Promise(...)</code>)과 작업 이후의 동작 지정 부분(<code>then</code>, <code>catch</code>)을 분리함으로써 기존의 러프한 비동기 작업보다 유연한 설계를 가능토록 합니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>요약</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>지금까지 열심히 달려왔습니다. Promise 를 만드는 순간 비동기 작업이 시작되며, 비동기 작업을 성공으로 간주하고 싶을 때 <code>resolve</code>를 호출하고, 실패라 간주하고 싶다면 <code>reject</code> 함수를 호출합니다. 이 비동기 작업이 성공했을 때 후속 조치를 지정하고 싶다면 <code>then</code>으로, 실패 시의 후속 조치는 <code>catch</code> 로 지정하는 것까지 함께 살펴보았습니다. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>async</code>: 비동기 작업을 만드는 손쉬운 방법</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>async</code> 키워드는 <strong>함수를 선언할 때</strong> 붙여줄 수 있습니다. <code>async</code> 키워드가 붙은 함수를 <strong>async 함수</strong>로, <code>async</code> 가 없는 함수는 일반 함수라고 부르도록 하겠습니다. 의미를 생각해본다면 async 함수는 비동기 작업 그 자체를 뜻한다는 말일 것 같은데, 실제로 우리가 어떻게 사용해볼 수 있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>async 함수는 <code>Promise</code> 와 굉장히 밀접한 연관을 가지고 있는데, 기존에 작성하던 <code>executor</code> 로부터 몇 가지 규칙만 적용한다면 <code>new Promise(…)</code> 를 리턴하는 함수를 <code>async</code> 함수로 손쉽게 변환할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>함수에 <code>async</code> 키위드를 붙입니다.</li><li><code>new Promise...</code> 부분을 없애고 <code>executor</code> 본문 내용만 남깁니다.</li><li><code>resolve(value);</code>  부분을 <code>return value;</code> 로 변경합니다.</li><li><code>reject(new Error(…));</code> 부분을 <code>throw new Error(…);</code> 로 수정합니다.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>자 그럼 기다릴 것 없이 바로 직전에 작성했던 <code>startAsync</code> 함수를 async 함수로 바꾸어봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>// 기존
// function startAsync(age) {
//  return new Promise((resolve, reject) =&gt; {
//    if (age &gt; 20) resolve(`${age} success`);    
//   else reject(new Error("Something went wrong"));
//  });
// }

async function startAsync(age) {
  if (age &gt; 20) return `${age} success`;
  else throw new Error(`${age} is not over 20`);
}

setTimeout(() =&gt; {
  const promise1 = startAsync(25);
  promise1
    .then((value) =&gt; {
      console.log(value);
    })
    .catch((error) =&gt; {
      console.error(error);
    });
  const promise2 = startAsync(15);
  promise2
    .then((value) =&gt; {
      console.log(value);
    })
    .catch((error) =&gt; {
      console.error(error);
    });
}, 1000);</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>25 success
Error: 15 is not over 20
    at startAsync (/home/taehoon/Desktop/playground-nodejs/index.js:11:14)
    at Timeout._onTimeout (/home/taehoon/Desktop/playground-nodejs/index.js:23:20)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>놀랍게도 완전히 똑같이 동작합니다. 세부적으로야 동작이 미묘하게 다를 수는 있겠지만 실제로 사용하는 입장에서 차이점을 느낄 수 없어요! 그래서 우리는 다음 진리를 얻게 되었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong><code>async</code> 함수의 리턴 값은 무조건 <code>Promise</code> 입니다</strong> !</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 단순한 문장에 의해서 우리는 async 함수를 일반 함수처럼 사용할 수 없다는 걸 절실히 깨닫게 되었습니다. (혹은 앞으로 무수히 깨닫게 될 것입니다....) 분명히 위 함수에서는 우리가 문자열을 리턴했는데, <code>promise1</code>과 <code>promise2</code> 는 문자열이 아닙니다! 이게 무슨 일입니까!! 네... 우리는 무조건 async 함수를 실행시킨 뒤 <code>then</code> 과 <code>catch</code> 를 활용하여 흐름을 제어해야 합니다. 정말 익숙하지 않습니다. 비동기 작업을 하려면 지금까지 써왔던 코딩의 느낌을 모두 바꿔야 할까요? 아니오, 그렇지 않습니다. async 함수 안에서는 <code>await</code> 를 쓸 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또 한가지 사소하게 다른 점은, 에러 메시지가 조금 줄어들었습니다. 기존에는 6줄이었는데, 지금은 4줄이 되었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>await</code>: Promise 가 끝날 때까지 기다리거라.</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>await</code> 는 왠지 wait 이 있으니까 기다리라는 뜻 같습니다. 맞습니다. <code>await</code> 는 Promise 가 fulfilled 가 되든지 rejected 가 되든지 아무튼 간에 끝날 때까지 기다리는 함수입니다. 쓰임새는 그렇구요, <code>await</code> 은 또 쓸 수 있는 제약 조건이 있습니다. 바로 <strong>async 함수에서만 사용할 수 있습니다.</strong> 왜 <code>await</code> 은 async 함수 내에서만 쓸 수 있는가는 조금 뒤에 알아보고, 일단은 어떻게 사용할 수 있는지 코드를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function setTimeoutPromise(ms) {
  return new Promise((resolve, reject) =&gt; {
    setTimeout(() =&gt; resolve(), ms);
  });
}

async function startAsync(age) {
  if (age &gt; 20) return `${age} success`;
  else throw new Error(`${age} is not over 20`);
}

async function startAsyncJobs() {
  await setTimeoutPromise(1000);
  const promise1 = startAsync(25);
  try {
    const value = await promise1;
    console.log(value);
  } catch (e) {
    console.error(e);
  }
  const promise2 = startAsync(15);
  try {
    const value = await promise2;
    console.log(value);
  } catch (e) {
    console.error(e);
  }
}

startAsyncJobs();</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>결과는 아래와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>25 success
Error: 15 is not over 20
    at startAsync (/home/taehoon/Desktop/playground-nodejs/index.js:17:14)
    at startAsyncJobs (/home/taehoon/Desktop/playground-nodejs/index.js:29:20)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>본격적으로 <code>await</code> 가 어떤 일을 하는지 알아보기 전에 자잘한 변경사항부터 짚고 넘어갑시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>setTimeout</code> 을 Promise 버전으로 하여 <code>setTimeoutPromise</code> 함수를 새로 만들었습니다. 이 함수는 <code>setTimeout</code> 함수를 활용하여 지정된 ms 만큼 기다린 후 <code>resolve</code> 를 호출합니다. 이렇게 만든 Promise 의 <code>then</code> 으로 다음 동작을 정의할 수 있습니다. <code>then</code> 동작은 <code>resolve</code> 함수가 호출되면 실행된다고 했었지요? 자연스럽게 ms 만큼 기다린 후 다음 동작으로 넘어갑니다.</li><li><code>startAsyncJobs</code> 함수를 새로 만들었습니다. 이 함수 내에서 <code>await</code> 을 사용하기 위해 async 함수로 정의내린 후, 코드의 마지막 부분에서 호출함으로써 비동기 작업을 시작했습니다. 기존의 <code>then</code> 과 <code>catch</code> 하던 작업들은 모두 이 함수 내에 있습니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이젠 <code>await</code> 의 특성을 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>문법적으로 <code>await [[Promise 객체]]</code> 이렇게 사용합니다.</li><li><strong><code>await</code> 은 Promise 가 완료될 때까지 기다립니다.</strong> 그러므로 <code>setTimeoutPromise</code> 의 <code>executor</code> 에서 <code>resolve</code> 함수가 호출될 때까지 기다립니다. 그 시간동안 <code>startAsyncJobs</code> 의 진행은 멈춰있습니다.</li><li><strong><code>await</code> 은 Promise 가 <code>resolve</code> 한 값을 내놓습니다.</strong> async 함수 내부에서는 리턴하는 값을 <code>resolve</code> 한 값으로 간주하므로, <code>`${age} success`</code> 가 <code>value</code>로 들어온다는 점을 알 수 있습니다.</li><li><strong>해당 <code>Promise</code> 에서 <code>reject</code> 가 발생한다면 예외가 발생합니다.</strong> 이 예외 처리를 하기 위해 <code>try-catch</code> 구문을 사용했습니다. <code>reject</code> 로 넘긴 에러(async 함수 내에서는 <code>throw</code> 한 에러)는 <code>catch</code> 절로 넘어갑니다. 이로써 본래 해왔던 에러 처리 하듯이 진행할 수 있습니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><code>await</code> 은 <code>then</code> 과 <code>catch</code> 의 동작을 모두 자기 나름대로 처리합니다. 그래서 async 함수 내에서 <code>then</code>, <code>catch</code> 메소드의 존재를 잊게 할 수 있습니다. 즉 콜백 함수를 넘기고 흐름을 제어하던 때가 엊그제 같은데... 라며 과거 회상을 할 수 있다는 뜻입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>왜 <code>await</code> 은 async 함수에서만 쓸 수 있을까요?</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":2646,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/09/IMG_0377-1024x750.jpg" alt="" class="wp-image-2646"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><strong>비동기로 시작한 작업의 특징은, 그로부터 파생된 모든 작업 또한 비동기 작업으로 간주할 수 있습니다</strong>. 어느 항구 마을에서 커다란 고기잡이 배를 바다로 떠나보낸다고 가정합시다. 커다란 고기잡이 배는 비동기 작업의 시작입니다. 동이 틀 무렵 고기잡이 배는 떠났고, 그 고기잡이 배는 나름 열심히 일할 겁니다. 고기잡이 배에서 다른 소형 배를 다시 내보내든 그물을 준비하는 작업을 하든 큰 배를 떠나보낸 항구 입장에서는 신경쓸 일이 없습니다. 배 안에서 일어나는 게 비동기 작업이든 동기 작업이든, 항구 입장에서는 모두 비동기 작업입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>동기 환경에서 비동기 작업을 마냥 기다리는 게 의미가 없는 이유는, 그럴 바에야 그냥 동기 코드를 사용하면 되기 때문입니다! 항구는 배를 떠나보낸 뒤 어제 잡아왔던 물고기를 포장하거나 새로운 거래처를 뚫는 등 다른 작업들을 수행할 수 있습니다. 그냥 아무것도 안하고 떠나보낸 고기잡이 배를 기다리는 건 비동기 작업의 의의를 없애는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>반면 비동기 환경에서 비동기 작업의 결과를 기다리겠다는 것은 다소 의미가 있습니다. 예를 들어 비밀 요원의 정보를 받아오는 비동기 작업인 fetchData 함수가 있는데, 이 함수의 결과로 나오는 생일을 알아야 생일 파티를 제때에 해줄 수 있는 것처럼, <strong>마냥 기다리는 게 정답</strong>일 때도 있습니다. 생일을 알기 전까지는 생일 파티 준비를 해서는 안 됩니다. 그 때 <code>await</code> 을 사용하는 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼 비동기는 동작 특성상 실제 작업과 그 작업의 후속조치를 따로 분리시킬 수 밖에 없는데, (그래서 <code>then</code>, <code>catch</code> 등을 썼는데) <code>async</code> 와 <code>await</code>을 쓰면 하나의 흐름 속에서 코딩할 수 있게 해줍니다! 실제 작업이 끝난 다음 그 후속조치를 수행한다. 가 아니라, 실제 작업이 끝나는 걸 <strong>기다린 다음</strong> 다음 코드를 수행한다의 느낌으로, 코딩할 수 있는 것이죠. 기다리는 게 뭐죠? 동기 코드를 쓸 때 마냥 기다렸죠? 그걸 할 수 있다는 것입니다. <code>async</code>와 <code>await</code>은 우리가 예전에 동기 코드를 작성했던 익숙한 경험 속에서 비동기 작업들을 코딩할 수 있게 해줍니다. 당장 <code>then</code>과 <code>catch</code>를 사용한 코드와 <code>async</code>, <code>await</code> 까지 활용한 코드를 비교해보면 체감이 확 될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p><strong>어쨌든 await 을 쓰고 싶단 말이에요!</strong></p><p>Promise 를 반환하는 (혹은 async) 함수를 사용하면서 <code>await</code> 까지 쓰고 싶은데, <code>await</code> 을 쓸 수 없는 상황이라면 어떻게 하면 되냐구요? 그렇다면 내가 그 함수를 어떤 흐름 속에서 사용하려고 하는지를 파악한 후 적절한 전략을 취하면 됩니다. 이 전략은 상황마다 너무 다르기 때문에, 그냥 여러가지로 검색을 해보라는 답 밖에 드릴 수 없을 것 같습니다. 예를 들면 Express 에서 요청 핸들러는 무조건 일반 함수로 만들어야 하되 "성공"을 알리는 방법, 그리고 "실패"를 알리는 방법 또한 정해져 있는데, 이를 이용해 <a rel="noreferrer noopener" href="https://changjoopark.medium.com/7e8ffe0fcc84" target="_blank">async 함수를 집어넣어볼 수</a>도 있습니다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2><code>Promise.all</code>: 여러 비동기 동작을 한꺼번에 기다리기 (feat. <code>allSettled</code>)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래와 같이 직원의 <code>id</code> 를 입력하면 그 직원의 나이를 반환해주는 <code>fetchAge</code> 함수가 있다고 가정합시다. (내부적으로는 1초 기다린 뒤 랜덤 나이를 반환하는 식입니다.) 그 다음 <code>id</code> 0번 부터 9번까지의 직원의 나이에 대한 평균치를 구하고 싶습니다. 그렇다면 모든 결과를 한 데 모아서 평균치를 구하면 되겠지요! 여기서의 비동기 동작의 의존 관계는 지금과는 사뭇 다른 느낌입니다. 0번부터 9번까지 직원의 정보를 요청하는 것은 비동기로 작업하면 되지만, 모든 비동기 작업이 완료되고 나서 다음 작업을 해야 합니다! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일단 코딩해봅시다. 다음 예제를 보자구요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>function setTimeoutPromise(ms) {
  return new Promise((resolve, reject) =&gt; {
    setTimeout(() =&gt; resolve(), ms);
  });
}

async function fetchAge(id) {
  await setTimeoutPromise(1000);
  console.log(`${id} 사원 데이터 받아오기 완료!`);
  return parseInt(Math.random() * 20, 10) + 25;
}

async function startAsyncJobs() {
  let ages = &#91;];
  for (let i = 0; i &lt; 10; i++) {
    let age = await fetchAge(i);
    ages.push(age);
  }

  console.log(
    `평균 나이는? ==&gt; ${
      ages.reduce((prev, current) =&gt; prev + current, 0) / ages.length
    }`
  );
}

startAsyncJobs();
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>다음은 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>0 사원 데이터 받아오기 완료!
1 사원 데이터 받아오기 완료!
2 사원 데이터 받아오기 완료!
3 사원 데이터 받아오기 완료!
4 사원 데이터 받아오기 완료!
5 사원 데이터 받아오기 완료!
6 사원 데이터 받아오기 완료!
7 사원 데이터 받아오기 완료!
8 사원 데이터 받아오기 완료!
9 사원 데이터 받아오기 완료!
평균 나이는? ==&gt; 33</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>뭔가 끔찍한 점을 눈치채셨나요? 사원의 정보를 받아오는 작업은 비동기이므로 동시에 수행할 수 있습니다. 그게 1초가 걸린다면, 사원 수가 많아져도 1초 안팎으로 이루어져야 합니다. 그런데 위 코드로는 1초에 작업 하나씩 수행하고 있습니다! 이는 동기 코드를 짤 때와 다를 바가 없습니다! 위는 모든 코드가 수행되는 데 무려 10초나 걸립니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>for</code> 안에 <code>await</code> 가 들어가있다는 걸 눈여겨봐주세요. 이것 때문에 재앙이 시작되었습니다. 이 코드는 1번 사원의 정보를 받아오려고 시도조차 하기 전에 0번 사원의 정보를 기다리고 있습니다. 전혀 그럴 필요가 없을 텐데요. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>묻고 따지지 말고 다음 코드로 바꿔봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>// 다른 코드는 똑같습니다.

async function startAsyncJobs() {
  let promises = &#91;];
  for (let i = 0; i &lt; 10; i++) {
    promises.push(fetchAge(i));
  }
  
  let ages = await Promise.all(promises);

  console.log(
    `평균 나이는? ==&gt; ${
      ages.reduce((prev, current) =&gt; prev + current, 0) / ages.length
    }`
  );
}

startAsyncJobs();</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>0 사원 데이터 받아오기 완료!
1 사원 데이터 받아오기 완료!
2 사원 데이터 받아오기 완료!
3 사원 데이터 받아오기 완료!
4 사원 데이터 받아오기 완료!
5 사원 데이터 받아오기 완료!
6 사원 데이터 받아오기 완료!
7 사원 데이터 받아오기 완료!
8 사원 데이터 받아오기 완료!
9 사원 데이터 받아오기 완료!
평균 나이는? ==&gt; 33.1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>와우. 1초만에 해결되었습니다. 우선 코드를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>for</code> 문 안에서는 더이상 <code>await</code> 하지 않습니다. 그 대신, Promise 를 차곡차곡 하나의 배열에 쌓아놓습니다. async 함수를 호출하기만 하면 어쨌거나 비동기 작업의 배를 떠나보낸다는 뜻이니까 순식간에 10개의 작업이 시작됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Promise.all</code> 이라는 것이 새로 등장했습니다. 이 함수는 인자로 <strong>Promise 의 배열</strong>을 받으며, 하나의 특별한 Promise 를 새로 생성합니다. 이 Promise는 배열로 받은 모든 비동기 작업이 성공했다면 내부적으로 <code>resolve</code> 를 호출하며, 하나라도 비동기 작업이 실패한다면 <code>reject</code> 를 호출합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>예제: 기존의 콜백함수 기반 작업을 Promise 기반으로 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>추가 예정</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>재미있는 사실들</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>then</code>, <code>catch</code> 메소드들은 사실은 새로운 <code>Promise</code> 객체를 만든다 </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>리턴값이 Promise 라는 점은 우리가 메소드 체이닝을 할 수 있을 때부터 눈치챘을 수도 있습니다. 새롭게 만들어진 Promise 는 <a rel="noreferrer noopener" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#%EB%B0%98%ED%99%98%EA%B0%92" target="_blank">정해진 규칙</a>이 있습니다. 하지만 우리는 그냥 순차적으로 뭔가 잘 되겠지 하며 사용하면 대개 큰 문제는 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>finally</code> 로 이행/거부 상관 없는 동작을 지정해줄 수 있다.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Promise 는 <code>finally</code> 라는 메소드도 있습니다. 이 함수는 Promise 가 fulfilled, rejected 에 상관없이 가장 마지막으로 실행됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>then</code> 의 두 번째 인자로 onRejected 를 받을 수 있다.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>then</code> 만 쓰더라도 reject 된 Promise 에 대한 처리를 할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const throwError = new Promise((resolve, reject) =&gt; {
  throw new Error("error");
});
throwError.then(
  () =&gt; console.log("throwError success"),
  () =&gt; console.log("throwError catched")
);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>throwError catched</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하지만 <code>then</code> 함수에서 에러가 발생한다면, 그 때는 그 에러를 책임져줄 코드가 없게 됩니다. 그래서 그냥 <code>catch</code> 를 마지막 즈음에 쓰는 게 가장 마음이 편합니다. 아래는 예시 코드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const throwError = new Promise((resolve, reject) =&gt; {
  resolve("success");
});
throwError.then(
  () =&gt; { throw new Error("wierd error") },
  () =&gt; console.log("throwError catched")
)
  .catch((e) =&gt; console.log("final catch"));</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>final catch</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>기다리는 작업이어야 비동기가 비동기처럼 보인다</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>앞서 계속 강조했던 부분은, <strong>기다리기만 하면 되는 작업을 비동기로 하면 좋다</strong> 입니다. 자바스크립트는 코드를 동시에 수행하지 않습니다. 기다리는 건 동시에 기다릴 수 있어도 코드 수행은 한 번에 하나만 할 수 있습니다. 그래서 만약 돌아가는 코드 자체가 빡세다면, 그러니까 우리가 처음에 암호화된 문서를 해독하기 위해 CPU 를 풀로 땡겨 썼다면 비동기 코드는 결코 비동기로 보이지 않고 뚝뚝 끊기게 됩니다. 아래 예제 코드를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>async function encryptData(age) {
  let start = new Date().getTime();
  while (new Date().getTime() &lt; start + 1000);
  return `${age}세 은행원`;
}
console.log("start");
encryptData(20).then((value) =&gt; console.log(value));
encryptData(37).then((value) =&gt; console.log(value));
encryptData(59).then((value) =&gt; console.log(value));
console.log("end");</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>start
end
20세 은행원
37세 은행원
59세 은행원</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><span style="text-decoration: underline;"><code>start</code> 가 출력된 다음 3초 후 <code>end</code> 부터 <code>59세 은행원</code> 이 일괄적으로 출력</span>됩니다. 이를 어떻게 설명할 수 있을까요? <code>encryptData</code> 는 단순히 기다리는 일을 하지 않습니다. 쉴 틈 없이 연산을 아주 빡세게 수행합니다. 그래서 기다리는 연산(?)을 할 때 다른 연산이 할 틈이 없어 결국 차례로 하나씩 동기적으로 실행되는 것처럼 보입니다. <code>then</code>으로 등록된 동작을 포함하여 많은 코드들이 동시에 수행되는 것처럼 보이는 건, <a rel="noreferrer noopener" href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank">브라우저 혹은 Node.js 에서 내부적으로 여러 작업 큐를 활용</a>하기 때문입니다. 너무 고급 내용이므로 여기서는 자세히 다루지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>결론</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Promise 는 쓰기가 좋습니다. <code>async</code> 와 <code>await</code> 도 훌륭합니다. 해피코딩합시다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2597</wp:post_id>
		<wp:post_date><![CDATA[2021-07-30 17:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-30 08:02:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-11-02 14:00:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-11-02 05:00:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-%eb%b9%84%eb%8f%99%ea%b8%b0-promise-async-await-%ec%9d%b4%ed%95%b4%ed%95%98%ea%b8%b0-%ec%9e%91%ec%84%b1%ec%a4%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8441</wp:comment_id>
			<wp:comment_author><![CDATA[박승찬]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[seungchan141414@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.237.107.65]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-16 11:36:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-16 02:36:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[정말 어렵네요 감사합니다 제가 아직 1/10 정도 이해한것 같습니다 ㅜㅜ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642848584.223186;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642300614.80441;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8442</wp:comment_id>
			<wp:comment_author><![CDATA[박승찬박승찬]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[seungchan141414@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.237.107.65]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-16 11:37:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-16 02:37:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[정말 어렵네요 감사합니다 제가 아직 1/10 정도 이해한것 같습니다 ㅠㅠ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642300648.490651;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498403.098086;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9143</wp:comment_id>
			<wp:comment_author><![CDATA[지나가다]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[anna.kde@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.62.175.152]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-03-25 16:21:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-03-25 07:21:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[제가 어지간하면 댓글 잘 안다는데 지금 반정도 읽다가 내려와서 씁니다. 설명을 정말 알기쉽게 잘하시네요. 이정도 분량을 이렇게 깔끔하게 쓰기 쉽지 않을텐데 글쓰기 능력이 좋으신가 봅니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648192882.682998;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498396.948993;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8516</wp:comment_id>
			<wp:comment_author><![CDATA[동동구리]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kangactor123@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[220.86.162.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-23 13:13:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-23 04:13:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[아니 선생님 .. 머리속에 뒤죽박죽이던 promise가 정확하게 정리되었습니다.. 정말 너무 좋은 글 감사합니다.. 당신은 레전드 ..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642911197.812592;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642919810.438306;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>7870</wp:comment_id>
			<wp:comment_author><![CDATA[ㅁ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sdasdf@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[45.112.118.101]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-11-14 09:14:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-11-14 00:14:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[고기잡이배 에서 이해되네요
감사합니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637588753.557112;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636848879.84064;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8471</wp:comment_id>
			<wp:comment_author><![CDATA[ㅁㅁ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[xyz@abc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.94.41.89]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-18 19:14:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-18 10:14:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[지금까지 제가 본 Promise 관련 글중 제일 잘 이해되는 글입니다. 좋은 글 감사합니다. :-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642500850.013094;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642848584.219205;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10580</wp:comment_id>
			<wp:comment_author><![CDATA[허지현]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jihyun.heo1226@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.117.131.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-06-24 23:40:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-06-24 14:40:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요! Promise로 고통받던 중 주변에서 추천받아 정독하고 있습니다 :) 

다름이 아니라 암호화된 특수요원 정보를 해독하는 decryptData 함수 예제에서 fetchData(console.log, 1000, 20); 로 기재되어있는 오류를 발견했습니다. 

양질의 글 감사합니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1656081635.505485;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489189.983523;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8344</wp:comment_id>
			<wp:comment_author><![CDATA[초보임니다]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[little_comet@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.237.180.31]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-06 16:19:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-06 07:19:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[행님 너무 좋은 글 감사합니다! 예시 코드들이 이해가 너무 잘되서 정말 많은 도움이 되었어요.. 좋은 글 올려주셔서 감사하고 새해 복 많이 받으십셔!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641453553.411549;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642848584.224453;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9204</wp:comment_id>
			<wp:comment_author><![CDATA[최정우]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[choi-ju12g@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.217.211.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-04-01 14:15:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-04-01 05:15:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[function b() {
  console.log("b called!");
}

function a(another) {
  console.log("a started!");
  another();
  console.log("a ended!");
}
console.log(1);
console.log(2);
a(b);
console.log(3);
console.log(4);

의 결과값에서 1, 2 가 한번 더 출력되고 있는 것으로 보입니다. 
제가 잘못 이해한 것인지 궁금합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648790155.901918;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498405.979385;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9045</wp:comment_id>
			<wp:comment_author><![CDATA[ms]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ms@smmsmsms.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[125.131.104.40]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-03-17 11:38:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-03-17 02:38:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[훌륭한 글 잘 읽었습니다.
중간중간 코드에 잘못 적힌 부분이 있습니다.

위에서부터 6번째 코드블록 =&gt; 콘솔 결과값이 다릅니다.
7번째 =&gt; 함수명이 잘못 작성되었습니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1647484713.721022;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498399.453356;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9036</wp:comment_id>
			<wp:comment_author><![CDATA[최전무]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[a@a.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.34.79.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-03-16 13:35:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-03-16 04:35:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[예제 중에 오타가 있어 댓글남깁니다.

아래의 결과값 표기한 내용 중에.. 맨위 1,2 가 추가로 들어간 것 같습니다.

1
2
1
2
a started!
b called!
a ended!
3
4]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1647405310.833656;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498404.286582;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9037</wp:comment_id>
			<wp:comment_author><![CDATA[최전무]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[a@a.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.34.79.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-03-16 13:41:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-03-16 04:41:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[아래 코드에도 함수명이 잘못되었습니다.
decryptData -&gt; fetchData

let i = 0;
function decryptData(callback, wait, age) {
  let start = new Date().getTime();
  while (new Date().getTime() &lt; start + wait); 
  callback(`${age}세 은행원`);
}

fetchData(console.log, 1000, 20);
fetchData(console.log, 1000, 37);
fetchData(console.log, 1000, 59);]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1647405685.718319;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663498401.05909;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10332</wp:comment_id>
			<wp:comment_author><![CDATA[gongyoon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qkszn93@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://velog.io/@gongyoon93</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[112.150.197.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-06-09 17:54:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-06-09 08:54:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[공부하는데 도움이 많이 되었어요. 감사합니다~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1654764898.975978;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489193.136108;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>9764</wp:comment_id>
			<wp:comment_author><![CDATA[박찬형]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ark9659@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.167.34.196]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-05-12 16:51:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-05-12 07:51:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[정말 도움이 많이 되었습니다. 감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1652341884.04924;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489195.127153;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11152</wp:comment_id>
			<wp:comment_author><![CDATA[수리수리]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[audgns9207@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[211.48.27.133]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-08-16 16:13:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-08-16 07:13:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[개발자가 맘 먹고 제일 친절히 말했을 때 벌어지는 일..]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1660633994.234624;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489175.204061;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10655</wp:comment_id>
			<wp:comment_author><![CDATA[풍아아아]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bkw9603@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://pungwa.tistory.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[125.190.83.120]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-06-30 13:44:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-06-30 04:44:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[진짜 레전드... 드디어 동기 비동기를 이해했습니다 감사합니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1656564296.949701;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489188.232093;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11345</wp:comment_id>
			<wp:comment_author><![CDATA[컴공돌]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qkralswgud1324@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.227.27.12]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-09-02 17:11:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-09-02 08:11:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[설명이 너무 이해하기 좋게 작성 된 것 같아요!!!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489171.39369;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1662106272.873707;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10834</wp:comment_id>
			<wp:comment_author><![CDATA[오늘도 낚시왕]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[santisfy@google.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.134.5.205]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-07-19 15:19:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-07-19 06:19:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[지렸읍니다 선생님]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1658211580.974478;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489187.488892;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11234</wp:comment_id>
			<wp:comment_author><![CDATA[봄봄]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bs9934@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.140.82.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-08-22 16:01:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-08-22 07:01:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[읽다보니 너무 이해가 잘되서 이 많은 글을 다 읽었네요. 이해가 너무 잘되는 글이였습니다.
감사합니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489172.069485;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1661151666.023684;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11831</wp:comment_id>
			<wp:comment_author><![CDATA[정우현]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dntlr007@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[125.129.62.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-10-11 16:14:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-10-11 07:14:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[중간까지 읽다가 감동받고 댓글 답니다.
설명이 너무 깔끔하십니다.
잘 배우고 가겠습니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1665472443.630125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1667365082.710847;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11643</wp:comment_id>
			<wp:comment_author><![CDATA[김민준]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gunpollo1886@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.125.151.213]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-09-26 13:30:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-09-26 04:30:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[너무 감사합니다! 덕분에 다른 책에서도 이해 안됐던 것이 이해됐습니다! 나중에 JS책한편 써주십쇼!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1664166620.296423;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1665190542.587229;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11861</wp:comment_id>
			<wp:comment_author><![CDATA[이창명]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[helloliam81@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.254.166.6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-10-13 11:31:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-10-13 02:31:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[대단합니다 ! 다시 한번 await, promise에 대해 되잡게 되었습니다. 
앞으로도 훌륭한 글 많이 부탁드리겠습니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1665628274.33162;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1667365083.33346;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11175</wp:comment_id>
			<wp:comment_author><![CDATA[Dongslee]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dongslee@dongslee.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.140.37.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-08-17 22:13:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-08-17 13:13:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[흘러흘러 이 블로그 까지 왔습니다. 선생님. 늘 많이배웁니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489174.102384;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1660741993.545657;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>12225</wp:comment_id>
			<wp:comment_author><![CDATA[yj]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yjjang@moadata.co.kr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[183.99.7.86]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-11-09 12:06:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-11-09 03:06:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Chrome 에서 promise가 return 받기 전에 끊겼다는 에러 때문에 관련해서 좀 더 깊은 내용을 찾아보다가 이 글을 발견했는데 정말 감탄하고 갑니다! 덕분에 잘 배웠습니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1667963172.872429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[[신입일기] 첫 단추 잘못 끼워진 일 하는 법]]></title>
		<link>https://elvanov.com/2661</link>
		<pubDate>Sat, 06 Nov 2021 11:15:39 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2661</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 회사에 들어간지 한 3개월 정도 되었습니다. 완전 신입이라고 할 수 있겠지요? 필자가 다니는 회사는 분위기가 자유로워요. 회사의 분위기가 자유로운 걸 싫어하는 사람도 있을 거예요. 필자는 성향상 좀 더 자유롭게 풀어놓는 걸 좋아하긴 해서 그건 만족합니다. 그렇다고 방임되고 싶다는 건 아닙니다 하하.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그런데 말입니다, 분위기를 떠나서, 일의 기본적인 형태가 갖춰진 상태로 와야 하는데, 그렇지 못한 경우가 있다는 겁니다. 이게 무슨 소리냐? 필자는 신입이긴 하니까 실제로 일이 어떻게 돌아가야 하는건지, 어떻게 돌아가는 게 가장 효율적인 형태인지 잘 모릅니다. 일의 방법도 회사에 따라, 사업 특성에 따라서 아주 달라질 수 있을텐데, 그래서 정답은 없겠지만, 하지만 이번 프로젝트를 주도적으로 해나가면서 아, 이런 식으로 일하는 방법은 옳지 못한 거구나, 하는 건 깨달았습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>너무 말이 심한가요? 옳지 못한다니. ㅋㅋㅋ</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>필자가 처음 당황스러웠던 때에는, 좀 큰 기업이라면 확실하고 명료한 기획서를 가져다줄 줄 알았는데, 그렇지 못했다는 겁니다. 궁극적인 목표 정도만 정해져 있고, 그 하위 목표들은 정해지지 못한 채 우왕자왕하는 느낌이었습니다. 제대로 된 기획서가 아니라 킥오프 미팅용 자료를 바탕으로 일을 해나가야 하는 상황이었는데, 이런 상황은 옳지 못하다고 생각했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>문제는 돈이다</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>개인이 처리할 수 있는 일을 초과해서 일이 부여되면, 결국 일을 다 끝내기 위해 더 대충대충 빠르게 끝내거나 야근을 할 수 밖에 없습니다. 그렇게 하다보면 체력도 고갈되고, 궁극적으로 결과물의 퀄리티도 떨어져 고객 입장에서는 "이게 머지..?" 하는 결과가 나올 수 밖에 없겠지요. 그렇다면 사람들이 왜 이렇게 바쁠까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 이유는 두 가지가 있겠습니다. 그냥 일을 못하는 사람이기 때문, 혹은 조직의 구조가 잘못되었기 때문입니다. 개인이 일을 못하는 건 어쩔 수 없습니다. 그냥 친구들끼리 술 마시면서 그 새끼 일 존나 못한다 욕 한바가지 하고, 그렇지만 앞에서는 그 사람의 역량에 따라서 챙길 거를 다 챙겨야겠죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러나 경험상 일을 그렇게까지 못하는 사람은 많지 않습니다. 기본은 합니다. (아직 세상은 살만하다 믿습니다.) 그렇다면 조직이 문제라는 것이겠죠? 이 "기획"이라는 것들이 처음 출발했을 때부터, 적절한 인원에게 배분되고 적절하게 일정 산정이 되어야 하는데, 그렇지 못한 겁니다. 서비스 품질은 그렇게 점점 산으로 가고 마는 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 조직이 잘못일까요? 꼭 그렇지도 않습니다. 기업이 돈을 열심히 벌고, 그 번 돈 중에서는 앞으로 사업을 더 잘 이끌어나가기 위해 열심히 또 투자를 할 것인데요, 어디에다가 얼만큼 투자를 할 것인가 결정을 해야겠지요. 그 중에 하나가 조직 구조와 관련된 부분일 겁니다. 사업은 항상 시시각각 변하기에, 거기에 따라서 조직의 구조도 더 효율적으로 변화해나가고 그걸 유지해야 할텐데, 그것도 엄연한 비용이란 말입니다. 시간과 돈이 엄청 들겠지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>무엇이든지 결국 수익으로 이어질 것인가가 의사결정의 가장 확고한 기준이 될텐데, 조직 구조나 워크플로우를 개선하다고 해서 그게 궁극적인 수익으로 이어질까? 계산기를 두들기다 보면 그 시간과 돈에 새로운 제품을 찍어내거나 새로운 프로모션을 하는 게 낫다고 판단될 겁니다. 아닐 수도 있고.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼 이런 판단을 하는 건 저기 저 높으신 분들일 것이고, 나랑 열심히 부대끼는 마케팅 사람들, 퍼블리 사람들은 그런 판단의 희생양으로써 아둥바둥 살고 있는 거라고 생각하면, 이해는 됩니다. 결론적으로, 지금 일을 쳐내야 하는 상황은 어쩔 수 없는 것이고, 그리고 서비스 오픈 날짜는 정해져 있고, 궁극적으로 퀄리티는 좀 떨어지기는 하겠지만, 이런 상태에서 그나마 조금이라도 퀄리티를 올리기 위한 방법이 무엇이 있을까. 이런 것들에 대한 생각을 읊어보는 것이 이 글의 골자입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일의 퀄리티를 올리는 이유는, 서비스가 잘 되어 기업에게 큰 수익을 가져다주는 것도 좋겠지만, 그것보다는 내가 한 일들을 커리어로 쌓아나가야 하기 때문입니다. 제가 했던 프로젝트도 적절한 선에서 전부 정리할 예정이고, 그런 경험들이 제 자산이 되리라 믿습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>상황은 어쩔 수 없습니다. 그 상황을 어떻게 해쳐나갈지.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼 아래 나온 방법들은 순전히 필자 기준이니 잘 걸러 들으시면 됩니다. 아, 이렇게 사는 사람도 있구나 하고.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>기본적인 것 - 컨디션 관리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>일이 바쁘다보면 기본적인 것들을 놓치기 쉽습니다. 그런데 기본적인 것들을 잘 챙겨야 결국 일을 잘 해낼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>평소의 운동</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>운동은 체력을 받쳐주는 근간입니다. 평소에 운동을 무조건 해둬야 합니다. 건강을 위함도 있겠지만 일을 잘하기 위한 이유도 굉장히 큽니다. 필자는 확실히 이번에 운동의 힘을 느꼈습니다. 운동을 하게 되면 잠을 충분히 못자더라도 어느 정도 버틸 수 있는 힘도 주고, 멘탈도 더 튼튼해집니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>평소에 시간이 없더라도 운동을 1순위로 둬야 한다고 생각합니다. 하루에 여가 시간이 2시간이라도 남는다면, 충분히 운동할 수 있습니다. 일주일에 세 번, 한번 할 때 2시간 운동(이동 시간, 씻는 시간 다 포함)한다고 생각하면, 일주일에 대략 평균 1시간은 채웁니다. 그리고 나머지 시간에 여가 활동을 하면 됩니다. 건강과 체력을 받쳐주기 위한 운동은 이정도면 충분합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>적절한 근력과 적절한 유산소와 적절한 유연성이 병행되면 좋겠지요. 필자는 실내 클라이밍을 했는데 좋은 것 같아요. 해볼만한 걸 떠올린다면 요가, 필라테스, 방송댄스 등이 있을 것 같고, 만약 홈트레이닝을 한다면 밖에서 30분 뛰고 들어와서 4~50분 정도 유튜브 영상이나 나이키 앱으로 홈트레이닝 하는 것 정도?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>충분한 수면</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>업무 스트레스가 심하지 않은 시기에는 잠을 덜 자도 상관없습니다. 왜냐면 삶이 재밌으니깐요. 그런데 업무 스트레스가 심하면 무슨 일이 있어도 충분한 수면이 이루어져야 합니다. 업무 때문에 운동을 못할 수도 있어도 잠은 충분히 자둡니다. 스트레스가 심할 수록 놀고 싶어서 폰을 뒤적거리게 될 텐데, 그것을 안하는 게 뽀인트입니다. 잠이 안오더라도 그냥 누워서 온 몸에 긴장을 풀고 근육이라도 이완시키세요. 스트레스가 많을 때 잠까지 부족하면 멘탈이 너무너무 힘듭니다. 흑흑.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>필자의 기준으로는 하루에 7시간~ 8시간 정도가 충분한 수면입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>먹는 것</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>끼니는 거르지 말고 먹으세요. 어떤 음식을 먹을 지는, 필자는 상관없이 잘 먹어서 모르겠지만, 아무튼 잘 챙겨 드세요. 일한다고 끼니까지 거르면 좀 서럽습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>물어보기 (절망편)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아무리 개차반같은 기획이 있더라도 궁극적인 목표는 단 하나입니다. 돈을 잘 벌기. 그걸 위해서는? 고객을 만족시켜야겠죠? 고객을 만족시키기 위해서는 서비스를 잘 만들어야겠죠?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 작은 그림들을 맞춰나가야 합니다. 서비스를 잘 만들어나가기 위해 어떻게 할 것인가?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이번 프로젝트에서 기획의 위치에 있었던 분들은 마케팅 팀에 있던 분들이었습니다. 웹 기획을 전문적으로 하시는 분이 아니었습니다. 어느정도 웹이 어떻게 돌아가는 지는 알지만, 구체적으로 서비스가 어떻게 구성되어 있는지 모르고, 특히 유저 입장에서 실제 디바이스를 통한 웹의 사용성을 크게 생각하지 못합니다. 원래 하던 일이 아니니 이런 건 어쩔 수 없습니다. 함께 만들어나가야지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>어떤 부분을 클릭했을 때 레이어 팝업이 뜨면서 자세한 설명이 나오는 기능은 기획과 퍼블리셔 끼리도 충분히 할 수 있습니다. 페이지를 구성하는 이미지나 문구도 바로바로 기획이 퍼블리셔에게 주는 게 맞고, 유저플로우가 단순하고 명확해서 퍼블리셔가 별 고민없이 진행해도 됩니다. 자세히보기 버튼 누르면 배경이 흐려지며 모달이 뜬다. 닫기 버튼을 누르면 모달이 닫힌다. 너무 간단하죠? 기획을 전문적으로 하지 않아도 이 정도는 알아서 핸들링이 되는 수준입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그런데 폼 영역이 문제였습니다. 고객들에게 혜택을 주기 위해 개인정보를 받아야 하는 폼이 문제였습니다. 폼이 어떤 식으로 동작할지, 서버와 어떻게 통신할지, 데이터를 어떻게 검증할지는 개발이 맡아서 진행하는 게 맞습니다. 하지만 사용자에게 어떤 정보를 받을 것인지, 사용자의 사용성을 해치지 않으면서도 어떻게 적절한 검증 시스템을 갖출 건지, 사용자에게 피드백은 어떻게 줄 건지, 퍼블리셔의 작업과 어떻게 조화를 이루게 할지가 명확하지가 않았죠. 기획적인 부분이 필요했는데, 이걸 누가 맡아서 할 건가.. 이런 인터랙션. 후아... 한숨이 나왔습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>필자가 계속 했던 고민은 어디까지가 퍼블리셔의 역할이고, 어디까지가 개발자의 역할인가? 라는 겁니다. 정답은 없습니다. 인터넷에서 퍼블리셔의 역할을 검색해봐도 글마다 전부 다릅니다. 보통 나눌 때에는 프론트엔드 개발자는 리액트 등의 프론트엔드 라이브러리를 주로 다루고, 퍼블리셔는 HTML과 CSS와 jQuery 정도를 다룬다고 하는데, 이 프로젝트의 특성상 리액트를 사용하지 못했습니다. 그러니까 필자도 열심히 jQuery를 만졌다는 거고, 너도 나도 달라붙어서, 소통하면서, 본인이 할 수 있는 걸 하면서 해야 하는 상황인 거죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>필자가 했던 실수는 그거였습니다. <strong>누군가 당연히 해주겠지 하는 마음</strong>이 실수였습니다. 필자는 퍼블리셔가 당연히 폼과 유저플로우를 생각해줄 줄 알았습니다. 폼까지 퍼블리싱에 포함되어 있는 줄 알았던 거죠. 퍼블리싱 팀에는 디자이너도 있고 또 페이지 구성은 자료를 바탕으로 알아서 잘 해주시니까, 폼까지 잘 해주실 줄 알았죠. 근데 그게 아니었습니다. 그냥 폼의 대략적인 디자인 정도만 잡아주시고, 별다른 연락이 없는 겁니다. 필자는 계속 기다렸습니다. 흑흑 근데 왜 안주는고야!!!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>물어보기 (희망편)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>더 적극적으로 물어봐야 한다는 사실은 이전 직장 생활을 하면서 몸소 배웠긴 했는데, 이걸 또 이렇게 배워나갈 줄 몰랐습니다. 모르면 물어봐야지! 하는 건 닳고 닳도록 들은 얘기인데도, 정작 상황에 맞닥뜨리면 대수롭지 않게 여깁니다. 호에엥~ 이 정도는 뭐 그냥 처리하면 되겠지, 라는 생각.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아니, 음. 지금 얘기하고 있는 건 논리적인 생각이 아닙니다. 감정, 느낌, 기분, <strong>본능적인 촉</strong> 입니다. 대수롭지 않다고 느끼는 건 촉이 무뎌져 있다는 겁니다. 감정에 날을 세워야 합니다. 어? 뭔가 이상한데? 라는 직감력을 키워야 하는 느낌?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 지금부터 필자가 어떻게 물어보는 게 잘 물어보는 건가 고민했던 부분을 이야기하도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>물어볼 때에는 이걸 왜 물어보는지, (<strong>내가 물어보는 의도</strong>), 그리고 언제까지 이게 필요한지(<strong>기한</strong>)도 명확하게 해서 전달해주시면 좋습니다. 그럼 처음부터 확실하거든요. 그냥 단순히 물어보기만 한다면 답장을 해줘야 하는 쪽에서 이 답장의 중요성을 알아서 판단할 수 밖에 없습니다. 답장을 해줘야 하는 쪽도 허구한 날 바쁘니까, 중요도 있는 것부터 처리해나가야 하는데, 중요성을 판단할 수 없는 일은 자연스레 우선순위가 뒤로 밀리기 마련이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>정보 요청이라든지, 뭔가를 물어보든지 간에 일단 그 쪽에서 "알아보겠습니다" 내지는 "검토해보겠습니다" 라는 답변이 올 텐데, 몬가 조금이라도 불안하다면 (<strong>답변 받는데) 얼마나 걸릴 것 같냐</strong>고 혹은 <strong>오늘 오전까지 해주실 수 있냐</strong> 라고도 질문을 할 수 있습니다. 일이 바쁘면 사람들은 꼼꼼해지지 못합니다. 검토사항을 잘 정리해서 줘도 꼭 빠트릴 수 있습니다. 뭔가 답장이 없다면, 뭐 생각하고 있겠지 하고 안주하지 말고, <strong>혹시 어떻게 진행되고 있나요</strong> 라고 물어봐야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>상대가 답변을 잘 안줄 것 같은 느낌이 들면 어쨌거나 저쨌거나 쪼아야 합니다. 한참 쪼무래기 신입이라도 한참 선임을 괴롭혀야 합니다. 필자 같은 신입 입장에서는 일이 어떻게 돌아가는지 모르기 때문에 이미 일을 해온 사람들의 리듬도 모릅니다. 어느 정도 걸리는지도 감이 안오구요. 사실 그냥 말 자체도 이해가 잘 안될 때가 있어요. 도대체 뭔 말을 하는거야?? 그래서 "<strong>ㅠㅠ 죄송한데 ~~ 라고 이해하는 게 맞나요?</strong>" 등으로, 만약 이 일이 틀어진다면 네가 제대로 안알려줘서임. 라고 책임을 넘기는 느낌으로 물어봐야 합니다. 몬 느낌인지 알겠죠? 발만 동동 구르면 안돼요. 그냥 지르세요! 아몰라!!! 하면서. 만약 상대방이 "이런 것 까지 물어봐?"라는 느낌을 준다 할지라도, 당신이 "ㅠㅠ 나는 일못인가?"라는 생각이 들더라도, 굴하지 않아야 합니다. 신입은 일못일 수 밖에 없잖아요 ㅠㅠ..</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>항상 기억해야 합니다. 내 일 내 책임이 아니라서 안물어보는 건, 개인의 처신에는 도움이 될 수는 있겠지만, 현재 하는 일의 퀄리티를 떨어뜨릴 것이고 커리어에 별 도움이 되지 않을 것이며, 앞으로 더 큰 프로젝트를 맡게 될 가능성도 줄어들 것입니다. 결국 상대 좋아서 계속 일을 챙기는 게 아니라, 나를 위해 일을 챙기는 거라 생각하시면 좀 현타가 덜 올 것입니다. '내가 이런 것까지 물어봐야 해?' 라는 생각이 들 수도 있는데, 이런 것까지 물어봐야 하는 상황은 앞서 이야기한 것처럼 구조상 <strong>어쩔 수 없다</strong> 라고 자조적으로 생각하고, 이 와중에 내가 할 수 있는 것들을 찾아나가야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>폼에 필요한 정보를 기획에 여쭤봤습니다. 지금 후회하는 것이라면 그때는 좀 밍기적거리면서 물어봤는데, 더 확실하게 물어볼 걸 그랬습니다. 하여튼 신경쓸 게 한둘이 아니었죠. 개인정보가 관련된 거니까 법적으로 문제 없는지도 보안팀/법무팀에 검토도 필요하고, 실제 쿠폰을 발행하는 건 CRM 쪽이니까 거기서 필요한 정보가 어떤 게 있는지도 필요하고, 또 증정 상품 배송을 별도로 해야 하는데, 그 배송 업체가 필요한 정보는 무엇인지 확실하게 알아야 합니다. 모든 연결고리는 기획이 쥐고 있으니까 기획이 알려주지 않는다면 알려줄 때까지 괴롭혀야 합니다. 내 위기감이 해소될 때 까지.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>설명하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>개발자는 설명을 잘 해야 합니다. 소통 능력은 아주 중요하지요. 소통이 되어야 일이 진행이 되니깐요. 확실하게! 자기 포장도 잘 해야 내가 힘들여 노력한 것에 대한 인정도 받을 수 있구요. (그렇다고 없던 일 꾸며내라는 말은 아니에요)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>더 적극적으로 물어볼 때, 설명이 잘 되면 좋겠다고 생각을 했습니다. (실제로는 거의 시도조차 못했지만, 다음 번에는 좀 시도해볼 생각입니다) 그러니까 "~~~ 이렇게 구현할 계획인데, 혹은 ~~~ 이렇게 구현했는데, 괜찮을까요?" 라고 물어볼 때 단순히 글로 좌라락 적지 말고, 구현한 것, 구현할 것, 계획 등을 <strong>보여줄 수 있는 형태로 만드는 것</strong>이 핵심인데요. 만약 페이지를 만든다면 내 개인적으로, 혹은 회사에서 관리하는 호스팅 서버에 HTML을 러프하게 넣어놓고 주소를 줘서 확인해보라고 할 수도 있고, 계획이나 유저플로우 같은 경우는 <a href="http://draw.io">draw.io</a> 와 같은 툴들을 활용해 시각적으로 이해가 잘 되도록 공유하면 좋을 것 같습니다. <a href="http://draw.io">draw.io</a> 에는 왼쪽의 스티커 같은 걸 검색할 수 있어 UI 설명할 때 좀 편했습니다. 단순한 PPT도 좋습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>상대방이 더 쉽고 빠르게 판단할 수 있는 형태를 만드는 것도 중요하고, 또한 이게 시간이 얼마 걸리지 않기도 해야 합니다. 궁극적으로 서비스가 제대로 나오는 게 목표인데, 내부적으로 공유할 자료를 만드는 데 시간과 노력을 너무 많이 써서는 안 되겠죠. 시간이 금이다!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글에서 글만 주루룩 썼다고 뭐라하지 마세요. 딱히 이미지가 필요한 설명은 없잖아요 ㅠㅠ 진짜 없나?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 글의 제목을 "첫 단추 잘못 끼워진" 이라고 표현한 이유는, 문제의 원인은 다른 데 있다는 걸 이야기하고 싶었습니다. 지금 일 꼬라지가 말도 아니게 돌아가고 있는 이유는, 니 탓도 아니고, 네 동료의 탓도 아니고, 너랑 열심히 소통하고 있는 기획자, 디자이너, 퍼블리셔의 탓도 아닙니다. 그 원인은 저 멀리 알 수 없는 곳에 아주 복합적으로 존재합니다. 옷을 입을 때에는 다시 단추를 풀어서 제대로 처음부터 잘 끼우면 되지만, 시간이란 건 되돌릴 수 없습니다. 남은 단추를 열심히 잘 매어야죠. 그러기 위해 아등바등 살아나가야죠.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2661</wp:post_id>
		<wp:post_date><![CDATA[2021-11-06 20:15:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-06 11:15:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-06 20:17:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-06 11:17:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%8b%a0%ec%9e%85%ec%9d%bc%ea%b8%b0-%ec%b2%ab-%eb%8b%a8%ec%b6%94-%ec%9e%98%eb%aa%bb-%eb%81%bc%ec%9b%8c%ec%a7%84-%ec%9d%bc-%ed%95%98%eb%8a%94-%eb%b2%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%ec%97%90%ec%84%b8%ec%9d%b4"><![CDATA[에세이]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8414</wp:comment_id>
			<wp:comment_author><![CDATA[변사부]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[enjoy8939@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://enjoydevelop.tistory.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[116.127.135.147]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-13 12:20:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-13 03:20:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[감사합니다 도움이 많이 되었습니다. 글 너무 좋네요!!! 자주 들리겠습니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642044058.892863;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1642848599.636467;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[제목이 없는 재사용 블록]]></title>
		<link>https://elvanov.com/252</link>
		<pubDate>Wed, 18 Dec 2019 08:12:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/252</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>sdd</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 17:12:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 08:12:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-18 17:12:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-18 08:12:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%a0%9c%eb%aa%a9%ec%9d%b4-%ec%97%86%eb%8a%94-%ec%9e%ac%ec%82%ac%ec%9a%a9-%eb%b8%94%eb%a1%9d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[VScode + yarn 2 + Monorepo + TypeScript 프로젝트 세팅]]></title>
		<link>https://elvanov.com/2664</link>
		<pubDate>Sat, 06 Nov 2021 12:12:07 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2664</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>yarn 2 를 사용하여 더 효율적으로 패키지 관리하기</li><li>모노리포(Monorepo)에 발을 살짝 담구기</li><li>타입스크립트 기반으로 프로젝트 구성하기 (이건 사실 이 글에선 중요하지 않음)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>사전 준비</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>타입스크립트를 하고 싶은 마음</li><li>vscode 를 에디터로 쓰고자 하는 마음</li><li>yarn 명령어 사전지식, yarn 을 선호하는 마음</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>아직 완벽하지는 않습니다. 특히 타입스크립트가 제대로 동작하는지에 대한 검증이 많이 필요합니다.. 일단 가장 기본적인 형태로 진행해 보았습니다. 기존 프로젝트를 업그레이드 하는 식이면 좀 더 많이 힘들 거라 예상..</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그리고 저도 모노리포에 대해서 아는 바가 거의 없기 때문에 이게 모노리포가 맞나.. 싶습니다. 일단 레츠 기릿</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <strong>✅ 소스코드: <a href="https://gitlab.com/EzKorry/yarn2-workspaces-typescript-boilerplate">https://gitlab.com/EzKorry/yarn2-workspaces-typescript-boilerplate</a></strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>업그레이드를 하는 이유</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>패키지 받는 속도 빨라짐(필요한 것만 딱딱 받음)</li><li>install 속도 빨라짐, (심지어 install 필요가 없을 수도 있음. 제로인스톨 하게 되면.)</li><li>node 실행 속도 빨라짐.</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>그냥 yarn 과 비교했을 때 바뀌는 것</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>node_modules 가 사라짐. (띠용?)</li><li>잡다구리한 파일들이 많이 생김</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>패키지 초기화 하하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우선 만들 새로운 프로젝트 폴더를 만들고 들어갑시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>mkdir new_project
cd new_project
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래 명령어로 현재 yarn 버전 확인.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn --version
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>1.x</code> 일 경우 새로운 yarn 이 아닌 것임.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 명령어로 최신 yarn 으로 세팅해줍니다. 주의할 점은 아래 명령어는 새로운 프로젝트 폴더 내에서 실행해야 합니닷!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>$ yarn set version berry &amp;&amp; yarn set version latest
$ yarn --version
3.0.2
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아무튼 여기 까지 왔으면 <code>.yarn</code> 폴더와 <code>.yarnrc.yml</code> 파일이 생겼을 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 상태에서 아래 명령어 실행</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn init
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하게 되면 아래와 같이 출력됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>{
  name: 'test',
  packageManager: 'yarn@3.0.2'
}
</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>여기까지 했을 때 생기는 파일들은 아래와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>.yarn</code> 폴더</li><li><code>.yarnrc.yml</code></li><li><code>.editorconfig</code></li><li><code>.gitignore</code></li><li><code>package.json</code></li><li><code>README.md</code></li><li><code>yarn.lock</code></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>아래는 <code>.gitignore</code> 내용입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-gitignore"} -->
<pre class="wp-block-code language-gitignore"><code>/.yarn/*
!/.yarn/patches
!/.yarn/plugins
!/.yarn/releases
!/.yarn/sdks

# Swap the comments on the following lines if you don't wish to use zero-installs
# Documentation here: &lt;https://yarnpkg.com/features/zero-installs&gt;
!/.yarn/cache
#/.pnp.*
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>zero-installs 를 간단히 이야기하면, 그냥 <strong>모든 패키지를 <code>git</code> 에 포함시켜서 <code>git clone</code> 만 해도 바로 실행시킬 수 있는 환경을 만들 수 있다</strong>, 뭐 그런 느낌입니다. 이걸 하기 싫으면 <code>!/.yarn/cache</code> 와 <code>/.pnp.*</code> 를 주석 스왑하라고 하네요. 즉 주석 스왑을 하게 되면 둘다 <code>.gitignore</code> 에 포함되어 버전 관리가 안되고 리파지토리에도 올라가지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 명령어로 타입스크립트 패키지 설치합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn add -D typescript
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>하게 되면 아래와 같은 출력이 나오고,</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>➤ YN0000: ┌ Resolution step
➤ YN0000: └ Completed in 0s 255ms
➤ YN0000: ┌ Fetch step
➤ YN0013: │ typescript@npm:4.4.4 can't be found in the cache and will be fetched from the rem
➤ YN0013: │ typescript@patch:typescript@npm%3A4.4.4#~builtin&lt;compat/typescript&gt;::version=4.4.
➤ YN0000: └ Completed
➤ YN0000: ┌ Link step
➤ YN0000: └ Completed
➤ YN0000: Done in 0s 461ms
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>.pnp.cjs</code> 파일이 생깁니다. 갑자기 10,000줄짜리 파일이 생겼네요. 이 파일로 node 가 실제로 실행할 때 어떤 패키지를 어떻게 실행해야 하는지 알려준다고 합니다. 방식 이름은 pnp(플러그-앤-플레이. 주의: 컴활 시험에 나오는 거 아님) 자세한 건 잘 모름. 아무튼 의존성 관리의 일환임. 자세한 건 <a href="https://yarnpkg.com/features/pnp/">공식 문서</a>를 봅시다!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>타입스크립트 세팅</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>참고: <a href="https://yarnpkg.com/getting-started/editor-sdks#vscode">https://yarnpkg.com/getting-started/editor-sdks#vscode</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 명령어 위에서 했었죠? 만약 안했으면 해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn add -D typescript
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 vscode 에서 아래 익스텐션을 깔아줍니다. 링크로 들어가셔도 되고 그냥 익스텐션에서 <code>zipfs</code> 검색하면 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://marketplace.visualstudio.com/items?itemName=arcanis.vscode-zipfs">https://marketplace.visualstudio.com/items?itemName=arcanis.vscode-zipfs</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 아래 명령어를 실행해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn dlx @yarnpkg/sdks vscode
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그렇다면 아래 출력이 나오면서 뭔가 성공했다는 기분이 듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>➤ YN0000: ┌ Resolution step
➤ YN0000: └ Completed in 8s 435ms
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed in 0s 202ms
➤ YN0000: ┌ Link step
➤ YN0000: └ Completed in 0s 209ms
➤ YN0000: Done in 8s 879ms

➤ YN0000: ┌ Generating SDKs inside .yarn/sdks
➤ YN0000: │ ✓ Typescript
➤ YN0000: │ • 6 SDKs were skipped based on your root dependencies
➤ YN0000: └ Completed
➤ YN0000: ┌ Generating settings
➤ YN0000: │ ✓ Vscode (new ✨)
➤ YN0000: └ Completed
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 vscode 에서 갑자기 아래 메시지가 나옵니다! <code>Allow</code> 를 눌러줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2666,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/11/1.png" alt="" class="wp-image-2666"/></figure>
<!-- /wp:image -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column {"width":100} -->
<div class="wp-block-column" style="flex-basis:100%"><!-- wp:group -->
<div class="wp-block-group"><div class="wp-block-group__inner-container"><!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>❗ 만약에 위 메시지가 뜨지 않는다면?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>TypeScript: Select TypeScript Version...</code> 를 Command Pallette (cmd+shift+p) 에서 찾아서 실행시킵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그 다음 <code>Use Workspace Version</code> 를 선택합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2667,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2021/11/2-1024x214.png" alt="" class="wp-image-2667"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>하여튼 간에 <code>yarn add -D typescript</code> 로타입스크립트 패키지를 먼저 설치한 다음에 <code>yarn dlx @yarnpkg/sdks vscode</code> 얘를 해야 뭔가 제대로 동작합니다. <code>yarn dlx @yarnpkg/sdks vscode</code> 먼저 하면 안되더라구요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator --></div></div>
<!-- /wp:group --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>아래 명령어를 실행하여 기본적인 typesciprt 패키지를 만들어줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>tsc --init
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 간단하게 <code>index.ts</code> 파일을 아래 내용으로 만듭니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>type S = string;
const msg: S = "hello world!";
console.log(msg);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 다음 명령어로 간단하게 실행시켜봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>$ tsc &amp;&amp; yarn node ./index.js
hello world!
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>index.js</code> 파일이 생길 테지만, 간단하게 무시합시다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>여러 개 하위 패키지(workspace) 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>2개의 폴더를 만들어줍니다. 폴더 구조가 헷갈린다면 <a href="https://www.notion.so/VScode-yarn-2-workspace-TypeScript-74fec99d11634f468268904804a54e9c">소스 코드</a>를 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>mkdir server common
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>common</code> 에 들어가서 <code>yarn init</code> 하게 되면 <code>package.json</code> 파일과 <code>[README.md](&lt;http://README.md&gt;)</code> 파일 두 개가 생길 것입니다. (호오잉? 처음에 했던 yarn init 이랑 비교하면 놀랄 만큼 간단하네요!)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>common/package.json</code> 에서 <code>name</code>에 해당하는 부분을 다음과 같이 수정해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>{
  "name": "@hello/common",
  "packageManager": "yarn@3.0.2"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 <code>server</code> 에 들어가서 똑같이 <code>yarn init</code> 한다음 <code>package.json</code> 파일을 수정해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>{
  "name": "@hello/server",
  "packageManager": "yarn@3.0.2"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 프로젝트 루트에 있는 <code>package.json</code> 에서 다음 내용을 추가해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"workspaces": {
  "packages": &#91;
    "server",
    "common"
  ]
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이렇게 하면 이제 프로젝트 루트에서 각각의 폴더 (워크스페이스)로 접근할 수 있습니다! 이게 무슨 말이냐구요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>프로젝트 루트로 가서 아래 명령어를 쳐보세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn workspace @hello/server add express @hello/common
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그러면 우리가 직접 <code>server</code> 폴더에 들어가서 <code>yarn add</code> 한 효과를 볼 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>@hello/common</code> 은 뭘까요? 아래에서 server 마저 세팅할 때 알려드리겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이제 좀 귀찮으니까 프로젝트 루트의 <code>package.json</code> 에 다음 스크립트를 추가해줍시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"scripts": {
  "common": "yarn workspace @hello/common",
  "server": "yarn workspace @hello/server"
},
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그럼 아까 했던 명령어는 다음과 같이 줄어듭니다. <code>workspace @hello/server</code> 가 <code>server</code> 한 단어로 줄었습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn server add express @hello/common
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2><code>common</code> 폴더 세팅</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 명령어를 프로젝트 루트에서 실행해줍시다. 위에까지 세팅을 제대로 마쳤다면, 이제 common에 명령이 척척 잘 적용될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn common add -D typescript
yarn common tsc --init
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>놀랍게도 <code>common</code> 폴더 안에도 <code>node_modules</code> 폴더가 생기지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>common/index.ts</code> 파일을 만들어서 아래 내용으로 채워줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>export function sayHello() {
  console.log(sayHello);
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>common/package.json</code> 파일에 다음 스크립트를 추가해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"scripts": {
  "build": "tsc"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2><code>server</code> 폴더 세팅</h2>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn server add express @hello/common
yarn server add -D @types/express typescript
yarn server tsc --init
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>server 폴더 내에서 common 에 참조할 수 있습니다! 대박!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>server/package.json</code> 파일을 확인합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"dependencies": {
  "@hello/common": "workspace:common",
  "express": "^4.17.1"
},
"devDependencies": {
  "@types/express": "^4.17.13",
  "typescript": "^4.4.4"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>workspace:common</code>이 보이십니까?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래 스크립트를 추가해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-json"} -->
<pre class="wp-block-code language-json"><code>"scripts": {
  "build": "tsc",
  "start": "node index.js"
},
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>server/index.ts</code> 파일의 내용을 아래로 채워넣습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-typescript"} -->
<pre class="wp-block-code language-typescript"><code>import { sayHello } from "@hello/common";
import express from "express";

const app = express();

app.use("/test", (req, res) =&gt; {
  sayHello();
  res.status(204).send();
});

app.listen(4000, () =&gt; {
  console.log("? Server Listening on localhost:4000!");
});
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>실행해보기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이제 다 빌드하고 실행시켜봅시다!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>yarn common build
yarn server build
yarn server start
</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>? Server Listening on localhost:4000!
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 터미널 하나를 더 켜서 다음과 같이 실행시켜봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-bash"} -->
<pre class="wp-block-code language-bash"><code>curl localhost:4000/test
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그 다음 킨 서버에 다음 메시지를 확인합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>hello
</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>❗ 만약 <code>yarn common build</code> 를 하지 않는다면?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그렇다면 다음과 같은 에러 메시지가 발생합니다. 무슨 소리냐면 그냥 타입스크립트 빌드를 안해서 실행할 자바스크립트 파일이 없다 이 말입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>/Users/th.kim/Desktop/test/.pnp.cjs:10269
    throw firstError;
    ^

Error: Qualified path resolution failed - none of those files can be found on the disk.

Source path: /Users/th.kim/Desktop/test/common/
Not found: /Users/th.kim/Desktop/test/common/
Not found: /Users/th.kim/Desktop/test/common/.js
Not found: /Users/th.kim/Desktop/test/common/.json
Not found: /Users/th.kim/Desktop/test/common/.node
Not found: /Users/th.kim/Desktop/test/common/index.js
Not found: /Users/th.kim/Desktop/test/common/index.json
Not found: /Users/th.kim/Desktop/test/common/index.node

Require stack:
- /Users/th.kim/Desktop/test/server/index.js
    at Function.external_module_.Module._resolveFilename (/Users/th.kim/Desktop/test/.pnp.cjs:10268:55)
    at Function.external_module_.Module._load (/Users/th.kim/Desktop/test/.pnp.cjs:10067:48)
    at Module.require (internal/modules/cjs/loader.js:961:19)
    at require (internal/modules/cjs/helpers.js:92:18)
    at Object.&lt;anonymous&gt; (/Users/th.kim/Desktop/test/server/index.js:6:16)
    at Module._compile (internal/modules/cjs/loader.js:1072:14)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)
    at Module.load (internal/modules/cjs/loader.js:937:32)
    at Function.external_module_.Module._load (/Users/th.kim/Desktop/test/.pnp.cjs:10117:14)
    at Function.executeUserEntryPoint &#91;as runMain] (internal/modules/run_main.js:76:12)
</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>더 알아볼 것</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>yarn workspaces foreach ...</li><li>각각의 workspace (실행 Entrypoint) 를 컨테이너화 하기 (.pnp.cjs 랑 cache 포함시키면 도커 이미지 만드는 데에도 시간이 아주 짧게 걸릴 거라 예상)</li><li>컨테이너화 한 것들을 쿠버네티스 등의 환경에서 실행시키고 배포하기</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>참조</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://medium.com/wantedjobs/yarn-berry-적용기-2-프로젝트-적용기-45f1ba67c24c">https://medium.com/wantedjobs/yarn-berry-적용기-2-프로젝트-적용기-45f1ba67c24c</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2664</wp:post_id>
		<wp:post_date><![CDATA[2021-11-06 21:12:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-11-06 12:12:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-11-06 21:12:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-11-06 12:12:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vscode-yarn-2-monorepo-typescript-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%ec%84%b8%ed%8c%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
		<category domain="category" nicename="%eb%b0%a9%eb%b2%95%eb%a1%a0"><![CDATA[방법론]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d7acb5f084803c2d052e9fd74071ea44]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3903ab7e8781c896d8bd151c90a65e98]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Node.js Stream 개념을 익혀보자]]></title>
		<link>https://elvanov.com/2670</link>
		<pubDate>Tue, 07 Dec 2021 06:52:05 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2670</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Stream 에 대한 개념 이해</li><li>간단하게 Readable 클래스 확장구현하기</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>사전지식</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://nodejs.org/ko/docs/guides/">Node.js</a> (본 글에 있는 코든 코드는 Node.js 에서 실행합니다. )</li><li>자바스크립트 ES6 문법</li><li>클래스 확장/상속</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>이 글에서 다루지 않는 것</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Stream 의 다양한 이벤트</li><li>Readable, Writable 생성자에 넘기는 옵션</li><li>pipe 함수의 정확한 동작 방식</li><li>Writable, Duplex, Transform 직접 만들기</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>스트림이라는 말을 처음 들어봤을 수도 있겠지요? 하지만 이미 우리의 일상 속에 깊이 자리잡고 있는 녀석입니다. <code>console.log</code> 가 우리의 터미널로 출력시킬 때 이용하는 <code>process.stdout</code> 또한 <code>Stream</code> 객체입니다. 그런데 스트림은 어떤 개념이고 어떻게 써야 잘 쓰는 걸까요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>스트림은 무엇인가?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>위키백과 왈, 시간이 지남에 따라 사용할 수 있게 되는 일련의 데이터 요소라고 합니다. 필자도 이게 무슨 소리인지 잘 모르겠으므로 그냥 필자가 이해한대로 나불대려고 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>스트림은 "<strong>순차적인 데이터</strong>" 입니다. 보통 우리가 생각하는 데이터라는 것은 내용이 있겠고, 그 내용 만큼 크기가 결정될 겁니다. 하지만 순차적인 데이터란 크기가 중요하지 않습니다. 데이터가 그냥 흘러갈 뿐입니다. 이 말이 무슨 말이냐? 흘러가는 데이터가 뭐가 있을까요? 그리고 데이터를 왜 흘러가도록 할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>스트림을 왜 쓰는가? 어떤 특징이 있는가?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>데이터를 흘러가도록 하는 이유는 <strong>메모리를 아끼기 위해서</strong>입니다. 만약 100GB 단위의 데이터를 압축해서 zip 파일을 만들어야 한다고 가정해봅시다. 우리는 일단 데이터를 처리하기 위해 SSD 상에서의 데이터를 메모리로 로딩해야 합니다. 하지만 우리의 메모리는 작으면 8GB, 보통이면 16GB, 많으면 32GB 쯤 밖에 하지 않겠죠. 여기에는 100GB 라는 큰 데이터를 모두 담을 수 없습니다. 그럼 우리는 메모리의 최대 용량까지만 파일을 압축할 수 있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇지 않습니다. 왜냐하면 압축하는 프로그램은 100GB 의 큰 데이터를 전부 읽지 않아도 앞에서부터 차례대로 압축을 수행할 수 있습니다. 우리의 똑똑한 압축 프로그램은 커다란 파일의 앞에서부터 차례대로 조금조금씩 데이터를 압축하는 방법을 알고 있습니다. <strong>처음부터 모든 데이터를 알 필요 없이</strong> 끝날 때까지 차례대로 처리해나가면 되는 것이지요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>또 다른 예시로는, 특성상 어쩔 수 없이 흘러가는 데이터로 처리해야 할 경우가 있습니다. 우리가 블로그를 운영한다고 가정합시다. 블로그 웹서버는 클라이언트로부터 요청이 들어오면 글을 다시 클라이언트에게 보냅니다. 여기서 그 <strong>요청이라는 데이터는 총량이 정해지지 않습니다</strong>. 정해질 수 없습니다. 왜냐하면 계속 사람들이 들어올 거니까요. 계속해서요. 끝없이. 그러니까 데이터의 총량과는 상관없이 요청 하나 들어오면 그 하나에 대해 제대로 처리하는 게 중요한 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이처럼 스트림은 <strong>데이터가 끝이 날 수도 있고 안날 수도 있습니다</strong>. 앞서 이야기했던 사례 중 파일을 압축하는 사례는 파일의 끝이 명백하게 정해져 있습니다. 그 끝이 언제일지는 모르지만 아무튼 끝이라는 게 있기는 한 것이지요. 그 끝까지 압축을 잘 해야 압축을 했다! 라고 말할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 웹서버의 경우에는 조금 다릅니다. 요청이란 것은 블로그를 폐쇄하기 전까지는 (죽기 전까지는) 계속 받을 수 있어야 합니다. 마치 숨쉬는 것처럼요. 세상이 종말할 때에야 끝은 나겠지요. 웹서버는 그냥 켜져 있는 상태, 외부로부터 요청을 받아들일 수 있는 상태가 중요한 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>일반적으로 스트림에는 <strong>읽기 전용 스트림과 쓰기 전용 스트림</strong>이 있습니다. Node.js 에서는 읽기 전용을 Readable, 쓰기 전용을 Writable 클래스를 활용하여 구현하고 있지요. 왜 이렇게 두 개로 나뉘어 놨냐구요? 뭐 저도 잘은 모르겠지만 좀 더 역할을 명확하게 주기 위해서이지 않을까 싶어요. 스트림을 사용하는 개발자 입장에선는 읽을 수 있는(Readable) 스트림이란 데이터가 스트림 내부에서 외부로 빠져나올 수 있다는 뜻이고, 쓸 수 있는(Writable) 스트림이란 갖고 있던 내이터를 스트림 내부로 전달시킨다는 뜻이겠지요. 이게 무슨 말이냐구요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리가 압축 프로그램을 만드는 개발자라고 가정을 해봐요. 100GB 짜리 파일을 압축시키려면 일단 파일을 읽기 시작해야 합니다. 그 다음 적절한 압축 알고리즘을 이용해 데이터를 좀 줄이고, 새로운 파일에 데이터를 차곡차곡 쌓아 나가야겠죠?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>이미 있는 스트림들</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><code>process.stdout</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>console.log</code> 가 기본적으로 사용하는 <code>process.stdout</code>은 스트림이라고 했습니다. 그럼 그 스트림을 직접 다뤄볼까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>process.stdout.write('Hello, world!\\n');
process.stdout.write('Hello, world! 2\\n');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 그 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>Hello, world!
Hello, world! 2
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>정말 간단한 예시이죠?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>스트림은 순차적인 데이터라고 했습니다. 그래서 뭔가 데이터가 전달되어도 그게 끝이 아닐 수 있다는 것을 스트림 본인 스스로는 너무 잘 압니다. 그래서 <code>write</code> 한 번 했다고 해서 끝나지 않습니다. 우리는 계속해서 <code>write</code> 메소드를 호출할 수 있습니다. 위에서는 두 번 밖에 안했지만 이론상 무제한 <code>write</code> 할 수 있는 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>process.stdout</code> 는 Writable 스트림입니다. 쓸 수 있는 스트림이니까 쓸 수 있어야겠지요? 그래서 <code>write</code> 메소드가 있습니다. 간단하게 써 봤습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Writable 스트림이 무엇인지는 조금 있다가 더 자세하게 설명하고, 또 다른 Writable 스트림을 살펴볼까요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>createWriteStream</code></h3>
<!-- /wp:heading -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const { createWriteStream } = require("fs");

const stream = createWriteStream('output.txt');
stream.write('hey');
stream.write('stack');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>output.txt 파일이 생겼을 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>createWriteStream</code> 함수는 파일을 작성할 수 있는 Writable 스트림을 만들어서 반환합니다. 마찬가지로 <code>write</code> 메소드를 사용할 수 있습니다. 물론 여러 번 사용할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 무한정 데이터를 주고 싶을 때도 있겠지만, 그렇지 않을 때도 있을 겁니다. 끝을 내고 싶다 이 말입니다! 그럴 때에는 <code>end</code> 메소드를 사용할 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>process.stdout.write('Hello, world!\\n');
process.stdout.end();
process.stdout.write('ho');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>위 코드를 실행시키면 아래와 같은 결과가 나옵니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>Hello, world!
events.js:377
      throw er; // Unhandled 'error' event
      ^

Error &#91;ERR_STREAM_WRITE_AFTER_END]: write after end
    at WriteStream.Writable.write (internal/streams/writable.js:292:11)
    at Object.&lt;anonymous&gt; (/Users/th.kim/Desktop/playground-js/stream.js:3:16)
    at Module._compile (internal/modules/cjs/loader.js:1072:14)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)
    at Module.load (internal/modules/cjs/loader.js:937:32)
    at Function.Module._load (internal/modules/cjs/loader.js:778:12)
    at Function.executeUserEntryPoint &#91;as runMain] (internal/modules/run_main.js:76:12)
    at internal/main/run_main_module.js:17:47
Emitted 'error' event on WriteStream instance at:
    at WriteStream.onerror (internal/streams/readable.js:745:14)
    at WriteStream.emit (events.js:400:28)
    at emitErrorNT (internal/streams/destroy.js:106:8)
    at processTicksAndRejections (internal/process/task_queues.js:82:21) {
  code: 'ERR_STREAM_WRITE_AFTER_END'
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>성대한 오류가 발생했죠? <code>Hello, world!</code> 까지는 제대로 출력됐는데, 그 다음에 뭔가 에러가 떴네요. 그렇습니다. <code>end</code> 호출을 통해 스트림이 끝나고 나면 write 를 수행할 수 없습니다. 끝나면 그냥 끝난 거예요. 다시 살릴 수가 없어요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><code>createReadStream</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>createWriteStream</code> 을 써봤으니 이제 <code>createReadStream</code> 을 써봐야겠죠? <code>ReadStream</code> 은 파일을 읽을 때 사용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우선 아래 내용으로 <code>input.txt</code> 파일을 만들어봅시다. 파일 위치는 코드 파일과 똑같은 폴더에 넣습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>123456789
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>그리고 아래와 같이 코드를 작성합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const { createReadStream } = require("fs");

const stream = createReadStream("./input.txt");
stream.on("data", (chunk) =&gt; {
  console.log(`chunk: ${chunk}`);
});
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이제 이 코드를 실행시키면?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>chunk: 123456789
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>스트림을 이용하는 법이 살짝 달라졌죠? <code>on</code> 메소드를 이용하여 이벤트 핸들러를 등록시킵니다. 이 이벤트의 이름은 <code>data</code> 이고, 우리는 <code>chunk</code>를 인수로 받아 그대로 출력해봤습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>createReadStream</code> 을 호출하여 스트림 객체를 만들기만 했는데 바로 파일을 읽기 시작한 것 같습니다. 왜냐하면 파일의 내용이 모두 출력되었기 때문이죠! 내부에서 <code>data</code> 이벤트가 일어났다는 뜻이고, 그 이벤트가 언제 어떻게 일어난 건진 모르겠지만요.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>? <code>createWriteStream</code> 함수를 호출하면 <code>WriteStream</code> 객체가 나오는데요, 이 객체는 <code>Writable</code> 의 모든 인터페이스를 구현하므로, <code>Writable</code> 이라고도 말할 수 있습니다. (K5는 자동차의 모든 요건을 충족하므로 자동차라고도 이야기할 수 있죠) <code>createReadStream</code> 함수 호출로 인해 나오는 <code>ReadStream</code> 또한 <code>Readable</code> 의 모든 인터페이스를 구현하므로 <code>Readable</code> 입니다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading -->
<h2>지금까지 요약</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>스트림이란? 순차적인 데이터이다.</li><li>스트림을 쓰는 이유는? 데이터를 순차적으로 처리할 수 있기 때문에 <strong>끝이 없거나 아주 거대한 데이터</strong>를 다루기 좋다.</li><li>스트림에는 크게 읽기 전용 스트림(Readable), 쓰기 전용 스트림(Writable)이 있다.</li><li>파일에 내용을 쓰는 스트림을 만드려면? createWriteStream 함수를 이용한다.</li><li>스트림을 이용해 파일을 읽으려면? createReadStream 함수를 이용한다.</li><li>Writable 에는 <code>write</code>, <code>end</code> 등의 메소드가 있다.</li><li>Readable 는 <code>on</code> 을 이용해 이벤트 핸들러를 등록하여 데이터를 처리한다. (Writable 에도 물론 <code>on</code>이 있지만 이 글에서 추가로 다루지 않습니다.)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>나만의 Readable 만들기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>그냥 다음 코드를 따라 써보세요.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const { Readable } = require("stream");

class OneToNine extends Readable {
  i = 1;
  _read(size) {
    if (this.i === 10) {
      this.push(null);
      return;
    }
    this.push(this.i.toString());
    this.i += 1;
  }
}

const oneToNine = new OneToNine();
oneToNine.pipe(process.stdout);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>아래는 실행 결과입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>123456789
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>우왕~ 숫자가 나왔네요? 이 코드를 해석해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>class OneToNine extends Readable { ... }
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>일단 우리는 <code>OneToNine</code> 클래스를 정의했습니다. <code>Readable</code> 클래스를 확장을 했구요.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>_read(size) {
  if (this.i === 10) {
    this.push(null);
    return;
  }
  this.push(this.i.toString());
  this.i += 1;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>Readable</code>로부터 확장할 수 있는 메소드는 여러가지 종류가 있는데, 일단 우리는 <code>_read</code> 하나만 재정의했습니다. <code>_read</code> 메소드는 우리가 만든 클래스가 실제로 동작할 때 적절한 시점에 적절하게 호출될 것입니다. 그냥 믿으세요. <code>_read</code>를 재정의할 때 유의해야 할 점만 잘 챙기면 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>_read</code> 함수의 내부에서는 <code>this.push</code> 를 호출해야 합니다. <code>push</code> 메소드 또한 이미 <code>Readable</code> 에 정의되어 있습니다. 그 역할은 이 <strong>스트림을 읽으려고 하는 놈들에게 데이터를 넘기는 역할입니다.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>_read</code> 는 계속해서 호출될 수 있습니다. 스트림 자체가 끝이 없는 무한한 데이터이다 보니 기본적으로는 무제한으로 호출합니다. 이걸 멈추는 것이 바로 <code>this.push(null)</code> 입니다. 마치 반복문 내에서 <code>break;</code> 하는 것과 똑같은 역할을 한다고 보시면 됩니다. <code>this.i</code>는 처음에 <code>1</code> 이었는데, <code>_read</code> 가 진행됨에 따라서 2, 3, 4... 이렇게 1씩 계속 증가할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const oneToNine = new OneToNine();
oneToNine.pipe(process.stdout);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>OneToNine</code> 객체를 이용해서 새 <code>oneToNine</code> 객체를 만들었습니다. 여기에 <code>pipe</code> 메소드를 호출하여 <code>process.stdout</code> 이라는 <code>Writable</code> 과 연결해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Readable</code> 객체에는 <code>pipe</code> 함수가 있습니다. pipe의 뜻은 무엇이지요? 관이지요! 관을 만들어주는 겁니다. 누구에게요? 바로 <code>Writable</code> 객체로요! <code>pipe</code>로 <code>Readable</code> 객체와 <code>Writable</code> 객체를 연결하는 순간 뻥 뚫리면서 <code>Readable</code> 에서 읽을 수 있는 건 계속해서 읽어나가고, 읽은 내용들을 <code>Writable</code> 에 자동으로 write 해줍니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이를 순서로 따지면 다음과 같습니다. 기술적으로 정확한 건 아니지만, 이해를 돕기 위해 간단하게 설명합니다!</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li><code>Readable</code> 클래스를 상속하는 새로운 클래스(OneToNine)를 만든다.</li><li>새로운 클래스(OneToNine)를 이용하여 새 객체를 생성한다.</li><li><code>pipe</code> 메소드를 호출한다.</li><li><code>pipe</code> 메소드의 인자로 들어간 <code>Writable</code>(process.stdout) 이 해당 <code>Readable</code>로부터 값을 읽어와야 한다고 인식한다.</li><li><code>Writable</code> 이 <code>Readable</code> 의 <code>read</code>를 호출한다.</li><li><code>Readable</code>의 <code>read</code> 는, 우리가 직접 만들었던 <code>_read</code> 함수를 호출한다. (언더바!!)</li><li><code>_read</code> 내부에서 <code>push</code> 함수가 호출된다.</li><li><code>push</code>의 인자로 전달된 데이터는 임시 버퍼에 쌓인다.</li><li><code>Writable</code>는 해당 임시 버퍼에서 데이터를 가져간다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>우리는 <code>Readable</code> 을 작성할 때, 데이터가 실제로 어떤 모습을 가지고 있냐 보다는 데이터를 어떻게 읽어들이냐에 집중합니다. 그래서 <code>Readable</code> 클래스를 상속하는 나만의 클래스를 작성하고, <code>new OneToNine()</code> 과 같이 <code>Readable</code> 에 대한 실제 객체를 만들었다 하더라도, 실제 유의미한 일은 일어나지 않습니다. 순차적으로 읽어오는 행위는 <code>_read</code> 메소드가 호출되었을 때 일어납니다. _read 메소드를 호출하는 주체는 같은 객체의 read 메소드 (언더바가 없음)이고, 이 메소드의 호출은 <code>pipe</code>로 연결한 외부 객체가 담당합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>사실은, &lt;5~9&gt;번에서 Writable 이 Readable의 <code>read</code> 를 호출한다느니, 임시 버퍼에서 데이터를 가져가느니, 했는데, 이는 사실 정확한 설명이 아닙니다. <code>pipe</code>는 한번에 많은 양을 읽지 않도록, 혹은 한번에 많이 쓰지 않도록 <a href="https://nodejs.org/ko/docs/guides/backpressuring-in-streams/#lifecycle-of-pipe">적절한 메커니즘</a>을 내부적으로 구현하고 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>위 &lt;7&gt; 에서 <code>this.push(null)</code> 이 호출된다면 비로소 이 <code>Readable</code> 의 역할은 끝난다는 걸 알립니다. 그래서 끝이 날 수가 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>더 공부할 거리</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이 글의 분량이 방대해지며 다른 내용들은 도저히 다룰 수가 없다는 걸 깨닫게 되었습니다. 여러가지 생각거리나 검색거리를 남겨봅니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>아래는 읽을거리구요</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://nodejs.org/api/stream.html#implementing-a-writable-stream">Writable 만들기</a> (영어)</li><li><a href="https://nodejs.org/api/stream.html#implementing-a-duplex-stream">Duplex (양방향 스트림) 만들기</a> (영어)</li><li><a href="https://nodejs.org/api/stream.html#implementing-a-transform-stream">Transform (읽어들인 값을 변형하여 내보내는 스트림) 만들기</a> (영어)</li><li>압축된 파일 만들기 (<a href="https://nodejs.org/docs/latest/api/zlib.html#zlib">참고</a> (영어))</li><li>Readable 를 Promise로 변환하기 (<a href="https://www.npmjs.com/package/promise-readable">참고 라이브러리</a>)</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>스트림은 왜 이렇게 복잡한 방법으로 이용해야 하는 걸까요? 우리가 만든 클래스에서는 1부터 9까지 만들어내는 아주 간단한 스트림인데도 코드 량이 꽤 깁니다. 데이터를 한꺼번에 표현할 수 있다면 <code>const list = [1, 2, 3, 4, 5, 6, 7, 8, 9]</code> 혹은 <code>Array.from({ length: 9 }).map((_, index) =&gt; index + 1)</code> 이렇게 한 줄로도 표현할 수 있잖아요. <code>list[2]</code> 와 같은 식으로 2번 인덱스 데이터에 직접 접근해볼 수도 있지만 스트림은 불가능합니다. 배열을 순차적으로 사용하려면 <code>forEach</code> 등의 메소드를 사용하면 그만이지만, 우리는 <code>Readable</code> 클래스를 확장구현한 이상 <code>Writable</code> 클래스도 확장구현하여 <code>pipe</code> 로 연결해서 사용해야 합니다. 머리가 깨질것 같죠? (Writable 클래스를 확장구현하는 내용은 이 글에서 다루지 않습니다.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이렇게 단점이 많은데도 불구하고, 무한한 데이터나 엄청나게 고르져스하게 큰 데이터들을 순차적으로 느긋하게 차례차례 확실하게 잘 처리하려면 스트림 말고는 답이 없습니다. 배열은 그러라고 만들어진 놈이 아니기도 하구요.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>바꿔 말하자면, 끊기지 않는 무한한 데이터나 큰 데이터를 다룰 필요가 없다면 스트림은 사용할 필요가 없습니다. 해결하고자 하는 문제에 맞게 스트림으로 할 것인지, 단순 배열로 할 것인지는 선택의 문제입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그렇다면 스트림에 대한 개념이 좀 생겼다 기대해보고, 이만 여기까지 하겠습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2670</wp:post_id>
		<wp:post_date><![CDATA[2021-12-07 15:52:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-07 06:52:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-07 15:52:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-07 06:52:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-stream-%ea%b0%9c%eb%85%90%ec%9d%84-%ec%9d%b5%ed%98%80%eb%b3%b4%ec%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Promise 작업 시간 초과하면 실패로 간주하기 (feat. setTimeout, Promise.race)]]></title>
		<link>https://elvanov.com/2676</link>
		<pubDate>Tue, 14 Dec 2021 15:47:38 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2676</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>요즘 자바스크립트에서는 Promise 가 많이 쓰입니다. 이른바 비동기 작업이라고도 하죠. 여러가지 시간이 좀 걸리는 작업들을 다룰 때 편하기 때문인데요, 그런데 너무 오래 걸리는 작업을 취소하고 싶지 않나요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>예를 들어 게시글의 댓글을 불러오기 위해 api 서버에 요청을 날렸는데, 2~3초가 지나도 묵묵부답이라면, 이건 api 서버가 잘못되었다고 보고, 작업을 취소하고, 유저에게 "서버로부터 응답이 없습니다. 잠시 후 다시 시도해주세요." 라는 에러 메시지를 보내야 할 것입니다. 그러나 요청이 스스로 시간초과 에러다! 라고 알기까지는 10초가 넘어갈 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>10초간 계속 로딩 애니메이션이 돌고 있다면? 짜증나겠죠. 이를 조기에 빨리 없애버리도록 해보자구요.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>시간초과한 Promise 작업을 취소할 수 있다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>사전 지식</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://elvanov.com/2597" target="_blank" rel="noreferrer noopener">Promise, <code>async</code>, <code>await</code> 개념과 사용법</a></li><li>화살표 함수</li><li>Javascript 코드를 실행시킬 수 있는 환경 (브라우저 또는 Node.js)</li><li>만약 TypeScript 를 한다면, Node.js 환경</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2><code>setTimeout</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>setTimeout</code>은 자바스크립트에서 대표적인 비동기 작업입니다. 하는 일은 주어진 시간만큼 기다리다가 어떤 함수를 실행시키는 것이지요. 이 <code>setTimeout</code> 을 이용하여 단순히 기다리기만 하는 Promise 를 손쉽게 만들 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; {
    resolve();
  }, 1000);
}).then(() =&gt; {
	// 1초 뒤 할 일
});
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>너무 긴가요? 조금만 줄여봅시다. 아래 코드는 위 코드와 정확히 똑같이 동작하지요!</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>new Promise(resolve =&gt; setTimeout(resolve, 1000)).then(() =&gt; {
	// 1초 뒤 할 일
});
</code></pre>
<!-- /wp:code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>위 코드가 왜 저렇게 되는지 헷갈린다면 화살표 함수를 확실하게 익혀봅시다.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>그런데, 이렇게 쓸 바에야 그냥 <code>setTimeout</code> 을 그대로 쓰면 될 텐데, 왜 이렇게 하냐구요? 그것은 <code>async</code> 함수 안에서 <code>await</code> 을 쓰기 위함이지요. 아래 코드를 봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>// async 함수 내부입니다.
await new Promise(resolve =&gt; setTimeout(resolve, 1000))
// 1초 뒤 할 일
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>훨씬 간단해졌죠? 이렇게 Promise 식으로 바꾼 <code>setTimeout</code> 을 오늘은 이용해 볼 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><code>Promise.race</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>작업시간을 초과하는지 아닌지 구분짓는 방법은 많이 복잡하지 않습니다. 우리는 <code>Promise.race</code> 를 사용할 .겁니다 race 는 경주라는 뜻이죠, 이 함수에 Promise의 배열을 넣으면, 그 중 <strong>가장 먼저 끝나는 Promise</strong> 를 리턴합니다. 다음 간단한 예제를 보시죠.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>Promise.race(&#91;
  new Promise((resolve) =&gt; setTimeout(() =&gt; resolve("Promise1"), 1000)),
  new Promise((resolve) =&gt; setTimeout(() =&gt; resolve("Promise2"), 500)),
])
  .then((result) =&gt; {
    console.log(result);
  })
  .catch((e) =&gt; {
    console.error(e);
  });
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>결과는 <code>Promise2</code>가 출력될 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>가장 먼저 끝난다는 건, 성공하든 실패하든 상관이 없습니다. 실패의 경우를 볼까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>Promise.race(&#91;
  new Promise((resolve) =&gt; setTimeout(() =&gt; resolve("hahaha"), 1000)),
  new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject(new Error()), 500)),
])
  .then((result) =&gt; {
    console.log(result);
  })
  .catch((e) =&gt; {
    console.error(e);
  });
</code></pre>
<!-- /wp:code -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>Error
    at Timeout._onTimeout (/Users/th.kim/Desktop/playground-js/promise.race.js:3:60)
    at listOnTimeout (internal/timers.js:557:17)
    at processTimers (internal/timers.js:500:7)
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>에러가 발생하면서 끝납니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이러한 특성을 이용해서, <code>setTimeout</code>을 2초로 설정해두고, 우리의 작업과 타이머를 race 시키면, 우리의 작업이 먼저 끝날 시 그 Promise가 반환이 될 것이고, 시간이 2초보다 오래 걸린다면 <code>setTimeout</code> 한 Promise가 반환이 되겠지요?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>분기 나누기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>아래 코드에서 <code>jobDurationMS</code> 를 <code>timeoutMS</code> 보다 더 크게 해보고, 더 작게 해보고 하면서 결과를 비교해보세요. <code>job</code> 은 우리가 가상으로 만든 "작업" Promise 입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>const jobDurationMS = 3000;
const timeoutMS = 2000;

const job = new Promise((resolve) =&gt;
  setTimeout(() =&gt; resolve("job end"), jobDurationMS)
);
let timer;
Promise.race(&#91;
  job,
  new Promise((resolve) =&gt; {
    timer = setTimeout(() =&gt; resolve("timeout"), timeoutMS);
  }),
])
  .then((result) =&gt; {
    if (result === "timeout") {
      console.log("시간이 초과되었습니다!");
    } else {
      console.log("시간 내에 작업을 완료하였습니다.");
    }
  })
  .finally(() =&gt; clearTimeout(timer));
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>마지막의 <code>finally</code> 는 작업이 시간초과를 재는 타이머보다 먼저 끝났을 때 타이머를 종료하는 역할입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>async 함수로 모듈화하기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>async 함수로 만들어서, 다른 여러 코드에 사용할 수 있도록 해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자바스크립트 버전</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export async function timeout(promise, ms) {
  let timer;
  const res = await Promise.race(&#91;
    promise,
    new Promise(resolve =&gt; {
      timer = setTimeout(() =&gt; resolve('timeout'), ms);
    })
  ]).finally(() =&gt; clearTimeout(timer));

  if (res === 'timeout') {
    throw new Error(`${ms}ms timeout`);
  }
  return res;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>타입스크립트 (Node.js) 버전</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-ts"} -->
<pre class="wp-block-code language-ts"><code>export async function timeout&lt;T&gt;(promise: Promise&lt;T&gt;, ms: number): Promise&lt;T&gt; {
  let timer: NodeJS.Timeout;
  const res = await Promise.race(&#91;
    promise,
    new Promise&lt;'timeout'&gt;(resolve =&gt; {
      timer = setTimeout(() =&gt; resolve('timeout'), ms);
    })
  ] as const).finally(() =&gt; clearTimeout(timer));

  if (res === 'timeout') {
    throw new Error(`${ms}ms timeout`);
  }
  return res;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>저렇게 함수를 만들어놓고 <code>await timeout(job, 1000);</code> 이렇게 하면, 작업이 1초 안에 끝나지 않을 시 <code>throw</code> 가 발동하면서 예외를 발생시킵니다. 로직화하는 데 훨씬 편하겠죠?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Promise 와 <code>Promise.race</code>와 <code>setTimeout</code>과 <code>async</code>, <code>await</code> 등을 이미 잘 알고 있다면, 이런 응용은 아마 쉬운 축에 속할 테지만, 아직 해당 개념이 익숙하지 않은 상태에서는 몬가 본 글이 훌륭한 예시가 되지 않을까 싶어요. 여러분들의 자바스크립트 여행을 응원합니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2676</wp:post_id>
		<wp:post_date><![CDATA[2021-12-15 00:47:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-14 15:47:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-15 00:47:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-14 15:47:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[promise-%ec%9e%91%ec%97%85-%ec%8b%9c%ea%b0%84-%ec%b4%88%ea%b3%bc%ed%95%98%eb%a9%b4-%ec%8b%a4%ed%8c%a8%eb%a1%9c-%ea%b0%84%ec%a3%bc%ed%95%98%ea%b8%b0-feat-settimeout-promise-race]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="typescript"><![CDATA[typescript]]></category>
		<category domain="category" nicename="tips"><![CDATA[팁]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[Node.js] 비동기 개념에 익숙해지기]]></title>
		<link>https://elvanov.com/2682</link>
		<pubDate>Sun, 23 Jan 2022 06:48:55 +0000</pubDate>
		<dc:creator><![CDATA[eszqsc112]]></dc:creator>
		<guid isPermaLink="false">https://elvanov.com/?p=2682</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>개요</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>C++를 공부하면 <code>포인터</code>에서 숨이 턱 막히듯이, 자바스크립트를 공부하다 보면 넘어야 할 산이 <code>비동기</code>라는 개념입니다. 이 비동기라는 개념이 좀 잡혀있어야, <strong>express</strong> 라는 웹서버 모듈에서 핸들러를 어떻게 다루어야 할지 감이 오고, <strong>Promise</strong> 를 어떻게 사용해야 할 지도 조금 감이 생기지 않을까 싶습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 글은 이벤트 루프 등에 대해서 자세히 다루지 않습니다. 비동기, 논블로킹 IO 등 개념에 대한 설명도 하지 않습니다. 그냥 느낌만 설명하려고 노력했습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Node.js 와 브라우저는 자바스크립트를 구동하는 방식이 큰 차이는 없습니다. 다만 아래 코드는 모두 Node.js, MacOS 환경에서 실행됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>목표</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>비동기라는 개념과 익숙해지기</strong></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>비동기</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>asynchronous 의 뜻은 실시간이 아니라는 뜻입니다. sync 는 실시간이라는 뜻인가요? 네. 넷플릭스 영화를 보는데 동영상과 소리가 타이밍이 안맞으면 싱크가 안맞는다는 거고, 너무 이상하겠죠? 동영상과 소리가 타이밍이 딱 맞는건 너무 당연합니다. 이 타이밍에는 <span style="text-decoration: underline;">빈 틈이 없습니다.</span> 모든 것들이 순서대로 착착 잘 맞아떨어져야 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하지만 비동기에는 빈 틈이 있습니다. 비동기 코드는 작업 간 <span style="text-decoration: underline;">빈 틈을 허용합니다</span>. 왜 허용을 하냐구요? 동영상은 소리와 영상이 타이밍을 잘 맞춰야 하지만, 대개 “작업”이라는 것들은 빨리 끝나면 끝날수록 좋기 때문입니다. 아래 일화를 보시죠.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3>요리 초보와 요리 고수</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>최근에 좋은 동네로 이사를 가서, 친구들에게 집으로 오라고 초대했습니다. 이제 집들이 호스트로서 요리를 만들고자 합니다. 닭볶음탕과 잡채 두 가지를 만들겠습니다. 여기서 고수와 초보의 차이점이 드러납니다.</p>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p><strong>요리 고수</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>먼저 닭고기에 양념을 재운다</li><li>잡채, 닭볶음탕용 야채를 썰고, 물을 올린다</li><li>당면을 삶으면서 야채를 볶는다</li><li>당면을 건지고, 삶은 물을 일부 덜어내고 그대로 닭고기와 야채 투하</li><li>도마나 칼 등을 정리한다</li><li>당면과 야채를 버무린다</li><li>등등...</li></ol>
<!-- /wp:list --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p><strong>요리 초보</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>먼저 닭고기에 양념을 재운다</li><li>닭볶음탕용 야채를 칼로 썬다</li><li>물을 올리고 끓을 때까지 좀 기다렸다가 닭고기와 야채 투하</li><li>칼과 도마를 깨끗이 씻는다</li><li>잡채용 야채를 썬다</li><li>당면을 삶기 위해 물을 올린다</li><li>등등...</li></ol>
<!-- /wp:list --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>요리를 할 때에는 작업 간 전환이 자유롭기 때문에 작업을 어떻게 분배하냐에 따라서 더더욱 효율적으로 요리를 끝마칠 수 있습니다. 요리를 무작정 차례대로 진행한다면, 요리 초보처럼 시간을 어마어마하게 사용하게 되겠지요. 비동기는, 물이 끓는 걸 기다리듯 “<strong>기다려야 하는 작업</strong>”이 있을 때 빛을 발합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>우리는 사람이 한 명이어도 동시에 여러 작업을 할 수 있다는 걸 알고 있습니다. 우리의 자바스크립트도 싱글 스레드입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>—-</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>비동기 작업은 어떻게 코딩할까?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>기다려야 하는 작업은 비동기로 처리하면 좋습니다. 하지만 비동기 작업은 코드를 읽기 어렵게 만듭니다. 파일을 단순히 읽어서 출력하는 프로그램이 있다고 가정하고, 이것의 동기 버전과 비동기 버전의 차이를 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>먼저 동기 버전입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>파일 읽기를 시도합니다.</li><li>파일을 다 읽을 때까지 기다립니다.</li><li>파일의 내용을 출력합니다.</li><li>나머지 작업을 수행합니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이 작업을 만약 코딩하라고 하면, 좀 쉬울 것 같습니다. 왜냐하면 그냥 차례로 적으면 되기 때문입니다! 애초에 프로그램은 한줄 한줄 차례대로 작성하게 되어 있잖아요? 쌍팔년대 등장한 프로그래밍 언어부터의 국룰이니까요. 실제 코드를 작성하면 아래와 같이 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const fs = require('fs');

const data = fs.readFileSync('/etc/hosts');

console.log(data.toString());

console.log('script end');
</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>그런데 만약, 파일을 읽으면서 동시에 다른 작업을 하고자 한다면, 즉 비동기적으로 코딩한다고 가정하면, 조금 머리가 아픕니다. 일단 순서를 생각해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>파일 읽기를 시도합니다.</li><li>파일을 다 읽으면 <strong>파일의 내용을 출력</strong>합니다(A).</li><li>파일을 읽는 동안 <strong>다른 작업</strong>을 수행합니다(B).</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>문제는 파일의 내용을 출력하기(A) 전에, 다른 작업(B)이 수행될 수 있다는 겁니다. 순차적인 코딩으론 한계에 봉착하게 되었네요. 코드의 순서가 아래에서 위로는 갈 수 없기 때문이에요. 도대체 어떻게 코드로 만들 수 있을까요?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>흔하고 간단하게 구현되는 방법이 있습니다. 바로<strong> 콜백 함수</strong>를 넘기는 것이죠. <code>readFile</code> 함수는 인자로 또 다른 함수를 받습니다. 파일 읽기가 완료된 후에 실행할 함수를 우리보고 지정하라고 하는 것이죠. 코드는 아래와 같은 모습이 됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const fs = require('fs');

fs.readFile('/etc/hosts', (err, data) =&gt; {
  console.log(data.toString());
});

console.log('script end');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>fs.readFile</code> 을 호출한다고 해서 코드가 대기되지 않습니다. 곧바로 <code>script end</code> 가 출력되는 걸 볼 수 있을 겁니다. 그 다음 파일의 내용이 출력됩니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>싱글 스레드</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>자바스크립트는 기본적으로 싱글 스레드입니다. 위에서 요리사를 예로 들며 간단하게 언급했습니다. 사실 뭐 이미 귀에 딱지가 앉도록 들어보셨을 테죠.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>자바스크립트가 싱글스레드라는 점이 시사하는 바가 있습니다. <strong>바로 현재 작업하고 있는 것들이 정말 CPU를 빡세게 돌려야 완료되는 작업이라면, 비동기 작업은 그만큼 뒤로 밀립니다.</strong> 예를 들어 0.5초 뒤에 “완료!”라는 로그를 띄우기 위해 <code>setTimeout</code>을 사용하고, 그 바로 뒤에 1초 동안 빡세게 작업하는 (아래 예시 코드에서는 단순히 1초 동안 루프를 돌립니다.) 코드가 있다고 가정합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>setTimeout(() =&gt; {
  console.log('완료!');
}, 500);

const start = Date.now();

while (Date.now() - start &lt; 1000) {
  // do nothing
}

console.log("1초가 지났습니다.");
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>결과는 어떨까요?</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>1초가 지났습니다.
완료!
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>1초 뒤에 <code>1초가 지났습니다.</code> 라는 로그가 뜨고, 그 뒤에 <code>완료!</code> 가 뜹니다. 만약 자바스크립트가 싱글 스레드가 아니라면 <code>while</code> 문이 돌고 있을 동안 <code>완료!</code> 를 출력할 수 있는 가능성이 게 있지만, 자바스크립트는 <strong>싱글스레드이기 때문에 한 번에 하나의 코드만 수행</strong>할 수 있고, 이 말인 즉슨, 현재 수행하고 있는 코드가 끝나지 않는다면 다른 비동기로 처리되는 코드들이 제때 실행되지 않는다는 것입니다!</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>기술적인 측면에서 본다면, 싱글 스레드는 멀티 스레드보다 조금 비효율적일 수도 있지만, 상황을 훨씬 간결하게 만들기 때문에 상대적으로 디버깅이나 유지보수가 쉽습니다. 요리를 할 때 여러 사람이 왔다갔다 하며 부딪치는 것보다 잘하는 한 사람 있는 게 더 좋을 때도 있는 것처럼요.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>그렇다면 <code>setTimeout</code> 은 대충 어떻게 동작할까요?</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2><code>setTimeout</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>우리가 가장 처음으로 맞닥뜨리기도 하고 비동기 코드의 대표적인 예제로 소개되는 <code>setTimeout</code>을 살펴봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이 함수의 동작은 사실 타이머가 아니라 <strong>스톱워치</strong>를 돌려놓는 것과 같습니다. 즉 자바스크립트 엔진이 매번 스톱워치를 확인해서 정해진 시간이 지났는지 아닌지 체크해야 합니다. 체크하는 주기는 아주 빠릅니다. 1초에 수십번, 혹은 수백번 할 수도 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>하여튼 <code>setTimeout</code> 을 실행하게 된다면, 무조건 스톱워치를 설정하기 때문에, <strong>0초</strong>라고 해도 곧바로 실행하지 않고 스톱워치를 확인하는 단계까지 일단 작업을 미룹니다. 그리고 다음 코드로 넘어갑니다. 아래 예시 코드를 확인해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>setTimeout(() =&gt; {
  console.log('timeout');
}, 0);

console.log("script end");
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 코드의 결과는 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-none"} -->
<pre class="wp-block-code language-none"><code>script end
timeout
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>이 코드가 실제로 어떻게 동작하는지 보면 다음과 같아요.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2683,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2022/01/IMG_0387-527x1024.jpg" alt="" class="wp-image-2683"/></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>콜백 함수(callback)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>콜백이라는 뜻은 어감으로 생각합시다. 정확한 뜻은 알 필요 없습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>call</code> : 호출한다</li><li><code>back</code> : 뒤</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>그러니까 무대 밖에서 뭔가를 호출한다는 느낌이죠? <code>setTimeout</code> 으로 콜백 함수를 넘긴 것처럼 미리 작업의 형태를 정해놓고, 어떤 특정 조건이 완료됐을 때 그 작업을 수행하도록 하는 겁니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러나 <strong>콜백 함수라고 해서 모두 비동기적으로 이루어지는 건 아닙니다.</strong> <code>setTimeout</code> 말고도, 배열 메소드인 <code>filter</code>, <code>map</code> 과 같이 콜백 함수를 인수로 받는 함수는 쉽게 찾아볼 수 있는데요, 얘네들은 실행 즉시 해당 함수로 작업을 전부 수행하기 때문에 synchronous 합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>비동기 작업의 종류</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>‘기다리는 작업’은 모두 비동기 작업이 될 수 있습니다. 대표적으로 아래 것들이 있을 수 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>파일 읽고 쓰기</li><li>네트워크에 요청 보내기</li></ol>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>코드의 비동기성은 상대적이다</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>예를 들어, 다음 세 가지 일을 하는 프로그램을 생각해봅시다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>엑셀 파일을 읽기</li><li>해당 데이터를 이용하여 정렬하기</li><li>정렬한 내용을 파일로 쓰기</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이를 도식화하면 아래와 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":2684,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://elvanov.com/elvanov/wp-content/uploads/2022/01/Untitled-1024x679.png" alt="" class="wp-image-2684"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>엑셀 파일 읽기 작업을 완료한 후, 데이터 정렬을 마치고 다시 파일 쓰기가 시작될 것입니다. 파일 쓰기 작업은 비동기 작업입니다. 즉 <strong>비동기 코드 안에서 또 다른 비동기 흐름이 생겨날 수 있습니다</strong>. 비동기/동기는 관점의 차이입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>그러므로 <strong>비동기 작업이냐 아니냐를 구분짓는 건 의미가 없습니다</strong>. 우리의 궁극적 관심사는 비동기 작업 <strong>시작점</strong>에서의 두 가지 갈림길-1.기다면서 수행할 코드와 2.비동기 작업을 마치고 수행할 코드-을 멋지게 잘 작성하는 것입니다. 현재 코드가 비동기적인 흐름에 있는지 없는지는 많이 중요하지 않습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이런 관점에서 본다면, 콜백 함수는 좋은 방법이 아닙니다. 이 방법은 비동기 - 결과 - 비동기 - 결과의 의존 관계가 깊어질 수록 코드를 읽기 힘들어집니다. 아래에서 언급할 이벤트 핸들러 방법도 좋은 방법은 아닙니다. 대안은 후술합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>이벤트 핸들러</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>비동기 관련 로직을 짤 때 마찬가지로 흔한 방식이자, 콜백 함수를 쓰는 방식입니다. node.js 에서는 간단하게 테스트를 해볼 수 있습니다. 이벤트란 말 그대로 “어떤 사건이 일어났다”는 걸 의미하고, 핸들러는 해당 이벤트를 처리하기 위한 함수입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Node.js 에서는 이벤트에 핸들러를 등록하기 위해 대개 <code>on</code> 이라는 이름의 함수를 호출합니다. 브라우저에서는 더욱 익숙한 <code>addEventListener</code> 를 사용합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"className":"language-js"} -->
<pre class="wp-block-code language-js"><code>const fs = require("fs");

const stream = fs.createReadStream("/etc/hosts", { highWaterMark: 10 });

stream.on("data", (chunk) =&gt; {
  console.log("chunk: ", chunk.toString());
}); // data 이벤트가 발생하면 함수가 실행됨.

console.log("script end");
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>실행시킨다면 <code>/etc/hosts</code> 파일을 10개 문자마다 다다다닥 출력할 것입니다.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>이벤트 핸들러의 방식의 간단한 특징을 꼽자면 다음과 같습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>이벤트에는 특정한 이름이 있고(<code>”data”</code>) 이벤트마다 요구되는 함수의 형식이 정해져 있습니다. (<code>chunk</code> 인자 하나를 받는 함수)</li><li>하나의 이벤트에 여러 개의 핸들러를 등록할 수 있습니다.</li></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>이벤트 핸들러를 등록하는 방식은 단순히 콜백 함수를 넘겨주는 방식보다 더 복잡합니다. 어떤 <strong>사건이 일어남</strong>과 그것이 <strong>처리</strong>되는 부분을 분리함으로써 프로그램을 한층 유연하게 만들어줄 수도 있지만, 대개 상황이 더 복잡해질 때가 많습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>이벤트 핸들러 방식의 단점</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>이벤트 핸들러 방식은 다음과 같은 단점이 있습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>핸들러를 등록하기 전에 이벤트가 발생한다면, 그냥 아무것도 없는 일이 됩니다. 이벤트는 실행할 핸들러 없이 끝나고, 늦게 등록된 핸들러는 이벤트를 아무것도 받지 못할 것입니다. 이는 절대 우리의 의도가 아니지요.</li><li>이벤트 핸들러간 소통이 어렵습니다. 특히 어떤 핸들러에서 에러가 발생했는데, (그래서 더이상 작업이 진행되면 안되는데) 이를 다른 핸들러에서 알아채기가 힘듭니다.</li><li>콜백 함수와 동일하게, 의존 관계가 깊어지면 코드가 중첩되어 가독성이 심각하게 떨어집니다.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>이런 단점을 극복하기 위해 Promise 가 등장합니다.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator"/>
<!-- /wp:separator -->

<!-- wp:heading -->
<h2>Promise, <code>async</code>, <code>await</code></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Promise 는 기존 이벤트 기반 비동기 시스템을 대체하기 위해 등장했습니다. 비동기 작업을 더 세련되게 처리하겠다는 포부를 갖고 등장한 녀석입니다. 익숙해지면 정말 편리하긴 하지만, 정말 헷갈리기도 하고, 무엇보다 어떻게 적용하고 활용할 지 막막하기도 하죠. 이는 <a href="https://elvanov.com/2597" data-type="post" data-id="2597">Promise 이해하기</a> 라는 글에서 더 자세히 다루도록 하겠습니다.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>마치며</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>비동기라는 개념과, 그것을 둘러싼 여러가지 자바스크립트의 개념들을 살펴보았습니다. 이로써 비동기에 대한 감각이 조금이나마 생겼으면 좋겠습니다.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2682</wp:post_id>
		<wp:post_date><![CDATA[2022-01-23 15:48:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-01-23 06:48:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-01-23 15:50:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-01-23 06:50:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-js-%eb%b9%84%eb%8f%99%ea%b8%b0-%ea%b0%9c%eb%85%90%ec%97%90-%ec%9d%b5%ec%88%99%ed%95%b4%ec%a7%80%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[tg-site-layout--customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_remove_content_margin]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_transparent_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[customizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_page_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[zakra_logo]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>8517</wp:comment_id>
			<wp:comment_author><![CDATA[잘읽고가요]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[onit@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://localhost:8080/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[39.7.25.92]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-23 16:11:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-23 07:11:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[와우]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642921882.22125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1663489230.996614;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"eszqsc112";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
				</channel>
</rss>
	